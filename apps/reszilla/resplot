#!/usr/bin/perl -w
# $Id$
# A script for plotting the output of reszilla
#

my $label="";
my $zoom=0;
my $clock=0;
my $debug = 0;
my $point_size = 0.5;
my $obs_type = 0;
my $key = 0;
my $suppressTitle;

# prn: 1..32 or 0 for all or -1 for all with each using a separate color
my $prn=0;


$ofn = ""; # File name to save plot in
$lpr = ""; # Printer to send the plot to
$oft = "ps"; # the default type for an output file

sub config_output;

use Getopt::Long;
use Pod::Usage;
GetOptions(
    'help|?'       => sub { pod2usage(-verbose => 1)} ,
    'man|'         => sub { pod2usage(-verbose => 2)} ,
    'label|l=s'    => \$label,
    'prn|p=i'      => \$prn,
    'yrange|s=s'   => \$yrange,
    'size|x=s'     => \$point_size,
    'ofn|o=s'      => \$ofn,
    'lpr=s'        => \$lpr,
    'oft=s'        => \$oft,
    'eps'          => \$eps,
    'debug|d+'     => \$debug,
    'clock|c+'     => \$clock,
    'clock-est|e+' => \$clock_est,
    'clock-res'    => \$clock_residual,
    'key|k+'       => \$key,
    'zoom|z+'      => \$zoom,
    'notitle|n+'   => \$suppressTitle,
    'type|y=s'     => \$obs_type
);

$oft = "eps" if ($eps);

if ($debug)
{
    print "prn: $prn\n" if ($prn>0);
    print "prn: all\n" if ($prn==0);
    print "prn: all, unique color for each prn\n" if ($prn == -1);
    print "point size: $point_size\n";
    print "Y axis: +/- $yrange meters\n" if ($yrange);
    print "Y axis: autoscaled\n" if ($yrange == 0);
    print "msid: $msid\n" if ($msid);
    print "obs_type: $obs_type ";
    print "(ords)\n" if ($obs_type == 0);
    print "(L1 double diffs)\n" if ($obs_type == 12);
    print "(L2 double diffs)\n" if ($obs_type == 22);
    print "Plotting clocks\n" if ($clock==1);
    print "Plotting clocks only\n" if ($clock>1);
    print "Plotting clock estimates\n" if ($clock_est && $clock);
    print "Saving plot to $ofn\n" if ($ofn);
    print "Sending plot to printer $lpr\n" if ($lpr);
    print "Supressing title (the key actually)." if ($suppressTitle);
    print "\n"; 
}

if ($zoom)
{
    open GP, "| /usr/bin/gnuplot" or die "can't fork $!";
} else {
    open GP, "| /usr/bin/gnuplot -persist" or die "can't fork $!";
}

$cmds1 = << "gnuplot_commands1"
set title "Residuals from $ARGV[0]\\n$label";
set ylabel "Residual\\n(meters)";
set grid ytics;
set xlabel "Time";
set mxtics 3;
set mouse;
set pointsize $point_size;
set xdata time;
set timefmt "%Y %j %H:%M:%S";
set format x "%2H:%02M\\n%j";
prn=$prn;
otype=$obs_type
#         (     desired prn   ) && (       desired type      ) && ( non zero )
res(p1)=( ((p1==\$4)||(p1==-1)) && ((otype==\$5)||(otype==-1)) && (abs(\$7)>0) ) ? \$7 : 1/0;
#
clk(type)  = ((type==\$5) && (abs(\$7)>0) && (\$9!=1) ) ? \$7 : 1/0;
#
clk_res(type)  = ((type==\$5) && (abs(\$8)>0) && (\$9!=1)) ? \$8 : 1/0;
gnuplot_commands1
;

$cmds2 = << "gnuplot_commands2"
set y2label "clock\\n(meters)";
set y2tics;
set format y2 "%.2f";
gnuplot_commands2
;

$cmds3 = << "gnuplot_commands3"
set ylabel "clock\\n(meters)";
set ytics;
set format y "%.2f";
gnuplot_commands3
;

config_output if (!$zoom);

print GP $cmds1;
print GP $cmds2 if ($clock == 1);
print GP $cmds3 if ($clock > 1);

if ($yrange)
{
    print GP "set yrange [-".$yrange.":".$yrange."] \n" if ($yrange);
    print GP "set label 1 \"Y axis: +/- ".$yrange." meters\" at graph 1,1.02 right front \n";
}
else
{
    print GP "set label 1 \"Y axis: autoscaled\" at graph 1,1.02 right front \n";
}

$title="notitle";

while ($fn = $ARGV[0])
{
    shift;
    if ($clock_residual)
    {
	print GP "plot";
	$title = "title \"$fn clock residual\"" if (!$suppressTitle);
	print GP " \"$fn\" using 1:(clk_res(50)) with points ";
	print GP " axis x1y2 " if ($clock==1);
	print GP " $title";

    }
    else
    {
	if ($clock<2)
	{
	    if ($prn==-1)
	    {
		print GP "plot \"$fn\" using 1:(res(0)) notitle with points";
		for ($p=1; $p<=32; $p++)
		{
		    if ($suppressTitle)
		    {
			print GP ", \"\" using 1:(res($p)) notitle with points";
		    }
		    else 
		    {
			print GP ", \"\" using 1:(res($p)) title \"PRN $p\" with points";
		    }
		}
	    }
	    else
	    {
		if (!$suppressTitle)
		{
		    $tmp = "All SVs";
		    $tmp = "PRN $prn" if ($prn>0);
		    $title = "title \"$fn $tmp\"";
		}
		print GP "plot \"$fn\" using 1:(res(prn)) $title" if ($prn);
		print GP "plot \"$fn\" using 1:(res(-1)) $title" if (!$prn);
	    }
	}

	if ($clock)
	{

	    print GP "plot" if ($clock>1);
	    print GP "," if ($clock==1);

	    $title = "title \"$fn clock obs\"" if (!$suppressTitle);
	    print GP " \"$fn\" using 1:(clk(50)) with points ";
	    print GP " axis x1y2 " if ($clock==1);
	    print GP " $title";

	    if ($clock_est)
	    {
		$title = "title \"$fn clock est\"" if (!$suppressTitle);
		print GP ", \"$fn\" using 1:(clk(51)):8 with errorlines";
		print GP " axis x1y2" if ($clock==1);
		print GP " $title";
	    }
	}
    }
    print GP "\n";
}

binmode(GP);

if ($zoom)
{
    print "Press enter to exit\n";
    getc;

    config_output if ($lpr || $ofn);
    print GP "replot\n";
}

close GP;
exit;

sub config_output
{
    if ($lpr)
    {
	print "Printing graph to $lpr\n" if ($debug);
	$ofn="|lp -d".$lpr;
	print GP "set output \"$ofn\" \n";
	print GP "set terminal postscript landscape color\n";
    }
    elsif ($ofn)
    {
	if ($oft eq "png")
	{
	    print "Saving graph to $ofn.png\n" if ($debug);
	    print GP "set output \"$ofn.png\" \n";
	    print GP "set term png small crop size 800,600\n"; 
	}
	elsif ($oft eq "eps")
	{
	    print "Saving graph to $ofn.eps\n" if ($debug);
	    print GP "set output \"$ofn.eps\" \n";
	    print GP "set term postscript eps noenhanced color solid defaultplex \"Time-Roman\" 18\n"; 
	}
	elsif ($oft eq "pdf")
	{
	    print "Saving graph to $ofn.pdf\n" if ($debug);
	    print GP "set output \"$ofn.pdf\" \n";
	    print GP "set term postscript pdf \"Time-Roman\" 18\n"; 
	}
	else 
	{
	    print "Saving graph to $ofn.ps\n" if ($debug);
	    print GP "set output \"$ofn.ps\" \n" if (!$lpr);
	    print GP "set terminal postscript landscape color\n";
	}
    }
}

__END__
=pod
=head1 NAME

B<resplot> - plot the raw output of reszilla using gnuplot

=head1 SYNOPSIS

B<resplot> I<[options]> F<residuals-file>

=head1 OPTIONS

=over

=item B<-p> I<prn>, B<--prn>=I<prn>

What prn to plot. 0 means all, -1 means to plot all but use a unique 
color for each prn. The default is 0.

=item B<-c, B<--clock>

Plot the receiver clock estimate along with the residuals. Specify
it twice and only the clock will be plotted. (type 50)

=item B<-e>, B<--clock_est>

Plot the clock estimate along with the clock (type 51)

=item B<-l> I<str>, B<--label>=I<str>

An additional line to the title of the plot. The default is blank.

=item B<-s> I<y>, B<--yrange>=I<y>

Limit the y range to +/- this value. The default is to let gnuplot autorange
the y axis.

=item B<-y> I<type>, B<--type>=I<type>

What obs type from the file to plot. The default is 0 (observed range
deviations). See the help on reszilla for more details on what the various
types mean.

=item B<-x> I<pt>, B<--size>=I<pt>

Specify the size of the plotting symbol to use. Usefull when generating hardcopy.

=item B<-o> I<fn>, B<--ofn>=I<fn>

Save the plot in the specified file. The default is to not generate a file.

=item B<--oft> <type>

The format to to save the above file as. Valid formats are C<pdf>, C<ps>, 
C<eps>, and C<png>. The default is C<ps> (postscript).

=item B<--lpr>=I<printer>

Send the plot to the indicated printer as postscript.

=item B<--eps>

Use the eps format for the output file. Same as specifying "-oft eps".

=item B<-d>

Increase the debug level.

=item B<-?>, B<-help>

Print this message.

=item B<--man>

Print a manpage for this program.

=item undocumented features

    'lpr=s'        => \$lpr,
    'clock|c+'     => \$clock,
    'clock-est|e+' => \$clock_est,
    'clock-res'    => \$clock_residual,
    'key|k+'       => \$key,
    'zoom|z+'      => \$zoom,
    'notitle|n+'   => \$suppressTitle,


=head1 DESCRIPTION

B<resplot> is a command line tool to plot the raw output (-r option) of 
reszilla using the gnuplot program.
