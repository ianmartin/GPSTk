#!/usr/bin/perl -w
# $Id$
# A script for plotting the output of reszilla
#

my $time="";
my $strip=1000;
my $label="";
my $zoom=0;
my $clock=0;
my $debug = 0;
my $point_size = 0.5;
my $obs_type = 0;
my $key = 0;
my $suppressTitle;

# prn: 1..32 or 0 for all or -1 for all with each using a separate color
my $prn=0;


$ofn = ""; # File name to save plot in
$lpr = ""; # Printer to send the plot to
$oft = "ps"; # the default type for an output file

sub config_output;

use Getopt::Long;
use Pod::Usage;
GetOptions(
    'help|?'       => sub { pod2usage(-verbose => 1);exit } ,
    'label|l=s'    => \$label,
    'prn|p=i'      => \$prn,
    'strip|s=s'    => \$strip,
    'size|x=s'     => \$point_size,
    'time|t=s'     => \$time,
    'ofn|o=s'      => \$ofn,
    'lpr=s'        => \$lpr,
    'oft=s'        => \$oft,
    'eps'          => \$eps,
    'debug|d+'     => \$debug,
    'clock|c+'     => \$clock,
    'clock_est|e+' => \$clock_est,
    'key|k+'       => \$key,
    'zoom|z+'      => \$zoom,
    'notitle|n+'   => \$suppressTitle,
    'type|y=s'     => \$obs_type
);

$oft = "eps" if ($eps);

if ($debug)
{
    print "prn: $prn\n" if ($prn>0);
    print "prn: all\n" if ($prn==0);
    print "prn: all, unique color for each prn\n" if ($prn == -1);
    print "point size: $point_size\n";
    print "Time: $time\n" if ($time);
    print "Stripping: $strip\n" if ($strip > 0);
    print "No data stripping.\n" if ($strip == 0);
    print "msid: $msid\n" if ($msid);
    print "obs_type: $obs_type ";
    print "(ords)\n" if ($obs_type == 0);
    print "(L1 double diffs)\n" if ($obs_type == 12);
    print "(L2 double diffs)\n" if ($obs_type == 22);
    print "Plotting clocks\n" if ($clock==1);
    print "Plotting clocks only\n" if ($clock>1);
    print "Plotting clock estimates\n" if ($clock_est && $clock);
    print "Saving plot to $ofn\n" if ($ofn);
    print "Sending plot to printer $lpr\n" if ($lpr);
    print "Supressing title (the key actually)." if ($suppressTitle);
    print "\n"; 
}

if ($zoom)
{
    open GP, "| /usr/bin/gnuplot" or die "can't fork $!";
} else {
    open GP, "| /usr/bin/gnuplot -persist" or die "can't fork $!";
}

$cmds1 = << "gnuplot_commands1"
set title "Residuals from $ARGV[0]\\n$label";
set label 1 "Stripping data at $strip meters" at graph 1,1.02 right front;
set ylabel "Residual\\n(meters)";
set grid ytics;
set xlabel "Time";
set mxtics 3;
set mouse;
set pointsize $point_size;
set xdata time;
set timefmt "%Y %j %H:%M:%S";
set format x "%2H:%02M\\n%j";
strip=$strip;
prn=$prn;
otype=$obs_type
#         (     desired prn   ) && (        not stripped       ) && (       desired type      ) && ( non zero )
res(p1)=( ((p1==\$4)||(p1==-1)) && (abs(\$7)<strip || strip==0 ) && ((otype==\$5)||(otype==-1)) && (abs(\$7)>0) ) ? \$7 : 1/0;
#
clk(type)  = ((type==\$5) && (abs(\$7)>0) && (\$9!=1) && (abs(\$8)<strip || strip==0)) ? \$7 : 1/0;
gnuplot_commands1
;

$cmds2 = << "gnuplot_commands2"
set y2label "clock\\n(meters)";
set y2tics;
set format y2 "%.2f";
gnuplot_commands2
;

$cmds3 = << "gnuplot_commands3"
set ylabel "clock\\n(meters)";
set ytics;
set format y "%.2f";
gnuplot_commands3
;

config_output if (!$zoom);

print GP $cmds1;
print GP $cmds2 if ($clock == 1);
print GP $cmds3 if ($clock > 1);
print GP "set xrange [".$time."] \n" if ($time);

$title="notitle";

while ($fn = $ARGV[0])
{
    shift;
    if ($clock<2)
    {
	if ($prn==-1)
	{
	    print GP "plot \"$fn\" using 1:(res(0)) notitle with points";
	    for ($p=1; $p<=32; $p++)
	    {
		if ($suppressTitle)
		{
		    print GP ", \"\" using 1:(res($p)) notitle with points";
		}
		else 
		{
		    print GP ", \"\" using 1:(res($p)) title \"PRN $p\" with points";
		}
	    }
	}
	else
	{
	    if (!$suppressTitle)
	    {
		$tmp = "All SVs";
		$tmp = "PRN $prn" if ($prn>0);
		$title = "title \"$fn $tmp\"";
	    }
	    print GP "plot \"$fn\" using 1:(res(prn)) $title" if ($prn);
	    print GP "plot \"$fn\" using 1:(res(-1)) $title" if (!$prn);
	}
    }

    if ($clock)
    {

	print GP "plot" if ($clock>1);
	print GP "," if ($clock==1);

	$title = "title \"$fn clock obs\"" if (!$suppressTitle);
	print GP " \"$fn\" using 1:(clk(50)) with points ";
	print GP " axis x1y2 " if ($clock==1);
	print GP " $title";

	if ($clock_est)
	{
	    $title = "title \"$fn clock est\"" if (!$suppressTitle);
	    print GP ", \"$fn\" using 1:(clk(51)):8 with errorlines";
	    print GP " axis x1y2" if ($clock==1);
	    print GP " $title";
	}
    }
    print GP "\n";
}

binmode(GP);

if ($zoom)
{
    print "Press enter to exit\n";
    getc;

    config_output if ($lpr || $ofn);
    print GP "replot\n";
}

close GP;
exit;

sub config_output
{
    if ($lpr)
    {
	print "Printing graph to $lpr\n" if ($debug);
	$ofn="|lp -d".$lpr;
	print GP "set output \"$ofn\" \n";
	print GP "set terminal postscript landscape color\n";
    }
    elsif ($ofn)
    {
	if ($oft eq "png")
	{
	    print "Saving graph to $ofn.png\n" if ($debug);
	    print GP "set output \"$ofn.png\" \n";
	    print GP "set term png small crop size 800,600\n"; 
	}
	elsif ($oft eq "eps")
	{
	    print "Saving graph to $ofn.eps\n" if ($debug);
	    print GP "set output \"$ofn.eps\" \n";
	    print GP "set term postscript eps noenhanced color solid defaultplex \"Time-Roman\" 18\n"; 
	}
	elsif ($oft eq "pdf")
	{
	    print "Saving graph to $ofn.pdf\n" if ($debug);
	    print GP "set output \"$ofn.pdf\" \n";
	    print GP "set term postscript pdf \"Time-Roman\" 18\n"; 
	}
	else 
	{
	    print "Saving graph to $ofn.ps\n" if ($debug);
	    print GP "set output \"$ofn.ps\" \n" if (!$lpr);
	    print GP "set terminal postscript landscape color\n";
	}
    }
}

__END__

=head1 NAME

dplot - plot the raw output of reszilla

=head1 SYNOPSIS

B<dplot> [options] <residuals-file>

Options:

  -p, --prn <prn>     What prn to plot. 0 means all, -1 means to plot all
                      but use a unique color for each prn. The default is 0.
  -c, --clock         Plot the receiver clock estimate along with the 
                      residuals. Specify it twice and only the clock will be
                      plotted. (type 50)
  -e. --clock_est     plot the clock estimate along with the clock (type 51)
  -l, --label <str>   An additional line to the title of the plot. The 
                      default is blank.
  -s, --strip <m>     Strip all points that are larger than this value. The
                      defalut is 1000 meters. Specifying 0 means don't 
                      strip any data.
  -y, --type <type>   What obs type from the file to plot. The default is 0.
                      See the help on reszilla for more details on what the
                      various types mean.
  -t, --time <range>  What time range to plot. (see code for details)
  -x, --size <pt>     Specify the size of the plotting symbol to use.

  -o, --ofn <fn>      Save the plot in the specified file. The default
                      is to not generate a file.
  -oft <type>         The format to to save the above file as. Valid formats 
                      are pdf, ps, eps, and png. The default is ps
                      (postscript).
      --lpr <printer> Send the plot to the indicated printer as postscript.
      --eps           Use the eps format for the output file. Same as
                      specifying "-oft eps".

  -d                  Increase the debug level.
  -?, --help          Print this message.

=head1 DESCRIPTION

B<dplot>
is a command line tool to plot the raw output (-r option) of reszilla using
gnuplot.

The raw output of reszilla has the form:
# time              PRN type  elev      clk(m)    2nd diff(m)    3rd diff(m)  count
2006  20 00:00:00     6    1  71.2   192801.903       0.000413       0.002157     1

or

# time              PRN type  elev      clk(m)        ord(m)    iodc  health
2006  20 00:00:00     6    0  71.2   192801.903        -0.49143   1c       0

Using a the set timefmt "%Y %j %H:%M:%S" specifier in gnuplot yields the following fields
in gnuplot:
 1 time
 4 prn
 5 type (0=c1p2 ord, 1=L1 double difference, 2=L2 double difference)
 6 elevation
 7 clock
 8 ord or 2nd difference residual
 9 iodc or 3rd difference
10 health or count

=head1 EXAMPLES

When I get time...
