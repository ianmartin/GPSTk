/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.24
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */


#ifdef __cplusplus
template<class T> class SwigValueWrapper {
    T *tt;
public:
    SwigValueWrapper() : tt(0) { }
    SwigValueWrapper(const SwigValueWrapper<T>& rhs) : tt(new T(*rhs.tt)) { }
    SwigValueWrapper(const T& t) : tt(new T(t)) { }
    ~SwigValueWrapper() { delete tt; } 
    SwigValueWrapper& operator=(const T& t) { delete tt; tt = new T(t); return *this; }
    operator T&() const { return *tt; }
    T *operator&() { return tt; }
private:
    SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
};
#endif


#ifndef SWIG_TEMPLATE_DISAMBIGUATOR
#  if defined(__SUNPRO_CC) 
#    define SWIG_TEMPLATE_DISAMBIGUATOR template
#  else
#    define SWIG_TEMPLATE_DISAMBIGUATOR 
#  endif
#endif

/***********************************************************************
 * swigrun.swg
 *
 *     This file contains generic CAPI SWIG runtime support for pointer
 *     type checking.
 *
 ************************************************************************/

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "1"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
#define SWIG_QUOTE_STRING(x) #x
#define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
#define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
#define SWIG_TYPE_TABLE_NAME
#endif

#include <string.h>

#ifndef SWIGINLINE
#if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#  define SWIGINLINE inline
#else
#  define SWIGINLINE
#endif
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the swig runtime code.
  In 99.9% of the cases, swig just needs to declare them as 'static'.
  
  But only do this if is strictly necessary, ie, if you have problems
  with your compiler or so.
*/
#ifndef SWIGRUNTIME
#define SWIGRUNTIME static
#endif
#ifndef SWIGRUNTIMEINLINE
#define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

typedef struct swig_type_info {
  const char             *name;
  swig_converter_func     converter;
  const char             *str;
  void                   *clientdata;
  swig_dycast_func        dcast;
  struct swig_type_info  *next;
  struct swig_type_info  *prev;
} swig_type_info;

/* 
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return *f1 - *f2;
  }
  return (l1 - f1) - (l2 - f2);
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = SWIG_TypeNameComp(nb, ne, tb, te) == 0;
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Register a type mapping with the type-checking
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeRegisterTL(swig_type_info **tl, swig_type_info *ti) {
  swig_type_info *tc, *head, *ret, *next;
  /* Check to see if this type has already been registered */
  tc = *tl;
  while (tc) {
    /* check simple type equivalence */
    int typeequiv = (strcmp(tc->name, ti->name) == 0);   
    /* check full type equivalence, resolving typedefs */
    if (!typeequiv) {
      /* only if tc is not a typedef (no '|' on it) */
      if (tc->str && ti->str && !strstr(tc->str,"|")) {
	typeequiv = SWIG_TypeEquiv(ti->str,tc->str);
      }
    }
    if (typeequiv) {
      /* Already exists in the table.  Just add additional types to the list */
      if (ti->clientdata) tc->clientdata = ti->clientdata;
      head = tc;
      next = tc->next;
      goto l1;
    }
    tc = tc->prev;
  }
  head = ti;
  next = 0;

  /* Place in list */
  ti->prev = *tl;
  *tl = ti;

  /* Build linked lists */
  l1:
  ret = head;
  tc = ti + 1;
  /* Patch up the rest of the links */
  while (tc->name) {
    head->next = tc;
    tc->prev = head;
    head = tc;
    tc++;
  }
  if (next) next->prev = head;
  head->next = next;

  return ret;
}

/*
  Check the typename
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  swig_type_info *s;
  if (!ty) return 0;        /* Void pointer */
  s = ty->next;             /* First element always just a name */
  do {
    if (strcmp(s->name,c) == 0) {
      if (s == ty->next) return s;
      /* Move s to the top of the linked list */
      s->prev->next = s->next;
      if (s->next) {
        s->next->prev = s->prev;
      }
      /* Insert s as second element in the list */
      s->next = ty->next;
      if (ty->next) ty->next->prev = s;
      ty->next = s;
      s->prev = ty;
      return s;
    }
    s = s->next;
  } while (s && (s != ty->next));
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_type_info *ty, void *ptr) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr);
}

/* 
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/*
  Search for a swig_type_info structure
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryTL(swig_type_info *tl, const char *name) {
  swig_type_info *ty = tl;
  while (ty) {
    if (ty->str && (SWIG_TypeEquiv(ty->str,name))) return ty;
    if (ty->name && (strcmp(name,ty->name) == 0)) return ty;
    ty = ty->prev;
  }
  return 0;
}

/* 
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientDataTL(swig_type_info *tl, swig_type_info *ti, void *clientdata) {
  swig_type_info *tc, *equiv;
  if (ti->clientdata) return;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;
  equiv = ti->next;
  while (equiv) {
    if (!equiv->converter) {
      tc = tl;
      while (tc) {
        if ((strcmp(tc->name, equiv->name) == 0))
          SWIG_TypeClientDataTL(tl,tc,clientdata);
        tc = tc->prev;
      }
    }
    equiv = equiv->next;
  }
}

/* 
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static char hex[17] = "0123456789abcdef";
  unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu =  u + sz;
  register unsigned char uu;
  for (; u != eu; ++u) {
    uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/* 
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  register unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    register int d = *(c++);
    register unsigned char uu = 0;
    if ((d >= '0') && (d <= '9'))
      uu = ((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = ((d - ('a'-10)) << 4);
    else 
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (d - ('a'-10));
    else 
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/*
  This function will propagate the clientdata field of type to any new
  swig_type_info structures that have been added into the list of
  equivalent types.  It is like calling SWIG_TypeClientData(type,
  clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientDataTL(swig_type_info *tl, swig_type_info *type) {
  swig_type_info *equiv = type->next;
  swig_type_info *tc;
  if (!type->clientdata) return;
  while (equiv) {
    if (!equiv->converter) {
      tc = tl;
      while (tc) {
        if ((strcmp(tc->name, equiv->name) == 0) && !tc->clientdata)
          SWIG_TypeClientDataTL(tl,tc, type->clientdata);
        tc = tc->prev;
      }
    }
    equiv = equiv->next;
  }
}

/* 
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/***********************************************************************
 * common.swg
 *
 *     This file contains generic SWIG runtime support for pointer
 *     type checking as well as a few commonly used macros to control
 *     external linkage.
 *
 * Author : David Beazley (beazley@cs.uchicago.edu)
 *
 * Copyright (c) 1999-2000, The University of Chicago
 * 
 * This file may be freely redistributed without license or fee provided
 * this copyright message remains intact.
 ************************************************************************/


#if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#  if !defined(STATIC_LINKED)
#    define SWIGEXPORT(a) __declspec(dllexport) a
#  else
#    define SWIGEXPORT(a) a
#  endif
#else
#  define SWIGEXPORT(a) a
#endif

#ifdef __cplusplus
extern "C" {
#endif


/*************************************************************************/


/* The static type info list */

static swig_type_info *swig_type_list = 0;
static swig_type_info **swig_type_list_handle = &swig_type_list;
  

/* Register a type mapping with the type-checking */
static swig_type_info *
SWIG_TypeRegister(swig_type_info *ti) {
  return SWIG_TypeRegisterTL(swig_type_list_handle, ti);
}

/* Search for a swig_type_info structure */
static swig_type_info *
SWIG_TypeQuery(const char *name) {
  return SWIG_TypeQueryTL(*swig_type_list_handle, name);
}

/* Set the clientdata field for a type */
static void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientDataTL(*swig_type_list_handle, ti, clientdata);
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
static void
SWIG_PropagateClientData(swig_type_info *type) {
  SWIG_PropagateClientDataTL(*swig_type_list_handle, type);
}

#ifdef __cplusplus
}
#endif

/*
 * $Header: /cvsroot/swig/SWIG/Lib/tcl/swigtcl8.swg,v 1.24 2004/11/21 19:30:55 marcelomatus Exp $
 * 
 * swigtcl8.swg
 */

#include <tcl.h>
#include <stdlib.h>
#include <stdarg.h>
#include <ctype.h>

#ifdef __cplusplus
extern "C" {
#endif

/* Constant table */

#define SWIG_TCL_INT     1
#define SWIG_TCL_FLOAT   2
#define SWIG_TCL_STRING  3
#define SWIG_TCL_POINTER 4
#define SWIG_TCL_BINARY  5

/* Flags for pointer conversion */
#define SWIG_POINTER_EXCEPTION     0x1
#define SWIG_POINTER_DISOWN        0x2

/* Swig fail macro */

#define SWIG_fail   goto fail

/* Constant information structure */
typedef struct swig_const_info {
    int type;
    char *name;
    long lvalue;
    double dvalue;
    void   *pvalue;
    swig_type_info **ptype;
} swig_const_info;

typedef int   (*swig_wrapper)(ClientData, Tcl_Interp *, int, Tcl_Obj *CONST []);
typedef int   (*swig_wrapper_func)(ClientData, Tcl_Interp *, int, Tcl_Obj *CONST []);
typedef char *(*swig_variable_func)(ClientData, Tcl_Interp *, char *, char *, int);
typedef void  (*swig_delete_func)(ClientData);

typedef struct swig_method {
  const char     *name;
  swig_wrapper   method;
} swig_method;

typedef struct swig_attribute {
  const char     *name;
  swig_wrapper   getmethod;
  swig_wrapper   setmethod;
} swig_attribute;

typedef struct swig_class {
  const char         *name;
  swig_type_info   **type;
  swig_wrapper       constructor;
  void              (*destructor)(void *);
  swig_method        *methods;
  swig_attribute     *attributes;
  struct swig_class **bases;
  char              **base_names;
} swig_class;

typedef struct swig_instance {
  Tcl_Obj       *thisptr;
  void          *thisvalue;
  swig_class   *classptr;
  int            destroy;
  Tcl_Command    cmdtok;
} swig_instance;

#define SWIG_NewPointerObj(ptr, type, flags) \
  SWIG_Tcl_NewPointerObj(ptr, type, flags)
#define SWIG_ConvertPtr(oc, ptr, ty, flags) \
  SWIG_Tcl_ConvertPtr(interp, oc, ptr, ty, flags)
#define SWIG_ConvertPtrFromString(c, ptr, ty, flags) \
  SWIG_Tcl_ConvertPtrFromString(interp, c, ptr, ty, flags)
#define SWIG_ConvertPacked(obj, ptr, sz, ty, flags) \
  SWIG_Tcl_ConvertPacked(interp, obj, ptr, sz, ty, flags)
#define SWIG_MakePtr(c, ptr, ty, flags) \
  SWIG_Tcl_MakePtr(c, ptr, ty, flags)
#define SWIG_NewPackedObj(ptr, sz, type, flags) \
  SWIG_Tcl_NewPackedObj(ptr, sz, type, flags)
#define SWIG_GetArgs SWIG_Tcl_GetArgs
#define SWIG_PointerTypeFromString(c) \
  SWIG_Tcl_PointerTypeFromString(c)
#define SWIG_Acquire(ptr) \
  SWIG_Tcl_Acquire(ptr)
#define SWIG_Disown(ptr) \
  SWIG_Tcl_Disown(ptr)
#define SWIG_Thisown(ptr) \
  SWIG_Tcl_Thisown(ptr)
#define SWIG_InstallConstants(interp, constants) \
  SWIG_Tcl_InstallConstants(interp, constants)
#define SWIG_GetConstant(key) \
  SWIG_Tcl_GetConstant(key)
#define SWIG_NewInstanceObj(thisvalue, type, flags) \
  SWIG_Tcl_NewInstanceObj(interp, thisvalue, type, flags)
#define SWIG_ObjectConstructor SWIG_Tcl_ObjectConstructor
#define SWIG_MethodCommand SWIG_Tcl_MethodCommand
#define SWIG_ObjectDelete SWIG_Tcl_ObjectDelete

static void 
SWIG_Tcl_LookupTypePointer(Tcl_Interp *interp) {
  char buf[512];
  char *data;
  
  /* first check if pointer already created */
  data = (char *) Tcl_GetVar(interp, "swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME, TCL_GLOBAL_ONLY);
  if (data) {
    SWIG_UnpackData(data, &swig_type_list_handle, sizeof(swig_type_info **));
  } else {
    /* create a new pointer */
    data = SWIG_PackData(buf, &swig_type_list_handle, sizeof(swig_type_info **));
    *data = 0;
    Tcl_SetVar(interp, "swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME, buf, 0);
  }
}

/* Object support */
static Tcl_HashTable  swigobjectTable;
static int            swigobjectTableinit = 0;

/* Acquire ownership of a pointer */
static void
SWIG_Tcl_Acquire(void *ptr) {
  Tcl_HashEntry *entryPtr;
  int newobj;
  if (!swigobjectTableinit) {
    Tcl_InitHashTable(&swigobjectTable, TCL_ONE_WORD_KEYS);
    swigobjectTableinit = 1;
  }
  entryPtr = Tcl_CreateHashEntry(&swigobjectTable, (char *) ptr, &newobj);
}

/* Disown a pointer.  Returns 1 if we owned it to begin with */
static int
SWIG_Tcl_Disown(void *ptr) {
  Tcl_HashEntry *entryPtr;
  if (!swigobjectTableinit) return 0;
  entryPtr = Tcl_FindHashEntry(&swigobjectTable, (char *) ptr);
  if (entryPtr) {
    Tcl_DeleteHashEntry(entryPtr);
    return 1;
  }
  return 0;
}

static int
SWIG_Tcl_Thisown(void *ptr) {
  if (!swigobjectTableinit) return 0;
  if (Tcl_FindHashEntry(&swigobjectTable, (char *) ptr)) {
    return 1;
  }
  return 0;
}

/* Convert a pointer value */
static int
SWIG_Tcl_ConvertPtrFromString(Tcl_Interp *interp, const char *c, void **ptr, swig_type_info *ty, int flags) {
  swig_type_info *tc;
  /* Pointer values must start with leading underscore */
  while (*c != '_') {
    *ptr = (void *) 0;
    if (strcmp(c,"NULL") == 0) return TCL_OK;
    /* Hmmm. It could be an object name. */
    if (Tcl_VarEval(interp,c," cget -this", (char *) NULL) == TCL_OK) {
      Tcl_Obj *result = Tcl_GetObjResult(interp);
      c = Tcl_GetStringFromObj(result, NULL);
      continue;
    }
    Tcl_ResetResult(interp);
    if (flags & SWIG_POINTER_EXCEPTION) 
      Tcl_SetResult(interp, (char *) "Type error. Expected a pointer", TCL_STATIC);
    return TCL_ERROR;
  }
  c++;
  c = SWIG_UnpackData(c,ptr,sizeof(void *));
  if (ty) {
    tc = SWIG_TypeCheck(c,ty);
    if ((!tc) && (flags & SWIG_POINTER_EXCEPTION)) {
      Tcl_SetResult(interp, (char *) "Type error. Expected ", TCL_STATIC);
      Tcl_AppendElement(interp, (char *) ty->name);
      return TCL_ERROR;
    } else if (!tc) {
      Tcl_ResetResult(interp);
      return TCL_ERROR;
    }
    if (flags & SWIG_POINTER_DISOWN) {
      SWIG_Disown((void *) *ptr);
    }
    *ptr = SWIG_TypeCast(tc,(void *) *ptr);
  }
  return TCL_OK;
}

/* Convert a pointer value */
static SWIGINLINE int
SWIG_Tcl_ConvertPtr(Tcl_Interp *interp, Tcl_Obj *oc, void **ptr, swig_type_info *ty, int flags) {
  return SWIG_Tcl_ConvertPtrFromString(interp, Tcl_GetStringFromObj(oc,NULL), ptr, ty, flags);
}

/* Convert a pointer value */
static char *
SWIG_Tcl_PointerTypeFromString(char *c) {
  char d;
  /* Pointer values must start with leading underscore. NULL has no type */
  if (*c != '_') {
    return 0;
  }
  c++;
  /* Extract hex value from pointer */
  while ((d = *c)) {
    if (!(((d >= '0') && (d <= '9')) || ((d >= 'a') && (d <= 'f')))) break;
    c++;
  }
  return c;
}

/* Convert a packed value value */
static int
SWIG_Tcl_ConvertPacked(Tcl_Interp *interp, Tcl_Obj *obj, void *ptr, int sz, swig_type_info *ty, int flags) {
  swig_type_info *tc;
  const char  *c;

  if (!obj) goto type_error;
  c = Tcl_GetStringFromObj(obj,NULL);
  /* Pointer values must start with leading underscore */
  if (*c != '_') goto type_error;
  c++;
  c = SWIG_UnpackData(c,ptr,sz);
  if (ty) {
    tc = SWIG_TypeCheck(c,ty);
    if (!tc) goto type_error;
  }
  return TCL_OK;

type_error:

  if (flags) {
    if (ty) {
      Tcl_SetResult(interp, (char *) "Type error. Expected ", TCL_STATIC);
      Tcl_AppendElement(interp, (char *) ty->name);
      return TCL_ERROR;
    } else {
      Tcl_SetResult(interp, (char *) "Expected packed data.", TCL_STATIC);
      return TCL_ERROR;
    }
  }
  return TCL_ERROR;
}


/* Take a pointer and convert it to a string */
static void
SWIG_Tcl_MakePtr(char *c, void *ptr, swig_type_info *ty, int flags) {
  if (ptr) {
    *(c++) = '_';
    c = SWIG_PackData(c,&ptr,sizeof(void *));
    strcpy(c,ty->name);
  } else {
    strcpy(c,(char *)"NULL");
  }
  flags = 0;
}

/* Create a new pointer object */
static SWIGINLINE Tcl_Obj *
SWIG_Tcl_NewPointerObj(void *ptr, swig_type_info *type, int flags) {
  Tcl_Obj *robj;
  char result[512];
  SWIG_MakePtr(result,ptr,type,flags);
  robj = Tcl_NewStringObj(result,-1);
  return robj;
}

static Tcl_Obj *
SWIG_Tcl_NewPackedObj(void *ptr, int sz, swig_type_info *type, int flags) {
  char result[1024];
  char *r = result;
  if ((2*sz + 1 + strlen(type->name)) > 1000) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  strcpy(r,type->name);
  flags = 0;
  return Tcl_NewStringObj(result,-1);
}

static Tcl_HashTable   swigconstTable;
static int             swigconstTableinit = 0;

/* Install Constants */
static void
SWIG_Tcl_InstallConstants(Tcl_Interp *interp, swig_const_info constants[]) {
  int i;
  Tcl_Obj *obj;
  Tcl_HashEntry *entryPtr;
  int            newobj;

  if (!swigconstTableinit) {
    Tcl_InitHashTable(&swigconstTable, TCL_STRING_KEYS);
    swigconstTableinit = 1;
  }
  for (i = 0; constants[i].type; i++) {
    switch(constants[i].type) {
    case SWIG_TCL_INT:
      obj = Tcl_NewIntObj(constants[i].lvalue);
      break;
    case SWIG_TCL_FLOAT:
      obj = Tcl_NewDoubleObj(constants[i].dvalue);
      break;
    case SWIG_TCL_STRING:
      obj = Tcl_NewStringObj((char *) constants[i].pvalue,-1);
      break;
    case SWIG_TCL_POINTER:
      obj = SWIG_NewPointerObj(constants[i].pvalue, *(constants[i]).ptype,0);
      break;
    case SWIG_TCL_BINARY:
      obj = SWIG_NewPackedObj(constants[i].pvalue, constants[i].lvalue, *(constants[i].ptype),0);
      break;
    default:
      obj = 0;
      break;
    }
    if (obj) {
      Tcl_ObjSetVar2(interp,Tcl_NewStringObj(constants[i].name,-1), NULL, obj, TCL_GLOBAL_ONLY);
      entryPtr = Tcl_CreateHashEntry(&swigconstTable, constants[i].name, &newobj);
      Tcl_SetHashValue(entryPtr, (ClientData) obj);
    }
  }
}

static Tcl_Obj *
SWIG_Tcl_GetConstant(const char *key) {
  Tcl_HashEntry *entryPtr;
  if (!swigconstTableinit) return 0;
  entryPtr = Tcl_FindHashEntry(&swigconstTable, key);
  if (entryPtr) {
    return (Tcl_Obj *) Tcl_GetHashValue(entryPtr);
  }
  printf("Searching %s\n", key);
  return 0;
}

/* Get arguments */
static int
SWIG_Tcl_GetArgs(Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[], const char *fmt, ...) {
  int        argno = 0, opt = 0;
  long       tempi;
  double     tempd;
  const char *c;
  va_list    ap;
  void      *vptr;
  Tcl_Obj   *obj = 0;
  swig_type_info *ty;

  va_start(ap,fmt);
  for (c = fmt; (*c && (*c != ':') && (*c != ';')); c++,argno++) {
    if (*c == '|') {
      opt = 1;
      c++;
    }
    if (argno >= (objc-1)) {
      if (!opt) {
        Tcl_SetResult(interp, (char *) "Wrong # args. ", TCL_STATIC);
        goto argerror;
      } else {
        va_end(ap);
        return TCL_OK;
      }
    }

    vptr = va_arg(ap,void *);
    if (vptr) {
      if (isupper(*c)) {
        obj = SWIG_GetConstant(Tcl_GetStringFromObj(objv[argno+1],0));
        if (!obj) obj = objv[argno+1];
      } else {
        obj = objv[argno+1];
      }
      switch(*c) {
      case 'i': case 'I':
      case 'l': case 'L':
      case 'h': case 'H':
      case 'b': case 'B':
        if (Tcl_GetLongFromObj(interp,obj,&tempi) != TCL_OK) goto argerror;
        if ((*c == 'i') || (*c == 'I')) *((int *)vptr) = (int)tempi;
        else if ((*c == 'l') || (*c == 'L')) *((long *)vptr) = (long)tempi;
        else if ((*c == 'h') || (*c == 'H')) *((short*)vptr) = (short)tempi;
        else if ((*c == 'b') || (*c == 'B')) *((unsigned char *)vptr) = (unsigned char)tempi;
        break;
      case 'f': case 'F':
      case 'd': case 'D':
        if (Tcl_GetDoubleFromObj(interp,obj,&tempd) != TCL_OK) goto argerror;
        if ((*c == 'f') || (*c == 'F')) *((float *) vptr) = (float)tempd;
        else if ((*c == 'd') || (*c == 'D')) *((double*) vptr) = tempd;
        break;
      case 's': case 'S':
        if (*(c+1) == '#') {
          int *vlptr = (int *) va_arg(ap, void *);
          *((char **) vptr) = Tcl_GetStringFromObj(obj, vlptr);
          c++;
        } else {
          *((char **)vptr) = Tcl_GetStringFromObj(obj,NULL);
        }
        break;
      case 'c': case 'C':
        *((char *)vptr) = *(Tcl_GetStringFromObj(obj,NULL));
        break;
      case 'p': case 'P':
        ty = (swig_type_info *) va_arg(ap, void *);
        if (SWIG_Tcl_ConvertPtr(interp, obj, (void **) vptr, ty, SWIG_POINTER_EXCEPTION) == TCL_ERROR) goto argerror;
        break;
      case 'o': case 'O':
        *((Tcl_Obj **)vptr) = objv[argno+1];
        break;
      default:
        break;
      }
    }
  }

  if ((*c != ';') && ((objc-1) > argno)) {
    Tcl_SetResult(interp, (char *) "Wrong # args.", TCL_STATIC);
    goto argerror;
  }
  va_end(ap);
  return TCL_OK;

 argerror:
  {
    char temp[32];
    sprintf(temp,"%d", argno+1);
    c = strchr(fmt,':');
    if (!c) c = strchr(fmt,';');
    if (!c) c = (char *)"";
    Tcl_AppendResult(interp,c," argument ", temp, NULL);
    va_end(ap);
    return TCL_ERROR;
  }
}

static void
SWIG_Tcl_ObjectDelete(ClientData clientData) {
  swig_instance *si = (swig_instance *) clientData;
  if ((si) && (si->destroy) && (SWIG_Disown(si->thisvalue))) {
    if (si->classptr->destructor) {
      (si->classptr->destructor)(si->thisvalue);
    }
  }
  Tcl_DecrRefCount(si->thisptr);
  free(si);
}

/* Function to invoke object methods given an instance */
static int
SWIG_Tcl_MethodCommand(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST _objv[]) {
  char *method,   *attrname;
  swig_instance   *inst = (swig_instance *) clientData;
  swig_method     *meth;
  swig_attribute  *attr;
  Tcl_Obj         *oldarg;
  Tcl_Obj         **objv;
  int              rcode;
  swig_class      *cls;
  swig_class      *cls_stack[64];
  int              cls_stack_bi[64];
  int              cls_stack_top = 0;
  int              numconf = 2;
  int              bi;

  objv = (Tcl_Obj **) _objv;
  if (objc < 2) {
    Tcl_SetResult(interp, (char *) "wrong # args.", TCL_STATIC);
    return TCL_ERROR;
  }
  method = Tcl_GetStringFromObj(objv[1],NULL);
  if (strcmp(method,"-acquire") == 0) {
    inst->destroy = 1;
    SWIG_Acquire(inst->thisvalue);
    return TCL_OK;
  }
  if (strcmp(method,"-disown") == 0) {
    if (inst->destroy) {
      SWIG_Disown(inst->thisvalue);
    }
    inst->destroy = 0;
    return TCL_OK;
  }
  if (strcmp(method,"-delete") == 0) {
    Tcl_DeleteCommandFromToken(interp,inst->cmdtok);
    return TCL_OK;
  }
  cls_stack[cls_stack_top] = inst->classptr;
  cls_stack_bi[cls_stack_top] = -1;
  cls = inst->classptr;
  while (1) {
    bi = cls_stack_bi[cls_stack_top];
    cls = cls_stack[cls_stack_top];
    if (bi != -1) {
      if (!cls->bases[bi] && cls->base_names[bi]) {
        /* lookup and cache the base class */
	swig_type_info *info = SWIG_TypeQuery(cls->base_names[bi]);
	if (info) cls->bases[bi] = (swig_class *) info->clientdata;
      }
      cls = cls->bases[bi];
      if (cls) {
        cls_stack_bi[cls_stack_top]++;
        cls_stack_top++;
        cls_stack[cls_stack_top] = cls;
        cls_stack_bi[cls_stack_top] = -1;
        continue;
      }
    }
    if (!cls) {
      cls_stack_top--;
      if (cls_stack_top < 0) break;
      else continue;
    }
    cls_stack_bi[cls_stack_top]++;

    meth = cls->methods;
    /* Check for methods */
    while (meth && meth->name) {
      if (strcmp(meth->name,method) == 0) {
        oldarg = objv[1];
        objv[1] = inst->thisptr;
        Tcl_IncrRefCount(inst->thisptr);
        rcode = (*meth->method)(clientData,interp,objc,objv);
        objv[1] = oldarg;
        Tcl_DecrRefCount(inst->thisptr);
        return rcode;
      }
      meth++;
    }
    /* Check class methods for a match */
    if (strcmp(method,"cget") == 0) {
      if (objc < 3) {
        Tcl_SetResult(interp, (char *) "wrong # args.", TCL_STATIC);
        return TCL_ERROR;
      }
      attrname = Tcl_GetStringFromObj(objv[2],NULL);
      attr = cls->attributes;
      while (attr && attr->name) {
        if ((strcmp(attr->name, attrname) == 0) && (attr->getmethod)) {
          oldarg = objv[1];
          objv[1] = inst->thisptr;
          Tcl_IncrRefCount(inst->thisptr);
          rcode = (*attr->getmethod)(clientData,interp,2, objv);
          objv[1] = oldarg;
          Tcl_DecrRefCount(inst->thisptr);
          return rcode;
        }
        attr++;
      }
      if (strcmp(attrname, "-this") == 0) {
        Tcl_SetObjResult(interp, Tcl_DuplicateObj(inst->thisptr));
        return TCL_OK;
      }
      if (strcmp(attrname, "-thisown") == 0) {
        if (SWIG_Thisown(inst->thisvalue)) {
          Tcl_SetResult(interp,(char*)"1",TCL_STATIC);
        } else {
          Tcl_SetResult(interp,(char*)"0",TCL_STATIC);
        }
        return TCL_OK;
      }
    } else if (strcmp(method, "configure") == 0) {
      int i;
      if (objc < 4) {
        Tcl_SetResult(interp, (char *) "wrong # args.", TCL_STATIC);
        return TCL_ERROR;
      }
      i = 2;
      while (i < objc) {
        attrname = Tcl_GetStringFromObj(objv[i],NULL);
        attr = cls->attributes;
        while (attr && attr->name) {
          if ((strcmp(attr->name, attrname) == 0) && (attr->setmethod)) {
            oldarg = objv[i];
            objv[i] = inst->thisptr;
            Tcl_IncrRefCount(inst->thisptr);
            rcode = (*attr->setmethod)(clientData,interp,3, &objv[i-1]);
            objv[i] = oldarg;
            Tcl_DecrRefCount(inst->thisptr);
            if (rcode != TCL_OK) return rcode;
            numconf += 2;
          }
          attr++;
        }
        i+=2;
      }
    }
  }
  if (strcmp(method,"configure") == 0) {
    if (numconf >= objc) {
      return TCL_OK;
    } else {
      Tcl_SetResult(interp,(char *) "Invalid attribute name.", TCL_STATIC);
      return TCL_ERROR;
    }
  }
  if (strcmp(method,"cget") == 0) {
      Tcl_SetResult(interp,(char *) "Invalid attribute name.", TCL_STATIC);
      return TCL_ERROR;
  }

  Tcl_SetResult(interp, (char *) "Invalid method. Must be one of: configure cget -acquire -disown -delete", TCL_STATIC);
  cls = inst->classptr;
  bi = 0;
  while (cls) {
    meth = cls->methods;
    while (meth && meth->name) {
      char *cr = (char *) Tcl_GetStringResult(interp);
      if (!strstr(strchr(cr,':'), meth->name))
        Tcl_AppendElement(interp, (char *) meth->name);
      meth++;
    }
    cls = inst->classptr->bases[bi++];
  }
  return TCL_ERROR;
}

/* Function to create objects */
static int
SWIG_Tcl_ObjectConstructor(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    Tcl_Obj          *newObj = 0;
    void             *thisvalue = 0;
    swig_instance   *newinst = 0;
    swig_class      *classptr = (swig_class *) clientData;
    swig_wrapper     cons = 0;
    char             *name = 0;
    int               firstarg = 0;
    int               thisarg = 0;
    int               destroy = 1;

    if (!classptr) {
      Tcl_SetResult(interp, (char *) "swig: internal runtime error. No class object defined.", TCL_STATIC);
      return TCL_ERROR;
    }
    cons = classptr->constructor;
    if (objc > 1) {
      char *s = Tcl_GetStringFromObj(objv[1],NULL);
      if (strcmp(s,"-this") == 0) {
        thisarg = 2;
        cons = 0;
      } else if (strcmp(s,"-args") == 0) {
        firstarg = 1;
      } else if (objc == 2) {
        firstarg = 1;
        name = s;
      } else if (objc >= 3) {
        char *s1;
        name = s;
        s1 = Tcl_GetStringFromObj(objv[2],NULL);
        if (strcmp(s1,"-this") == 0) {
          thisarg = 3;
          cons = 0;
        } else {
          firstarg = 1;
        }
      }
    }
    if (cons) {
      int result;
      result = (*cons)(0, interp, objc-firstarg, &objv[firstarg]);
      if (result != TCL_OK) {
        return result;
      }
      newObj = Tcl_DuplicateObj(Tcl_GetObjResult(interp));
      if (!name) name = Tcl_GetStringFromObj(newObj,NULL);
    } else if (thisarg > 0) {
      if (thisarg < objc) {
        destroy = 0;
        newObj = Tcl_DuplicateObj(objv[thisarg]);
        if (!name) name = Tcl_GetStringFromObj(newObj,NULL);
      } else {
        Tcl_SetResult(interp, (char *) "wrong # args.", TCL_STATIC);
        return TCL_ERROR;
      }
    } else {
      Tcl_SetResult(interp, (char *) "No constructor available.", TCL_STATIC);
      return TCL_ERROR;
    }
    if (SWIG_Tcl_ConvertPtr(interp,newObj, (void **) &thisvalue, *(classptr->type), SWIG_POINTER_EXCEPTION) == TCL_ERROR) {
      Tcl_DecrRefCount(newObj);
      return TCL_ERROR;
    }
    newinst = (swig_instance *) malloc(sizeof(swig_instance));
    newinst->thisptr = newObj;
    Tcl_IncrRefCount(newObj);
    newinst->thisvalue = thisvalue;
    newinst->classptr = classptr;
    newinst->destroy = destroy;
    if (destroy) {
      SWIG_Acquire(thisvalue);
    }
    newinst->cmdtok = Tcl_CreateObjCommand(interp,name, (swig_wrapper) SWIG_MethodCommand, (ClientData) newinst, (swig_delete_func) SWIG_ObjectDelete);
    return TCL_OK;
}


/* This function takes the current result and turns it into an object command */
static Tcl_Obj *
SWIG_Tcl_NewInstanceObj(Tcl_Interp *interp, void *thisvalue, swig_type_info *type, int flags) {
  Tcl_Obj *robj = SWIG_NewPointerObj(thisvalue, type,0);
  /* Check to see if this pointer belongs to a class or not */
  if ((type->clientdata) && (interp)) {
    Tcl_CmdInfo    ci;
    char          *name;
    name = Tcl_GetStringFromObj(robj,NULL);
    if (!Tcl_GetCommandInfo(interp,name, &ci) || (flags)) {
      swig_instance *newinst = (swig_instance *) malloc(sizeof(swig_instance));
      newinst->thisptr = Tcl_DuplicateObj(robj);
      Tcl_IncrRefCount(newinst->thisptr);
      newinst->thisvalue = thisvalue;
      newinst->classptr = (swig_class *) type->clientdata;
      newinst->destroy = flags;
      newinst->cmdtok = Tcl_CreateObjCommand(interp, Tcl_GetStringFromObj(robj,NULL), (swig_wrapper_func) SWIG_MethodCommand, (ClientData) newinst, (swig_delete_func) SWIG_ObjectDelete);
      if (flags) {
        SWIG_Acquire(thisvalue);
      }
    }
  }
  return robj;
}

/* Structure for command table */
typedef struct {
  const char *name;
  int       (*wrapper)(ClientData, Tcl_Interp *, int, Tcl_Obj *CONST []);
  ClientData  clientdata;
} swig_command_info;

/* Structure for variable linking table */
typedef struct {
  const char *name;
  void *addr;
  char * (*get)(ClientData, Tcl_Interp *, char *, char *, int);
  char * (*set)(ClientData, Tcl_Interp *, char *, char *, int);
} swig_var_info;


/* Contract support */

#define SWIG_contract_assert(expr, msg)  if (!(expr)) { Tcl_SetResult(interp, (char *) msg, TCL_STATIC ); goto fail; } else

#ifdef __cplusplus
}
#endif






/* -------- TYPES TABLE (BEGIN) -------- */

#define  SWIGTYPE_p_gpstk__AccessError swig_types[0] 
#define  SWIGTYPE_p_size_t swig_types[1] 
#define  SWIGTYPE_std__size_t swig_types[2] 
#define  SWIGTYPE_size_t swig_types[3] 
#define  SWIGTYPE_p_gpstk__InvalidParameter swig_types[4] 
#define  SWIGTYPE_p_DayTime swig_types[5] 
#define  SWIGTYPE_p_gpstk__OutOfMemory swig_types[6] 
#define  SWIGTYPE_p_gpstk__ExceptionLocation swig_types[7] 
#define  SWIGTYPE_p_gpstk__GPSZcount swig_types[8] 
#define  SWIGTYPE_p_long_double swig_types[9] 
#define  SWIGTYPE_p_GPSZcount swig_types[10] 
#define  SWIGTYPE_p_double swig_types[11] 
#define  SWIGTYPE_p_time_t swig_types[12] 
#define  SWIGTYPE_p_gpstk__ObjectNotFound swig_types[13] 
#define  SWIGTYPE_p_std__ostream swig_types[14] 
#define  SWIGTYPE_p_gpstk__InvalidArgumentException swig_types[15] 
#define  SWIGTYPE_p_gpstk__IndexOutOfBoundsException swig_types[16] 
#define  SWIGTYPE_p_gpstk__Exception swig_types[17] 
#define  SWIGTYPE_p_gpstk__ConfigurationException swig_types[18] 
#define  SWIGTYPE_p_gpstk__FileMissingException swig_types[19] 
#define  SWIGTYPE_p_gpstk__SystemSemaphoreException swig_types[20] 
#define  SWIGTYPE_p_gpstk__SystemPipeException swig_types[21] 
#define  SWIGTYPE_p_gpstk__SystemQueueException swig_types[22] 
#define  SWIGTYPE_p_timeval swig_types[23] 
#define  SWIGTYPE_std__ptrdiff_t swig_types[24] 
#define  SWIGTYPE_ptrdiff_t swig_types[25] 
#define  SWIGTYPE_p_gpstk__InvalidRequest swig_types[26] 
#define  SWIGTYPE_p_gpstk__AssertionFailure swig_types[27] 
#define  SWIGTYPE_p_int swig_types[28] 
static swig_type_info *swig_types[30];

/* -------- TYPES TABLE (END) -------- */

#define SWIG_init    Gpstk_Init
#define SWIG_name    "gpstk"
#define SWIG_prefix  ""
#define SWIG_version "0.0"


#ifdef __cplusplus
extern "C" {
#endif
#ifdef MAC_TCL
#pragma export on
#endif
SWIGEXPORT(int) SWIG_init(Tcl_Interp *);
#ifdef MAC_TCL
#pragma export off
#endif
#ifdef __cplusplus
}
#endif



/* Includes the header in the wrapper code */
#include "../../src/Exception.hpp"


/* Includes the header in the wrapper code */
#include "../../src/GPSZcount.hpp"


/* Includes the header in the wrapper code */
#include "../../src/DayTime.hpp"
using namespace gpstk;

#ifdef __cplusplus
extern "C" {
#endif
static int
_wrap_new_ExceptionLocation__SWIG_0(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    std::string *arg1 = 0 ;
    std::string *arg2 = 0 ;
    unsigned long *arg3 = 0 ;
    gpstk::ExceptionLocation *result;
    std::string temp1 ;
    std::string temp2 ;
    unsigned long temp3 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"ooo:new_ExceptionLocation filename funcName lineNum ",NULL,NULL,NULL) == TCL_ERROR) SWIG_fail;
    {
        temp1 = std::string(Tcl_GetStringFromObj(objv[1],NULL));
        arg1 = &temp1;
    }
    {
        temp2 = std::string(Tcl_GetStringFromObj(objv[2],NULL));
        arg2 = &temp2;
    }
    {
        long ltemp;
        if (Tcl_GetLongFromObj(interp, objv[3], &ltemp) != TCL_OK) {
            SWIG_fail;
        }
        temp3 = (unsigned long) ltemp;
        arg3 = &temp3;
    }
    result = (gpstk::ExceptionLocation *)new gpstk::ExceptionLocation((std::string const &)*arg1,(std::string const &)*arg2,(unsigned long const &)*arg3);
    
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_gpstk__ExceptionLocation,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_new_ExceptionLocation__SWIG_1(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    std::string *arg1 = 0 ;
    std::string *arg2 = 0 ;
    gpstk::ExceptionLocation *result;
    std::string temp1 ;
    std::string temp2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"oo:new_ExceptionLocation filename funcName ",NULL,NULL) == TCL_ERROR) SWIG_fail;
    {
        temp1 = std::string(Tcl_GetStringFromObj(objv[1],NULL));
        arg1 = &temp1;
    }
    {
        temp2 = std::string(Tcl_GetStringFromObj(objv[2],NULL));
        arg2 = &temp2;
    }
    result = (gpstk::ExceptionLocation *)new gpstk::ExceptionLocation((std::string const &)*arg1,(std::string const &)*arg2);
    
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_gpstk__ExceptionLocation,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_new_ExceptionLocation__SWIG_2(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    std::string *arg1 = 0 ;
    gpstk::ExceptionLocation *result;
    std::string temp1 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"o:new_ExceptionLocation filename ",NULL) == TCL_ERROR) SWIG_fail;
    {
        temp1 = std::string(Tcl_GetStringFromObj(objv[1],NULL));
        arg1 = &temp1;
    }
    result = (gpstk::ExceptionLocation *)new gpstk::ExceptionLocation((std::string const &)*arg1);
    
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_gpstk__ExceptionLocation,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_new_ExceptionLocation__SWIG_3(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    gpstk::ExceptionLocation *result;
    
    if (SWIG_GetArgs(interp, objc, objv,":new_ExceptionLocation ") == TCL_ERROR) SWIG_fail;
    result = (gpstk::ExceptionLocation *)new gpstk::ExceptionLocation();
    
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_gpstk__ExceptionLocation,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_new_ExceptionLocation(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    Tcl_Obj *CONST *argv = objv+1;
    int argc = objc-1;
    if (argc == 0) {
        return _wrap_new_ExceptionLocation__SWIG_3(clientData, interp, objc, objv);
    }
    if (argc == 1) {
        int _v;
        {
            _v = 1;
        }
        if (_v) {
            return _wrap_new_ExceptionLocation__SWIG_2(clientData, interp, objc, objv);
        }
    }
    if (argc == 2) {
        int _v;
        {
            _v = 1;
        }
        if (_v) {
            {
                _v = 1;
            }
            if (_v) {
                return _wrap_new_ExceptionLocation__SWIG_1(clientData, interp, objc, objv);
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            _v = 1;
        }
        if (_v) {
            {
                _v = 1;
            }
            if (_v) {
                {
                    long tmp;
                    if (Tcl_GetLongFromObj(NULL,argv[2],&tmp) == TCL_ERROR) _v = 0;
                    else _v = 1;
                }
                if (_v) {
                    return _wrap_new_ExceptionLocation__SWIG_0(clientData, interp, objc, objv);
                }
            }
        }
    }
    
    Tcl_SetResult(interp,(char *) "No matching function for overloaded 'new_ExceptionLocation'", TCL_STATIC);
    return TCL_ERROR;
}


static int
_wrap_delete_ExceptionLocation(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    gpstk::ExceptionLocation *arg1 = (gpstk::ExceptionLocation *) 0 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"o:delete_ExceptionLocation self ",NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_gpstk__ExceptionLocation,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    delete arg1;
    
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_ExceptionLocation_getFileName(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    gpstk::ExceptionLocation *arg1 = (gpstk::ExceptionLocation *) 0 ;
    std::string result;
    
    if (SWIG_GetArgs(interp, objc, objv,"o:ExceptionLocation_getFileName self ",NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_gpstk__ExceptionLocation,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    result = ((gpstk::ExceptionLocation const *)arg1)->getFileName();
    
    {
        Tcl_SetStringObj(Tcl_GetObjResult(interp),(char*)(&result)->c_str(),(&result)->length());
    }
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_ExceptionLocation_getFunctionName(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    gpstk::ExceptionLocation *arg1 = (gpstk::ExceptionLocation *) 0 ;
    std::string result;
    
    if (SWIG_GetArgs(interp, objc, objv,"o:ExceptionLocation_getFunctionName self ",NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_gpstk__ExceptionLocation,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    result = ((gpstk::ExceptionLocation const *)arg1)->getFunctionName();
    
    {
        Tcl_SetStringObj(Tcl_GetObjResult(interp),(char*)(&result)->c_str(),(&result)->length());
    }
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_ExceptionLocation_getLineNumber(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    gpstk::ExceptionLocation *arg1 = (gpstk::ExceptionLocation *) 0 ;
    unsigned long result;
    
    if (SWIG_GetArgs(interp, objc, objv,"o:ExceptionLocation_getLineNumber self ",NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_gpstk__ExceptionLocation,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    result = (unsigned long)((gpstk::ExceptionLocation const *)arg1)->getLineNumber();
    
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_ExceptionLocation_dump(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    gpstk::ExceptionLocation *arg1 = (gpstk::ExceptionLocation *) 0 ;
    std::ostream *arg2 = 0 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"oo:ExceptionLocation_dump self s ",NULL,NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_gpstk__ExceptionLocation,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[2], (void **) &arg2, SWIGTYPE_p_std__ostream,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    ((gpstk::ExceptionLocation const *)arg1)->dump(*arg2);
    
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_istream__SWIG_0(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    std::ostream *arg1 = 0 ;
    gpstk::ExceptionLocation *arg2 = 0 ;
    std::ostream *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"oo:istream s e ",NULL,NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_std__ostream,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[2], (void **) &arg2, SWIGTYPE_p_gpstk__ExceptionLocation,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        std::ostream &_result_ref = operator <<(*arg1,(gpstk::ExceptionLocation const &)*arg2);
        result = (std::ostream *) &_result_ref;
    }
    
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_std__ostream,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static void swig_delete_ExceptionLocation(void *obj) {
gpstk::ExceptionLocation *arg1 = (gpstk::ExceptionLocation *) obj;
delete arg1;
}
static swig_method swig_gpstk_ExceptionLocation_methods[] = {
    {"getFileName", _wrap_ExceptionLocation_getFileName}, 
    {"getFunctionName", _wrap_ExceptionLocation_getFunctionName}, 
    {"getLineNumber", _wrap_ExceptionLocation_getLineNumber}, 
    {"dump", _wrap_ExceptionLocation_dump}, 
    {0,0}
};
static swig_attribute swig_gpstk_ExceptionLocation_attributes[] = {
    {0,0,0}
};
static swig_class *swig_gpstk_ExceptionLocation_bases[] = {0};
static char *swig_gpstk_ExceptionLocation_base_names[] = {0};
swig_class _wrap_class_gpstk_ExceptionLocation = { "ExceptionLocation", &SWIGTYPE_p_gpstk__ExceptionLocation,_wrap_new_ExceptionLocation, swig_delete_ExceptionLocation, swig_gpstk_ExceptionLocation_methods, swig_gpstk_ExceptionLocation_attributes, swig_gpstk_ExceptionLocation_bases,swig_gpstk_ExceptionLocation_base_names };
static int
_wrap_new_Exception__SWIG_0(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    gpstk::Exception *result;
    
    if (SWIG_GetArgs(interp, objc, objv,":new_Exception ") == TCL_ERROR) SWIG_fail;
    result = (gpstk::Exception *)new gpstk::Exception();
    
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_gpstk__Exception,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_new_Exception__SWIG_1(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    std::string *arg1 = 0 ;
    unsigned long *arg2 = 0 ;
    gpstk::Exception::Severity *arg3 = 0 ;
    gpstk::Exception *result;
    std::string temp1 ;
    unsigned long temp2 ;
    gpstk::Exception::Severity temp3 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"ooo:new_Exception errorText errorId severity ",NULL,NULL,NULL) == TCL_ERROR) SWIG_fail;
    {
        temp1 = std::string(Tcl_GetStringFromObj(objv[1],NULL));
        arg1 = &temp1;
    }
    {
        long ltemp;
        if (Tcl_GetLongFromObj(interp, objv[2], &ltemp) != TCL_OK) {
            SWIG_fail;
        }
        temp2 = (unsigned long) ltemp;
        arg2 = &temp2;
    }
    {
        long ltemp;
        if (Tcl_GetLongFromObj(interp, objv[3], &ltemp) != TCL_OK) {
            SWIG_fail;
        }
        temp3 = (gpstk::Exception::Severity) ltemp;
        arg3 = &temp3;
    }
    result = (gpstk::Exception *)new gpstk::Exception((std::string const &)*arg1,(unsigned long const &)*arg2,(enum gpstk::Exception::Severity const &)*arg3);
    
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_gpstk__Exception,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_new_Exception__SWIG_2(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    std::string *arg1 = 0 ;
    unsigned long *arg2 = 0 ;
    gpstk::Exception *result;
    std::string temp1 ;
    unsigned long temp2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"oo:new_Exception errorText errorId ",NULL,NULL) == TCL_ERROR) SWIG_fail;
    {
        temp1 = std::string(Tcl_GetStringFromObj(objv[1],NULL));
        arg1 = &temp1;
    }
    {
        long ltemp;
        if (Tcl_GetLongFromObj(interp, objv[2], &ltemp) != TCL_OK) {
            SWIG_fail;
        }
        temp2 = (unsigned long) ltemp;
        arg2 = &temp2;
    }
    result = (gpstk::Exception *)new gpstk::Exception((std::string const &)*arg1,(unsigned long const &)*arg2);
    
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_gpstk__Exception,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_new_Exception__SWIG_3(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    std::string *arg1 = 0 ;
    gpstk::Exception *result;
    std::string temp1 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"o:new_Exception errorText ",NULL) == TCL_ERROR) SWIG_fail;
    {
        temp1 = std::string(Tcl_GetStringFromObj(objv[1],NULL));
        arg1 = &temp1;
    }
    result = (gpstk::Exception *)new gpstk::Exception((std::string const &)*arg1);
    
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_gpstk__Exception,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_new_Exception__SWIG_4(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    gpstk::Exception *arg1 = 0 ;
    gpstk::Exception *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"o:new_Exception exception ",NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_gpstk__Exception,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    result = (gpstk::Exception *)new gpstk::Exception((gpstk::Exception const &)*arg1);
    
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_gpstk__Exception,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_new_Exception(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    Tcl_Obj *CONST *argv = objv+1;
    int argc = objc-1;
    if (argc == 0) {
        return _wrap_new_Exception__SWIG_0(clientData, interp, objc, objv);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_gpstk__Exception, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_new_Exception__SWIG_4(clientData, interp, objc, objv);
        }
    }
    if (argc == 1) {
        int _v;
        {
            _v = 1;
        }
        if (_v) {
            return _wrap_new_Exception__SWIG_3(clientData, interp, objc, objv);
        }
    }
    if (argc == 2) {
        int _v;
        {
            _v = 1;
        }
        if (_v) {
            {
                long tmp;
                if (Tcl_GetLongFromObj(NULL,argv[1],&tmp) == TCL_ERROR) _v = 0;
                else _v = 1;
            }
            if (_v) {
                return _wrap_new_Exception__SWIG_2(clientData, interp, objc, objv);
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            _v = 1;
        }
        if (_v) {
            {
                long tmp;
                if (Tcl_GetLongFromObj(NULL,argv[1],&tmp) == TCL_ERROR) _v = 0;
                else _v = 1;
            }
            if (_v) {
                {
                    long tmp;
                    if (Tcl_GetLongFromObj(NULL,argv[2],&tmp) == TCL_ERROR) _v = 0;
                    else _v = 1;
                }
                if (_v) {
                    return _wrap_new_Exception__SWIG_1(clientData, interp, objc, objv);
                }
            }
        }
    }
    
    Tcl_SetResult(interp,(char *) "No matching function for overloaded 'new_Exception'", TCL_STATIC);
    return TCL_ERROR;
}


static int
_wrap_delete_Exception(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    gpstk::Exception *arg1 = (gpstk::Exception *) 0 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"o:delete_Exception self ",NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_gpstk__Exception,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    delete arg1;
    
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_Exception_e___(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    gpstk::Exception *arg1 = (gpstk::Exception *) 0 ;
    gpstk::Exception *arg2 = 0 ;
    gpstk::Exception *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"oo:Exception_= self e ",NULL,NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_gpstk__Exception,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[2], (void **) &arg2, SWIGTYPE_p_gpstk__Exception,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        gpstk::Exception &_result_ref = (arg1)->operator =((gpstk::Exception const &)*arg2);
        result = (gpstk::Exception *) &_result_ref;
    }
    
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_gpstk__Exception,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_Exception_terminate(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    gpstk::Exception *arg1 = (gpstk::Exception *) 0 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"o:Exception_terminate self ",NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_gpstk__Exception,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    (arg1)->terminate();
    
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_Exception_getErrorId(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    gpstk::Exception *arg1 = (gpstk::Exception *) 0 ;
    unsigned long result;
    
    if (SWIG_GetArgs(interp, objc, objv,"o:Exception_getErrorId self ",NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_gpstk__Exception,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    result = (unsigned long)((gpstk::Exception const *)arg1)->getErrorId();
    
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_Exception_setErrorId(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    gpstk::Exception *arg1 = (gpstk::Exception *) 0 ;
    unsigned long *arg2 = 0 ;
    gpstk::Exception *result;
    unsigned long temp2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"oo:Exception_setErrorId self errId ",NULL,NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_gpstk__Exception,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        long ltemp;
        if (Tcl_GetLongFromObj(interp, objv[2], &ltemp) != TCL_OK) {
            SWIG_fail;
        }
        temp2 = (unsigned long) ltemp;
        arg2 = &temp2;
    }
    {
        gpstk::Exception &_result_ref = (arg1)->setErrorId((unsigned long const &)*arg2);
        result = (gpstk::Exception *) &_result_ref;
    }
    
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_gpstk__Exception,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_Exception_addLocation(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    gpstk::Exception *arg1 = (gpstk::Exception *) 0 ;
    gpstk::ExceptionLocation *arg2 = 0 ;
    gpstk::Exception *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"oo:Exception_addLocation self location ",NULL,NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_gpstk__Exception,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[2], (void **) &arg2, SWIGTYPE_p_gpstk__ExceptionLocation,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        gpstk::Exception &_result_ref = (arg1)->addLocation((gpstk::ExceptionLocation const &)*arg2);
        result = (gpstk::Exception *) &_result_ref;
    }
    
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_gpstk__Exception,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_Exception_getLocation__SWIG_0(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    gpstk::Exception *arg1 = (gpstk::Exception *) 0 ;
    size_t *arg2 = 0 ;
    gpstk::ExceptionLocation result;
    size_t temp2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"oo:Exception_getLocation self index ",NULL,NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_gpstk__Exception,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        long ltemp;
        if (Tcl_GetLongFromObj(interp, objv[2], &ltemp) != TCL_OK) {
            SWIG_fail;
        }
        temp2 = (size_t) ltemp;
        arg2 = &temp2;
    }
    result = ((gpstk::Exception const *)arg1)->getLocation((size_t const &)*arg2);
    
    {
        gpstk::ExceptionLocation * resultptr;
        resultptr = new gpstk::ExceptionLocation((gpstk::ExceptionLocation &) result);
        Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void*) resultptr, SWIGTYPE_p_gpstk__ExceptionLocation,1));
    }
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_Exception_getLocation__SWIG_1(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    gpstk::Exception *arg1 = (gpstk::Exception *) 0 ;
    gpstk::ExceptionLocation result;
    
    if (SWIG_GetArgs(interp, objc, objv,"o:Exception_getLocation self ",NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_gpstk__Exception,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    result = ((gpstk::Exception const *)arg1)->getLocation();
    
    {
        gpstk::ExceptionLocation * resultptr;
        resultptr = new gpstk::ExceptionLocation((gpstk::ExceptionLocation &) result);
        Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void*) resultptr, SWIGTYPE_p_gpstk__ExceptionLocation,1));
    }
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_Exception_getLocation(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    Tcl_Obj *CONST *argv = objv+1;
    int argc = objc-1;
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_gpstk__Exception, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_Exception_getLocation__SWIG_1(clientData, interp, objc, objv);
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_gpstk__Exception, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_size_t, 0) == TCL_ERROR) {
                    _v = 0;
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                return _wrap_Exception_getLocation__SWIG_0(clientData, interp, objc, objv);
            }
        }
    }
    
    Tcl_SetResult(interp,(char *) "No matching function for overloaded 'Exception_getLocation'", TCL_STATIC);
    return TCL_ERROR;
}


static int
_wrap_Exception_getLocationCount(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    gpstk::Exception *arg1 = (gpstk::Exception *) 0 ;
    size_t result;
    
    if (SWIG_GetArgs(interp, objc, objv,"o:Exception_getLocationCount self ",NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_gpstk__Exception,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    result = ((gpstk::Exception const *)arg1)->getLocationCount();
    
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_Exception_isRecoverable(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    gpstk::Exception *arg1 = (gpstk::Exception *) 0 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"o:Exception_isRecoverable self ",NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_gpstk__Exception,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    result = (bool)((gpstk::Exception const *)arg1)->isRecoverable();
    
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_Exception_setSeverity(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    gpstk::Exception *arg1 = (gpstk::Exception *) 0 ;
    gpstk::Exception::Severity *arg2 = 0 ;
    gpstk::Exception *result;
    gpstk::Exception::Severity temp2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"oo:Exception_setSeverity self sever ",NULL,NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_gpstk__Exception,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        long ltemp;
        if (Tcl_GetLongFromObj(interp, objv[2], &ltemp) != TCL_OK) {
            SWIG_fail;
        }
        temp2 = (gpstk::Exception::Severity) ltemp;
        arg2 = &temp2;
    }
    {
        gpstk::Exception &_result_ref = (arg1)->setSeverity((enum gpstk::Exception::Severity const &)*arg2);
        result = (gpstk::Exception *) &_result_ref;
    }
    
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_gpstk__Exception,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_Exception_addText(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    gpstk::Exception *arg1 = (gpstk::Exception *) 0 ;
    std::string *arg2 = 0 ;
    gpstk::Exception *result;
    std::string temp2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"oo:Exception_addText self errorText ",NULL,NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_gpstk__Exception,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        temp2 = std::string(Tcl_GetStringFromObj(objv[2],NULL));
        arg2 = &temp2;
    }
    {
        gpstk::Exception &_result_ref = (arg1)->addText((std::string const &)*arg2);
        result = (gpstk::Exception *) &_result_ref;
    }
    
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_gpstk__Exception,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_Exception_getText__SWIG_0(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    gpstk::Exception *arg1 = (gpstk::Exception *) 0 ;
    size_t *arg2 = 0 ;
    std::string result;
    size_t temp2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"oo:Exception_getText self index ",NULL,NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_gpstk__Exception,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        long ltemp;
        if (Tcl_GetLongFromObj(interp, objv[2], &ltemp) != TCL_OK) {
            SWIG_fail;
        }
        temp2 = (size_t) ltemp;
        arg2 = &temp2;
    }
    result = ((gpstk::Exception const *)arg1)->getText((size_t const &)*arg2);
    
    {
        Tcl_SetStringObj(Tcl_GetObjResult(interp),(char*)(&result)->c_str(),(&result)->length());
    }
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_Exception_getText__SWIG_1(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    gpstk::Exception *arg1 = (gpstk::Exception *) 0 ;
    std::string result;
    
    if (SWIG_GetArgs(interp, objc, objv,"o:Exception_getText self ",NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_gpstk__Exception,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    result = ((gpstk::Exception const *)arg1)->getText();
    
    {
        Tcl_SetStringObj(Tcl_GetObjResult(interp),(char*)(&result)->c_str(),(&result)->length());
    }
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_Exception_getText(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    Tcl_Obj *CONST *argv = objv+1;
    int argc = objc-1;
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_gpstk__Exception, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_Exception_getText__SWIG_1(clientData, interp, objc, objv);
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_gpstk__Exception, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_size_t, 0) == TCL_ERROR) {
                    _v = 0;
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                return _wrap_Exception_getText__SWIG_0(clientData, interp, objc, objv);
            }
        }
    }
    
    Tcl_SetResult(interp,(char *) "No matching function for overloaded 'Exception_getText'", TCL_STATIC);
    return TCL_ERROR;
}


static int
_wrap_Exception_getTextCount(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    gpstk::Exception *arg1 = (gpstk::Exception *) 0 ;
    size_t result;
    
    if (SWIG_GetArgs(interp, objc, objv,"o:Exception_getTextCount self ",NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_gpstk__Exception,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    result = ((gpstk::Exception const *)arg1)->getTextCount();
    
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_Exception_getName(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    gpstk::Exception *arg1 = (gpstk::Exception *) 0 ;
    std::string result;
    
    if (SWIG_GetArgs(interp, objc, objv,"o:Exception_getName self ",NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_gpstk__Exception,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    result = ((gpstk::Exception const *)arg1)->getName();
    
    {
        Tcl_SetStringObj(Tcl_GetObjResult(interp),(char*)(&result)->c_str(),(&result)->length());
    }
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_Exception_dump(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    gpstk::Exception *arg1 = (gpstk::Exception *) 0 ;
    std::ostream *arg2 = 0 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"oo:Exception_dump self s ",NULL,NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_gpstk__Exception,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[2], (void **) &arg2, SWIGTYPE_p_std__ostream,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    ((gpstk::Exception const *)arg1)->dump(*arg2);
    
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_istream__SWIG_1(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    std::ostream *arg1 = 0 ;
    gpstk::Exception *arg2 = 0 ;
    std::ostream *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"oo:istream s e ",NULL,NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_std__ostream,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[2], (void **) &arg2, SWIGTYPE_p_gpstk__Exception,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        std::ostream &_result_ref = operator <<(*arg1,(gpstk::Exception const &)*arg2);
        result = (std::ostream *) &_result_ref;
    }
    
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_std__ostream,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static void swig_delete_Exception(void *obj) {
gpstk::Exception *arg1 = (gpstk::Exception *) obj;
delete arg1;
}
static swig_method swig_gpstk_Exception_methods[] = {
    {"=", _wrap_Exception_e___}, 
    {"terminate", _wrap_Exception_terminate}, 
    {"getErrorId", _wrap_Exception_getErrorId}, 
    {"setErrorId", _wrap_Exception_setErrorId}, 
    {"addLocation", _wrap_Exception_addLocation}, 
    {"getLocation", _wrap_Exception_getLocation}, 
    {"getLocationCount", _wrap_Exception_getLocationCount}, 
    {"isRecoverable", _wrap_Exception_isRecoverable}, 
    {"setSeverity", _wrap_Exception_setSeverity}, 
    {"addText", _wrap_Exception_addText}, 
    {"getText", _wrap_Exception_getText}, 
    {"getTextCount", _wrap_Exception_getTextCount}, 
    {"getName", _wrap_Exception_getName}, 
    {"dump", _wrap_Exception_dump}, 
    {0,0}
};
static swig_attribute swig_gpstk_Exception_attributes[] = {
    {0,0,0}
};
static swig_class *swig_gpstk_Exception_bases[] = {0};
static char *swig_gpstk_Exception_base_names[] = {0};
swig_class _wrap_class_gpstk_Exception = { "Exception", &SWIGTYPE_p_gpstk__Exception,_wrap_new_Exception, swig_delete_Exception, swig_gpstk_Exception_methods, swig_gpstk_Exception_attributes, swig_gpstk_Exception_bases,swig_gpstk_Exception_base_names };
static int
_wrap_new_InvalidParameter__SWIG_0(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    gpstk::InvalidParameter *result;
    
    if (SWIG_GetArgs(interp, objc, objv,":new_InvalidParameter ") == TCL_ERROR) SWIG_fail;
    result = (gpstk::InvalidParameter *)new gpstk::InvalidParameter();
    
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_gpstk__InvalidParameter,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_new_InvalidParameter__SWIG_1(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    gpstk::InvalidParameter *arg1 = 0 ;
    gpstk::InvalidParameter *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"o:new_InvalidParameter a ",NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_gpstk__InvalidParameter,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    result = (gpstk::InvalidParameter *)new gpstk::InvalidParameter((gpstk::InvalidParameter const &)*arg1);
    
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_gpstk__InvalidParameter,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_new_InvalidParameter__SWIG_2(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    gpstk::Exception *arg1 = 0 ;
    gpstk::InvalidParameter *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"o:new_InvalidParameter a ",NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_gpstk__Exception,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    result = (gpstk::InvalidParameter *)new gpstk::InvalidParameter((gpstk::Exception const &)*arg1);
    
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_gpstk__InvalidParameter,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_new_InvalidParameter__SWIG_3(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    std::string arg1 ;
    unsigned long arg2 ;
    gpstk::Exception::Severity arg3 ;
    gpstk::InvalidParameter *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"oli:new_InvalidParameter a b c ",NULL,&arg2,&arg3) == TCL_ERROR) SWIG_fail;
    {
        arg1 = std::string(Tcl_GetStringFromObj(objv[1],NULL));
    }
    result = (gpstk::InvalidParameter *)new gpstk::InvalidParameter(arg1,arg2,(gpstk::Exception::Severity )arg3);
    
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_gpstk__InvalidParameter,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_new_InvalidParameter__SWIG_4(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    std::string arg1 ;
    unsigned long arg2 ;
    gpstk::InvalidParameter *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"ol:new_InvalidParameter a b ",NULL,&arg2) == TCL_ERROR) SWIG_fail;
    {
        arg1 = std::string(Tcl_GetStringFromObj(objv[1],NULL));
    }
    result = (gpstk::InvalidParameter *)new gpstk::InvalidParameter(arg1,arg2);
    
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_gpstk__InvalidParameter,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_new_InvalidParameter__SWIG_5(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    std::string arg1 ;
    gpstk::InvalidParameter *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"o:new_InvalidParameter a ",NULL) == TCL_ERROR) SWIG_fail;
    {
        arg1 = std::string(Tcl_GetStringFromObj(objv[1],NULL));
    }
    result = (gpstk::InvalidParameter *)new gpstk::InvalidParameter(arg1);
    
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_gpstk__InvalidParameter,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_new_InvalidParameter(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    Tcl_Obj *CONST *argv = objv+1;
    int argc = objc-1;
    if (argc == 0) {
        return _wrap_new_InvalidParameter__SWIG_0(clientData, interp, objc, objv);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_gpstk__InvalidParameter, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_new_InvalidParameter__SWIG_1(clientData, interp, objc, objv);
        }
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_gpstk__Exception, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_new_InvalidParameter__SWIG_2(clientData, interp, objc, objv);
        }
    }
    if (argc == 1) {
        int _v;
        {
            _v = 1;
        }
        if (_v) {
            return _wrap_new_InvalidParameter__SWIG_5(clientData, interp, objc, objv);
        }
    }
    if (argc == 2) {
        int _v;
        {
            _v = 1;
        }
        if (_v) {
            {
                long tmp;
                if (Tcl_GetLongFromObj(NULL,argv[1],&tmp) == TCL_ERROR) _v = 0;
                else _v = 1;
            }
            if (_v) {
                return _wrap_new_InvalidParameter__SWIG_4(clientData, interp, objc, objv);
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            _v = 1;
        }
        if (_v) {
            {
                long tmp;
                if (Tcl_GetLongFromObj(NULL,argv[1],&tmp) == TCL_ERROR) _v = 0;
                else _v = 1;
            }
            if (_v) {
                {
                    long tmp;
                    if (Tcl_GetLongFromObj(NULL,argv[2],&tmp) == TCL_ERROR) _v = 0;
                    else _v = 1;
                }
                if (_v) {
                    return _wrap_new_InvalidParameter__SWIG_3(clientData, interp, objc, objv);
                }
            }
        }
    }
    
    Tcl_SetResult(interp,(char *) "No matching function for overloaded 'new_InvalidParameter'", TCL_STATIC);
    return TCL_ERROR;
}


static int
_wrap_delete_InvalidParameter(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    gpstk::InvalidParameter *arg1 = (gpstk::InvalidParameter *) 0 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"o:delete_InvalidParameter self ",NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_gpstk__InvalidParameter,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    delete arg1;
    
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_InvalidParameter_getName(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    gpstk::InvalidParameter *arg1 = (gpstk::InvalidParameter *) 0 ;
    std::string result;
    
    if (SWIG_GetArgs(interp, objc, objv,"o:InvalidParameter_getName self ",NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_gpstk__InvalidParameter,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    result = ((gpstk::InvalidParameter const *)arg1)->getName();
    
    {
        Tcl_SetStringObj(Tcl_GetObjResult(interp),(char*)(&result)->c_str(),(&result)->length());
    }
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_InvalidParameter_e___(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    gpstk::InvalidParameter *arg1 = (gpstk::InvalidParameter *) 0 ;
    gpstk::InvalidParameter *arg2 = 0 ;
    gpstk::InvalidParameter *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"oo:InvalidParameter_= self kid ",NULL,NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_gpstk__InvalidParameter,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[2], (void **) &arg2, SWIGTYPE_p_gpstk__InvalidParameter,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        gpstk::InvalidParameter &_result_ref = (arg1)->operator =((gpstk::InvalidParameter const &)*arg2);
        result = (gpstk::InvalidParameter *) &_result_ref;
    }
    
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_gpstk__InvalidParameter,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_istream__SWIG_2(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    std::ostream *arg1 = 0 ;
    gpstk::InvalidParameter *arg2 = 0 ;
    std::ostream *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"oo:istream s c ",NULL,NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_std__ostream,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[2], (void **) &arg2, SWIGTYPE_p_gpstk__InvalidParameter,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        std::ostream &_result_ref = operator <<(*arg1,(gpstk::InvalidParameter const &)*arg2);
        result = (std::ostream *) &_result_ref;
    }
    
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_std__ostream,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static void swig_delete_InvalidParameter(void *obj) {
gpstk::InvalidParameter *arg1 = (gpstk::InvalidParameter *) obj;
delete arg1;
}
static swig_method swig_gpstk_InvalidParameter_methods[] = {
    {"getName", _wrap_InvalidParameter_getName}, 
    {"=", _wrap_InvalidParameter_e___}, 
    {0,0}
};
static swig_attribute swig_gpstk_InvalidParameter_attributes[] = {
    {0,0,0}
};
static swig_class *swig_gpstk_InvalidParameter_bases[] = {0,0};
static char *swig_gpstk_InvalidParameter_base_names[] = {"gpstk::Exception *",0};
swig_class _wrap_class_gpstk_InvalidParameter = { "InvalidParameter", &SWIGTYPE_p_gpstk__InvalidParameter,_wrap_new_InvalidParameter, swig_delete_InvalidParameter, swig_gpstk_InvalidParameter_methods, swig_gpstk_InvalidParameter_attributes, swig_gpstk_InvalidParameter_bases,swig_gpstk_InvalidParameter_base_names };
static int
_wrap_new_InvalidRequest__SWIG_0(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    gpstk::InvalidRequest *result;
    
    if (SWIG_GetArgs(interp, objc, objv,":new_InvalidRequest ") == TCL_ERROR) SWIG_fail;
    result = (gpstk::InvalidRequest *)new gpstk::InvalidRequest();
    
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_gpstk__InvalidRequest,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_new_InvalidRequest__SWIG_1(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    gpstk::InvalidRequest *arg1 = 0 ;
    gpstk::InvalidRequest *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"o:new_InvalidRequest a ",NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_gpstk__InvalidRequest,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    result = (gpstk::InvalidRequest *)new gpstk::InvalidRequest((gpstk::InvalidRequest const &)*arg1);
    
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_gpstk__InvalidRequest,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_new_InvalidRequest__SWIG_2(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    gpstk::Exception *arg1 = 0 ;
    gpstk::InvalidRequest *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"o:new_InvalidRequest a ",NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_gpstk__Exception,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    result = (gpstk::InvalidRequest *)new gpstk::InvalidRequest((gpstk::Exception const &)*arg1);
    
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_gpstk__InvalidRequest,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_new_InvalidRequest__SWIG_3(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    std::string arg1 ;
    unsigned long arg2 ;
    gpstk::Exception::Severity arg3 ;
    gpstk::InvalidRequest *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"oli:new_InvalidRequest a b c ",NULL,&arg2,&arg3) == TCL_ERROR) SWIG_fail;
    {
        arg1 = std::string(Tcl_GetStringFromObj(objv[1],NULL));
    }
    result = (gpstk::InvalidRequest *)new gpstk::InvalidRequest(arg1,arg2,(gpstk::Exception::Severity )arg3);
    
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_gpstk__InvalidRequest,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_new_InvalidRequest__SWIG_4(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    std::string arg1 ;
    unsigned long arg2 ;
    gpstk::InvalidRequest *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"ol:new_InvalidRequest a b ",NULL,&arg2) == TCL_ERROR) SWIG_fail;
    {
        arg1 = std::string(Tcl_GetStringFromObj(objv[1],NULL));
    }
    result = (gpstk::InvalidRequest *)new gpstk::InvalidRequest(arg1,arg2);
    
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_gpstk__InvalidRequest,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_new_InvalidRequest__SWIG_5(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    std::string arg1 ;
    gpstk::InvalidRequest *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"o:new_InvalidRequest a ",NULL) == TCL_ERROR) SWIG_fail;
    {
        arg1 = std::string(Tcl_GetStringFromObj(objv[1],NULL));
    }
    result = (gpstk::InvalidRequest *)new gpstk::InvalidRequest(arg1);
    
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_gpstk__InvalidRequest,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_new_InvalidRequest(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    Tcl_Obj *CONST *argv = objv+1;
    int argc = objc-1;
    if (argc == 0) {
        return _wrap_new_InvalidRequest__SWIG_0(clientData, interp, objc, objv);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_gpstk__InvalidRequest, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_new_InvalidRequest__SWIG_1(clientData, interp, objc, objv);
        }
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_gpstk__Exception, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_new_InvalidRequest__SWIG_2(clientData, interp, objc, objv);
        }
    }
    if (argc == 1) {
        int _v;
        {
            _v = 1;
        }
        if (_v) {
            return _wrap_new_InvalidRequest__SWIG_5(clientData, interp, objc, objv);
        }
    }
    if (argc == 2) {
        int _v;
        {
            _v = 1;
        }
        if (_v) {
            {
                long tmp;
                if (Tcl_GetLongFromObj(NULL,argv[1],&tmp) == TCL_ERROR) _v = 0;
                else _v = 1;
            }
            if (_v) {
                return _wrap_new_InvalidRequest__SWIG_4(clientData, interp, objc, objv);
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            _v = 1;
        }
        if (_v) {
            {
                long tmp;
                if (Tcl_GetLongFromObj(NULL,argv[1],&tmp) == TCL_ERROR) _v = 0;
                else _v = 1;
            }
            if (_v) {
                {
                    long tmp;
                    if (Tcl_GetLongFromObj(NULL,argv[2],&tmp) == TCL_ERROR) _v = 0;
                    else _v = 1;
                }
                if (_v) {
                    return _wrap_new_InvalidRequest__SWIG_3(clientData, interp, objc, objv);
                }
            }
        }
    }
    
    Tcl_SetResult(interp,(char *) "No matching function for overloaded 'new_InvalidRequest'", TCL_STATIC);
    return TCL_ERROR;
}


static int
_wrap_delete_InvalidRequest(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    gpstk::InvalidRequest *arg1 = (gpstk::InvalidRequest *) 0 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"o:delete_InvalidRequest self ",NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_gpstk__InvalidRequest,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    delete arg1;
    
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_InvalidRequest_getName(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    gpstk::InvalidRequest *arg1 = (gpstk::InvalidRequest *) 0 ;
    std::string result;
    
    if (SWIG_GetArgs(interp, objc, objv,"o:InvalidRequest_getName self ",NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_gpstk__InvalidRequest,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    result = ((gpstk::InvalidRequest const *)arg1)->getName();
    
    {
        Tcl_SetStringObj(Tcl_GetObjResult(interp),(char*)(&result)->c_str(),(&result)->length());
    }
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_InvalidRequest_e___(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    gpstk::InvalidRequest *arg1 = (gpstk::InvalidRequest *) 0 ;
    gpstk::InvalidRequest *arg2 = 0 ;
    gpstk::InvalidRequest *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"oo:InvalidRequest_= self kid ",NULL,NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_gpstk__InvalidRequest,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[2], (void **) &arg2, SWIGTYPE_p_gpstk__InvalidRequest,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        gpstk::InvalidRequest &_result_ref = (arg1)->operator =((gpstk::InvalidRequest const &)*arg2);
        result = (gpstk::InvalidRequest *) &_result_ref;
    }
    
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_gpstk__InvalidRequest,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_istream__SWIG_3(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    std::ostream *arg1 = 0 ;
    gpstk::InvalidRequest *arg2 = 0 ;
    std::ostream *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"oo:istream s c ",NULL,NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_std__ostream,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[2], (void **) &arg2, SWIGTYPE_p_gpstk__InvalidRequest,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        std::ostream &_result_ref = operator <<(*arg1,(gpstk::InvalidRequest const &)*arg2);
        result = (std::ostream *) &_result_ref;
    }
    
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_std__ostream,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static void swig_delete_InvalidRequest(void *obj) {
gpstk::InvalidRequest *arg1 = (gpstk::InvalidRequest *) obj;
delete arg1;
}
static swig_method swig_gpstk_InvalidRequest_methods[] = {
    {"getName", _wrap_InvalidRequest_getName}, 
    {"=", _wrap_InvalidRequest_e___}, 
    {0,0}
};
static swig_attribute swig_gpstk_InvalidRequest_attributes[] = {
    {0,0,0}
};
static swig_class *swig_gpstk_InvalidRequest_bases[] = {0,0};
static char *swig_gpstk_InvalidRequest_base_names[] = {"gpstk::Exception *",0};
swig_class _wrap_class_gpstk_InvalidRequest = { "InvalidRequest", &SWIGTYPE_p_gpstk__InvalidRequest,_wrap_new_InvalidRequest, swig_delete_InvalidRequest, swig_gpstk_InvalidRequest_methods, swig_gpstk_InvalidRequest_attributes, swig_gpstk_InvalidRequest_bases,swig_gpstk_InvalidRequest_base_names };
static int
_wrap_new_AssertionFailure__SWIG_0(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    gpstk::AssertionFailure *result;
    
    if (SWIG_GetArgs(interp, objc, objv,":new_AssertionFailure ") == TCL_ERROR) SWIG_fail;
    result = (gpstk::AssertionFailure *)new gpstk::AssertionFailure();
    
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_gpstk__AssertionFailure,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_new_AssertionFailure__SWIG_1(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    gpstk::AssertionFailure *arg1 = 0 ;
    gpstk::AssertionFailure *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"o:new_AssertionFailure a ",NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_gpstk__AssertionFailure,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    result = (gpstk::AssertionFailure *)new gpstk::AssertionFailure((gpstk::AssertionFailure const &)*arg1);
    
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_gpstk__AssertionFailure,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_new_AssertionFailure__SWIG_2(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    gpstk::Exception *arg1 = 0 ;
    gpstk::AssertionFailure *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"o:new_AssertionFailure a ",NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_gpstk__Exception,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    result = (gpstk::AssertionFailure *)new gpstk::AssertionFailure((gpstk::Exception const &)*arg1);
    
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_gpstk__AssertionFailure,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_new_AssertionFailure__SWIG_3(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    std::string arg1 ;
    unsigned long arg2 ;
    gpstk::Exception::Severity arg3 ;
    gpstk::AssertionFailure *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"oli:new_AssertionFailure a b c ",NULL,&arg2,&arg3) == TCL_ERROR) SWIG_fail;
    {
        arg1 = std::string(Tcl_GetStringFromObj(objv[1],NULL));
    }
    result = (gpstk::AssertionFailure *)new gpstk::AssertionFailure(arg1,arg2,(gpstk::Exception::Severity )arg3);
    
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_gpstk__AssertionFailure,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_new_AssertionFailure__SWIG_4(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    std::string arg1 ;
    unsigned long arg2 ;
    gpstk::AssertionFailure *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"ol:new_AssertionFailure a b ",NULL,&arg2) == TCL_ERROR) SWIG_fail;
    {
        arg1 = std::string(Tcl_GetStringFromObj(objv[1],NULL));
    }
    result = (gpstk::AssertionFailure *)new gpstk::AssertionFailure(arg1,arg2);
    
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_gpstk__AssertionFailure,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_new_AssertionFailure__SWIG_5(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    std::string arg1 ;
    gpstk::AssertionFailure *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"o:new_AssertionFailure a ",NULL) == TCL_ERROR) SWIG_fail;
    {
        arg1 = std::string(Tcl_GetStringFromObj(objv[1],NULL));
    }
    result = (gpstk::AssertionFailure *)new gpstk::AssertionFailure(arg1);
    
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_gpstk__AssertionFailure,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_new_AssertionFailure(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    Tcl_Obj *CONST *argv = objv+1;
    int argc = objc-1;
    if (argc == 0) {
        return _wrap_new_AssertionFailure__SWIG_0(clientData, interp, objc, objv);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_gpstk__AssertionFailure, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_new_AssertionFailure__SWIG_1(clientData, interp, objc, objv);
        }
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_gpstk__Exception, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_new_AssertionFailure__SWIG_2(clientData, interp, objc, objv);
        }
    }
    if (argc == 1) {
        int _v;
        {
            _v = 1;
        }
        if (_v) {
            return _wrap_new_AssertionFailure__SWIG_5(clientData, interp, objc, objv);
        }
    }
    if (argc == 2) {
        int _v;
        {
            _v = 1;
        }
        if (_v) {
            {
                long tmp;
                if (Tcl_GetLongFromObj(NULL,argv[1],&tmp) == TCL_ERROR) _v = 0;
                else _v = 1;
            }
            if (_v) {
                return _wrap_new_AssertionFailure__SWIG_4(clientData, interp, objc, objv);
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            _v = 1;
        }
        if (_v) {
            {
                long tmp;
                if (Tcl_GetLongFromObj(NULL,argv[1],&tmp) == TCL_ERROR) _v = 0;
                else _v = 1;
            }
            if (_v) {
                {
                    long tmp;
                    if (Tcl_GetLongFromObj(NULL,argv[2],&tmp) == TCL_ERROR) _v = 0;
                    else _v = 1;
                }
                if (_v) {
                    return _wrap_new_AssertionFailure__SWIG_3(clientData, interp, objc, objv);
                }
            }
        }
    }
    
    Tcl_SetResult(interp,(char *) "No matching function for overloaded 'new_AssertionFailure'", TCL_STATIC);
    return TCL_ERROR;
}


static int
_wrap_delete_AssertionFailure(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    gpstk::AssertionFailure *arg1 = (gpstk::AssertionFailure *) 0 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"o:delete_AssertionFailure self ",NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_gpstk__AssertionFailure,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    delete arg1;
    
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_AssertionFailure_getName(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    gpstk::AssertionFailure *arg1 = (gpstk::AssertionFailure *) 0 ;
    std::string result;
    
    if (SWIG_GetArgs(interp, objc, objv,"o:AssertionFailure_getName self ",NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_gpstk__AssertionFailure,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    result = ((gpstk::AssertionFailure const *)arg1)->getName();
    
    {
        Tcl_SetStringObj(Tcl_GetObjResult(interp),(char*)(&result)->c_str(),(&result)->length());
    }
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_AssertionFailure_e___(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    gpstk::AssertionFailure *arg1 = (gpstk::AssertionFailure *) 0 ;
    gpstk::AssertionFailure *arg2 = 0 ;
    gpstk::AssertionFailure *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"oo:AssertionFailure_= self kid ",NULL,NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_gpstk__AssertionFailure,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[2], (void **) &arg2, SWIGTYPE_p_gpstk__AssertionFailure,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        gpstk::AssertionFailure &_result_ref = (arg1)->operator =((gpstk::AssertionFailure const &)*arg2);
        result = (gpstk::AssertionFailure *) &_result_ref;
    }
    
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_gpstk__AssertionFailure,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_istream__SWIG_4(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    std::ostream *arg1 = 0 ;
    gpstk::AssertionFailure *arg2 = 0 ;
    std::ostream *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"oo:istream s c ",NULL,NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_std__ostream,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[2], (void **) &arg2, SWIGTYPE_p_gpstk__AssertionFailure,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        std::ostream &_result_ref = operator <<(*arg1,(gpstk::AssertionFailure const &)*arg2);
        result = (std::ostream *) &_result_ref;
    }
    
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_std__ostream,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static void swig_delete_AssertionFailure(void *obj) {
gpstk::AssertionFailure *arg1 = (gpstk::AssertionFailure *) obj;
delete arg1;
}
static swig_method swig_gpstk_AssertionFailure_methods[] = {
    {"getName", _wrap_AssertionFailure_getName}, 
    {"=", _wrap_AssertionFailure_e___}, 
    {0,0}
};
static swig_attribute swig_gpstk_AssertionFailure_attributes[] = {
    {0,0,0}
};
static swig_class *swig_gpstk_AssertionFailure_bases[] = {0,0};
static char *swig_gpstk_AssertionFailure_base_names[] = {"gpstk::Exception *",0};
swig_class _wrap_class_gpstk_AssertionFailure = { "AssertionFailure", &SWIGTYPE_p_gpstk__AssertionFailure,_wrap_new_AssertionFailure, swig_delete_AssertionFailure, swig_gpstk_AssertionFailure_methods, swig_gpstk_AssertionFailure_attributes, swig_gpstk_AssertionFailure_bases,swig_gpstk_AssertionFailure_base_names };
static int
_wrap_new_AccessError__SWIG_0(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    gpstk::AccessError *result;
    
    if (SWIG_GetArgs(interp, objc, objv,":new_AccessError ") == TCL_ERROR) SWIG_fail;
    result = (gpstk::AccessError *)new gpstk::AccessError();
    
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_gpstk__AccessError,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_new_AccessError__SWIG_1(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    gpstk::AccessError *arg1 = 0 ;
    gpstk::AccessError *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"o:new_AccessError a ",NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_gpstk__AccessError,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    result = (gpstk::AccessError *)new gpstk::AccessError((gpstk::AccessError const &)*arg1);
    
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_gpstk__AccessError,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_new_AccessError__SWIG_2(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    gpstk::Exception *arg1 = 0 ;
    gpstk::AccessError *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"o:new_AccessError a ",NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_gpstk__Exception,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    result = (gpstk::AccessError *)new gpstk::AccessError((gpstk::Exception const &)*arg1);
    
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_gpstk__AccessError,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_new_AccessError__SWIG_3(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    std::string arg1 ;
    unsigned long arg2 ;
    gpstk::Exception::Severity arg3 ;
    gpstk::AccessError *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"oli:new_AccessError a b c ",NULL,&arg2,&arg3) == TCL_ERROR) SWIG_fail;
    {
        arg1 = std::string(Tcl_GetStringFromObj(objv[1],NULL));
    }
    result = (gpstk::AccessError *)new gpstk::AccessError(arg1,arg2,(gpstk::Exception::Severity )arg3);
    
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_gpstk__AccessError,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_new_AccessError__SWIG_4(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    std::string arg1 ;
    unsigned long arg2 ;
    gpstk::AccessError *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"ol:new_AccessError a b ",NULL,&arg2) == TCL_ERROR) SWIG_fail;
    {
        arg1 = std::string(Tcl_GetStringFromObj(objv[1],NULL));
    }
    result = (gpstk::AccessError *)new gpstk::AccessError(arg1,arg2);
    
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_gpstk__AccessError,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_new_AccessError__SWIG_5(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    std::string arg1 ;
    gpstk::AccessError *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"o:new_AccessError a ",NULL) == TCL_ERROR) SWIG_fail;
    {
        arg1 = std::string(Tcl_GetStringFromObj(objv[1],NULL));
    }
    result = (gpstk::AccessError *)new gpstk::AccessError(arg1);
    
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_gpstk__AccessError,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_new_AccessError(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    Tcl_Obj *CONST *argv = objv+1;
    int argc = objc-1;
    if (argc == 0) {
        return _wrap_new_AccessError__SWIG_0(clientData, interp, objc, objv);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_gpstk__AccessError, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_new_AccessError__SWIG_1(clientData, interp, objc, objv);
        }
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_gpstk__Exception, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_new_AccessError__SWIG_2(clientData, interp, objc, objv);
        }
    }
    if (argc == 1) {
        int _v;
        {
            _v = 1;
        }
        if (_v) {
            return _wrap_new_AccessError__SWIG_5(clientData, interp, objc, objv);
        }
    }
    if (argc == 2) {
        int _v;
        {
            _v = 1;
        }
        if (_v) {
            {
                long tmp;
                if (Tcl_GetLongFromObj(NULL,argv[1],&tmp) == TCL_ERROR) _v = 0;
                else _v = 1;
            }
            if (_v) {
                return _wrap_new_AccessError__SWIG_4(clientData, interp, objc, objv);
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            _v = 1;
        }
        if (_v) {
            {
                long tmp;
                if (Tcl_GetLongFromObj(NULL,argv[1],&tmp) == TCL_ERROR) _v = 0;
                else _v = 1;
            }
            if (_v) {
                {
                    long tmp;
                    if (Tcl_GetLongFromObj(NULL,argv[2],&tmp) == TCL_ERROR) _v = 0;
                    else _v = 1;
                }
                if (_v) {
                    return _wrap_new_AccessError__SWIG_3(clientData, interp, objc, objv);
                }
            }
        }
    }
    
    Tcl_SetResult(interp,(char *) "No matching function for overloaded 'new_AccessError'", TCL_STATIC);
    return TCL_ERROR;
}


static int
_wrap_delete_AccessError(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    gpstk::AccessError *arg1 = (gpstk::AccessError *) 0 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"o:delete_AccessError self ",NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_gpstk__AccessError,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    delete arg1;
    
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_AccessError_getName(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    gpstk::AccessError *arg1 = (gpstk::AccessError *) 0 ;
    std::string result;
    
    if (SWIG_GetArgs(interp, objc, objv,"o:AccessError_getName self ",NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_gpstk__AccessError,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    result = ((gpstk::AccessError const *)arg1)->getName();
    
    {
        Tcl_SetStringObj(Tcl_GetObjResult(interp),(char*)(&result)->c_str(),(&result)->length());
    }
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_AccessError_e___(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    gpstk::AccessError *arg1 = (gpstk::AccessError *) 0 ;
    gpstk::AccessError *arg2 = 0 ;
    gpstk::AccessError *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"oo:AccessError_= self kid ",NULL,NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_gpstk__AccessError,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[2], (void **) &arg2, SWIGTYPE_p_gpstk__AccessError,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        gpstk::AccessError &_result_ref = (arg1)->operator =((gpstk::AccessError const &)*arg2);
        result = (gpstk::AccessError *) &_result_ref;
    }
    
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_gpstk__AccessError,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_istream__SWIG_5(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    std::ostream *arg1 = 0 ;
    gpstk::AccessError *arg2 = 0 ;
    std::ostream *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"oo:istream s c ",NULL,NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_std__ostream,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[2], (void **) &arg2, SWIGTYPE_p_gpstk__AccessError,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        std::ostream &_result_ref = operator <<(*arg1,(gpstk::AccessError const &)*arg2);
        result = (std::ostream *) &_result_ref;
    }
    
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_std__ostream,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static void swig_delete_AccessError(void *obj) {
gpstk::AccessError *arg1 = (gpstk::AccessError *) obj;
delete arg1;
}
static swig_method swig_gpstk_AccessError_methods[] = {
    {"getName", _wrap_AccessError_getName}, 
    {"=", _wrap_AccessError_e___}, 
    {0,0}
};
static swig_attribute swig_gpstk_AccessError_attributes[] = {
    {0,0,0}
};
static swig_class *swig_gpstk_AccessError_bases[] = {0,0};
static char *swig_gpstk_AccessError_base_names[] = {"gpstk::Exception *",0};
swig_class _wrap_class_gpstk_AccessError = { "AccessError", &SWIGTYPE_p_gpstk__AccessError,_wrap_new_AccessError, swig_delete_AccessError, swig_gpstk_AccessError_methods, swig_gpstk_AccessError_attributes, swig_gpstk_AccessError_bases,swig_gpstk_AccessError_base_names };
static int
_wrap_new_IndexOutOfBoundsException__SWIG_0(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    gpstk::IndexOutOfBoundsException *result;
    
    if (SWIG_GetArgs(interp, objc, objv,":new_IndexOutOfBoundsException ") == TCL_ERROR) SWIG_fail;
    result = (gpstk::IndexOutOfBoundsException *)new gpstk::IndexOutOfBoundsException();
    
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_gpstk__IndexOutOfBoundsException,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_new_IndexOutOfBoundsException__SWIG_1(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    gpstk::IndexOutOfBoundsException *arg1 = 0 ;
    gpstk::IndexOutOfBoundsException *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"o:new_IndexOutOfBoundsException a ",NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_gpstk__IndexOutOfBoundsException,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    result = (gpstk::IndexOutOfBoundsException *)new gpstk::IndexOutOfBoundsException((gpstk::IndexOutOfBoundsException const &)*arg1);
    
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_gpstk__IndexOutOfBoundsException,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_new_IndexOutOfBoundsException__SWIG_2(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    gpstk::Exception *arg1 = 0 ;
    gpstk::IndexOutOfBoundsException *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"o:new_IndexOutOfBoundsException a ",NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_gpstk__Exception,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    result = (gpstk::IndexOutOfBoundsException *)new gpstk::IndexOutOfBoundsException((gpstk::Exception const &)*arg1);
    
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_gpstk__IndexOutOfBoundsException,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_new_IndexOutOfBoundsException__SWIG_3(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    std::string arg1 ;
    unsigned long arg2 ;
    gpstk::Exception::Severity arg3 ;
    gpstk::IndexOutOfBoundsException *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"oli:new_IndexOutOfBoundsException a b c ",NULL,&arg2,&arg3) == TCL_ERROR) SWIG_fail;
    {
        arg1 = std::string(Tcl_GetStringFromObj(objv[1],NULL));
    }
    result = (gpstk::IndexOutOfBoundsException *)new gpstk::IndexOutOfBoundsException(arg1,arg2,(gpstk::Exception::Severity )arg3);
    
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_gpstk__IndexOutOfBoundsException,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_new_IndexOutOfBoundsException__SWIG_4(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    std::string arg1 ;
    unsigned long arg2 ;
    gpstk::IndexOutOfBoundsException *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"ol:new_IndexOutOfBoundsException a b ",NULL,&arg2) == TCL_ERROR) SWIG_fail;
    {
        arg1 = std::string(Tcl_GetStringFromObj(objv[1],NULL));
    }
    result = (gpstk::IndexOutOfBoundsException *)new gpstk::IndexOutOfBoundsException(arg1,arg2);
    
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_gpstk__IndexOutOfBoundsException,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_new_IndexOutOfBoundsException__SWIG_5(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    std::string arg1 ;
    gpstk::IndexOutOfBoundsException *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"o:new_IndexOutOfBoundsException a ",NULL) == TCL_ERROR) SWIG_fail;
    {
        arg1 = std::string(Tcl_GetStringFromObj(objv[1],NULL));
    }
    result = (gpstk::IndexOutOfBoundsException *)new gpstk::IndexOutOfBoundsException(arg1);
    
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_gpstk__IndexOutOfBoundsException,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_new_IndexOutOfBoundsException(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    Tcl_Obj *CONST *argv = objv+1;
    int argc = objc-1;
    if (argc == 0) {
        return _wrap_new_IndexOutOfBoundsException__SWIG_0(clientData, interp, objc, objv);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_gpstk__IndexOutOfBoundsException, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_new_IndexOutOfBoundsException__SWIG_1(clientData, interp, objc, objv);
        }
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_gpstk__Exception, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_new_IndexOutOfBoundsException__SWIG_2(clientData, interp, objc, objv);
        }
    }
    if (argc == 1) {
        int _v;
        {
            _v = 1;
        }
        if (_v) {
            return _wrap_new_IndexOutOfBoundsException__SWIG_5(clientData, interp, objc, objv);
        }
    }
    if (argc == 2) {
        int _v;
        {
            _v = 1;
        }
        if (_v) {
            {
                long tmp;
                if (Tcl_GetLongFromObj(NULL,argv[1],&tmp) == TCL_ERROR) _v = 0;
                else _v = 1;
            }
            if (_v) {
                return _wrap_new_IndexOutOfBoundsException__SWIG_4(clientData, interp, objc, objv);
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            _v = 1;
        }
        if (_v) {
            {
                long tmp;
                if (Tcl_GetLongFromObj(NULL,argv[1],&tmp) == TCL_ERROR) _v = 0;
                else _v = 1;
            }
            if (_v) {
                {
                    long tmp;
                    if (Tcl_GetLongFromObj(NULL,argv[2],&tmp) == TCL_ERROR) _v = 0;
                    else _v = 1;
                }
                if (_v) {
                    return _wrap_new_IndexOutOfBoundsException__SWIG_3(clientData, interp, objc, objv);
                }
            }
        }
    }
    
    Tcl_SetResult(interp,(char *) "No matching function for overloaded 'new_IndexOutOfBoundsException'", TCL_STATIC);
    return TCL_ERROR;
}


static int
_wrap_delete_IndexOutOfBoundsException(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    gpstk::IndexOutOfBoundsException *arg1 = (gpstk::IndexOutOfBoundsException *) 0 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"o:delete_IndexOutOfBoundsException self ",NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_gpstk__IndexOutOfBoundsException,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    delete arg1;
    
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_IndexOutOfBoundsException_getName(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    gpstk::IndexOutOfBoundsException *arg1 = (gpstk::IndexOutOfBoundsException *) 0 ;
    std::string result;
    
    if (SWIG_GetArgs(interp, objc, objv,"o:IndexOutOfBoundsException_getName self ",NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_gpstk__IndexOutOfBoundsException,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    result = ((gpstk::IndexOutOfBoundsException const *)arg1)->getName();
    
    {
        Tcl_SetStringObj(Tcl_GetObjResult(interp),(char*)(&result)->c_str(),(&result)->length());
    }
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_IndexOutOfBoundsException_e___(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    gpstk::IndexOutOfBoundsException *arg1 = (gpstk::IndexOutOfBoundsException *) 0 ;
    gpstk::IndexOutOfBoundsException *arg2 = 0 ;
    gpstk::IndexOutOfBoundsException *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"oo:IndexOutOfBoundsException_= self kid ",NULL,NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_gpstk__IndexOutOfBoundsException,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[2], (void **) &arg2, SWIGTYPE_p_gpstk__IndexOutOfBoundsException,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        gpstk::IndexOutOfBoundsException &_result_ref = (arg1)->operator =((gpstk::IndexOutOfBoundsException const &)*arg2);
        result = (gpstk::IndexOutOfBoundsException *) &_result_ref;
    }
    
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_gpstk__IndexOutOfBoundsException,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_istream__SWIG_6(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    std::ostream *arg1 = 0 ;
    gpstk::IndexOutOfBoundsException *arg2 = 0 ;
    std::ostream *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"oo:istream s c ",NULL,NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_std__ostream,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[2], (void **) &arg2, SWIGTYPE_p_gpstk__IndexOutOfBoundsException,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        std::ostream &_result_ref = operator <<(*arg1,(gpstk::IndexOutOfBoundsException const &)*arg2);
        result = (std::ostream *) &_result_ref;
    }
    
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_std__ostream,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static void swig_delete_IndexOutOfBoundsException(void *obj) {
gpstk::IndexOutOfBoundsException *arg1 = (gpstk::IndexOutOfBoundsException *) obj;
delete arg1;
}
static swig_method swig_gpstk_IndexOutOfBoundsException_methods[] = {
    {"getName", _wrap_IndexOutOfBoundsException_getName}, 
    {"=", _wrap_IndexOutOfBoundsException_e___}, 
    {0,0}
};
static swig_attribute swig_gpstk_IndexOutOfBoundsException_attributes[] = {
    {0,0,0}
};
static swig_class *swig_gpstk_IndexOutOfBoundsException_bases[] = {0,0};
static char *swig_gpstk_IndexOutOfBoundsException_base_names[] = {"gpstk::Exception *",0};
swig_class _wrap_class_gpstk_IndexOutOfBoundsException = { "IndexOutOfBoundsException", &SWIGTYPE_p_gpstk__IndexOutOfBoundsException,_wrap_new_IndexOutOfBoundsException, swig_delete_IndexOutOfBoundsException, swig_gpstk_IndexOutOfBoundsException_methods, swig_gpstk_IndexOutOfBoundsException_attributes, swig_gpstk_IndexOutOfBoundsException_bases,swig_gpstk_IndexOutOfBoundsException_base_names };
static int
_wrap_new_InvalidArgumentException__SWIG_0(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    gpstk::InvalidArgumentException *result;
    
    if (SWIG_GetArgs(interp, objc, objv,":new_InvalidArgumentException ") == TCL_ERROR) SWIG_fail;
    result = (gpstk::InvalidArgumentException *)new gpstk::InvalidArgumentException();
    
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_gpstk__InvalidArgumentException,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_new_InvalidArgumentException__SWIG_1(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    gpstk::InvalidArgumentException *arg1 = 0 ;
    gpstk::InvalidArgumentException *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"o:new_InvalidArgumentException a ",NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_gpstk__InvalidArgumentException,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    result = (gpstk::InvalidArgumentException *)new gpstk::InvalidArgumentException((gpstk::InvalidArgumentException const &)*arg1);
    
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_gpstk__InvalidArgumentException,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_new_InvalidArgumentException__SWIG_2(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    gpstk::Exception *arg1 = 0 ;
    gpstk::InvalidArgumentException *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"o:new_InvalidArgumentException a ",NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_gpstk__Exception,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    result = (gpstk::InvalidArgumentException *)new gpstk::InvalidArgumentException((gpstk::Exception const &)*arg1);
    
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_gpstk__InvalidArgumentException,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_new_InvalidArgumentException__SWIG_3(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    std::string arg1 ;
    unsigned long arg2 ;
    gpstk::Exception::Severity arg3 ;
    gpstk::InvalidArgumentException *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"oli:new_InvalidArgumentException a b c ",NULL,&arg2,&arg3) == TCL_ERROR) SWIG_fail;
    {
        arg1 = std::string(Tcl_GetStringFromObj(objv[1],NULL));
    }
    result = (gpstk::InvalidArgumentException *)new gpstk::InvalidArgumentException(arg1,arg2,(gpstk::Exception::Severity )arg3);
    
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_gpstk__InvalidArgumentException,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_new_InvalidArgumentException__SWIG_4(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    std::string arg1 ;
    unsigned long arg2 ;
    gpstk::InvalidArgumentException *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"ol:new_InvalidArgumentException a b ",NULL,&arg2) == TCL_ERROR) SWIG_fail;
    {
        arg1 = std::string(Tcl_GetStringFromObj(objv[1],NULL));
    }
    result = (gpstk::InvalidArgumentException *)new gpstk::InvalidArgumentException(arg1,arg2);
    
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_gpstk__InvalidArgumentException,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_new_InvalidArgumentException__SWIG_5(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    std::string arg1 ;
    gpstk::InvalidArgumentException *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"o:new_InvalidArgumentException a ",NULL) == TCL_ERROR) SWIG_fail;
    {
        arg1 = std::string(Tcl_GetStringFromObj(objv[1],NULL));
    }
    result = (gpstk::InvalidArgumentException *)new gpstk::InvalidArgumentException(arg1);
    
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_gpstk__InvalidArgumentException,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_new_InvalidArgumentException(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    Tcl_Obj *CONST *argv = objv+1;
    int argc = objc-1;
    if (argc == 0) {
        return _wrap_new_InvalidArgumentException__SWIG_0(clientData, interp, objc, objv);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_gpstk__InvalidArgumentException, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_new_InvalidArgumentException__SWIG_1(clientData, interp, objc, objv);
        }
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_gpstk__Exception, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_new_InvalidArgumentException__SWIG_2(clientData, interp, objc, objv);
        }
    }
    if (argc == 1) {
        int _v;
        {
            _v = 1;
        }
        if (_v) {
            return _wrap_new_InvalidArgumentException__SWIG_5(clientData, interp, objc, objv);
        }
    }
    if (argc == 2) {
        int _v;
        {
            _v = 1;
        }
        if (_v) {
            {
                long tmp;
                if (Tcl_GetLongFromObj(NULL,argv[1],&tmp) == TCL_ERROR) _v = 0;
                else _v = 1;
            }
            if (_v) {
                return _wrap_new_InvalidArgumentException__SWIG_4(clientData, interp, objc, objv);
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            _v = 1;
        }
        if (_v) {
            {
                long tmp;
                if (Tcl_GetLongFromObj(NULL,argv[1],&tmp) == TCL_ERROR) _v = 0;
                else _v = 1;
            }
            if (_v) {
                {
                    long tmp;
                    if (Tcl_GetLongFromObj(NULL,argv[2],&tmp) == TCL_ERROR) _v = 0;
                    else _v = 1;
                }
                if (_v) {
                    return _wrap_new_InvalidArgumentException__SWIG_3(clientData, interp, objc, objv);
                }
            }
        }
    }
    
    Tcl_SetResult(interp,(char *) "No matching function for overloaded 'new_InvalidArgumentException'", TCL_STATIC);
    return TCL_ERROR;
}


static int
_wrap_delete_InvalidArgumentException(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    gpstk::InvalidArgumentException *arg1 = (gpstk::InvalidArgumentException *) 0 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"o:delete_InvalidArgumentException self ",NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_gpstk__InvalidArgumentException,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    delete arg1;
    
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_InvalidArgumentException_getName(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    gpstk::InvalidArgumentException *arg1 = (gpstk::InvalidArgumentException *) 0 ;
    std::string result;
    
    if (SWIG_GetArgs(interp, objc, objv,"o:InvalidArgumentException_getName self ",NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_gpstk__InvalidArgumentException,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    result = ((gpstk::InvalidArgumentException const *)arg1)->getName();
    
    {
        Tcl_SetStringObj(Tcl_GetObjResult(interp),(char*)(&result)->c_str(),(&result)->length());
    }
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_InvalidArgumentException_e___(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    gpstk::InvalidArgumentException *arg1 = (gpstk::InvalidArgumentException *) 0 ;
    gpstk::InvalidArgumentException *arg2 = 0 ;
    gpstk::InvalidArgumentException *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"oo:InvalidArgumentException_= self kid ",NULL,NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_gpstk__InvalidArgumentException,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[2], (void **) &arg2, SWIGTYPE_p_gpstk__InvalidArgumentException,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        gpstk::InvalidArgumentException &_result_ref = (arg1)->operator =((gpstk::InvalidArgumentException const &)*arg2);
        result = (gpstk::InvalidArgumentException *) &_result_ref;
    }
    
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_gpstk__InvalidArgumentException,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_istream__SWIG_7(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    std::ostream *arg1 = 0 ;
    gpstk::InvalidArgumentException *arg2 = 0 ;
    std::ostream *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"oo:istream s c ",NULL,NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_std__ostream,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[2], (void **) &arg2, SWIGTYPE_p_gpstk__InvalidArgumentException,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        std::ostream &_result_ref = operator <<(*arg1,(gpstk::InvalidArgumentException const &)*arg2);
        result = (std::ostream *) &_result_ref;
    }
    
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_std__ostream,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static void swig_delete_InvalidArgumentException(void *obj) {
gpstk::InvalidArgumentException *arg1 = (gpstk::InvalidArgumentException *) obj;
delete arg1;
}
static swig_method swig_gpstk_InvalidArgumentException_methods[] = {
    {"getName", _wrap_InvalidArgumentException_getName}, 
    {"=", _wrap_InvalidArgumentException_e___}, 
    {0,0}
};
static swig_attribute swig_gpstk_InvalidArgumentException_attributes[] = {
    {0,0,0}
};
static swig_class *swig_gpstk_InvalidArgumentException_bases[] = {0,0};
static char *swig_gpstk_InvalidArgumentException_base_names[] = {"gpstk::Exception *",0};
swig_class _wrap_class_gpstk_InvalidArgumentException = { "InvalidArgumentException", &SWIGTYPE_p_gpstk__InvalidArgumentException,_wrap_new_InvalidArgumentException, swig_delete_InvalidArgumentException, swig_gpstk_InvalidArgumentException_methods, swig_gpstk_InvalidArgumentException_attributes, swig_gpstk_InvalidArgumentException_bases,swig_gpstk_InvalidArgumentException_base_names };
static int
_wrap_new_ConfigurationException__SWIG_0(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    gpstk::ConfigurationException *result;
    
    if (SWIG_GetArgs(interp, objc, objv,":new_ConfigurationException ") == TCL_ERROR) SWIG_fail;
    result = (gpstk::ConfigurationException *)new gpstk::ConfigurationException();
    
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_gpstk__ConfigurationException,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_new_ConfigurationException__SWIG_1(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    gpstk::ConfigurationException *arg1 = 0 ;
    gpstk::ConfigurationException *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"o:new_ConfigurationException a ",NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_gpstk__ConfigurationException,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    result = (gpstk::ConfigurationException *)new gpstk::ConfigurationException((gpstk::ConfigurationException const &)*arg1);
    
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_gpstk__ConfigurationException,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_new_ConfigurationException__SWIG_2(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    gpstk::Exception *arg1 = 0 ;
    gpstk::ConfigurationException *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"o:new_ConfigurationException a ",NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_gpstk__Exception,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    result = (gpstk::ConfigurationException *)new gpstk::ConfigurationException((gpstk::Exception const &)*arg1);
    
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_gpstk__ConfigurationException,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_new_ConfigurationException__SWIG_3(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    std::string arg1 ;
    unsigned long arg2 ;
    gpstk::Exception::Severity arg3 ;
    gpstk::ConfigurationException *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"oli:new_ConfigurationException a b c ",NULL,&arg2,&arg3) == TCL_ERROR) SWIG_fail;
    {
        arg1 = std::string(Tcl_GetStringFromObj(objv[1],NULL));
    }
    result = (gpstk::ConfigurationException *)new gpstk::ConfigurationException(arg1,arg2,(gpstk::Exception::Severity )arg3);
    
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_gpstk__ConfigurationException,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_new_ConfigurationException__SWIG_4(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    std::string arg1 ;
    unsigned long arg2 ;
    gpstk::ConfigurationException *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"ol:new_ConfigurationException a b ",NULL,&arg2) == TCL_ERROR) SWIG_fail;
    {
        arg1 = std::string(Tcl_GetStringFromObj(objv[1],NULL));
    }
    result = (gpstk::ConfigurationException *)new gpstk::ConfigurationException(arg1,arg2);
    
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_gpstk__ConfigurationException,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_new_ConfigurationException__SWIG_5(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    std::string arg1 ;
    gpstk::ConfigurationException *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"o:new_ConfigurationException a ",NULL) == TCL_ERROR) SWIG_fail;
    {
        arg1 = std::string(Tcl_GetStringFromObj(objv[1],NULL));
    }
    result = (gpstk::ConfigurationException *)new gpstk::ConfigurationException(arg1);
    
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_gpstk__ConfigurationException,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_new_ConfigurationException(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    Tcl_Obj *CONST *argv = objv+1;
    int argc = objc-1;
    if (argc == 0) {
        return _wrap_new_ConfigurationException__SWIG_0(clientData, interp, objc, objv);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_gpstk__ConfigurationException, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_new_ConfigurationException__SWIG_1(clientData, interp, objc, objv);
        }
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_gpstk__Exception, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_new_ConfigurationException__SWIG_2(clientData, interp, objc, objv);
        }
    }
    if (argc == 1) {
        int _v;
        {
            _v = 1;
        }
        if (_v) {
            return _wrap_new_ConfigurationException__SWIG_5(clientData, interp, objc, objv);
        }
    }
    if (argc == 2) {
        int _v;
        {
            _v = 1;
        }
        if (_v) {
            {
                long tmp;
                if (Tcl_GetLongFromObj(NULL,argv[1],&tmp) == TCL_ERROR) _v = 0;
                else _v = 1;
            }
            if (_v) {
                return _wrap_new_ConfigurationException__SWIG_4(clientData, interp, objc, objv);
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            _v = 1;
        }
        if (_v) {
            {
                long tmp;
                if (Tcl_GetLongFromObj(NULL,argv[1],&tmp) == TCL_ERROR) _v = 0;
                else _v = 1;
            }
            if (_v) {
                {
                    long tmp;
                    if (Tcl_GetLongFromObj(NULL,argv[2],&tmp) == TCL_ERROR) _v = 0;
                    else _v = 1;
                }
                if (_v) {
                    return _wrap_new_ConfigurationException__SWIG_3(clientData, interp, objc, objv);
                }
            }
        }
    }
    
    Tcl_SetResult(interp,(char *) "No matching function for overloaded 'new_ConfigurationException'", TCL_STATIC);
    return TCL_ERROR;
}


static int
_wrap_delete_ConfigurationException(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    gpstk::ConfigurationException *arg1 = (gpstk::ConfigurationException *) 0 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"o:delete_ConfigurationException self ",NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_gpstk__ConfigurationException,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    delete arg1;
    
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_ConfigurationException_getName(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    gpstk::ConfigurationException *arg1 = (gpstk::ConfigurationException *) 0 ;
    std::string result;
    
    if (SWIG_GetArgs(interp, objc, objv,"o:ConfigurationException_getName self ",NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_gpstk__ConfigurationException,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    result = ((gpstk::ConfigurationException const *)arg1)->getName();
    
    {
        Tcl_SetStringObj(Tcl_GetObjResult(interp),(char*)(&result)->c_str(),(&result)->length());
    }
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_ConfigurationException_e___(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    gpstk::ConfigurationException *arg1 = (gpstk::ConfigurationException *) 0 ;
    gpstk::ConfigurationException *arg2 = 0 ;
    gpstk::ConfigurationException *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"oo:ConfigurationException_= self kid ",NULL,NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_gpstk__ConfigurationException,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[2], (void **) &arg2, SWIGTYPE_p_gpstk__ConfigurationException,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        gpstk::ConfigurationException &_result_ref = (arg1)->operator =((gpstk::ConfigurationException const &)*arg2);
        result = (gpstk::ConfigurationException *) &_result_ref;
    }
    
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_gpstk__ConfigurationException,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_istream__SWIG_8(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    std::ostream *arg1 = 0 ;
    gpstk::ConfigurationException *arg2 = 0 ;
    std::ostream *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"oo:istream s c ",NULL,NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_std__ostream,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[2], (void **) &arg2, SWIGTYPE_p_gpstk__ConfigurationException,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        std::ostream &_result_ref = operator <<(*arg1,(gpstk::ConfigurationException const &)*arg2);
        result = (std::ostream *) &_result_ref;
    }
    
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_std__ostream,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static void swig_delete_ConfigurationException(void *obj) {
gpstk::ConfigurationException *arg1 = (gpstk::ConfigurationException *) obj;
delete arg1;
}
static swig_method swig_gpstk_ConfigurationException_methods[] = {
    {"getName", _wrap_ConfigurationException_getName}, 
    {"=", _wrap_ConfigurationException_e___}, 
    {0,0}
};
static swig_attribute swig_gpstk_ConfigurationException_attributes[] = {
    {0,0,0}
};
static swig_class *swig_gpstk_ConfigurationException_bases[] = {0,0};
static char *swig_gpstk_ConfigurationException_base_names[] = {"gpstk::Exception *",0};
swig_class _wrap_class_gpstk_ConfigurationException = { "ConfigurationException", &SWIGTYPE_p_gpstk__ConfigurationException,_wrap_new_ConfigurationException, swig_delete_ConfigurationException, swig_gpstk_ConfigurationException_methods, swig_gpstk_ConfigurationException_attributes, swig_gpstk_ConfigurationException_bases,swig_gpstk_ConfigurationException_base_names };
static int
_wrap_new_FileMissingException__SWIG_0(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    gpstk::FileMissingException *result;
    
    if (SWIG_GetArgs(interp, objc, objv,":new_FileMissingException ") == TCL_ERROR) SWIG_fail;
    result = (gpstk::FileMissingException *)new gpstk::FileMissingException();
    
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_gpstk__FileMissingException,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_new_FileMissingException__SWIG_1(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    gpstk::FileMissingException *arg1 = 0 ;
    gpstk::FileMissingException *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"o:new_FileMissingException a ",NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_gpstk__FileMissingException,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    result = (gpstk::FileMissingException *)new gpstk::FileMissingException((gpstk::FileMissingException const &)*arg1);
    
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_gpstk__FileMissingException,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_new_FileMissingException__SWIG_2(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    gpstk::Exception *arg1 = 0 ;
    gpstk::FileMissingException *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"o:new_FileMissingException a ",NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_gpstk__Exception,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    result = (gpstk::FileMissingException *)new gpstk::FileMissingException((gpstk::Exception const &)*arg1);
    
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_gpstk__FileMissingException,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_new_FileMissingException__SWIG_3(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    std::string arg1 ;
    unsigned long arg2 ;
    gpstk::Exception::Severity arg3 ;
    gpstk::FileMissingException *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"oli:new_FileMissingException a b c ",NULL,&arg2,&arg3) == TCL_ERROR) SWIG_fail;
    {
        arg1 = std::string(Tcl_GetStringFromObj(objv[1],NULL));
    }
    result = (gpstk::FileMissingException *)new gpstk::FileMissingException(arg1,arg2,(gpstk::Exception::Severity )arg3);
    
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_gpstk__FileMissingException,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_new_FileMissingException__SWIG_4(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    std::string arg1 ;
    unsigned long arg2 ;
    gpstk::FileMissingException *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"ol:new_FileMissingException a b ",NULL,&arg2) == TCL_ERROR) SWIG_fail;
    {
        arg1 = std::string(Tcl_GetStringFromObj(objv[1],NULL));
    }
    result = (gpstk::FileMissingException *)new gpstk::FileMissingException(arg1,arg2);
    
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_gpstk__FileMissingException,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_new_FileMissingException__SWIG_5(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    std::string arg1 ;
    gpstk::FileMissingException *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"o:new_FileMissingException a ",NULL) == TCL_ERROR) SWIG_fail;
    {
        arg1 = std::string(Tcl_GetStringFromObj(objv[1],NULL));
    }
    result = (gpstk::FileMissingException *)new gpstk::FileMissingException(arg1);
    
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_gpstk__FileMissingException,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_new_FileMissingException(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    Tcl_Obj *CONST *argv = objv+1;
    int argc = objc-1;
    if (argc == 0) {
        return _wrap_new_FileMissingException__SWIG_0(clientData, interp, objc, objv);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_gpstk__FileMissingException, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_new_FileMissingException__SWIG_1(clientData, interp, objc, objv);
        }
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_gpstk__Exception, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_new_FileMissingException__SWIG_2(clientData, interp, objc, objv);
        }
    }
    if (argc == 1) {
        int _v;
        {
            _v = 1;
        }
        if (_v) {
            return _wrap_new_FileMissingException__SWIG_5(clientData, interp, objc, objv);
        }
    }
    if (argc == 2) {
        int _v;
        {
            _v = 1;
        }
        if (_v) {
            {
                long tmp;
                if (Tcl_GetLongFromObj(NULL,argv[1],&tmp) == TCL_ERROR) _v = 0;
                else _v = 1;
            }
            if (_v) {
                return _wrap_new_FileMissingException__SWIG_4(clientData, interp, objc, objv);
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            _v = 1;
        }
        if (_v) {
            {
                long tmp;
                if (Tcl_GetLongFromObj(NULL,argv[1],&tmp) == TCL_ERROR) _v = 0;
                else _v = 1;
            }
            if (_v) {
                {
                    long tmp;
                    if (Tcl_GetLongFromObj(NULL,argv[2],&tmp) == TCL_ERROR) _v = 0;
                    else _v = 1;
                }
                if (_v) {
                    return _wrap_new_FileMissingException__SWIG_3(clientData, interp, objc, objv);
                }
            }
        }
    }
    
    Tcl_SetResult(interp,(char *) "No matching function for overloaded 'new_FileMissingException'", TCL_STATIC);
    return TCL_ERROR;
}


static int
_wrap_delete_FileMissingException(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    gpstk::FileMissingException *arg1 = (gpstk::FileMissingException *) 0 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"o:delete_FileMissingException self ",NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_gpstk__FileMissingException,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    delete arg1;
    
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_FileMissingException_getName(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    gpstk::FileMissingException *arg1 = (gpstk::FileMissingException *) 0 ;
    std::string result;
    
    if (SWIG_GetArgs(interp, objc, objv,"o:FileMissingException_getName self ",NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_gpstk__FileMissingException,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    result = ((gpstk::FileMissingException const *)arg1)->getName();
    
    {
        Tcl_SetStringObj(Tcl_GetObjResult(interp),(char*)(&result)->c_str(),(&result)->length());
    }
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_FileMissingException_e___(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    gpstk::FileMissingException *arg1 = (gpstk::FileMissingException *) 0 ;
    gpstk::FileMissingException *arg2 = 0 ;
    gpstk::FileMissingException *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"oo:FileMissingException_= self kid ",NULL,NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_gpstk__FileMissingException,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[2], (void **) &arg2, SWIGTYPE_p_gpstk__FileMissingException,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        gpstk::FileMissingException &_result_ref = (arg1)->operator =((gpstk::FileMissingException const &)*arg2);
        result = (gpstk::FileMissingException *) &_result_ref;
    }
    
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_gpstk__FileMissingException,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_istream__SWIG_9(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    std::ostream *arg1 = 0 ;
    gpstk::FileMissingException *arg2 = 0 ;
    std::ostream *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"oo:istream s c ",NULL,NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_std__ostream,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[2], (void **) &arg2, SWIGTYPE_p_gpstk__FileMissingException,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        std::ostream &_result_ref = operator <<(*arg1,(gpstk::FileMissingException const &)*arg2);
        result = (std::ostream *) &_result_ref;
    }
    
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_std__ostream,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static void swig_delete_FileMissingException(void *obj) {
gpstk::FileMissingException *arg1 = (gpstk::FileMissingException *) obj;
delete arg1;
}
static swig_method swig_gpstk_FileMissingException_methods[] = {
    {"getName", _wrap_FileMissingException_getName}, 
    {"=", _wrap_FileMissingException_e___}, 
    {0,0}
};
static swig_attribute swig_gpstk_FileMissingException_attributes[] = {
    {0,0,0}
};
static swig_class *swig_gpstk_FileMissingException_bases[] = {0,0};
static char *swig_gpstk_FileMissingException_base_names[] = {"gpstk::Exception *",0};
swig_class _wrap_class_gpstk_FileMissingException = { "FileMissingException", &SWIGTYPE_p_gpstk__FileMissingException,_wrap_new_FileMissingException, swig_delete_FileMissingException, swig_gpstk_FileMissingException_methods, swig_gpstk_FileMissingException_attributes, swig_gpstk_FileMissingException_bases,swig_gpstk_FileMissingException_base_names };
static int
_wrap_new_SystemSemaphoreException__SWIG_0(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    gpstk::SystemSemaphoreException *result;
    
    if (SWIG_GetArgs(interp, objc, objv,":new_SystemSemaphoreException ") == TCL_ERROR) SWIG_fail;
    result = (gpstk::SystemSemaphoreException *)new gpstk::SystemSemaphoreException();
    
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_gpstk__SystemSemaphoreException,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_new_SystemSemaphoreException__SWIG_1(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    gpstk::SystemSemaphoreException *arg1 = 0 ;
    gpstk::SystemSemaphoreException *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"o:new_SystemSemaphoreException a ",NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_gpstk__SystemSemaphoreException,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    result = (gpstk::SystemSemaphoreException *)new gpstk::SystemSemaphoreException((gpstk::SystemSemaphoreException const &)*arg1);
    
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_gpstk__SystemSemaphoreException,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_new_SystemSemaphoreException__SWIG_2(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    gpstk::Exception *arg1 = 0 ;
    gpstk::SystemSemaphoreException *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"o:new_SystemSemaphoreException a ",NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_gpstk__Exception,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    result = (gpstk::SystemSemaphoreException *)new gpstk::SystemSemaphoreException((gpstk::Exception const &)*arg1);
    
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_gpstk__SystemSemaphoreException,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_new_SystemSemaphoreException__SWIG_3(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    std::string arg1 ;
    unsigned long arg2 ;
    gpstk::Exception::Severity arg3 ;
    gpstk::SystemSemaphoreException *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"oli:new_SystemSemaphoreException a b c ",NULL,&arg2,&arg3) == TCL_ERROR) SWIG_fail;
    {
        arg1 = std::string(Tcl_GetStringFromObj(objv[1],NULL));
    }
    result = (gpstk::SystemSemaphoreException *)new gpstk::SystemSemaphoreException(arg1,arg2,(gpstk::Exception::Severity )arg3);
    
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_gpstk__SystemSemaphoreException,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_new_SystemSemaphoreException__SWIG_4(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    std::string arg1 ;
    unsigned long arg2 ;
    gpstk::SystemSemaphoreException *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"ol:new_SystemSemaphoreException a b ",NULL,&arg2) == TCL_ERROR) SWIG_fail;
    {
        arg1 = std::string(Tcl_GetStringFromObj(objv[1],NULL));
    }
    result = (gpstk::SystemSemaphoreException *)new gpstk::SystemSemaphoreException(arg1,arg2);
    
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_gpstk__SystemSemaphoreException,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_new_SystemSemaphoreException__SWIG_5(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    std::string arg1 ;
    gpstk::SystemSemaphoreException *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"o:new_SystemSemaphoreException a ",NULL) == TCL_ERROR) SWIG_fail;
    {
        arg1 = std::string(Tcl_GetStringFromObj(objv[1],NULL));
    }
    result = (gpstk::SystemSemaphoreException *)new gpstk::SystemSemaphoreException(arg1);
    
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_gpstk__SystemSemaphoreException,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_new_SystemSemaphoreException(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    Tcl_Obj *CONST *argv = objv+1;
    int argc = objc-1;
    if (argc == 0) {
        return _wrap_new_SystemSemaphoreException__SWIG_0(clientData, interp, objc, objv);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_gpstk__SystemSemaphoreException, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_new_SystemSemaphoreException__SWIG_1(clientData, interp, objc, objv);
        }
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_gpstk__Exception, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_new_SystemSemaphoreException__SWIG_2(clientData, interp, objc, objv);
        }
    }
    if (argc == 1) {
        int _v;
        {
            _v = 1;
        }
        if (_v) {
            return _wrap_new_SystemSemaphoreException__SWIG_5(clientData, interp, objc, objv);
        }
    }
    if (argc == 2) {
        int _v;
        {
            _v = 1;
        }
        if (_v) {
            {
                long tmp;
                if (Tcl_GetLongFromObj(NULL,argv[1],&tmp) == TCL_ERROR) _v = 0;
                else _v = 1;
            }
            if (_v) {
                return _wrap_new_SystemSemaphoreException__SWIG_4(clientData, interp, objc, objv);
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            _v = 1;
        }
        if (_v) {
            {
                long tmp;
                if (Tcl_GetLongFromObj(NULL,argv[1],&tmp) == TCL_ERROR) _v = 0;
                else _v = 1;
            }
            if (_v) {
                {
                    long tmp;
                    if (Tcl_GetLongFromObj(NULL,argv[2],&tmp) == TCL_ERROR) _v = 0;
                    else _v = 1;
                }
                if (_v) {
                    return _wrap_new_SystemSemaphoreException__SWIG_3(clientData, interp, objc, objv);
                }
            }
        }
    }
    
    Tcl_SetResult(interp,(char *) "No matching function for overloaded 'new_SystemSemaphoreException'", TCL_STATIC);
    return TCL_ERROR;
}


static int
_wrap_delete_SystemSemaphoreException(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    gpstk::SystemSemaphoreException *arg1 = (gpstk::SystemSemaphoreException *) 0 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"o:delete_SystemSemaphoreException self ",NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_gpstk__SystemSemaphoreException,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    delete arg1;
    
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_SystemSemaphoreException_getName(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    gpstk::SystemSemaphoreException *arg1 = (gpstk::SystemSemaphoreException *) 0 ;
    std::string result;
    
    if (SWIG_GetArgs(interp, objc, objv,"o:SystemSemaphoreException_getName self ",NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_gpstk__SystemSemaphoreException,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    result = ((gpstk::SystemSemaphoreException const *)arg1)->getName();
    
    {
        Tcl_SetStringObj(Tcl_GetObjResult(interp),(char*)(&result)->c_str(),(&result)->length());
    }
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_SystemSemaphoreException_e___(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    gpstk::SystemSemaphoreException *arg1 = (gpstk::SystemSemaphoreException *) 0 ;
    gpstk::SystemSemaphoreException *arg2 = 0 ;
    gpstk::SystemSemaphoreException *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"oo:SystemSemaphoreException_= self kid ",NULL,NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_gpstk__SystemSemaphoreException,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[2], (void **) &arg2, SWIGTYPE_p_gpstk__SystemSemaphoreException,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        gpstk::SystemSemaphoreException &_result_ref = (arg1)->operator =((gpstk::SystemSemaphoreException const &)*arg2);
        result = (gpstk::SystemSemaphoreException *) &_result_ref;
    }
    
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_gpstk__SystemSemaphoreException,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_istream__SWIG_10(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    std::ostream *arg1 = 0 ;
    gpstk::SystemSemaphoreException *arg2 = 0 ;
    std::ostream *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"oo:istream s c ",NULL,NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_std__ostream,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[2], (void **) &arg2, SWIGTYPE_p_gpstk__SystemSemaphoreException,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        std::ostream &_result_ref = operator <<(*arg1,(gpstk::SystemSemaphoreException const &)*arg2);
        result = (std::ostream *) &_result_ref;
    }
    
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_std__ostream,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static void swig_delete_SystemSemaphoreException(void *obj) {
gpstk::SystemSemaphoreException *arg1 = (gpstk::SystemSemaphoreException *) obj;
delete arg1;
}
static swig_method swig_gpstk_SystemSemaphoreException_methods[] = {
    {"getName", _wrap_SystemSemaphoreException_getName}, 
    {"=", _wrap_SystemSemaphoreException_e___}, 
    {0,0}
};
static swig_attribute swig_gpstk_SystemSemaphoreException_attributes[] = {
    {0,0,0}
};
static swig_class *swig_gpstk_SystemSemaphoreException_bases[] = {0,0};
static char *swig_gpstk_SystemSemaphoreException_base_names[] = {"gpstk::Exception *",0};
swig_class _wrap_class_gpstk_SystemSemaphoreException = { "SystemSemaphoreException", &SWIGTYPE_p_gpstk__SystemSemaphoreException,_wrap_new_SystemSemaphoreException, swig_delete_SystemSemaphoreException, swig_gpstk_SystemSemaphoreException_methods, swig_gpstk_SystemSemaphoreException_attributes, swig_gpstk_SystemSemaphoreException_bases,swig_gpstk_SystemSemaphoreException_base_names };
static int
_wrap_new_SystemPipeException__SWIG_0(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    gpstk::SystemPipeException *result;
    
    if (SWIG_GetArgs(interp, objc, objv,":new_SystemPipeException ") == TCL_ERROR) SWIG_fail;
    result = (gpstk::SystemPipeException *)new gpstk::SystemPipeException();
    
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_gpstk__SystemPipeException,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_new_SystemPipeException__SWIG_1(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    gpstk::SystemPipeException *arg1 = 0 ;
    gpstk::SystemPipeException *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"o:new_SystemPipeException a ",NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_gpstk__SystemPipeException,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    result = (gpstk::SystemPipeException *)new gpstk::SystemPipeException((gpstk::SystemPipeException const &)*arg1);
    
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_gpstk__SystemPipeException,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_new_SystemPipeException__SWIG_2(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    gpstk::Exception *arg1 = 0 ;
    gpstk::SystemPipeException *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"o:new_SystemPipeException a ",NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_gpstk__Exception,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    result = (gpstk::SystemPipeException *)new gpstk::SystemPipeException((gpstk::Exception const &)*arg1);
    
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_gpstk__SystemPipeException,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_new_SystemPipeException__SWIG_3(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    std::string arg1 ;
    unsigned long arg2 ;
    gpstk::Exception::Severity arg3 ;
    gpstk::SystemPipeException *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"oli:new_SystemPipeException a b c ",NULL,&arg2,&arg3) == TCL_ERROR) SWIG_fail;
    {
        arg1 = std::string(Tcl_GetStringFromObj(objv[1],NULL));
    }
    result = (gpstk::SystemPipeException *)new gpstk::SystemPipeException(arg1,arg2,(gpstk::Exception::Severity )arg3);
    
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_gpstk__SystemPipeException,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_new_SystemPipeException__SWIG_4(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    std::string arg1 ;
    unsigned long arg2 ;
    gpstk::SystemPipeException *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"ol:new_SystemPipeException a b ",NULL,&arg2) == TCL_ERROR) SWIG_fail;
    {
        arg1 = std::string(Tcl_GetStringFromObj(objv[1],NULL));
    }
    result = (gpstk::SystemPipeException *)new gpstk::SystemPipeException(arg1,arg2);
    
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_gpstk__SystemPipeException,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_new_SystemPipeException__SWIG_5(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    std::string arg1 ;
    gpstk::SystemPipeException *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"o:new_SystemPipeException a ",NULL) == TCL_ERROR) SWIG_fail;
    {
        arg1 = std::string(Tcl_GetStringFromObj(objv[1],NULL));
    }
    result = (gpstk::SystemPipeException *)new gpstk::SystemPipeException(arg1);
    
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_gpstk__SystemPipeException,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_new_SystemPipeException(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    Tcl_Obj *CONST *argv = objv+1;
    int argc = objc-1;
    if (argc == 0) {
        return _wrap_new_SystemPipeException__SWIG_0(clientData, interp, objc, objv);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_gpstk__SystemPipeException, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_new_SystemPipeException__SWIG_1(clientData, interp, objc, objv);
        }
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_gpstk__Exception, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_new_SystemPipeException__SWIG_2(clientData, interp, objc, objv);
        }
    }
    if (argc == 1) {
        int _v;
        {
            _v = 1;
        }
        if (_v) {
            return _wrap_new_SystemPipeException__SWIG_5(clientData, interp, objc, objv);
        }
    }
    if (argc == 2) {
        int _v;
        {
            _v = 1;
        }
        if (_v) {
            {
                long tmp;
                if (Tcl_GetLongFromObj(NULL,argv[1],&tmp) == TCL_ERROR) _v = 0;
                else _v = 1;
            }
            if (_v) {
                return _wrap_new_SystemPipeException__SWIG_4(clientData, interp, objc, objv);
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            _v = 1;
        }
        if (_v) {
            {
                long tmp;
                if (Tcl_GetLongFromObj(NULL,argv[1],&tmp) == TCL_ERROR) _v = 0;
                else _v = 1;
            }
            if (_v) {
                {
                    long tmp;
                    if (Tcl_GetLongFromObj(NULL,argv[2],&tmp) == TCL_ERROR) _v = 0;
                    else _v = 1;
                }
                if (_v) {
                    return _wrap_new_SystemPipeException__SWIG_3(clientData, interp, objc, objv);
                }
            }
        }
    }
    
    Tcl_SetResult(interp,(char *) "No matching function for overloaded 'new_SystemPipeException'", TCL_STATIC);
    return TCL_ERROR;
}


static int
_wrap_delete_SystemPipeException(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    gpstk::SystemPipeException *arg1 = (gpstk::SystemPipeException *) 0 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"o:delete_SystemPipeException self ",NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_gpstk__SystemPipeException,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    delete arg1;
    
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_SystemPipeException_getName(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    gpstk::SystemPipeException *arg1 = (gpstk::SystemPipeException *) 0 ;
    std::string result;
    
    if (SWIG_GetArgs(interp, objc, objv,"o:SystemPipeException_getName self ",NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_gpstk__SystemPipeException,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    result = ((gpstk::SystemPipeException const *)arg1)->getName();
    
    {
        Tcl_SetStringObj(Tcl_GetObjResult(interp),(char*)(&result)->c_str(),(&result)->length());
    }
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_SystemPipeException_e___(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    gpstk::SystemPipeException *arg1 = (gpstk::SystemPipeException *) 0 ;
    gpstk::SystemPipeException *arg2 = 0 ;
    gpstk::SystemPipeException *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"oo:SystemPipeException_= self kid ",NULL,NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_gpstk__SystemPipeException,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[2], (void **) &arg2, SWIGTYPE_p_gpstk__SystemPipeException,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        gpstk::SystemPipeException &_result_ref = (arg1)->operator =((gpstk::SystemPipeException const &)*arg2);
        result = (gpstk::SystemPipeException *) &_result_ref;
    }
    
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_gpstk__SystemPipeException,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_istream__SWIG_11(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    std::ostream *arg1 = 0 ;
    gpstk::SystemPipeException *arg2 = 0 ;
    std::ostream *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"oo:istream s c ",NULL,NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_std__ostream,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[2], (void **) &arg2, SWIGTYPE_p_gpstk__SystemPipeException,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        std::ostream &_result_ref = operator <<(*arg1,(gpstk::SystemPipeException const &)*arg2);
        result = (std::ostream *) &_result_ref;
    }
    
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_std__ostream,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static void swig_delete_SystemPipeException(void *obj) {
gpstk::SystemPipeException *arg1 = (gpstk::SystemPipeException *) obj;
delete arg1;
}
static swig_method swig_gpstk_SystemPipeException_methods[] = {
    {"getName", _wrap_SystemPipeException_getName}, 
    {"=", _wrap_SystemPipeException_e___}, 
    {0,0}
};
static swig_attribute swig_gpstk_SystemPipeException_attributes[] = {
    {0,0,0}
};
static swig_class *swig_gpstk_SystemPipeException_bases[] = {0,0};
static char *swig_gpstk_SystemPipeException_base_names[] = {"gpstk::Exception *",0};
swig_class _wrap_class_gpstk_SystemPipeException = { "SystemPipeException", &SWIGTYPE_p_gpstk__SystemPipeException,_wrap_new_SystemPipeException, swig_delete_SystemPipeException, swig_gpstk_SystemPipeException_methods, swig_gpstk_SystemPipeException_attributes, swig_gpstk_SystemPipeException_bases,swig_gpstk_SystemPipeException_base_names };
static int
_wrap_new_SystemQueueException__SWIG_0(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    gpstk::SystemQueueException *result;
    
    if (SWIG_GetArgs(interp, objc, objv,":new_SystemQueueException ") == TCL_ERROR) SWIG_fail;
    result = (gpstk::SystemQueueException *)new gpstk::SystemQueueException();
    
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_gpstk__SystemQueueException,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_new_SystemQueueException__SWIG_1(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    gpstk::SystemQueueException *arg1 = 0 ;
    gpstk::SystemQueueException *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"o:new_SystemQueueException a ",NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_gpstk__SystemQueueException,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    result = (gpstk::SystemQueueException *)new gpstk::SystemQueueException((gpstk::SystemQueueException const &)*arg1);
    
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_gpstk__SystemQueueException,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_new_SystemQueueException__SWIG_2(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    gpstk::Exception *arg1 = 0 ;
    gpstk::SystemQueueException *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"o:new_SystemQueueException a ",NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_gpstk__Exception,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    result = (gpstk::SystemQueueException *)new gpstk::SystemQueueException((gpstk::Exception const &)*arg1);
    
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_gpstk__SystemQueueException,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_new_SystemQueueException__SWIG_3(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    std::string arg1 ;
    unsigned long arg2 ;
    gpstk::Exception::Severity arg3 ;
    gpstk::SystemQueueException *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"oli:new_SystemQueueException a b c ",NULL,&arg2,&arg3) == TCL_ERROR) SWIG_fail;
    {
        arg1 = std::string(Tcl_GetStringFromObj(objv[1],NULL));
    }
    result = (gpstk::SystemQueueException *)new gpstk::SystemQueueException(arg1,arg2,(gpstk::Exception::Severity )arg3);
    
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_gpstk__SystemQueueException,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_new_SystemQueueException__SWIG_4(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    std::string arg1 ;
    unsigned long arg2 ;
    gpstk::SystemQueueException *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"ol:new_SystemQueueException a b ",NULL,&arg2) == TCL_ERROR) SWIG_fail;
    {
        arg1 = std::string(Tcl_GetStringFromObj(objv[1],NULL));
    }
    result = (gpstk::SystemQueueException *)new gpstk::SystemQueueException(arg1,arg2);
    
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_gpstk__SystemQueueException,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_new_SystemQueueException__SWIG_5(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    std::string arg1 ;
    gpstk::SystemQueueException *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"o:new_SystemQueueException a ",NULL) == TCL_ERROR) SWIG_fail;
    {
        arg1 = std::string(Tcl_GetStringFromObj(objv[1],NULL));
    }
    result = (gpstk::SystemQueueException *)new gpstk::SystemQueueException(arg1);
    
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_gpstk__SystemQueueException,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_new_SystemQueueException(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    Tcl_Obj *CONST *argv = objv+1;
    int argc = objc-1;
    if (argc == 0) {
        return _wrap_new_SystemQueueException__SWIG_0(clientData, interp, objc, objv);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_gpstk__SystemQueueException, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_new_SystemQueueException__SWIG_1(clientData, interp, objc, objv);
        }
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_gpstk__Exception, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_new_SystemQueueException__SWIG_2(clientData, interp, objc, objv);
        }
    }
    if (argc == 1) {
        int _v;
        {
            _v = 1;
        }
        if (_v) {
            return _wrap_new_SystemQueueException__SWIG_5(clientData, interp, objc, objv);
        }
    }
    if (argc == 2) {
        int _v;
        {
            _v = 1;
        }
        if (_v) {
            {
                long tmp;
                if (Tcl_GetLongFromObj(NULL,argv[1],&tmp) == TCL_ERROR) _v = 0;
                else _v = 1;
            }
            if (_v) {
                return _wrap_new_SystemQueueException__SWIG_4(clientData, interp, objc, objv);
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            _v = 1;
        }
        if (_v) {
            {
                long tmp;
                if (Tcl_GetLongFromObj(NULL,argv[1],&tmp) == TCL_ERROR) _v = 0;
                else _v = 1;
            }
            if (_v) {
                {
                    long tmp;
                    if (Tcl_GetLongFromObj(NULL,argv[2],&tmp) == TCL_ERROR) _v = 0;
                    else _v = 1;
                }
                if (_v) {
                    return _wrap_new_SystemQueueException__SWIG_3(clientData, interp, objc, objv);
                }
            }
        }
    }
    
    Tcl_SetResult(interp,(char *) "No matching function for overloaded 'new_SystemQueueException'", TCL_STATIC);
    return TCL_ERROR;
}


static int
_wrap_delete_SystemQueueException(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    gpstk::SystemQueueException *arg1 = (gpstk::SystemQueueException *) 0 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"o:delete_SystemQueueException self ",NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_gpstk__SystemQueueException,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    delete arg1;
    
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_SystemQueueException_getName(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    gpstk::SystemQueueException *arg1 = (gpstk::SystemQueueException *) 0 ;
    std::string result;
    
    if (SWIG_GetArgs(interp, objc, objv,"o:SystemQueueException_getName self ",NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_gpstk__SystemQueueException,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    result = ((gpstk::SystemQueueException const *)arg1)->getName();
    
    {
        Tcl_SetStringObj(Tcl_GetObjResult(interp),(char*)(&result)->c_str(),(&result)->length());
    }
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_SystemQueueException_e___(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    gpstk::SystemQueueException *arg1 = (gpstk::SystemQueueException *) 0 ;
    gpstk::SystemQueueException *arg2 = 0 ;
    gpstk::SystemQueueException *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"oo:SystemQueueException_= self kid ",NULL,NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_gpstk__SystemQueueException,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[2], (void **) &arg2, SWIGTYPE_p_gpstk__SystemQueueException,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        gpstk::SystemQueueException &_result_ref = (arg1)->operator =((gpstk::SystemQueueException const &)*arg2);
        result = (gpstk::SystemQueueException *) &_result_ref;
    }
    
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_gpstk__SystemQueueException,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_istream__SWIG_12(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    std::ostream *arg1 = 0 ;
    gpstk::SystemQueueException *arg2 = 0 ;
    std::ostream *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"oo:istream s c ",NULL,NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_std__ostream,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[2], (void **) &arg2, SWIGTYPE_p_gpstk__SystemQueueException,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        std::ostream &_result_ref = operator <<(*arg1,(gpstk::SystemQueueException const &)*arg2);
        result = (std::ostream *) &_result_ref;
    }
    
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_std__ostream,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static void swig_delete_SystemQueueException(void *obj) {
gpstk::SystemQueueException *arg1 = (gpstk::SystemQueueException *) obj;
delete arg1;
}
static swig_method swig_gpstk_SystemQueueException_methods[] = {
    {"getName", _wrap_SystemQueueException_getName}, 
    {"=", _wrap_SystemQueueException_e___}, 
    {0,0}
};
static swig_attribute swig_gpstk_SystemQueueException_attributes[] = {
    {0,0,0}
};
static swig_class *swig_gpstk_SystemQueueException_bases[] = {0,0};
static char *swig_gpstk_SystemQueueException_base_names[] = {"gpstk::Exception *",0};
swig_class _wrap_class_gpstk_SystemQueueException = { "SystemQueueException", &SWIGTYPE_p_gpstk__SystemQueueException,_wrap_new_SystemQueueException, swig_delete_SystemQueueException, swig_gpstk_SystemQueueException_methods, swig_gpstk_SystemQueueException_attributes, swig_gpstk_SystemQueueException_bases,swig_gpstk_SystemQueueException_base_names };
static int
_wrap_new_OutOfMemory__SWIG_0(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    gpstk::OutOfMemory *result;
    
    if (SWIG_GetArgs(interp, objc, objv,":new_OutOfMemory ") == TCL_ERROR) SWIG_fail;
    result = (gpstk::OutOfMemory *)new gpstk::OutOfMemory();
    
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_gpstk__OutOfMemory,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_new_OutOfMemory__SWIG_1(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    gpstk::OutOfMemory *arg1 = 0 ;
    gpstk::OutOfMemory *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"o:new_OutOfMemory a ",NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_gpstk__OutOfMemory,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    result = (gpstk::OutOfMemory *)new gpstk::OutOfMemory((gpstk::OutOfMemory const &)*arg1);
    
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_gpstk__OutOfMemory,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_new_OutOfMemory__SWIG_2(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    gpstk::Exception *arg1 = 0 ;
    gpstk::OutOfMemory *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"o:new_OutOfMemory a ",NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_gpstk__Exception,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    result = (gpstk::OutOfMemory *)new gpstk::OutOfMemory((gpstk::Exception const &)*arg1);
    
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_gpstk__OutOfMemory,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_new_OutOfMemory__SWIG_3(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    std::string arg1 ;
    unsigned long arg2 ;
    gpstk::Exception::Severity arg3 ;
    gpstk::OutOfMemory *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"oli:new_OutOfMemory a b c ",NULL,&arg2,&arg3) == TCL_ERROR) SWIG_fail;
    {
        arg1 = std::string(Tcl_GetStringFromObj(objv[1],NULL));
    }
    result = (gpstk::OutOfMemory *)new gpstk::OutOfMemory(arg1,arg2,(gpstk::Exception::Severity )arg3);
    
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_gpstk__OutOfMemory,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_new_OutOfMemory__SWIG_4(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    std::string arg1 ;
    unsigned long arg2 ;
    gpstk::OutOfMemory *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"ol:new_OutOfMemory a b ",NULL,&arg2) == TCL_ERROR) SWIG_fail;
    {
        arg1 = std::string(Tcl_GetStringFromObj(objv[1],NULL));
    }
    result = (gpstk::OutOfMemory *)new gpstk::OutOfMemory(arg1,arg2);
    
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_gpstk__OutOfMemory,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_new_OutOfMemory__SWIG_5(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    std::string arg1 ;
    gpstk::OutOfMemory *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"o:new_OutOfMemory a ",NULL) == TCL_ERROR) SWIG_fail;
    {
        arg1 = std::string(Tcl_GetStringFromObj(objv[1],NULL));
    }
    result = (gpstk::OutOfMemory *)new gpstk::OutOfMemory(arg1);
    
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_gpstk__OutOfMemory,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_new_OutOfMemory(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    Tcl_Obj *CONST *argv = objv+1;
    int argc = objc-1;
    if (argc == 0) {
        return _wrap_new_OutOfMemory__SWIG_0(clientData, interp, objc, objv);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_gpstk__OutOfMemory, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_new_OutOfMemory__SWIG_1(clientData, interp, objc, objv);
        }
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_gpstk__Exception, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_new_OutOfMemory__SWIG_2(clientData, interp, objc, objv);
        }
    }
    if (argc == 1) {
        int _v;
        {
            _v = 1;
        }
        if (_v) {
            return _wrap_new_OutOfMemory__SWIG_5(clientData, interp, objc, objv);
        }
    }
    if (argc == 2) {
        int _v;
        {
            _v = 1;
        }
        if (_v) {
            {
                long tmp;
                if (Tcl_GetLongFromObj(NULL,argv[1],&tmp) == TCL_ERROR) _v = 0;
                else _v = 1;
            }
            if (_v) {
                return _wrap_new_OutOfMemory__SWIG_4(clientData, interp, objc, objv);
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            _v = 1;
        }
        if (_v) {
            {
                long tmp;
                if (Tcl_GetLongFromObj(NULL,argv[1],&tmp) == TCL_ERROR) _v = 0;
                else _v = 1;
            }
            if (_v) {
                {
                    long tmp;
                    if (Tcl_GetLongFromObj(NULL,argv[2],&tmp) == TCL_ERROR) _v = 0;
                    else _v = 1;
                }
                if (_v) {
                    return _wrap_new_OutOfMemory__SWIG_3(clientData, interp, objc, objv);
                }
            }
        }
    }
    
    Tcl_SetResult(interp,(char *) "No matching function for overloaded 'new_OutOfMemory'", TCL_STATIC);
    return TCL_ERROR;
}


static int
_wrap_delete_OutOfMemory(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    gpstk::OutOfMemory *arg1 = (gpstk::OutOfMemory *) 0 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"o:delete_OutOfMemory self ",NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_gpstk__OutOfMemory,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    delete arg1;
    
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_OutOfMemory_getName(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    gpstk::OutOfMemory *arg1 = (gpstk::OutOfMemory *) 0 ;
    std::string result;
    
    if (SWIG_GetArgs(interp, objc, objv,"o:OutOfMemory_getName self ",NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_gpstk__OutOfMemory,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    result = ((gpstk::OutOfMemory const *)arg1)->getName();
    
    {
        Tcl_SetStringObj(Tcl_GetObjResult(interp),(char*)(&result)->c_str(),(&result)->length());
    }
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_OutOfMemory_e___(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    gpstk::OutOfMemory *arg1 = (gpstk::OutOfMemory *) 0 ;
    gpstk::OutOfMemory *arg2 = 0 ;
    gpstk::OutOfMemory *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"oo:OutOfMemory_= self kid ",NULL,NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_gpstk__OutOfMemory,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[2], (void **) &arg2, SWIGTYPE_p_gpstk__OutOfMemory,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        gpstk::OutOfMemory &_result_ref = (arg1)->operator =((gpstk::OutOfMemory const &)*arg2);
        result = (gpstk::OutOfMemory *) &_result_ref;
    }
    
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_gpstk__OutOfMemory,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_istream__SWIG_13(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    std::ostream *arg1 = 0 ;
    gpstk::OutOfMemory *arg2 = 0 ;
    std::ostream *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"oo:istream s c ",NULL,NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_std__ostream,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[2], (void **) &arg2, SWIGTYPE_p_gpstk__OutOfMemory,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        std::ostream &_result_ref = operator <<(*arg1,(gpstk::OutOfMemory const &)*arg2);
        result = (std::ostream *) &_result_ref;
    }
    
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_std__ostream,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static void swig_delete_OutOfMemory(void *obj) {
gpstk::OutOfMemory *arg1 = (gpstk::OutOfMemory *) obj;
delete arg1;
}
static swig_method swig_gpstk_OutOfMemory_methods[] = {
    {"getName", _wrap_OutOfMemory_getName}, 
    {"=", _wrap_OutOfMemory_e___}, 
    {0,0}
};
static swig_attribute swig_gpstk_OutOfMemory_attributes[] = {
    {0,0,0}
};
static swig_class *swig_gpstk_OutOfMemory_bases[] = {0,0};
static char *swig_gpstk_OutOfMemory_base_names[] = {"gpstk::Exception *",0};
swig_class _wrap_class_gpstk_OutOfMemory = { "OutOfMemory", &SWIGTYPE_p_gpstk__OutOfMemory,_wrap_new_OutOfMemory, swig_delete_OutOfMemory, swig_gpstk_OutOfMemory_methods, swig_gpstk_OutOfMemory_attributes, swig_gpstk_OutOfMemory_bases,swig_gpstk_OutOfMemory_base_names };
static int
_wrap_new_ObjectNotFound__SWIG_0(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    gpstk::ObjectNotFound *result;
    
    if (SWIG_GetArgs(interp, objc, objv,":new_ObjectNotFound ") == TCL_ERROR) SWIG_fail;
    result = (gpstk::ObjectNotFound *)new gpstk::ObjectNotFound();
    
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_gpstk__ObjectNotFound,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_new_ObjectNotFound__SWIG_1(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    gpstk::ObjectNotFound *arg1 = 0 ;
    gpstk::ObjectNotFound *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"o:new_ObjectNotFound a ",NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_gpstk__ObjectNotFound,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    result = (gpstk::ObjectNotFound *)new gpstk::ObjectNotFound((gpstk::ObjectNotFound const &)*arg1);
    
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_gpstk__ObjectNotFound,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_new_ObjectNotFound__SWIG_2(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    gpstk::Exception *arg1 = 0 ;
    gpstk::ObjectNotFound *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"o:new_ObjectNotFound a ",NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_gpstk__Exception,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    result = (gpstk::ObjectNotFound *)new gpstk::ObjectNotFound((gpstk::Exception const &)*arg1);
    
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_gpstk__ObjectNotFound,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_new_ObjectNotFound__SWIG_3(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    std::string arg1 ;
    unsigned long arg2 ;
    gpstk::Exception::Severity arg3 ;
    gpstk::ObjectNotFound *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"oli:new_ObjectNotFound a b c ",NULL,&arg2,&arg3) == TCL_ERROR) SWIG_fail;
    {
        arg1 = std::string(Tcl_GetStringFromObj(objv[1],NULL));
    }
    result = (gpstk::ObjectNotFound *)new gpstk::ObjectNotFound(arg1,arg2,(gpstk::Exception::Severity )arg3);
    
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_gpstk__ObjectNotFound,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_new_ObjectNotFound__SWIG_4(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    std::string arg1 ;
    unsigned long arg2 ;
    gpstk::ObjectNotFound *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"ol:new_ObjectNotFound a b ",NULL,&arg2) == TCL_ERROR) SWIG_fail;
    {
        arg1 = std::string(Tcl_GetStringFromObj(objv[1],NULL));
    }
    result = (gpstk::ObjectNotFound *)new gpstk::ObjectNotFound(arg1,arg2);
    
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_gpstk__ObjectNotFound,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_new_ObjectNotFound__SWIG_5(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    std::string arg1 ;
    gpstk::ObjectNotFound *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"o:new_ObjectNotFound a ",NULL) == TCL_ERROR) SWIG_fail;
    {
        arg1 = std::string(Tcl_GetStringFromObj(objv[1],NULL));
    }
    result = (gpstk::ObjectNotFound *)new gpstk::ObjectNotFound(arg1);
    
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_gpstk__ObjectNotFound,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_new_ObjectNotFound(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    Tcl_Obj *CONST *argv = objv+1;
    int argc = objc-1;
    if (argc == 0) {
        return _wrap_new_ObjectNotFound__SWIG_0(clientData, interp, objc, objv);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_gpstk__ObjectNotFound, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_new_ObjectNotFound__SWIG_1(clientData, interp, objc, objv);
        }
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_gpstk__Exception, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_new_ObjectNotFound__SWIG_2(clientData, interp, objc, objv);
        }
    }
    if (argc == 1) {
        int _v;
        {
            _v = 1;
        }
        if (_v) {
            return _wrap_new_ObjectNotFound__SWIG_5(clientData, interp, objc, objv);
        }
    }
    if (argc == 2) {
        int _v;
        {
            _v = 1;
        }
        if (_v) {
            {
                long tmp;
                if (Tcl_GetLongFromObj(NULL,argv[1],&tmp) == TCL_ERROR) _v = 0;
                else _v = 1;
            }
            if (_v) {
                return _wrap_new_ObjectNotFound__SWIG_4(clientData, interp, objc, objv);
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            _v = 1;
        }
        if (_v) {
            {
                long tmp;
                if (Tcl_GetLongFromObj(NULL,argv[1],&tmp) == TCL_ERROR) _v = 0;
                else _v = 1;
            }
            if (_v) {
                {
                    long tmp;
                    if (Tcl_GetLongFromObj(NULL,argv[2],&tmp) == TCL_ERROR) _v = 0;
                    else _v = 1;
                }
                if (_v) {
                    return _wrap_new_ObjectNotFound__SWIG_3(clientData, interp, objc, objv);
                }
            }
        }
    }
    
    Tcl_SetResult(interp,(char *) "No matching function for overloaded 'new_ObjectNotFound'", TCL_STATIC);
    return TCL_ERROR;
}


static int
_wrap_delete_ObjectNotFound(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    gpstk::ObjectNotFound *arg1 = (gpstk::ObjectNotFound *) 0 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"o:delete_ObjectNotFound self ",NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_gpstk__ObjectNotFound,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    delete arg1;
    
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_ObjectNotFound_getName(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    gpstk::ObjectNotFound *arg1 = (gpstk::ObjectNotFound *) 0 ;
    std::string result;
    
    if (SWIG_GetArgs(interp, objc, objv,"o:ObjectNotFound_getName self ",NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_gpstk__ObjectNotFound,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    result = ((gpstk::ObjectNotFound const *)arg1)->getName();
    
    {
        Tcl_SetStringObj(Tcl_GetObjResult(interp),(char*)(&result)->c_str(),(&result)->length());
    }
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_ObjectNotFound_e___(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    gpstk::ObjectNotFound *arg1 = (gpstk::ObjectNotFound *) 0 ;
    gpstk::ObjectNotFound *arg2 = 0 ;
    gpstk::ObjectNotFound *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"oo:ObjectNotFound_= self kid ",NULL,NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_gpstk__ObjectNotFound,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[2], (void **) &arg2, SWIGTYPE_p_gpstk__ObjectNotFound,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        gpstk::ObjectNotFound &_result_ref = (arg1)->operator =((gpstk::ObjectNotFound const &)*arg2);
        result = (gpstk::ObjectNotFound *) &_result_ref;
    }
    
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_gpstk__ObjectNotFound,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_istream__SWIG_14(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    std::ostream *arg1 = 0 ;
    gpstk::ObjectNotFound *arg2 = 0 ;
    std::ostream *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"oo:istream s c ",NULL,NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_std__ostream,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[2], (void **) &arg2, SWIGTYPE_p_gpstk__ObjectNotFound,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        std::ostream &_result_ref = operator <<(*arg1,(gpstk::ObjectNotFound const &)*arg2);
        result = (std::ostream *) &_result_ref;
    }
    
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_std__ostream,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_istream(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    Tcl_Obj *CONST *argv = objv+1;
    int argc = objc-1;
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_std__ostream, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_gpstk__ExceptionLocation, 0) == TCL_ERROR) {
                    _v = 0;
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                return _wrap_istream__SWIG_0(clientData, interp, objc, objv);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_std__ostream, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_gpstk__InvalidParameter, 0) == TCL_ERROR) {
                    _v = 0;
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                return _wrap_istream__SWIG_2(clientData, interp, objc, objv);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_std__ostream, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_gpstk__InvalidRequest, 0) == TCL_ERROR) {
                    _v = 0;
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                return _wrap_istream__SWIG_3(clientData, interp, objc, objv);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_std__ostream, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_gpstk__AssertionFailure, 0) == TCL_ERROR) {
                    _v = 0;
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                return _wrap_istream__SWIG_4(clientData, interp, objc, objv);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_std__ostream, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_gpstk__ObjectNotFound, 0) == TCL_ERROR) {
                    _v = 0;
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                return _wrap_istream__SWIG_14(clientData, interp, objc, objv);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_std__ostream, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_gpstk__IndexOutOfBoundsException, 0) == TCL_ERROR) {
                    _v = 0;
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                return _wrap_istream__SWIG_6(clientData, interp, objc, objv);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_std__ostream, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_gpstk__InvalidArgumentException, 0) == TCL_ERROR) {
                    _v = 0;
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                return _wrap_istream__SWIG_7(clientData, interp, objc, objv);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_std__ostream, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_gpstk__ConfigurationException, 0) == TCL_ERROR) {
                    _v = 0;
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                return _wrap_istream__SWIG_8(clientData, interp, objc, objv);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_std__ostream, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_gpstk__FileMissingException, 0) == TCL_ERROR) {
                    _v = 0;
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                return _wrap_istream__SWIG_9(clientData, interp, objc, objv);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_std__ostream, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_gpstk__SystemSemaphoreException, 0) == TCL_ERROR) {
                    _v = 0;
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                return _wrap_istream__SWIG_10(clientData, interp, objc, objv);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_std__ostream, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_gpstk__SystemPipeException, 0) == TCL_ERROR) {
                    _v = 0;
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                return _wrap_istream__SWIG_11(clientData, interp, objc, objv);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_std__ostream, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_gpstk__SystemQueueException, 0) == TCL_ERROR) {
                    _v = 0;
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                return _wrap_istream__SWIG_12(clientData, interp, objc, objv);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_std__ostream, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_gpstk__OutOfMemory, 0) == TCL_ERROR) {
                    _v = 0;
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                return _wrap_istream__SWIG_13(clientData, interp, objc, objv);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_std__ostream, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_gpstk__AccessError, 0) == TCL_ERROR) {
                    _v = 0;
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                return _wrap_istream__SWIG_5(clientData, interp, objc, objv);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_std__ostream, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_gpstk__Exception, 0) == TCL_ERROR) {
                    _v = 0;
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                return _wrap_istream__SWIG_1(clientData, interp, objc, objv);
            }
        }
    }
    
    Tcl_SetResult(interp,(char *) "No matching function for overloaded 'istream'", TCL_STATIC);
    return TCL_ERROR;
}


static void swig_delete_ObjectNotFound(void *obj) {
gpstk::ObjectNotFound *arg1 = (gpstk::ObjectNotFound *) obj;
delete arg1;
}
static swig_method swig_gpstk_ObjectNotFound_methods[] = {
    {"getName", _wrap_ObjectNotFound_getName}, 
    {"=", _wrap_ObjectNotFound_e___}, 
    {0,0}
};
static swig_attribute swig_gpstk_ObjectNotFound_attributes[] = {
    {0,0,0}
};
static swig_class *swig_gpstk_ObjectNotFound_bases[] = {0,0};
static char *swig_gpstk_ObjectNotFound_base_names[] = {"gpstk::AccessError *",0};
swig_class _wrap_class_gpstk_ObjectNotFound = { "ObjectNotFound", &SWIGTYPE_p_gpstk__ObjectNotFound,_wrap_new_ObjectNotFound, swig_delete_ObjectNotFound, swig_gpstk_ObjectNotFound_methods, swig_gpstk_ObjectNotFound_attributes, swig_gpstk_ObjectNotFound_bases,swig_gpstk_ObjectNotFound_base_names };
static char *_wrap_GPSZcount_ZCOUNT_MINUTE_get(ClientData clientData, Tcl_Interp *interp, char *name1, char *name2, int flags) {
    Tcl_Obj *value = 0;
    
    value = Tcl_NewIntObj((long) gpstk::GPSZcount::ZCOUNT_MINUTE);
    if (value) {
        Tcl_SetVar2(interp,name1,name2,Tcl_GetStringFromObj(value,NULL), flags);
        Tcl_DecrRefCount(value);
    }
    return NULL;
}


static const char *swig_readonly(ClientData clientData, Tcl_Interp *interp, char *name1, char *name2, int flags) {
    return (char*) "Variable is read-only";
}


static char *_wrap_GPSZcount_ZCOUNT_HOUR_get(ClientData clientData, Tcl_Interp *interp, char *name1, char *name2, int flags) {
    Tcl_Obj *value = 0;
    
    value = Tcl_NewIntObj((long) gpstk::GPSZcount::ZCOUNT_HOUR);
    if (value) {
        Tcl_SetVar2(interp,name1,name2,Tcl_GetStringFromObj(value,NULL), flags);
        Tcl_DecrRefCount(value);
    }
    return NULL;
}


static char *_wrap_GPSZcount_ZCOUNT_DAY_get(ClientData clientData, Tcl_Interp *interp, char *name1, char *name2, int flags) {
    Tcl_Obj *value = 0;
    
    value = Tcl_NewIntObj((long) gpstk::GPSZcount::ZCOUNT_DAY);
    if (value) {
        Tcl_SetVar2(interp,name1,name2,Tcl_GetStringFromObj(value,NULL), flags);
        Tcl_DecrRefCount(value);
    }
    return NULL;
}


static char *_wrap_GPSZcount_ZCOUNT_WEEK_get(ClientData clientData, Tcl_Interp *interp, char *name1, char *name2, int flags) {
    Tcl_Obj *value = 0;
    
    value = Tcl_NewIntObj((long) gpstk::GPSZcount::ZCOUNT_WEEK);
    if (value) {
        Tcl_SetVar2(interp,name1,name2,Tcl_GetStringFromObj(value,NULL), flags);
        Tcl_DecrRefCount(value);
    }
    return NULL;
}


static int
_wrap_new_GPSZcount__SWIG_0(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    short arg1 ;
    long arg2 ;
    gpstk::GPSZcount *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"hl:new_GPSZcount inWeek inZcount ",&arg1,&arg2) == TCL_ERROR) SWIG_fail;
    try {
        result = (gpstk::GPSZcount *)new gpstk::GPSZcount(arg1,arg2);
    }
    catch(gpstk::InvalidParameter &_e) {
        {
            Tcl_SetObjResult(interp, Tcl_NewStringObj((char*) "gpstk::InvalidParameter", -1));
            SWIG_fail;
        }
    }
    
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_gpstk__GPSZcount,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_new_GPSZcount__SWIG_1(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    long arg1 ;
    gpstk::GPSZcount *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"l:new_GPSZcount inFullZcount ",&arg1) == TCL_ERROR) SWIG_fail;
    try {
        result = (gpstk::GPSZcount *)new gpstk::GPSZcount(arg1);
    }
    catch(gpstk::InvalidParameter &_e) {
        {
            Tcl_SetObjResult(interp, Tcl_NewStringObj((char*) "gpstk::InvalidParameter", -1));
            SWIG_fail;
        }
    }
    
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_gpstk__GPSZcount,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_new_GPSZcount__SWIG_2(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    gpstk::GPSZcount *result;
    
    if (SWIG_GetArgs(interp, objc, objv,":new_GPSZcount ") == TCL_ERROR) SWIG_fail;
    try {
        result = (gpstk::GPSZcount *)new gpstk::GPSZcount();
    }
    catch(gpstk::InvalidParameter &_e) {
        {
            Tcl_SetObjResult(interp, Tcl_NewStringObj((char*) "gpstk::InvalidParameter", -1));
            SWIG_fail;
        }
    }
    
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_gpstk__GPSZcount,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_delete_GPSZcount(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    gpstk::GPSZcount *arg1 = (gpstk::GPSZcount *) 0 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"o:delete_GPSZcount self ",NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_gpstk__GPSZcount,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    delete arg1;
    
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_new_GPSZcount__SWIG_3(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    gpstk::GPSZcount *arg1 = 0 ;
    gpstk::GPSZcount *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"o:new_GPSZcount right ",NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_gpstk__GPSZcount,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    result = (gpstk::GPSZcount *)new gpstk::GPSZcount((gpstk::GPSZcount const &)*arg1);
    
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_gpstk__GPSZcount,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_new_GPSZcount(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    Tcl_Obj *CONST *argv = objv+1;
    int argc = objc-1;
    if (argc == 0) {
        return _wrap_new_GPSZcount__SWIG_2(clientData, interp, objc, objv);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_gpstk__GPSZcount, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_new_GPSZcount__SWIG_3(clientData, interp, objc, objv);
        }
    }
    if (argc == 1) {
        int _v;
        {
            long tmp;
            if (Tcl_GetLongFromObj(NULL,argv[0],&tmp) == TCL_ERROR) _v = 0;
            else _v = 1;
        }
        if (_v) {
            return _wrap_new_GPSZcount__SWIG_1(clientData, interp, objc, objv);
        }
    }
    if (argc == 2) {
        int _v;
        {
            long tmp;
            if (Tcl_GetLongFromObj(NULL,argv[0],&tmp) == TCL_ERROR) _v = 0;
            else _v = 1;
        }
        if (_v) {
            {
                long tmp;
                if (Tcl_GetLongFromObj(NULL,argv[1],&tmp) == TCL_ERROR) _v = 0;
                else _v = 1;
            }
            if (_v) {
                return _wrap_new_GPSZcount__SWIG_0(clientData, interp, objc, objv);
            }
        }
    }
    
    Tcl_SetResult(interp,(char *) "No matching function for overloaded 'new_GPSZcount'", TCL_STATIC);
    return TCL_ERROR;
}


static int
_wrap_GPSZcount_getWeek(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    gpstk::GPSZcount *arg1 = (gpstk::GPSZcount *) 0 ;
    short result;
    
    if (SWIG_GetArgs(interp, objc, objv,"o:GPSZcount_getWeek self ",NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_gpstk__GPSZcount,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    result = (short)((gpstk::GPSZcount const *)arg1)->getWeek();
    
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_GPSZcount_getZcount(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    gpstk::GPSZcount *arg1 = (gpstk::GPSZcount *) 0 ;
    long result;
    
    if (SWIG_GetArgs(interp, objc, objv,"o:GPSZcount_getZcount self ",NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_gpstk__GPSZcount,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    result = (long)((gpstk::GPSZcount const *)arg1)->getZcount();
    
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_GPSZcount_getFullZcount(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    gpstk::GPSZcount *arg1 = (gpstk::GPSZcount *) 0 ;
    long result;
    
    if (SWIG_GetArgs(interp, objc, objv,"o:GPSZcount_getFullZcount self ",NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_gpstk__GPSZcount,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    result = (long)((gpstk::GPSZcount const *)arg1)->getFullZcount();
    
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_GPSZcount_getTotalZcounts(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    gpstk::GPSZcount *arg1 = (gpstk::GPSZcount *) 0 ;
    double result;
    
    if (SWIG_GetArgs(interp, objc, objv,"o:GPSZcount_getTotalZcounts self ",NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_gpstk__GPSZcount,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    result = (double)((gpstk::GPSZcount const *)arg1)->getTotalZcounts();
    
    Tcl_SetObjResult(interp,Tcl_NewDoubleObj((double) result));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_GPSZcount_setWeek(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    gpstk::GPSZcount *arg1 = (gpstk::GPSZcount *) 0 ;
    short arg2 ;
    gpstk::GPSZcount *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"oh:GPSZcount_setWeek self inWeek ",NULL,&arg2) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_gpstk__GPSZcount,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    try {
        {
            gpstk::GPSZcount &_result_ref = (arg1)->setWeek(arg2);
            result = (gpstk::GPSZcount *) &_result_ref;
        }
    }
    catch(gpstk::InvalidParameter &_e) {
        {
            Tcl_SetObjResult(interp, Tcl_NewStringObj((char*) "gpstk::InvalidParameter", -1));
            SWIG_fail;
        }
    }
    
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_gpstk__GPSZcount,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_GPSZcount_setZcount(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    gpstk::GPSZcount *arg1 = (gpstk::GPSZcount *) 0 ;
    long arg2 ;
    gpstk::GPSZcount *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"ol:GPSZcount_setZcount self inZcount ",NULL,&arg2) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_gpstk__GPSZcount,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    try {
        {
            gpstk::GPSZcount &_result_ref = (arg1)->setZcount(arg2);
            result = (gpstk::GPSZcount *) &_result_ref;
        }
    }
    catch(gpstk::InvalidParameter &_e) {
        {
            Tcl_SetObjResult(interp, Tcl_NewStringObj((char*) "gpstk::InvalidParameter", -1));
            SWIG_fail;
        }
    }
    
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_gpstk__GPSZcount,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_GPSZcount_setFullZcount(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    gpstk::GPSZcount *arg1 = (gpstk::GPSZcount *) 0 ;
    long arg2 ;
    gpstk::GPSZcount *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"ol:GPSZcount_setFullZcount self inZcount ",NULL,&arg2) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_gpstk__GPSZcount,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    try {
        {
            gpstk::GPSZcount &_result_ref = (arg1)->setFullZcount(arg2);
            result = (gpstk::GPSZcount *) &_result_ref;
        }
    }
    catch(gpstk::InvalidParameter &_e) {
        {
            Tcl_SetObjResult(interp, Tcl_NewStringObj((char*) "gpstk::InvalidParameter", -1));
            SWIG_fail;
        }
    }
    
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_gpstk__GPSZcount,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_GPSZcount_addWeeks(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    gpstk::GPSZcount *arg1 = (gpstk::GPSZcount *) 0 ;
    short arg2 ;
    gpstk::GPSZcount *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"oh:GPSZcount_addWeeks self inWeeks ",NULL,&arg2) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_gpstk__GPSZcount,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    try {
        {
            gpstk::GPSZcount &_result_ref = (arg1)->addWeeks(arg2);
            result = (gpstk::GPSZcount *) &_result_ref;
        }
    }
    catch(gpstk::InvalidRequest &_e) {
        {
            Tcl_SetObjResult(interp, Tcl_NewStringObj((char*) "gpstk::InvalidRequest", -1));
            SWIG_fail;
        }
    }
    
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_gpstk__GPSZcount,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_GPSZcount_addZcounts(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    gpstk::GPSZcount *arg1 = (gpstk::GPSZcount *) 0 ;
    long arg2 ;
    gpstk::GPSZcount *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"ol:GPSZcount_addZcounts self inZcounts ",NULL,&arg2) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_gpstk__GPSZcount,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    try {
        {
            gpstk::GPSZcount &_result_ref = (arg1)->addZcounts(arg2);
            result = (gpstk::GPSZcount *) &_result_ref;
        }
    }
    catch(gpstk::InvalidRequest &_e) {
        {
            Tcl_SetObjResult(interp, Tcl_NewStringObj((char*) "gpstk::InvalidRequest", -1));
            SWIG_fail;
        }
    }
    
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_gpstk__GPSZcount,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_GPSZcount_a___(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    gpstk::GPSZcount *arg1 = (gpstk::GPSZcount *) 0 ;
    long arg2 ;
    gpstk::GPSZcount result;
    
    if (SWIG_GetArgs(interp, objc, objv,"ol:GPSZcount_+ self inZcounts ",NULL,&arg2) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_gpstk__GPSZcount,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    try {
        result = ((gpstk::GPSZcount const *)arg1)->operator +(arg2);
    }
    catch(gpstk::InvalidRequest &_e) {
        {
            Tcl_SetObjResult(interp, Tcl_NewStringObj((char*) "gpstk::InvalidRequest", -1));
            SWIG_fail;
        }
    }
    
    {
        gpstk::GPSZcount * resultptr;
        resultptr = new gpstk::GPSZcount((gpstk::GPSZcount &) result);
        Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void*) resultptr, SWIGTYPE_p_gpstk__GPSZcount,1));
    }
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_GPSZcount_s_____SWIG_0(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    gpstk::GPSZcount *arg1 = (gpstk::GPSZcount *) 0 ;
    long arg2 ;
    gpstk::GPSZcount result;
    
    if (SWIG_GetArgs(interp, objc, objv,"ol:GPSZcount_- self inZcounts ",NULL,&arg2) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_gpstk__GPSZcount,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    try {
        result = ((gpstk::GPSZcount const *)arg1)->operator -(arg2);
    }
    catch(gpstk::InvalidRequest &_e) {
        {
            Tcl_SetObjResult(interp, Tcl_NewStringObj((char*) "gpstk::InvalidRequest", -1));
            SWIG_fail;
        }
    }
    
    {
        gpstk::GPSZcount * resultptr;
        resultptr = new gpstk::GPSZcount((gpstk::GPSZcount &) result);
        Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void*) resultptr, SWIGTYPE_p_gpstk__GPSZcount,1));
    }
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_GPSZcount_s_____SWIG_1(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    gpstk::GPSZcount *arg1 = (gpstk::GPSZcount *) 0 ;
    gpstk::GPSZcount *arg2 = 0 ;
    double result;
    
    if (SWIG_GetArgs(interp, objc, objv,"oo:GPSZcount_- self right ",NULL,NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_gpstk__GPSZcount,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[2], (void **) &arg2, SWIGTYPE_p_gpstk__GPSZcount,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    result = (double)((gpstk::GPSZcount const *)arg1)->operator -((gpstk::GPSZcount const &)*arg2);
    
    Tcl_SetObjResult(interp,Tcl_NewDoubleObj((double) result));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_GPSZcount_s___(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    Tcl_Obj *CONST *argv = objv+1;
    int argc = objc-1;
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_gpstk__GPSZcount, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_gpstk__GPSZcount, 0) == TCL_ERROR) {
                    _v = 0;
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                return _wrap_GPSZcount_s_____SWIG_1(clientData, interp, objc, objv);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_gpstk__GPSZcount, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                long tmp;
                if (Tcl_GetLongFromObj(NULL,argv[1],&tmp) == TCL_ERROR) _v = 0;
                else _v = 1;
            }
            if (_v) {
                return _wrap_GPSZcount_s_____SWIG_0(clientData, interp, objc, objv);
            }
        }
    }
    
    Tcl_SetResult(interp,(char *) "No matching function for overloaded 'GPSZcount_-'", TCL_STATIC);
    return TCL_ERROR;
}


static int
_wrap_GPSZcount_e___(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    gpstk::GPSZcount *arg1 = (gpstk::GPSZcount *) 0 ;
    gpstk::GPSZcount *arg2 = 0 ;
    gpstk::GPSZcount *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"oo:GPSZcount_= self right ",NULL,NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_gpstk__GPSZcount,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[2], (void **) &arg2, SWIGTYPE_p_gpstk__GPSZcount,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        gpstk::GPSZcount &_result_ref = (arg1)->operator =((gpstk::GPSZcount const &)*arg2);
        result = (gpstk::GPSZcount *) &_result_ref;
    }
    
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_gpstk__GPSZcount,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_GPSZcount_operator_less_than(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    gpstk::GPSZcount *arg1 = (gpstk::GPSZcount *) 0 ;
    gpstk::GPSZcount *arg2 = 0 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"oo:GPSZcount_operator_less_than self right ",NULL,NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_gpstk__GPSZcount,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[2], (void **) &arg2, SWIGTYPE_p_gpstk__GPSZcount,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    result = (bool)((gpstk::GPSZcount const *)arg1)->operator <((gpstk::GPSZcount const &)*arg2);
    
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_GPSZcount_operator_greater_than(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    gpstk::GPSZcount *arg1 = (gpstk::GPSZcount *) 0 ;
    gpstk::GPSZcount *arg2 = 0 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"oo:GPSZcount_operator_greater_than self right ",NULL,NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_gpstk__GPSZcount,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[2], (void **) &arg2, SWIGTYPE_p_gpstk__GPSZcount,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    result = (bool)((gpstk::GPSZcount const *)arg1)->operator >((gpstk::GPSZcount const &)*arg2);
    
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_GPSZcount_operator_equal_to(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    gpstk::GPSZcount *arg1 = (gpstk::GPSZcount *) 0 ;
    gpstk::GPSZcount *arg2 = 0 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"oo:GPSZcount_operator_equal_to self right ",NULL,NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_gpstk__GPSZcount,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[2], (void **) &arg2, SWIGTYPE_p_gpstk__GPSZcount,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    result = (bool)((gpstk::GPSZcount const *)arg1)->operator ==((gpstk::GPSZcount const &)*arg2);
    
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_GPSZcount_operator_not_equal_to(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    gpstk::GPSZcount *arg1 = (gpstk::GPSZcount *) 0 ;
    gpstk::GPSZcount *arg2 = 0 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"oo:GPSZcount_operator_not_equal_to self right ",NULL,NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_gpstk__GPSZcount,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[2], (void **) &arg2, SWIGTYPE_p_gpstk__GPSZcount,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    result = (bool)((gpstk::GPSZcount const *)arg1)->operator !=((gpstk::GPSZcount const &)*arg2);
    
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_GPSZcount_operator_less_than_equal_to(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    gpstk::GPSZcount *arg1 = (gpstk::GPSZcount *) 0 ;
    gpstk::GPSZcount *arg2 = 0 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"oo:GPSZcount_operator_less_than_equal_to self right ",NULL,NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_gpstk__GPSZcount,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[2], (void **) &arg2, SWIGTYPE_p_gpstk__GPSZcount,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    result = (bool)((gpstk::GPSZcount const *)arg1)->operator <=((gpstk::GPSZcount const &)*arg2);
    
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_GPSZcount_operator_greater_than_equal_to(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    gpstk::GPSZcount *arg1 = (gpstk::GPSZcount *) 0 ;
    gpstk::GPSZcount *arg2 = 0 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"oo:GPSZcount_operator_greater_than_equal_to self right ",NULL,NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_gpstk__GPSZcount,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[2], (void **) &arg2, SWIGTYPE_p_gpstk__GPSZcount,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    result = (bool)((gpstk::GPSZcount const *)arg1)->operator >=((gpstk::GPSZcount const &)*arg2);
    
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_GPSZcount_inSameTimeBlock__SWIG_0(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    gpstk::GPSZcount *arg1 = (gpstk::GPSZcount *) 0 ;
    gpstk::GPSZcount *arg2 = 0 ;
    unsigned long arg3 ;
    unsigned long arg4 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"ooll:GPSZcount_inSameTimeBlock self other inZcountBlock inZcountOffset ",NULL,NULL,&arg3,&arg4) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_gpstk__GPSZcount,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[2], (void **) &arg2, SWIGTYPE_p_gpstk__GPSZcount,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    result = (bool)(arg1)->inSameTimeBlock((gpstk::GPSZcount const &)*arg2,arg3,arg4);
    
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_GPSZcount_inSameTimeBlock__SWIG_1(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    gpstk::GPSZcount *arg1 = (gpstk::GPSZcount *) 0 ;
    gpstk::GPSZcount *arg2 = 0 ;
    unsigned long arg3 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"ool:GPSZcount_inSameTimeBlock self other inZcountBlock ",NULL,NULL,&arg3) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_gpstk__GPSZcount,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[2], (void **) &arg2, SWIGTYPE_p_gpstk__GPSZcount,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    result = (bool)(arg1)->inSameTimeBlock((gpstk::GPSZcount const &)*arg2,arg3);
    
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_GPSZcount_inSameTimeBlock(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    Tcl_Obj *CONST *argv = objv+1;
    int argc = objc-1;
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_gpstk__GPSZcount, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_gpstk__GPSZcount, 0) == TCL_ERROR) {
                    _v = 0;
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                {
                    long tmp;
                    if (Tcl_GetLongFromObj(NULL,argv[2],&tmp) == TCL_ERROR) _v = 0;
                    else _v = 1;
                }
                if (_v) {
                    return _wrap_GPSZcount_inSameTimeBlock__SWIG_1(clientData, interp, objc, objv);
                }
            }
        }
    }
    if (argc == 4) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_gpstk__GPSZcount, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_gpstk__GPSZcount, 0) == TCL_ERROR) {
                    _v = 0;
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                {
                    long tmp;
                    if (Tcl_GetLongFromObj(NULL,argv[2],&tmp) == TCL_ERROR) _v = 0;
                    else _v = 1;
                }
                if (_v) {
                    {
                        long tmp;
                        if (Tcl_GetLongFromObj(NULL,argv[3],&tmp) == TCL_ERROR) _v = 0;
                        else _v = 1;
                    }
                    if (_v) {
                        return _wrap_GPSZcount_inSameTimeBlock__SWIG_0(clientData, interp, objc, objv);
                    }
                }
            }
        }
    }
    
    Tcl_SetResult(interp,(char *) "No matching function for overloaded 'GPSZcount_inSameTimeBlock'", TCL_STATIC);
    return TCL_ERROR;
}


static int
_wrap_GPSZcount_dump__SWIG_0(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    gpstk::GPSZcount *arg1 = (gpstk::GPSZcount *) 0 ;
    std::ostream *arg2 = 0 ;
    short arg3 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"ooh:GPSZcount_dump self out level ",NULL,NULL,&arg3) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_gpstk__GPSZcount,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[2], (void **) &arg2, SWIGTYPE_p_std__ostream,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    ((gpstk::GPSZcount const *)arg1)->dump(*arg2,arg3);
    
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_GPSZcount_dump__SWIG_1(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    gpstk::GPSZcount *arg1 = (gpstk::GPSZcount *) 0 ;
    std::ostream *arg2 = 0 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"oo:GPSZcount_dump self out ",NULL,NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_gpstk__GPSZcount,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[2], (void **) &arg2, SWIGTYPE_p_std__ostream,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    ((gpstk::GPSZcount const *)arg1)->dump(*arg2);
    
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_GPSZcount_dump(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    Tcl_Obj *CONST *argv = objv+1;
    int argc = objc-1;
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_gpstk__GPSZcount, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_std__ostream, 0) == TCL_ERROR) {
                    _v = 0;
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                return _wrap_GPSZcount_dump__SWIG_1(clientData, interp, objc, objv);
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_gpstk__GPSZcount, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_std__ostream, 0) == TCL_ERROR) {
                    _v = 0;
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                {
                    long tmp;
                    if (Tcl_GetLongFromObj(NULL,argv[2],&tmp) == TCL_ERROR) _v = 0;
                    else _v = 1;
                }
                if (_v) {
                    return _wrap_GPSZcount_dump__SWIG_0(clientData, interp, objc, objv);
                }
            }
        }
    }
    
    Tcl_SetResult(interp,(char *) "No matching function for overloaded 'GPSZcount_dump'", TCL_STATIC);
    return TCL_ERROR;
}


static void swig_delete_GPSZcount(void *obj) {
gpstk::GPSZcount *arg1 = (gpstk::GPSZcount *) obj;
delete arg1;
}
static swig_method swig_gpstk_GPSZcount_methods[] = {
    {"getWeek", _wrap_GPSZcount_getWeek}, 
    {"getZcount", _wrap_GPSZcount_getZcount}, 
    {"getFullZcount", _wrap_GPSZcount_getFullZcount}, 
    {"getTotalZcounts", _wrap_GPSZcount_getTotalZcounts}, 
    {"setWeek", _wrap_GPSZcount_setWeek}, 
    {"setZcount", _wrap_GPSZcount_setZcount}, 
    {"setFullZcount", _wrap_GPSZcount_setFullZcount}, 
    {"addWeeks", _wrap_GPSZcount_addWeeks}, 
    {"addZcounts", _wrap_GPSZcount_addZcounts}, 
    {"+", _wrap_GPSZcount_a___}, 
    {"-", _wrap_GPSZcount_s___}, 
    {"=", _wrap_GPSZcount_e___}, 
    {"operator_less_than", _wrap_GPSZcount_operator_less_than}, 
    {"operator_greater_than", _wrap_GPSZcount_operator_greater_than}, 
    {"operator_equal_to", _wrap_GPSZcount_operator_equal_to}, 
    {"operator_not_equal_to", _wrap_GPSZcount_operator_not_equal_to}, 
    {"operator_less_than_equal_to", _wrap_GPSZcount_operator_less_than_equal_to}, 
    {"operator_greater_than_equal_to", _wrap_GPSZcount_operator_greater_than_equal_to}, 
    {"inSameTimeBlock", _wrap_GPSZcount_inSameTimeBlock}, 
    {"dump", _wrap_GPSZcount_dump}, 
    {0,0}
};
static swig_attribute swig_gpstk_GPSZcount_attributes[] = {
    {0,0,0}
};
static swig_class *swig_gpstk_GPSZcount_bases[] = {0};
static char *swig_gpstk_GPSZcount_base_names[] = {0};
swig_class _wrap_class_gpstk_GPSZcount = { "GPSZcount", &SWIGTYPE_p_gpstk__GPSZcount,_wrap_new_GPSZcount, swig_delete_GPSZcount, swig_gpstk_GPSZcount_methods, swig_gpstk_GPSZcount_attributes, swig_gpstk_GPSZcount_bases,swig_gpstk_GPSZcount_base_names };
static int
_wrap_ll___(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    std::ostream *arg1 = 0 ;
    gpstk::GPSZcount *arg2 = 0 ;
    std::ostream *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"oo:<< s z ",NULL,NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_std__ostream,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[2], (void **) &arg2, SWIGTYPE_p_gpstk__GPSZcount,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        std::ostream &_result_ref = gpstk::operator <<(*arg1,(gpstk::GPSZcount const &)*arg2);
        result = (std::ostream *) &_result_ref;
    }
    
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_std__ostream,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static char *_wrap_DayTime_FACTOR_get(ClientData clientData, Tcl_Interp *interp, char *name1, char *name2, int flags) {
    Tcl_Obj *value = 0;
    
    value = Tcl_NewIntObj((long) DayTime::FACTOR);
    if (value) {
        Tcl_SetVar2(interp,name1,name2,Tcl_GetStringFromObj(value,NULL), flags);
        Tcl_DecrRefCount(value);
    }
    return NULL;
}


static char *_wrap_DayTime_JD_TO_MJD_get(ClientData clientData, Tcl_Interp *interp, char *name1, char *name2, int flags) {
    Tcl_Obj *value = 0;
    
    value = Tcl_NewDoubleObj((double) DayTime::JD_TO_MJD);
    if (value) {
        Tcl_SetVar2(interp,name1,name2,Tcl_GetStringFromObj(value,NULL), flags);
        Tcl_DecrRefCount(value);
    }
    return NULL;
}


static char *_wrap_DayTime_MJD_JDAY_get(ClientData clientData, Tcl_Interp *interp, char *name1, char *name2, int flags) {
    Tcl_Obj *value = 0;
    
    value = Tcl_NewIntObj((long) DayTime::MJD_JDAY);
    if (value) {
        Tcl_SetVar2(interp,name1,name2,Tcl_GetStringFromObj(value,NULL), flags);
        Tcl_DecrRefCount(value);
    }
    return NULL;
}


static char *_wrap_DayTime_GPS_EPOCH_JDAY_get(ClientData clientData, Tcl_Interp *interp, char *name1, char *name2, int flags) {
    Tcl_Obj *value = 0;
    
    value = Tcl_NewIntObj((long) DayTime::GPS_EPOCH_JDAY);
    if (value) {
        Tcl_SetVar2(interp,name1,name2,Tcl_GetStringFromObj(value,NULL), flags);
        Tcl_DecrRefCount(value);
    }
    return NULL;
}


static char *_wrap_DayTime_GPS_EPOCH_MJD_get(ClientData clientData, Tcl_Interp *interp, char *name1, char *name2, int flags) {
    Tcl_Obj *value = 0;
    
    value = Tcl_NewIntObj((long) DayTime::GPS_EPOCH_MJD);
    if (value) {
        Tcl_SetVar2(interp,name1,name2,Tcl_GetStringFromObj(value,NULL), flags);
        Tcl_DecrRefCount(value);
    }
    return NULL;
}


static char *_wrap_DayTime_UNIX_MJD_get(ClientData clientData, Tcl_Interp *interp, char *name1, char *name2, int flags) {
    Tcl_Obj *value = 0;
    
    value = Tcl_NewIntObj((long) DayTime::UNIX_MJD);
    if (value) {
        Tcl_SetVar2(interp,name1,name2,Tcl_GetStringFromObj(value,NULL), flags);
        Tcl_DecrRefCount(value);
    }
    return NULL;
}


static char *_wrap_DayTime_HALFWEEK_get(ClientData clientData, Tcl_Interp *interp, char *name1, char *name2, int flags) {
    Tcl_Obj *value = 0;
    
    value = Tcl_NewIntObj((long) DayTime::HALFWEEK);
    if (value) {
        Tcl_SetVar2(interp,name1,name2,Tcl_GetStringFromObj(value,NULL), flags);
        Tcl_DecrRefCount(value);
    }
    return NULL;
}


static char *_wrap_DayTime_FULLWEEK_get(ClientData clientData, Tcl_Interp *interp, char *name1, char *name2, int flags) {
    Tcl_Obj *value = 0;
    
    value = Tcl_NewIntObj((long) DayTime::FULLWEEK);
    if (value) {
        Tcl_SetVar2(interp,name1,name2,Tcl_GetStringFromObj(value,NULL), flags);
        Tcl_DecrRefCount(value);
    }
    return NULL;
}


static char *_wrap_DayTime_SEC_DAY_get(ClientData clientData, Tcl_Interp *interp, char *name1, char *name2, int flags) {
    Tcl_Obj *value = 0;
    
    value = Tcl_NewIntObj((long) DayTime::SEC_DAY);
    if (value) {
        Tcl_SetVar2(interp,name1,name2,Tcl_GetStringFromObj(value,NULL), flags);
        Tcl_DecrRefCount(value);
    }
    return NULL;
}


static char *_wrap_DayTime_MS_PER_DAY_get(ClientData clientData, Tcl_Interp *interp, char *name1, char *name2, int flags) {
    Tcl_Obj *value = 0;
    
    value = Tcl_NewIntObj((long) DayTime::MS_PER_DAY);
    if (value) {
        Tcl_SetVar2(interp,name1,name2,Tcl_GetStringFromObj(value,NULL), flags);
        Tcl_DecrRefCount(value);
    }
    return NULL;
}


static char *_wrap_DayTime_ONE_NSEC_TOLERANCE_get(ClientData clientData, Tcl_Interp *interp, char *name1, char *name2, int flags) {
    Tcl_Obj *value = 0;
    
    value = Tcl_NewDoubleObj((double) DayTime::ONE_NSEC_TOLERANCE);
    if (value) {
        Tcl_SetVar2(interp,name1,name2,Tcl_GetStringFromObj(value,NULL), flags);
        Tcl_DecrRefCount(value);
    }
    return NULL;
}


static char *_wrap_DayTime_ONE_USEC_TOLERANCE_get(ClientData clientData, Tcl_Interp *interp, char *name1, char *name2, int flags) {
    Tcl_Obj *value = 0;
    
    value = Tcl_NewDoubleObj((double) DayTime::ONE_USEC_TOLERANCE);
    if (value) {
        Tcl_SetVar2(interp,name1,name2,Tcl_GetStringFromObj(value,NULL), flags);
        Tcl_DecrRefCount(value);
    }
    return NULL;
}


static char *_wrap_DayTime_ONE_MSEC_TOLERANCE_get(ClientData clientData, Tcl_Interp *interp, char *name1, char *name2, int flags) {
    Tcl_Obj *value = 0;
    
    value = Tcl_NewDoubleObj((double) DayTime::ONE_MSEC_TOLERANCE);
    if (value) {
        Tcl_SetVar2(interp,name1,name2,Tcl_GetStringFromObj(value,NULL), flags);
        Tcl_DecrRefCount(value);
    }
    return NULL;
}


static char *_wrap_DayTime_ONE_SEC_TOLERANCE_get(ClientData clientData, Tcl_Interp *interp, char *name1, char *name2, int flags) {
    Tcl_Obj *value = 0;
    
    value = Tcl_NewDoubleObj((double) DayTime::ONE_SEC_TOLERANCE);
    if (value) {
        Tcl_SetVar2(interp,name1,name2,Tcl_GetStringFromObj(value,NULL), flags);
        Tcl_DecrRefCount(value);
    }
    return NULL;
}


static char *_wrap_DayTime_ONE_MIN_TOLERANCE_get(ClientData clientData, Tcl_Interp *interp, char *name1, char *name2, int flags) {
    Tcl_Obj *value = 0;
    
    value = Tcl_NewDoubleObj((double) DayTime::ONE_MIN_TOLERANCE);
    if (value) {
        Tcl_SetVar2(interp,name1,name2,Tcl_GetStringFromObj(value,NULL), flags);
        Tcl_DecrRefCount(value);
    }
    return NULL;
}


static char *_wrap_DayTime_ONE_HOUR_TOLERANCE_get(ClientData clientData, Tcl_Interp *interp, char *name1, char *name2, int flags) {
    Tcl_Obj *value = 0;
    
    value = Tcl_NewDoubleObj((double) DayTime::ONE_HOUR_TOLERANCE);
    if (value) {
        Tcl_SetVar2(interp,name1,name2,Tcl_GetStringFromObj(value,NULL), flags);
        Tcl_DecrRefCount(value);
    }
    return NULL;
}


static char *_wrap_DayTime_DAYTIME_TOLERANCE_get(ClientData clientData, Tcl_Interp *interp, char *name1, char *name2, int flags) {
    Tcl_Obj *value = 0;
    
    value = Tcl_NewDoubleObj((double) DayTime::DAYTIME_TOLERANCE);
    if (value) {
        Tcl_SetVar2(interp,name1,name2,Tcl_GetStringFromObj(value,NULL), flags);
        Tcl_DecrRefCount(value);
    }
    return NULL;
}


static char *_wrap_DayTime_DAYTIME_TOLERANCE_set(ClientData clientData, Tcl_Interp *interp, char *name1, char *name2, int flags) {
    Tcl_Obj *value = 0;
    Tcl_Obj *name1o = 0;
    
    name1o = Tcl_NewStringObj(name1,-1);
    value = Tcl_ObjGetVar2(interp, name1o, 0, flags);
    Tcl_DecrRefCount(name1o);
    if (!value) return NULL;
    {
        double temp;
        if (Tcl_GetDoubleFromObj(interp, value, &temp) != TCL_OK) {
            return (char*) "Type error. expected a double.";
        }
        DayTime::DAYTIME_TOLERANCE = (double) temp;
    }
    return NULL;
}


static char *_wrap_DayTime_BEGIN_LIMIT_JDAY_get(ClientData clientData, Tcl_Interp *interp, char *name1, char *name2, int flags) {
    Tcl_Obj *value = 0;
    
    value = Tcl_NewIntObj((long) DayTime::BEGIN_LIMIT_JDAY);
    if (value) {
        Tcl_SetVar2(interp,name1,name2,Tcl_GetStringFromObj(value,NULL), flags);
        Tcl_DecrRefCount(value);
    }
    return NULL;
}


static char *_wrap_DayTime_END_LIMIT_JDAY_get(ClientData clientData, Tcl_Interp *interp, char *name1, char *name2, int flags) {
    Tcl_Obj *value = 0;
    
    value = Tcl_NewIntObj((long) DayTime::END_LIMIT_JDAY);
    if (value) {
        Tcl_SetVar2(interp,name1,name2,Tcl_GetStringFromObj(value,NULL), flags);
        Tcl_DecrRefCount(value);
    }
    return NULL;
}


static char *_wrap_DayTime_BEGINNING_OF_TIME_get(ClientData clientData, Tcl_Interp *interp, char *name1, char *name2, int flags) {
    Tcl_Obj *value = 0;
    
    value = SWIG_NewInstanceObj((void *) &DayTime::BEGINNING_OF_TIME, SWIGTYPE_p_DayTime,0);
    if (value) {
        Tcl_SetVar2(interp,name1,name2,Tcl_GetStringFromObj(value,NULL), flags);
        Tcl_DecrRefCount(value);
    }
    return NULL;
}


static char *_wrap_DayTime_END_OF_TIME_get(ClientData clientData, Tcl_Interp *interp, char *name1, char *name2, int flags) {
    Tcl_Obj *value = 0;
    
    value = SWIG_NewInstanceObj((void *) &DayTime::END_OF_TIME, SWIGTYPE_p_DayTime,0);
    if (value) {
        Tcl_SetVar2(interp,name1,name2,Tcl_GetStringFromObj(value,NULL), flags);
        Tcl_DecrRefCount(value);
    }
    return NULL;
}


static char *_wrap_DayTime_DAYTIME_TEST_VALID_get(ClientData clientData, Tcl_Interp *interp, char *name1, char *name2, int flags) {
    Tcl_Obj *value = 0;
    
    value = Tcl_NewIntObj((long) DayTime::DAYTIME_TEST_VALID);
    if (value) {
        Tcl_SetVar2(interp,name1,name2,Tcl_GetStringFromObj(value,NULL), flags);
        Tcl_DecrRefCount(value);
    }
    return NULL;
}


static char *_wrap_DayTime_DAYTIME_TEST_VALID_set(ClientData clientData, Tcl_Interp *interp, char *name1, char *name2, int flags) {
    Tcl_Obj *value = 0;
    Tcl_Obj *name1o = 0;
    
    name1o = Tcl_NewStringObj(name1,-1);
    value = Tcl_ObjGetVar2(interp, name1o, 0, flags);
    Tcl_DecrRefCount(name1o);
    if (!value) return NULL;
    {
        long temp;
        if (Tcl_GetLongFromObj(interp, value, &temp) != TCL_OK) {
            return (char*) "Type error. expected an integer";
        }
        DayTime::DAYTIME_TEST_VALID = temp ? true : false;
    }
    return NULL;
}


static int
_wrap_DayTime_setDayTimeTolerance(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    double arg1 ;
    double result;
    
    if (SWIG_GetArgs(interp, objc, objv,"d:DayTime_setDayTimeTolerance tol ",&arg1) == TCL_ERROR) SWIG_fail;
    result = (double)DayTime::setDayTimeTolerance(arg1);
    
    Tcl_SetObjResult(interp,Tcl_NewDoubleObj((double) result));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_DayTime_getDayTimeTolerance(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    double result;
    
    if (SWIG_GetArgs(interp, objc, objv,":DayTime_getDayTimeTolerance ") == TCL_ERROR) SWIG_fail;
    result = (double)DayTime::getDayTimeTolerance();
    
    Tcl_SetObjResult(interp,Tcl_NewDoubleObj((double) result));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_DayTime_setTolerance(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    DayTime *arg1 = (DayTime *) 0 ;
    double arg2 ;
    DayTime *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"od:DayTime_setTolerance self tol ",NULL,&arg2) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_DayTime,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        DayTime &_result_ref = (arg1)->setTolerance(arg2);
        result = (DayTime *) &_result_ref;
    }
    
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_DayTime,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_new_DayTime__SWIG_0(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    DayTime *result;
    
    if (SWIG_GetArgs(interp, objc, objv,":new_DayTime ") == TCL_ERROR) SWIG_fail;
    result = (DayTime *)new DayTime();
    
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_DayTime,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_new_DayTime__SWIG_1(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    short arg1 ;
    double arg2 ;
    DayTime::TimeFrame arg3 ;
    DayTime *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"hdi:new_DayTime GPSWeek GPSSecond f ",&arg1,&arg2,&arg3) == TCL_ERROR) SWIG_fail;
    result = (DayTime *)new DayTime(arg1,arg2,(DayTime::TimeFrame )arg3);
    
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_DayTime,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_new_DayTime__SWIG_2(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    short arg1 ;
    double arg2 ;
    DayTime *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"hd:new_DayTime GPSWeek GPSSecond ",&arg1,&arg2) == TCL_ERROR) SWIG_fail;
    result = (DayTime *)new DayTime(arg1,arg2);
    
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_DayTime,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_new_DayTime__SWIG_3(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    unsigned long arg1 ;
    DayTime::TimeFrame arg2 ;
    DayTime *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"li:new_DayTime fullZcount f ",&arg1,&arg2) == TCL_ERROR) SWIG_fail;
    result = (DayTime *)new DayTime(arg1,(DayTime::TimeFrame )arg2);
    
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_DayTime,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_new_DayTime__SWIG_4(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    unsigned long arg1 ;
    DayTime *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"l:new_DayTime fullZcount ",&arg1) == TCL_ERROR) SWIG_fail;
    result = (DayTime *)new DayTime(arg1);
    
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_DayTime,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_new_DayTime__SWIG_5(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    short arg1 ;
    short arg2 ;
    short arg3 ;
    short arg4 ;
    short arg5 ;
    double arg6 ;
    DayTime::TimeFrame arg7 ;
    DayTime *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"hhhhhdi:new_DayTime year month day hour minute second f ",&arg1,&arg2,&arg3,&arg4,&arg5,&arg6,&arg7) == TCL_ERROR) SWIG_fail;
    result = (DayTime *)new DayTime(arg1,arg2,arg3,arg4,arg5,arg6,(DayTime::TimeFrame )arg7);
    
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_DayTime,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_new_DayTime__SWIG_6(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    short arg1 ;
    short arg2 ;
    short arg3 ;
    short arg4 ;
    short arg5 ;
    double arg6 ;
    DayTime *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"hhhhhd:new_DayTime year month day hour minute second ",&arg1,&arg2,&arg3,&arg4,&arg5,&arg6) == TCL_ERROR) SWIG_fail;
    result = (DayTime *)new DayTime(arg1,arg2,arg3,arg4,arg5,arg6);
    
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_DayTime,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_new_DayTime__SWIG_7(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    double arg1 ;
    DayTime::TimeFrame arg2 ;
    DayTime *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"di:new_DayTime MJD f ",&arg1,&arg2) == TCL_ERROR) SWIG_fail;
    result = (DayTime *)new DayTime(arg1,(DayTime::TimeFrame )arg2);
    
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_DayTime,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_new_DayTime__SWIG_8(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    double arg1 ;
    DayTime *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"d:new_DayTime MJD ",&arg1) == TCL_ERROR) SWIG_fail;
    result = (DayTime *)new DayTime(arg1);
    
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_DayTime,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_new_DayTime__SWIG_9(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    short arg1 ;
    short arg2 ;
    double arg3 ;
    DayTime::TimeFrame arg4 ;
    DayTime *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"hhdi:new_DayTime year doy sod f ",&arg1,&arg2,&arg3,&arg4) == TCL_ERROR) SWIG_fail;
    result = (DayTime *)new DayTime(arg1,arg2,arg3,(DayTime::TimeFrame )arg4);
    
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_DayTime,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_new_DayTime__SWIG_10(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    short arg1 ;
    short arg2 ;
    double arg3 ;
    DayTime *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"hhd:new_DayTime year doy sod ",&arg1,&arg2,&arg3) == TCL_ERROR) SWIG_fail;
    result = (DayTime *)new DayTime(arg1,arg2,arg3);
    
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_DayTime,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_new_DayTime__SWIG_11(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    DayTime *arg1 = 0 ;
    DayTime *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"o:new_DayTime right ",NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_DayTime,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    result = (DayTime *)new DayTime((DayTime const &)*arg1);
    
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_DayTime,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_new_DayTime(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    Tcl_Obj *CONST *argv = objv+1;
    int argc = objc-1;
    if (argc == 0) {
        return _wrap_new_DayTime__SWIG_0(clientData, interp, objc, objv);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_DayTime, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_new_DayTime__SWIG_11(clientData, interp, objc, objv);
        }
    }
    if (argc == 1) {
        int _v;
        {
            long tmp;
            if (Tcl_GetLongFromObj(NULL,argv[0],&tmp) == TCL_ERROR) _v = 0;
            else _v = 1;
        }
        if (_v) {
            return _wrap_new_DayTime__SWIG_4(clientData, interp, objc, objv);
        }
    }
    if (argc == 1) {
        int _v;
        {
            double tmp;
            if (Tcl_GetDoubleFromObj(NULL,argv[0],&tmp) == TCL_ERROR) _v = 0;
            else _v = 1;
        }
        if (_v) {
            return _wrap_new_DayTime__SWIG_8(clientData, interp, objc, objv);
        }
    }
    if (argc == 2) {
        int _v;
        {
            long tmp;
            if (Tcl_GetLongFromObj(NULL,argv[0],&tmp) == TCL_ERROR) _v = 0;
            else _v = 1;
        }
        if (_v) {
            {
                long tmp;
                if (Tcl_GetLongFromObj(NULL,argv[1],&tmp) == TCL_ERROR) _v = 0;
                else _v = 1;
            }
            if (_v) {
                return _wrap_new_DayTime__SWIG_3(clientData, interp, objc, objv);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            long tmp;
            if (Tcl_GetLongFromObj(NULL,argv[0],&tmp) == TCL_ERROR) _v = 0;
            else _v = 1;
        }
        if (_v) {
            {
                double tmp;
                if (Tcl_GetDoubleFromObj(NULL,argv[1],&tmp) == TCL_ERROR) _v = 0;
                else _v = 1;
            }
            if (_v) {
                return _wrap_new_DayTime__SWIG_2(clientData, interp, objc, objv);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            double tmp;
            if (Tcl_GetDoubleFromObj(NULL,argv[0],&tmp) == TCL_ERROR) _v = 0;
            else _v = 1;
        }
        if (_v) {
            {
                long tmp;
                if (Tcl_GetLongFromObj(NULL,argv[1],&tmp) == TCL_ERROR) _v = 0;
                else _v = 1;
            }
            if (_v) {
                return _wrap_new_DayTime__SWIG_7(clientData, interp, objc, objv);
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            long tmp;
            if (Tcl_GetLongFromObj(NULL,argv[0],&tmp) == TCL_ERROR) _v = 0;
            else _v = 1;
        }
        if (_v) {
            {
                long tmp;
                if (Tcl_GetLongFromObj(NULL,argv[1],&tmp) == TCL_ERROR) _v = 0;
                else _v = 1;
            }
            if (_v) {
                {
                    double tmp;
                    if (Tcl_GetDoubleFromObj(NULL,argv[2],&tmp) == TCL_ERROR) _v = 0;
                    else _v = 1;
                }
                if (_v) {
                    return _wrap_new_DayTime__SWIG_10(clientData, interp, objc, objv);
                }
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            long tmp;
            if (Tcl_GetLongFromObj(NULL,argv[0],&tmp) == TCL_ERROR) _v = 0;
            else _v = 1;
        }
        if (_v) {
            {
                double tmp;
                if (Tcl_GetDoubleFromObj(NULL,argv[1],&tmp) == TCL_ERROR) _v = 0;
                else _v = 1;
            }
            if (_v) {
                {
                    long tmp;
                    if (Tcl_GetLongFromObj(NULL,argv[2],&tmp) == TCL_ERROR) _v = 0;
                    else _v = 1;
                }
                if (_v) {
                    return _wrap_new_DayTime__SWIG_1(clientData, interp, objc, objv);
                }
            }
        }
    }
    if (argc == 4) {
        int _v;
        {
            long tmp;
            if (Tcl_GetLongFromObj(NULL,argv[0],&tmp) == TCL_ERROR) _v = 0;
            else _v = 1;
        }
        if (_v) {
            {
                long tmp;
                if (Tcl_GetLongFromObj(NULL,argv[1],&tmp) == TCL_ERROR) _v = 0;
                else _v = 1;
            }
            if (_v) {
                {
                    double tmp;
                    if (Tcl_GetDoubleFromObj(NULL,argv[2],&tmp) == TCL_ERROR) _v = 0;
                    else _v = 1;
                }
                if (_v) {
                    {
                        long tmp;
                        if (Tcl_GetLongFromObj(NULL,argv[3],&tmp) == TCL_ERROR) _v = 0;
                        else _v = 1;
                    }
                    if (_v) {
                        return _wrap_new_DayTime__SWIG_9(clientData, interp, objc, objv);
                    }
                }
            }
        }
    }
    if (argc == 6) {
        int _v;
        {
            long tmp;
            if (Tcl_GetLongFromObj(NULL,argv[0],&tmp) == TCL_ERROR) _v = 0;
            else _v = 1;
        }
        if (_v) {
            {
                long tmp;
                if (Tcl_GetLongFromObj(NULL,argv[1],&tmp) == TCL_ERROR) _v = 0;
                else _v = 1;
            }
            if (_v) {
                {
                    long tmp;
                    if (Tcl_GetLongFromObj(NULL,argv[2],&tmp) == TCL_ERROR) _v = 0;
                    else _v = 1;
                }
                if (_v) {
                    {
                        long tmp;
                        if (Tcl_GetLongFromObj(NULL,argv[3],&tmp) == TCL_ERROR) _v = 0;
                        else _v = 1;
                    }
                    if (_v) {
                        {
                            long tmp;
                            if (Tcl_GetLongFromObj(NULL,argv[4],&tmp) == TCL_ERROR) _v = 0;
                            else _v = 1;
                        }
                        if (_v) {
                            {
                                double tmp;
                                if (Tcl_GetDoubleFromObj(NULL,argv[5],&tmp) == TCL_ERROR) _v = 0;
                                else _v = 1;
                            }
                            if (_v) {
                                return _wrap_new_DayTime__SWIG_6(clientData, interp, objc, objv);
                            }
                        }
                    }
                }
            }
        }
    }
    if (argc == 7) {
        int _v;
        {
            long tmp;
            if (Tcl_GetLongFromObj(NULL,argv[0],&tmp) == TCL_ERROR) _v = 0;
            else _v = 1;
        }
        if (_v) {
            {
                long tmp;
                if (Tcl_GetLongFromObj(NULL,argv[1],&tmp) == TCL_ERROR) _v = 0;
                else _v = 1;
            }
            if (_v) {
                {
                    long tmp;
                    if (Tcl_GetLongFromObj(NULL,argv[2],&tmp) == TCL_ERROR) _v = 0;
                    else _v = 1;
                }
                if (_v) {
                    {
                        long tmp;
                        if (Tcl_GetLongFromObj(NULL,argv[3],&tmp) == TCL_ERROR) _v = 0;
                        else _v = 1;
                    }
                    if (_v) {
                        {
                            long tmp;
                            if (Tcl_GetLongFromObj(NULL,argv[4],&tmp) == TCL_ERROR) _v = 0;
                            else _v = 1;
                        }
                        if (_v) {
                            {
                                double tmp;
                                if (Tcl_GetDoubleFromObj(NULL,argv[5],&tmp) == TCL_ERROR) _v = 0;
                                else _v = 1;
                            }
                            if (_v) {
                                {
                                    long tmp;
                                    if (Tcl_GetLongFromObj(NULL,argv[6],&tmp) == TCL_ERROR) _v = 0;
                                    else _v = 1;
                                }
                                if (_v) {
                                    return _wrap_new_DayTime__SWIG_5(clientData, interp, objc, objv);
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    
    Tcl_SetResult(interp,(char *) "No matching function for overloaded 'new_DayTime'", TCL_STATIC);
    return TCL_ERROR;
}


static int
_wrap_DayTime_e___(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    DayTime *arg1 = (DayTime *) 0 ;
    DayTime *arg2 = 0 ;
    DayTime *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"oo:DayTime_= self right ",NULL,NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_DayTime,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[2], (void **) &arg2, SWIGTYPE_p_DayTime,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        DayTime &_result_ref = (arg1)->operator =((DayTime const &)*arg2);
        result = (DayTime *) &_result_ref;
    }
    
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_DayTime,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_DayTime_s_____SWIG_0(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    DayTime *arg1 = (DayTime *) 0 ;
    DayTime *arg2 = 0 ;
    double result;
    
    if (SWIG_GetArgs(interp, objc, objv,"oo:DayTime_- self right ",NULL,NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_DayTime,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[2], (void **) &arg2, SWIGTYPE_p_DayTime,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    result = (double)((DayTime const *)arg1)->operator -((DayTime const &)*arg2);
    
    Tcl_SetObjResult(interp,Tcl_NewDoubleObj((double) result));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_DayTime_a___(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    DayTime *arg1 = (DayTime *) 0 ;
    double arg2 ;
    DayTime result;
    
    if (SWIG_GetArgs(interp, objc, objv,"od:DayTime_+ self sec ",NULL,&arg2) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_DayTime,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    result = ((DayTime const *)arg1)->operator +(arg2);
    
    {
        DayTime * resultptr;
        resultptr = new DayTime((DayTime &) result);
        Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void*) resultptr, SWIGTYPE_p_DayTime,1));
    }
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_DayTime_s_____SWIG_1(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    DayTime *arg1 = (DayTime *) 0 ;
    double arg2 ;
    DayTime result;
    
    if (SWIG_GetArgs(interp, objc, objv,"od:DayTime_- self sec ",NULL,&arg2) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_DayTime,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    result = ((DayTime const *)arg1)->operator -(arg2);
    
    {
        DayTime * resultptr;
        resultptr = new DayTime((DayTime &) result);
        Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void*) resultptr, SWIGTYPE_p_DayTime,1));
    }
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_DayTime_s___(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    Tcl_Obj *CONST *argv = objv+1;
    int argc = objc-1;
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_DayTime, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_DayTime, 0) == TCL_ERROR) {
                    _v = 0;
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                return _wrap_DayTime_s_____SWIG_0(clientData, interp, objc, objv);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_DayTime, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                double tmp;
                if (Tcl_GetDoubleFromObj(NULL,argv[1],&tmp) == TCL_ERROR) _v = 0;
                else _v = 1;
            }
            if (_v) {
                return _wrap_DayTime_s_____SWIG_1(clientData, interp, objc, objv);
            }
        }
    }
    
    Tcl_SetResult(interp,(char *) "No matching function for overloaded 'DayTime_-'", TCL_STATIC);
    return TCL_ERROR;
}


static int
_wrap_DayTime_addSeconds__SWIG_0(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    DayTime *arg1 = (DayTime *) 0 ;
    double arg2 ;
    DayTime *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"od:DayTime_addSeconds self seconds ",NULL,&arg2) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_DayTime,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        DayTime &_result_ref = (arg1)->addSeconds(arg2);
        result = (DayTime *) &_result_ref;
    }
    
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_DayTime,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_DayTime_addSeconds__SWIG_1(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    DayTime *arg1 = (DayTime *) 0 ;
    long arg2 ;
    DayTime *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"ol:DayTime_addSeconds self seconds ",NULL,&arg2) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_DayTime,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        DayTime &_result_ref = (arg1)->addSeconds(arg2);
        result = (DayTime *) &_result_ref;
    }
    
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_DayTime,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_DayTime_addSeconds(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    Tcl_Obj *CONST *argv = objv+1;
    int argc = objc-1;
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_DayTime, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                long tmp;
                if (Tcl_GetLongFromObj(NULL,argv[1],&tmp) == TCL_ERROR) _v = 0;
                else _v = 1;
            }
            if (_v) {
                return _wrap_DayTime_addSeconds__SWIG_1(clientData, interp, objc, objv);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_DayTime, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                double tmp;
                if (Tcl_GetDoubleFromObj(NULL,argv[1],&tmp) == TCL_ERROR) _v = 0;
                else _v = 1;
            }
            if (_v) {
                return _wrap_DayTime_addSeconds__SWIG_0(clientData, interp, objc, objv);
            }
        }
    }
    
    Tcl_SetResult(interp,(char *) "No matching function for overloaded 'DayTime_addSeconds'", TCL_STATIC);
    return TCL_ERROR;
}


static int
_wrap_DayTime_addMilliSeconds(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    DayTime *arg1 = (DayTime *) 0 ;
    long arg2 ;
    DayTime *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"ol:DayTime_addMilliSeconds self msec ",NULL,&arg2) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_DayTime,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        DayTime &_result_ref = (arg1)->addMilliSeconds(arg2);
        result = (DayTime *) &_result_ref;
    }
    
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_DayTime,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_DayTime_addMicroSeconds(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    DayTime *arg1 = (DayTime *) 0 ;
    long arg2 ;
    DayTime *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"ol:DayTime_addMicroSeconds self usec ",NULL,&arg2) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_DayTime,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        DayTime &_result_ref = (arg1)->addMicroSeconds(arg2);
        result = (DayTime *) &_result_ref;
    }
    
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_DayTime,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_DayTime_operator_equal_to(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    DayTime *arg1 = (DayTime *) 0 ;
    DayTime *arg2 = 0 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"oo:DayTime_operator_equal_to self right ",NULL,NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_DayTime,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[2], (void **) &arg2, SWIGTYPE_p_DayTime,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    result = (bool)((DayTime const *)arg1)->operator ==((DayTime const &)*arg2);
    
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_DayTime_operator_not_equal_to(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    DayTime *arg1 = (DayTime *) 0 ;
    DayTime *arg2 = 0 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"oo:DayTime_operator_not_equal_to self right ",NULL,NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_DayTime,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[2], (void **) &arg2, SWIGTYPE_p_DayTime,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    result = (bool)((DayTime const *)arg1)->operator !=((DayTime const &)*arg2);
    
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_DayTime_operator_less_than(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    DayTime *arg1 = (DayTime *) 0 ;
    DayTime *arg2 = 0 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"oo:DayTime_operator_less_than self right ",NULL,NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_DayTime,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[2], (void **) &arg2, SWIGTYPE_p_DayTime,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    result = (bool)((DayTime const *)arg1)->operator <((DayTime const &)*arg2);
    
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_DayTime_operator_greater_than(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    DayTime *arg1 = (DayTime *) 0 ;
    DayTime *arg2 = 0 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"oo:DayTime_operator_greater_than self right ",NULL,NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_DayTime,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[2], (void **) &arg2, SWIGTYPE_p_DayTime,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    result = (bool)((DayTime const *)arg1)->operator >((DayTime const &)*arg2);
    
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_DayTime_operator_less_than_equal_to(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    DayTime *arg1 = (DayTime *) 0 ;
    DayTime *arg2 = 0 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"oo:DayTime_operator_less_than_equal_to self right ",NULL,NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_DayTime,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[2], (void **) &arg2, SWIGTYPE_p_DayTime,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    result = (bool)((DayTime const *)arg1)->operator <=((DayTime const &)*arg2);
    
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_DayTime_operator_greater_than_equal_to(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    DayTime *arg1 = (DayTime *) 0 ;
    DayTime *arg2 = 0 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"oo:DayTime_operator_greater_than_equal_to self right ",NULL,NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_DayTime,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[2], (void **) &arg2, SWIGTYPE_p_DayTime,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    result = (bool)((DayTime const *)arg1)->operator >=((DayTime const &)*arg2);
    
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_DayTime_setAllButTimeFrame(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    DayTime *arg1 = (DayTime *) 0 ;
    DayTime *arg2 = 0 ;
    DayTime *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"oo:DayTime_setAllButTimeFrame self right ",NULL,NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_DayTime,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[2], (void **) &arg2, SWIGTYPE_p_DayTime,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        DayTime &_result_ref = (arg1)->setAllButTimeFrame((DayTime const &)*arg2);
        result = (DayTime *) &_result_ref;
    }
    
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_DayTime,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_DayTime_setTimeFrame(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    DayTime *arg1 = (DayTime *) 0 ;
    DayTime::TimeFrame arg2 ;
    DayTime *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"oi:DayTime_setTimeFrame self f ",NULL,&arg2) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_DayTime,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        DayTime &_result_ref = (arg1)->setTimeFrame((DayTime::TimeFrame )arg2);
        result = (DayTime *) &_result_ref;
    }
    
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_DayTime,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_DayTime_getTimeFrame(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    DayTime *arg1 = (DayTime *) 0 ;
    DayTime::TimeFrame result;
    
    if (SWIG_GetArgs(interp, objc, objv,"o:DayTime_getTimeFrame self ",NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_DayTime,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    result = (DayTime::TimeFrame)((DayTime const *)arg1)->getTimeFrame();
    
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_DayTime_JD(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    DayTime *arg1 = (DayTime *) 0 ;
    double result;
    
    if (SWIG_GetArgs(interp, objc, objv,"o:DayTime_JD self ",NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_DayTime,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    result = (double)((DayTime const *)arg1)->JD();
    
    Tcl_SetObjResult(interp,Tcl_NewDoubleObj((double) result));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_DayTime_MJD(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    DayTime *arg1 = (DayTime *) 0 ;
    double result;
    
    if (SWIG_GetArgs(interp, objc, objv,"o:DayTime_MJD self ",NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_DayTime,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    result = (double)((DayTime const *)arg1)->MJD();
    
    Tcl_SetObjResult(interp,Tcl_NewDoubleObj((double) result));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_DayTime_year(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    DayTime *arg1 = (DayTime *) 0 ;
    short result;
    
    if (SWIG_GetArgs(interp, objc, objv,"o:DayTime_year self ",NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_DayTime,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    result = (short)((DayTime const *)arg1)->year();
    
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_DayTime_month(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    DayTime *arg1 = (DayTime *) 0 ;
    short result;
    
    if (SWIG_GetArgs(interp, objc, objv,"o:DayTime_month self ",NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_DayTime,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    result = (short)((DayTime const *)arg1)->month();
    
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_DayTime_day(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    DayTime *arg1 = (DayTime *) 0 ;
    short result;
    
    if (SWIG_GetArgs(interp, objc, objv,"o:DayTime_day self ",NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_DayTime,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    result = (short)((DayTime const *)arg1)->day();
    
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_DayTime_dayOfWeek(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    DayTime *arg1 = (DayTime *) 0 ;
    short result;
    
    if (SWIG_GetArgs(interp, objc, objv,"o:DayTime_dayOfWeek self ",NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_DayTime,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    result = (short)((DayTime const *)arg1)->dayOfWeek();
    
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_DayTime_getYMD(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    DayTime *arg1 = (DayTime *) 0 ;
    int *arg2 = 0 ;
    int *arg3 = 0 ;
    int *arg4 = 0 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"oooo:DayTime_getYMD self yy mm dd ",NULL,NULL,NULL,NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_DayTime,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[2], (void **) &arg2, SWIGTYPE_p_int,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[3], (void **) &arg3, SWIGTYPE_p_int,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[4], (void **) &arg4, SWIGTYPE_p_int,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    ((DayTime const *)arg1)->getYMD(*arg2,*arg3,*arg4);
    
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_DayTime_hour(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    DayTime *arg1 = (DayTime *) 0 ;
    short result;
    
    if (SWIG_GetArgs(interp, objc, objv,"o:DayTime_hour self ",NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_DayTime,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    result = (short)((DayTime const *)arg1)->hour();
    
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_DayTime_minute(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    DayTime *arg1 = (DayTime *) 0 ;
    short result;
    
    if (SWIG_GetArgs(interp, objc, objv,"o:DayTime_minute self ",NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_DayTime,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    result = (short)((DayTime const *)arg1)->minute();
    
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_DayTime_second(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    DayTime *arg1 = (DayTime *) 0 ;
    double result;
    
    if (SWIG_GetArgs(interp, objc, objv,"o:DayTime_second self ",NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_DayTime,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    result = (double)((DayTime const *)arg1)->second();
    
    Tcl_SetObjResult(interp,Tcl_NewDoubleObj((double) result));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_DayTime_secOfDay(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    DayTime *arg1 = (DayTime *) 0 ;
    double result;
    
    if (SWIG_GetArgs(interp, objc, objv,"o:DayTime_secOfDay self ",NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_DayTime,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    result = (double)((DayTime const *)arg1)->secOfDay();
    
    Tcl_SetObjResult(interp,Tcl_NewDoubleObj((double) result));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_DayTime_GPS10bitweek(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    DayTime *arg1 = (DayTime *) 0 ;
    short result;
    
    if (SWIG_GetArgs(interp, objc, objv,"o:DayTime_GPS10bitweek self ",NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_DayTime,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    result = (short)((DayTime const *)arg1)->GPS10bitweek();
    
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_DayTime_GPSzcount(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    DayTime *arg1 = (DayTime *) 0 ;
    long result;
    
    if (SWIG_GetArgs(interp, objc, objv,"o:DayTime_GPSzcount self ",NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_DayTime,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    result = (long)((DayTime const *)arg1)->GPSzcount();
    
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_DayTime_GPSzcountFloor(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    DayTime *arg1 = (DayTime *) 0 ;
    long result;
    
    if (SWIG_GetArgs(interp, objc, objv,"o:DayTime_GPSzcountFloor self ",NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_DayTime,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    result = (long)((DayTime const *)arg1)->GPSzcountFloor();
    
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_DayTime_GPSsecond(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    DayTime *arg1 = (DayTime *) 0 ;
    double result;
    
    if (SWIG_GetArgs(interp, objc, objv,"o:DayTime_GPSsecond self ",NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_DayTime,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    result = (double)((DayTime const *)arg1)->GPSsecond();
    
    Tcl_SetObjResult(interp,Tcl_NewDoubleObj((double) result));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_DayTime_GPSsow(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    DayTime *arg1 = (DayTime *) 0 ;
    double result;
    
    if (SWIG_GetArgs(interp, objc, objv,"o:DayTime_GPSsow self ",NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_DayTime,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    result = (double)((DayTime const *)arg1)->GPSsow();
    
    Tcl_SetObjResult(interp,Tcl_NewDoubleObj((double) result));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_DayTime_GPSday(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    DayTime *arg1 = (DayTime *) 0 ;
    short result;
    
    if (SWIG_GetArgs(interp, objc, objv,"o:DayTime_GPSday self ",NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_DayTime,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    result = (short)((DayTime const *)arg1)->GPSday();
    
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_DayTime_GPSfullweek(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    DayTime *arg1 = (DayTime *) 0 ;
    short result;
    
    if (SWIG_GetArgs(interp, objc, objv,"o:DayTime_GPSfullweek self ",NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_DayTime,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    result = (short)((DayTime const *)arg1)->GPSfullweek();
    
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_DayTime_GPSyear(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    DayTime *arg1 = (DayTime *) 0 ;
    short result;
    
    if (SWIG_GetArgs(interp, objc, objv,"o:DayTime_GPSyear self ",NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_DayTime,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    result = (short)((DayTime const *)arg1)->GPSyear();
    
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_DayTime_DOYyear(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    DayTime *arg1 = (DayTime *) 0 ;
    short result;
    
    if (SWIG_GetArgs(interp, objc, objv,"o:DayTime_DOYyear self ",NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_DayTime,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    result = (short)((DayTime const *)arg1)->DOYyear();
    
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_DayTime_DOY(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    DayTime *arg1 = (DayTime *) 0 ;
    short result;
    
    if (SWIG_GetArgs(interp, objc, objv,"o:DayTime_DOY self ",NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_DayTime,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    result = (short)((DayTime const *)arg1)->DOY();
    
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_DayTime_DOYsecond(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    DayTime *arg1 = (DayTime *) 0 ;
    double result;
    
    if (SWIG_GetArgs(interp, objc, objv,"o:DayTime_DOYsecond self ",NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_DayTime,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    result = (double)((DayTime const *)arg1)->DOYsecond();
    
    Tcl_SetObjResult(interp,Tcl_NewDoubleObj((double) result));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_DayTime_MJDdate(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    DayTime *arg1 = (DayTime *) 0 ;
    double result;
    
    if (SWIG_GetArgs(interp, objc, objv,"o:DayTime_MJDdate self ",NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_DayTime,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    result = (double)((DayTime const *)arg1)->MJDdate();
    
    Tcl_SetObjResult(interp,Tcl_NewDoubleObj((double) result));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_DayTime_getMJDasLongDouble(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    DayTime *arg1 = (DayTime *) 0 ;
    long double result;
    
    if (SWIG_GetArgs(interp, objc, objv,"o:DayTime_getMJDasLongDouble self ",NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_DayTime,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    result = (long double)((DayTime const *)arg1)->getMJDasLongDouble();
    
    {
        long double * resultptr;
        resultptr = new long double((long double &) result);
        Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void*) resultptr, SWIGTYPE_p_long_double,1));
    }
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_DayTime_unixTime(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    DayTime *arg1 = (DayTime *) 0 ;
    timeval result;
    
    if (SWIG_GetArgs(interp, objc, objv,"o:DayTime_unixTime self ",NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_DayTime,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    result = ((DayTime const *)arg1)->unixTime();
    
    {
        timeval * resultptr;
        resultptr = new timeval((timeval &) result);
        Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void*) resultptr, SWIGTYPE_p_timeval,1));
    }
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_DayTime_fullZcount(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    DayTime *arg1 = (DayTime *) 0 ;
    unsigned long result;
    
    if (SWIG_GetArgs(interp, objc, objv,"o:DayTime_fullZcount self ",NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_DayTime,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    result = (unsigned long)((DayTime const *)arg1)->fullZcount();
    
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_DayTime_fullZcountFloor(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    DayTime *arg1 = (DayTime *) 0 ;
    unsigned long result;
    
    if (SWIG_GetArgs(interp, objc, objv,"o:DayTime_fullZcountFloor self ",NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_DayTime,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    result = (unsigned long)((DayTime const *)arg1)->fullZcountFloor();
    
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_DayTime_setYMDHMS__SWIG_0(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    DayTime *arg1 = (DayTime *) 0 ;
    short arg2 ;
    short arg3 ;
    short arg4 ;
    short arg5 ;
    short arg6 ;
    double arg7 ;
    DayTime::TimeFrame arg8 ;
    DayTime *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"ohhhhhdi:DayTime_setYMDHMS self year month day hour min sec f ",NULL,&arg2,&arg3,&arg4,&arg5,&arg6,&arg7,&arg8) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_DayTime,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        DayTime &_result_ref = (arg1)->setYMDHMS(arg2,arg3,arg4,arg5,arg6,arg7,(DayTime::TimeFrame )arg8);
        result = (DayTime *) &_result_ref;
    }
    
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_DayTime,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_DayTime_setYMDHMS__SWIG_1(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    DayTime *arg1 = (DayTime *) 0 ;
    short arg2 ;
    short arg3 ;
    short arg4 ;
    short arg5 ;
    short arg6 ;
    double arg7 ;
    DayTime *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"ohhhhhd:DayTime_setYMDHMS self year month day hour min sec ",NULL,&arg2,&arg3,&arg4,&arg5,&arg6,&arg7) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_DayTime,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        DayTime &_result_ref = (arg1)->setYMDHMS(arg2,arg3,arg4,arg5,arg6,arg7);
        result = (DayTime *) &_result_ref;
    }
    
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_DayTime,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_DayTime_setYMDHMS(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    Tcl_Obj *CONST *argv = objv+1;
    int argc = objc-1;
    if (argc == 7) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_DayTime, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                long tmp;
                if (Tcl_GetLongFromObj(NULL,argv[1],&tmp) == TCL_ERROR) _v = 0;
                else _v = 1;
            }
            if (_v) {
                {
                    long tmp;
                    if (Tcl_GetLongFromObj(NULL,argv[2],&tmp) == TCL_ERROR) _v = 0;
                    else _v = 1;
                }
                if (_v) {
                    {
                        long tmp;
                        if (Tcl_GetLongFromObj(NULL,argv[3],&tmp) == TCL_ERROR) _v = 0;
                        else _v = 1;
                    }
                    if (_v) {
                        {
                            long tmp;
                            if (Tcl_GetLongFromObj(NULL,argv[4],&tmp) == TCL_ERROR) _v = 0;
                            else _v = 1;
                        }
                        if (_v) {
                            {
                                long tmp;
                                if (Tcl_GetLongFromObj(NULL,argv[5],&tmp) == TCL_ERROR) _v = 0;
                                else _v = 1;
                            }
                            if (_v) {
                                {
                                    double tmp;
                                    if (Tcl_GetDoubleFromObj(NULL,argv[6],&tmp) == TCL_ERROR) _v = 0;
                                    else _v = 1;
                                }
                                if (_v) {
                                    return _wrap_DayTime_setYMDHMS__SWIG_1(clientData, interp, objc, objv);
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    if (argc == 8) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_DayTime, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                long tmp;
                if (Tcl_GetLongFromObj(NULL,argv[1],&tmp) == TCL_ERROR) _v = 0;
                else _v = 1;
            }
            if (_v) {
                {
                    long tmp;
                    if (Tcl_GetLongFromObj(NULL,argv[2],&tmp) == TCL_ERROR) _v = 0;
                    else _v = 1;
                }
                if (_v) {
                    {
                        long tmp;
                        if (Tcl_GetLongFromObj(NULL,argv[3],&tmp) == TCL_ERROR) _v = 0;
                        else _v = 1;
                    }
                    if (_v) {
                        {
                            long tmp;
                            if (Tcl_GetLongFromObj(NULL,argv[4],&tmp) == TCL_ERROR) _v = 0;
                            else _v = 1;
                        }
                        if (_v) {
                            {
                                long tmp;
                                if (Tcl_GetLongFromObj(NULL,argv[5],&tmp) == TCL_ERROR) _v = 0;
                                else _v = 1;
                            }
                            if (_v) {
                                {
                                    double tmp;
                                    if (Tcl_GetDoubleFromObj(NULL,argv[6],&tmp) == TCL_ERROR) _v = 0;
                                    else _v = 1;
                                }
                                if (_v) {
                                    {
                                        long tmp;
                                        if (Tcl_GetLongFromObj(NULL,argv[7],&tmp) == TCL_ERROR) _v = 0;
                                        else _v = 1;
                                    }
                                    if (_v) {
                                        return _wrap_DayTime_setYMDHMS__SWIG_0(clientData, interp, objc, objv);
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    
    Tcl_SetResult(interp,(char *) "No matching function for overloaded 'DayTime_setYMDHMS'", TCL_STATIC);
    return TCL_ERROR;
}


static int
_wrap_DayTime_setGPS__SWIG_0(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    DayTime *arg1 = (DayTime *) 0 ;
    short arg2 ;
    double arg3 ;
    DayTime::TimeFrame arg4 ;
    DayTime *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"ohdi:DayTime_setGPS self week sow f ",NULL,&arg2,&arg3,&arg4) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_DayTime,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        DayTime &_result_ref = (arg1)->setGPS(arg2,arg3,(DayTime::TimeFrame )arg4);
        result = (DayTime *) &_result_ref;
    }
    
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_DayTime,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_DayTime_setGPS__SWIG_1(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    DayTime *arg1 = (DayTime *) 0 ;
    short arg2 ;
    double arg3 ;
    DayTime *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"ohd:DayTime_setGPS self week sow ",NULL,&arg2,&arg3) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_DayTime,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        DayTime &_result_ref = (arg1)->setGPS(arg2,arg3);
        result = (DayTime *) &_result_ref;
    }
    
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_DayTime,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_DayTime_setGPS__SWIG_2(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    DayTime *arg1 = (DayTime *) 0 ;
    short arg2 ;
    long arg3 ;
    DayTime::TimeFrame arg4 ;
    DayTime *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"ohli:DayTime_setGPS self week zcount f ",NULL,&arg2,&arg3,&arg4) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_DayTime,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        DayTime &_result_ref = (arg1)->setGPS(arg2,arg3,(DayTime::TimeFrame )arg4);
        result = (DayTime *) &_result_ref;
    }
    
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_DayTime,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_DayTime_setGPS__SWIG_3(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    DayTime *arg1 = (DayTime *) 0 ;
    short arg2 ;
    long arg3 ;
    DayTime *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"ohl:DayTime_setGPS self week zcount ",NULL,&arg2,&arg3) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_DayTime,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        DayTime &_result_ref = (arg1)->setGPS(arg2,arg3);
        result = (DayTime *) &_result_ref;
    }
    
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_DayTime,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_DayTime_setGPS__SWIG_4(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    DayTime *arg1 = (DayTime *) 0 ;
    short arg2 ;
    double arg3 ;
    short arg4 ;
    DayTime::TimeFrame arg5 ;
    DayTime *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"ohdhi:DayTime_setGPS self week sow year f ",NULL,&arg2,&arg3,&arg4,&arg5) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_DayTime,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        DayTime &_result_ref = (arg1)->setGPS(arg2,arg3,arg4,(DayTime::TimeFrame )arg5);
        result = (DayTime *) &_result_ref;
    }
    
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_DayTime,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_DayTime_setGPS__SWIG_5(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    DayTime *arg1 = (DayTime *) 0 ;
    short arg2 ;
    double arg3 ;
    short arg4 ;
    DayTime *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"ohdh:DayTime_setGPS self week sow year ",NULL,&arg2,&arg3,&arg4) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_DayTime,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        DayTime &_result_ref = (arg1)->setGPS(arg2,arg3,arg4);
        result = (DayTime *) &_result_ref;
    }
    
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_DayTime,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_DayTime_setGPS__SWIG_6(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    DayTime *arg1 = (DayTime *) 0 ;
    unsigned long arg2 ;
    DayTime::TimeFrame arg3 ;
    DayTime *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"oli:DayTime_setGPS self Zcount f ",NULL,&arg2,&arg3) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_DayTime,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        DayTime &_result_ref = (arg1)->setGPS(arg2,(DayTime::TimeFrame )arg3);
        result = (DayTime *) &_result_ref;
    }
    
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_DayTime,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_DayTime_setGPS__SWIG_7(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    DayTime *arg1 = (DayTime *) 0 ;
    unsigned long arg2 ;
    DayTime *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"ol:DayTime_setGPS self Zcount ",NULL,&arg2) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_DayTime,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        DayTime &_result_ref = (arg1)->setGPS(arg2);
        result = (DayTime *) &_result_ref;
    }
    
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_DayTime,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_DayTime_setGPS(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    Tcl_Obj *CONST *argv = objv+1;
    int argc = objc-1;
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_DayTime, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                long tmp;
                if (Tcl_GetLongFromObj(NULL,argv[1],&tmp) == TCL_ERROR) _v = 0;
                else _v = 1;
            }
            if (_v) {
                return _wrap_DayTime_setGPS__SWIG_7(clientData, interp, objc, objv);
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_DayTime, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                long tmp;
                if (Tcl_GetLongFromObj(NULL,argv[1],&tmp) == TCL_ERROR) _v = 0;
                else _v = 1;
            }
            if (_v) {
                {
                    long tmp;
                    if (Tcl_GetLongFromObj(NULL,argv[2],&tmp) == TCL_ERROR) _v = 0;
                    else _v = 1;
                }
                if (_v) {
                    return _wrap_DayTime_setGPS__SWIG_3(clientData, interp, objc, objv);
                }
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_DayTime, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                long tmp;
                if (Tcl_GetLongFromObj(NULL,argv[1],&tmp) == TCL_ERROR) _v = 0;
                else _v = 1;
            }
            if (_v) {
                {
                    long tmp;
                    if (Tcl_GetLongFromObj(NULL,argv[2],&tmp) == TCL_ERROR) _v = 0;
                    else _v = 1;
                }
                if (_v) {
                    return _wrap_DayTime_setGPS__SWIG_6(clientData, interp, objc, objv);
                }
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_DayTime, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                long tmp;
                if (Tcl_GetLongFromObj(NULL,argv[1],&tmp) == TCL_ERROR) _v = 0;
                else _v = 1;
            }
            if (_v) {
                {
                    double tmp;
                    if (Tcl_GetDoubleFromObj(NULL,argv[2],&tmp) == TCL_ERROR) _v = 0;
                    else _v = 1;
                }
                if (_v) {
                    return _wrap_DayTime_setGPS__SWIG_1(clientData, interp, objc, objv);
                }
            }
        }
    }
    if (argc == 4) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_DayTime, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                long tmp;
                if (Tcl_GetLongFromObj(NULL,argv[1],&tmp) == TCL_ERROR) _v = 0;
                else _v = 1;
            }
            if (_v) {
                {
                    long tmp;
                    if (Tcl_GetLongFromObj(NULL,argv[2],&tmp) == TCL_ERROR) _v = 0;
                    else _v = 1;
                }
                if (_v) {
                    {
                        long tmp;
                        if (Tcl_GetLongFromObj(NULL,argv[3],&tmp) == TCL_ERROR) _v = 0;
                        else _v = 1;
                    }
                    if (_v) {
                        return _wrap_DayTime_setGPS__SWIG_2(clientData, interp, objc, objv);
                    }
                }
            }
        }
    }
    if (argc == 4) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_DayTime, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                long tmp;
                if (Tcl_GetLongFromObj(NULL,argv[1],&tmp) == TCL_ERROR) _v = 0;
                else _v = 1;
            }
            if (_v) {
                {
                    double tmp;
                    if (Tcl_GetDoubleFromObj(NULL,argv[2],&tmp) == TCL_ERROR) _v = 0;
                    else _v = 1;
                }
                if (_v) {
                    {
                        long tmp;
                        if (Tcl_GetLongFromObj(NULL,argv[3],&tmp) == TCL_ERROR) _v = 0;
                        else _v = 1;
                    }
                    if (_v) {
                        return _wrap_DayTime_setGPS__SWIG_5(clientData, interp, objc, objv);
                    }
                }
            }
        }
    }
    if (argc == 4) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_DayTime, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                long tmp;
                if (Tcl_GetLongFromObj(NULL,argv[1],&tmp) == TCL_ERROR) _v = 0;
                else _v = 1;
            }
            if (_v) {
                {
                    double tmp;
                    if (Tcl_GetDoubleFromObj(NULL,argv[2],&tmp) == TCL_ERROR) _v = 0;
                    else _v = 1;
                }
                if (_v) {
                    {
                        long tmp;
                        if (Tcl_GetLongFromObj(NULL,argv[3],&tmp) == TCL_ERROR) _v = 0;
                        else _v = 1;
                    }
                    if (_v) {
                        return _wrap_DayTime_setGPS__SWIG_0(clientData, interp, objc, objv);
                    }
                }
            }
        }
    }
    if (argc == 5) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_DayTime, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                long tmp;
                if (Tcl_GetLongFromObj(NULL,argv[1],&tmp) == TCL_ERROR) _v = 0;
                else _v = 1;
            }
            if (_v) {
                {
                    double tmp;
                    if (Tcl_GetDoubleFromObj(NULL,argv[2],&tmp) == TCL_ERROR) _v = 0;
                    else _v = 1;
                }
                if (_v) {
                    {
                        long tmp;
                        if (Tcl_GetLongFromObj(NULL,argv[3],&tmp) == TCL_ERROR) _v = 0;
                        else _v = 1;
                    }
                    if (_v) {
                        {
                            long tmp;
                            if (Tcl_GetLongFromObj(NULL,argv[4],&tmp) == TCL_ERROR) _v = 0;
                            else _v = 1;
                        }
                        if (_v) {
                            return _wrap_DayTime_setGPS__SWIG_4(clientData, interp, objc, objv);
                        }
                    }
                }
            }
        }
    }
    
    Tcl_SetResult(interp,(char *) "No matching function for overloaded 'DayTime_setGPS'", TCL_STATIC);
    return TCL_ERROR;
}


static int
_wrap_DayTime_setGPSfullweek__SWIG_0(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    DayTime *arg1 = (DayTime *) 0 ;
    short arg2 ;
    double arg3 ;
    DayTime::TimeFrame arg4 ;
    DayTime *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"ohdi:DayTime_setGPSfullweek self fullweek sow f ",NULL,&arg2,&arg3,&arg4) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_DayTime,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        DayTime &_result_ref = (arg1)->setGPSfullweek(arg2,arg3,(DayTime::TimeFrame )arg4);
        result = (DayTime *) &_result_ref;
    }
    
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_DayTime,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_DayTime_setGPSfullweek__SWIG_1(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    DayTime *arg1 = (DayTime *) 0 ;
    short arg2 ;
    double arg3 ;
    DayTime *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"ohd:DayTime_setGPSfullweek self fullweek sow ",NULL,&arg2,&arg3) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_DayTime,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        DayTime &_result_ref = (arg1)->setGPSfullweek(arg2,arg3);
        result = (DayTime *) &_result_ref;
    }
    
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_DayTime,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_DayTime_setGPSfullweek(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    Tcl_Obj *CONST *argv = objv+1;
    int argc = objc-1;
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_DayTime, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                long tmp;
                if (Tcl_GetLongFromObj(NULL,argv[1],&tmp) == TCL_ERROR) _v = 0;
                else _v = 1;
            }
            if (_v) {
                {
                    double tmp;
                    if (Tcl_GetDoubleFromObj(NULL,argv[2],&tmp) == TCL_ERROR) _v = 0;
                    else _v = 1;
                }
                if (_v) {
                    return _wrap_DayTime_setGPSfullweek__SWIG_1(clientData, interp, objc, objv);
                }
            }
        }
    }
    if (argc == 4) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_DayTime, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                long tmp;
                if (Tcl_GetLongFromObj(NULL,argv[1],&tmp) == TCL_ERROR) _v = 0;
                else _v = 1;
            }
            if (_v) {
                {
                    double tmp;
                    if (Tcl_GetDoubleFromObj(NULL,argv[2],&tmp) == TCL_ERROR) _v = 0;
                    else _v = 1;
                }
                if (_v) {
                    {
                        long tmp;
                        if (Tcl_GetLongFromObj(NULL,argv[3],&tmp) == TCL_ERROR) _v = 0;
                        else _v = 1;
                    }
                    if (_v) {
                        return _wrap_DayTime_setGPSfullweek__SWIG_0(clientData, interp, objc, objv);
                    }
                }
            }
        }
    }
    
    Tcl_SetResult(interp,(char *) "No matching function for overloaded 'DayTime_setGPSfullweek'", TCL_STATIC);
    return TCL_ERROR;
}


static int
_wrap_DayTime_setGPSZcount__SWIG_0(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    DayTime *arg1 = (DayTime *) 0 ;
    GPSZcount *arg2 = 0 ;
    DayTime::TimeFrame arg3 ;
    DayTime *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"ooi:DayTime_setGPSZcount self z f ",NULL,NULL,&arg3) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_DayTime,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[2], (void **) &arg2, SWIGTYPE_p_GPSZcount,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        DayTime &_result_ref = (arg1)->setGPSZcount((GPSZcount const &)*arg2,(DayTime::TimeFrame )arg3);
        result = (DayTime *) &_result_ref;
    }
    
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_DayTime,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_DayTime_setGPSZcount__SWIG_1(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    DayTime *arg1 = (DayTime *) 0 ;
    GPSZcount *arg2 = 0 ;
    DayTime *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"oo:DayTime_setGPSZcount self z ",NULL,NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_DayTime,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[2], (void **) &arg2, SWIGTYPE_p_GPSZcount,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        DayTime &_result_ref = (arg1)->setGPSZcount((GPSZcount const &)*arg2);
        result = (DayTime *) &_result_ref;
    }
    
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_DayTime,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_DayTime_setGPSZcount(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    Tcl_Obj *CONST *argv = objv+1;
    int argc = objc-1;
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_DayTime, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_GPSZcount, 0) == TCL_ERROR) {
                    _v = 0;
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                return _wrap_DayTime_setGPSZcount__SWIG_1(clientData, interp, objc, objv);
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_DayTime, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_GPSZcount, 0) == TCL_ERROR) {
                    _v = 0;
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                {
                    long tmp;
                    if (Tcl_GetLongFromObj(NULL,argv[2],&tmp) == TCL_ERROR) _v = 0;
                    else _v = 1;
                }
                if (_v) {
                    return _wrap_DayTime_setGPSZcount__SWIG_0(clientData, interp, objc, objv);
                }
            }
        }
    }
    
    Tcl_SetResult(interp,(char *) "No matching function for overloaded 'DayTime_setGPSZcount'", TCL_STATIC);
    return TCL_ERROR;
}


static int
_wrap_DayTime_setYDoySod__SWIG_0(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    DayTime *arg1 = (DayTime *) 0 ;
    short arg2 ;
    short arg3 ;
    double arg4 ;
    DayTime::TimeFrame arg5 ;
    DayTime *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"ohhdi:DayTime_setYDoySod self year day_of_year sec_of_day f ",NULL,&arg2,&arg3,&arg4,&arg5) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_DayTime,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        DayTime &_result_ref = (arg1)->setYDoySod(arg2,arg3,arg4,(DayTime::TimeFrame )arg5);
        result = (DayTime *) &_result_ref;
    }
    
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_DayTime,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_DayTime_setYDoySod__SWIG_1(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    DayTime *arg1 = (DayTime *) 0 ;
    short arg2 ;
    short arg3 ;
    double arg4 ;
    DayTime *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"ohhd:DayTime_setYDoySod self year day_of_year sec_of_day ",NULL,&arg2,&arg3,&arg4) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_DayTime,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        DayTime &_result_ref = (arg1)->setYDoySod(arg2,arg3,arg4);
        result = (DayTime *) &_result_ref;
    }
    
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_DayTime,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_DayTime_setYDoySod(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    Tcl_Obj *CONST *argv = objv+1;
    int argc = objc-1;
    if (argc == 4) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_DayTime, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                long tmp;
                if (Tcl_GetLongFromObj(NULL,argv[1],&tmp) == TCL_ERROR) _v = 0;
                else _v = 1;
            }
            if (_v) {
                {
                    long tmp;
                    if (Tcl_GetLongFromObj(NULL,argv[2],&tmp) == TCL_ERROR) _v = 0;
                    else _v = 1;
                }
                if (_v) {
                    {
                        double tmp;
                        if (Tcl_GetDoubleFromObj(NULL,argv[3],&tmp) == TCL_ERROR) _v = 0;
                        else _v = 1;
                    }
                    if (_v) {
                        return _wrap_DayTime_setYDoySod__SWIG_1(clientData, interp, objc, objv);
                    }
                }
            }
        }
    }
    if (argc == 5) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_DayTime, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                long tmp;
                if (Tcl_GetLongFromObj(NULL,argv[1],&tmp) == TCL_ERROR) _v = 0;
                else _v = 1;
            }
            if (_v) {
                {
                    long tmp;
                    if (Tcl_GetLongFromObj(NULL,argv[2],&tmp) == TCL_ERROR) _v = 0;
                    else _v = 1;
                }
                if (_v) {
                    {
                        double tmp;
                        if (Tcl_GetDoubleFromObj(NULL,argv[3],&tmp) == TCL_ERROR) _v = 0;
                        else _v = 1;
                    }
                    if (_v) {
                        {
                            long tmp;
                            if (Tcl_GetLongFromObj(NULL,argv[4],&tmp) == TCL_ERROR) _v = 0;
                            else _v = 1;
                        }
                        if (_v) {
                            return _wrap_DayTime_setYDoySod__SWIG_0(clientData, interp, objc, objv);
                        }
                    }
                }
            }
        }
    }
    
    Tcl_SetResult(interp,(char *) "No matching function for overloaded 'DayTime_setYDoySod'", TCL_STATIC);
    return TCL_ERROR;
}


static int
_wrap_DayTime_setMJD__SWIG_0(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    DayTime *arg1 = (DayTime *) 0 ;
    long double arg2 ;
    DayTime::TimeFrame arg3 ;
    DayTime *result;
    long double *argp2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"ooi:DayTime_setMJD self mjd f ",NULL,NULL,&arg3) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_DayTime,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[2], (void **) &argp2, SWIGTYPE_p_long_double,SWIG_POINTER_EXCEPTION ) != TCL_OK)) SWIG_fail;
    arg2 = *argp2; 
    {
        DayTime &_result_ref = (arg1)->setMJD(arg2,(DayTime::TimeFrame )arg3);
        result = (DayTime *) &_result_ref;
    }
    
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_DayTime,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_DayTime_setMJD__SWIG_1(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    DayTime *arg1 = (DayTime *) 0 ;
    long double arg2 ;
    DayTime *result;
    long double *argp2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"oo:DayTime_setMJD self mjd ",NULL,NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_DayTime,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[2], (void **) &argp2, SWIGTYPE_p_long_double,SWIG_POINTER_EXCEPTION ) != TCL_OK)) SWIG_fail;
    arg2 = *argp2; 
    {
        DayTime &_result_ref = (arg1)->setMJD(arg2);
        result = (DayTime *) &_result_ref;
    }
    
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_DayTime,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_DayTime_setMJDdate__SWIG_0(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    DayTime *arg1 = (DayTime *) 0 ;
    long double arg2 ;
    DayTime::TimeFrame arg3 ;
    DayTime *result;
    long double *argp2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"ooi:DayTime_setMJDdate self mjd f ",NULL,NULL,&arg3) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_DayTime,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[2], (void **) &argp2, SWIGTYPE_p_long_double,SWIG_POINTER_EXCEPTION ) != TCL_OK)) SWIG_fail;
    arg2 = *argp2; 
    {
        DayTime &_result_ref = (arg1)->setMJDdate(arg2,(DayTime::TimeFrame )arg3);
        result = (DayTime *) &_result_ref;
    }
    
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_DayTime,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_DayTime_setMJDdate__SWIG_1(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    DayTime *arg1 = (DayTime *) 0 ;
    long double arg2 ;
    DayTime *result;
    long double *argp2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"oo:DayTime_setMJDdate self mjd ",NULL,NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_DayTime,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[2], (void **) &argp2, SWIGTYPE_p_long_double,SWIG_POINTER_EXCEPTION ) != TCL_OK)) SWIG_fail;
    arg2 = *argp2; 
    {
        DayTime &_result_ref = (arg1)->setMJDdate(arg2);
        result = (DayTime *) &_result_ref;
    }
    
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_DayTime,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_DayTime_setMJD__SWIG_2(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    DayTime *arg1 = (DayTime *) 0 ;
    double arg2 ;
    DayTime::TimeFrame arg3 ;
    DayTime *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"odi:DayTime_setMJD self mjd f ",NULL,&arg2,&arg3) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_DayTime,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        DayTime &_result_ref = (arg1)->setMJD(arg2,(DayTime::TimeFrame )arg3);
        result = (DayTime *) &_result_ref;
    }
    
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_DayTime,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_DayTime_setMJD__SWIG_3(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    DayTime *arg1 = (DayTime *) 0 ;
    double arg2 ;
    DayTime *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"od:DayTime_setMJD self mjd ",NULL,&arg2) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_DayTime,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        DayTime &_result_ref = (arg1)->setMJD(arg2);
        result = (DayTime *) &_result_ref;
    }
    
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_DayTime,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_DayTime_setMJD(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    Tcl_Obj *CONST *argv = objv+1;
    int argc = objc-1;
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_DayTime, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_long_double, 0) == TCL_ERROR) {
                    _v = 0;
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                return _wrap_DayTime_setMJD__SWIG_1(clientData, interp, objc, objv);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_DayTime, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                double tmp;
                if (Tcl_GetDoubleFromObj(NULL,argv[1],&tmp) == TCL_ERROR) _v = 0;
                else _v = 1;
            }
            if (_v) {
                return _wrap_DayTime_setMJD__SWIG_3(clientData, interp, objc, objv);
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_DayTime, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_long_double, 0) == TCL_ERROR) {
                    _v = 0;
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                {
                    long tmp;
                    if (Tcl_GetLongFromObj(NULL,argv[2],&tmp) == TCL_ERROR) _v = 0;
                    else _v = 1;
                }
                if (_v) {
                    return _wrap_DayTime_setMJD__SWIG_0(clientData, interp, objc, objv);
                }
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_DayTime, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                double tmp;
                if (Tcl_GetDoubleFromObj(NULL,argv[1],&tmp) == TCL_ERROR) _v = 0;
                else _v = 1;
            }
            if (_v) {
                {
                    long tmp;
                    if (Tcl_GetLongFromObj(NULL,argv[2],&tmp) == TCL_ERROR) _v = 0;
                    else _v = 1;
                }
                if (_v) {
                    return _wrap_DayTime_setMJD__SWIG_2(clientData, interp, objc, objv);
                }
            }
        }
    }
    
    Tcl_SetResult(interp,(char *) "No matching function for overloaded 'DayTime_setMJD'", TCL_STATIC);
    return TCL_ERROR;
}


static int
_wrap_DayTime_setMJDdate__SWIG_2(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    DayTime *arg1 = (DayTime *) 0 ;
    double arg2 ;
    DayTime::TimeFrame arg3 ;
    DayTime *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"odi:DayTime_setMJDdate self mjd f ",NULL,&arg2,&arg3) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_DayTime,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        DayTime &_result_ref = (arg1)->setMJDdate(arg2,(DayTime::TimeFrame )arg3);
        result = (DayTime *) &_result_ref;
    }
    
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_DayTime,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_DayTime_setMJDdate__SWIG_3(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    DayTime *arg1 = (DayTime *) 0 ;
    double arg2 ;
    DayTime *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"od:DayTime_setMJDdate self mjd ",NULL,&arg2) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_DayTime,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        DayTime &_result_ref = (arg1)->setMJDdate(arg2);
        result = (DayTime *) &_result_ref;
    }
    
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_DayTime,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_DayTime_setMJDdate(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    Tcl_Obj *CONST *argv = objv+1;
    int argc = objc-1;
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_DayTime, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_long_double, 0) == TCL_ERROR) {
                    _v = 0;
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                return _wrap_DayTime_setMJDdate__SWIG_1(clientData, interp, objc, objv);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_DayTime, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                double tmp;
                if (Tcl_GetDoubleFromObj(NULL,argv[1],&tmp) == TCL_ERROR) _v = 0;
                else _v = 1;
            }
            if (_v) {
                return _wrap_DayTime_setMJDdate__SWIG_3(clientData, interp, objc, objv);
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_DayTime, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_long_double, 0) == TCL_ERROR) {
                    _v = 0;
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                {
                    long tmp;
                    if (Tcl_GetLongFromObj(NULL,argv[2],&tmp) == TCL_ERROR) _v = 0;
                    else _v = 1;
                }
                if (_v) {
                    return _wrap_DayTime_setMJDdate__SWIG_0(clientData, interp, objc, objv);
                }
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_DayTime, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                double tmp;
                if (Tcl_GetDoubleFromObj(NULL,argv[1],&tmp) == TCL_ERROR) _v = 0;
                else _v = 1;
            }
            if (_v) {
                {
                    long tmp;
                    if (Tcl_GetLongFromObj(NULL,argv[2],&tmp) == TCL_ERROR) _v = 0;
                    else _v = 1;
                }
                if (_v) {
                    return _wrap_DayTime_setMJDdate__SWIG_2(clientData, interp, objc, objv);
                }
            }
        }
    }
    
    Tcl_SetResult(interp,(char *) "No matching function for overloaded 'DayTime_setMJDdate'", TCL_STATIC);
    return TCL_ERROR;
}


static int
_wrap_DayTime_setUnix__SWIG_0(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    DayTime *arg1 = (DayTime *) 0 ;
    timeval *arg2 = 0 ;
    DayTime::TimeFrame arg3 ;
    DayTime *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"ooi:DayTime_setUnix self t f ",NULL,NULL,&arg3) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_DayTime,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[2], (void **) &arg2, SWIGTYPE_p_timeval,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        DayTime &_result_ref = (arg1)->setUnix((timeval const &)*arg2,(DayTime::TimeFrame )arg3);
        result = (DayTime *) &_result_ref;
    }
    
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_DayTime,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_DayTime_setUnix__SWIG_1(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    DayTime *arg1 = (DayTime *) 0 ;
    timeval *arg2 = 0 ;
    DayTime *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"oo:DayTime_setUnix self t ",NULL,NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_DayTime,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[2], (void **) &arg2, SWIGTYPE_p_timeval,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        DayTime &_result_ref = (arg1)->setUnix((timeval const &)*arg2);
        result = (DayTime *) &_result_ref;
    }
    
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_DayTime,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_DayTime_setUnix(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    Tcl_Obj *CONST *argv = objv+1;
    int argc = objc-1;
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_DayTime, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_timeval, 0) == TCL_ERROR) {
                    _v = 0;
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                return _wrap_DayTime_setUnix__SWIG_1(clientData, interp, objc, objv);
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_DayTime, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_timeval, 0) == TCL_ERROR) {
                    _v = 0;
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                {
                    long tmp;
                    if (Tcl_GetLongFromObj(NULL,argv[2],&tmp) == TCL_ERROR) _v = 0;
                    else _v = 1;
                }
                if (_v) {
                    return _wrap_DayTime_setUnix__SWIG_0(clientData, interp, objc, objv);
                }
            }
        }
    }
    
    Tcl_SetResult(interp,(char *) "No matching function for overloaded 'DayTime_setUnix'", TCL_STATIC);
    return TCL_ERROR;
}


static int
_wrap_DayTime_setANSI__SWIG_0(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    DayTime *arg1 = (DayTime *) 0 ;
    time_t *arg2 = 0 ;
    DayTime::TimeFrame arg3 ;
    DayTime *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"ooi:DayTime_setANSI self t f ",NULL,NULL,&arg3) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_DayTime,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[2], (void **) &arg2, SWIGTYPE_p_time_t,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        DayTime &_result_ref = (arg1)->setANSI((time_t const &)*arg2,(DayTime::TimeFrame )arg3);
        result = (DayTime *) &_result_ref;
    }
    
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_DayTime,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_DayTime_setANSI__SWIG_1(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    DayTime *arg1 = (DayTime *) 0 ;
    time_t *arg2 = 0 ;
    DayTime *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"oo:DayTime_setANSI self t ",NULL,NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_DayTime,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[2], (void **) &arg2, SWIGTYPE_p_time_t,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        DayTime &_result_ref = (arg1)->setANSI((time_t const &)*arg2);
        result = (DayTime *) &_result_ref;
    }
    
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_DayTime,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_DayTime_setANSI(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    Tcl_Obj *CONST *argv = objv+1;
    int argc = objc-1;
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_DayTime, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_time_t, 0) == TCL_ERROR) {
                    _v = 0;
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                return _wrap_DayTime_setANSI__SWIG_1(clientData, interp, objc, objv);
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_DayTime, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_time_t, 0) == TCL_ERROR) {
                    _v = 0;
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                {
                    long tmp;
                    if (Tcl_GetLongFromObj(NULL,argv[2],&tmp) == TCL_ERROR) _v = 0;
                    else _v = 1;
                }
                if (_v) {
                    return _wrap_DayTime_setANSI__SWIG_0(clientData, interp, objc, objv);
                }
            }
        }
    }
    
    Tcl_SetResult(interp,(char *) "No matching function for overloaded 'DayTime_setANSI'", TCL_STATIC);
    return TCL_ERROR;
}


static int
_wrap_DayTime_setSystemTime(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    DayTime *arg1 = (DayTime *) 0 ;
    DayTime *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"o:DayTime_setSystemTime self ",NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_DayTime,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        DayTime &_result_ref = (arg1)->setSystemTime();
        result = (DayTime *) &_result_ref;
    }
    
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_DayTime,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_DayTime_setLocalTime(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    DayTime *arg1 = (DayTime *) 0 ;
    DayTime *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"o:DayTime_setLocalTime self ",NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_DayTime,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        DayTime &_result_ref = (arg1)->setLocalTime();
        result = (DayTime *) &_result_ref;
    }
    
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_DayTime,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_DayTime_setYMD__SWIG_0(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    DayTime *arg1 = (DayTime *) 0 ;
    int arg2 ;
    int arg3 ;
    int arg4 ;
    DayTime::TimeFrame arg5 ;
    DayTime *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"oiiii:DayTime_setYMD self yy mm dd f ",NULL,&arg2,&arg3,&arg4,&arg5) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_DayTime,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        DayTime &_result_ref = (arg1)->setYMD(arg2,arg3,arg4,(DayTime::TimeFrame )arg5);
        result = (DayTime *) &_result_ref;
    }
    
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_DayTime,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_DayTime_setYMD__SWIG_1(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    DayTime *arg1 = (DayTime *) 0 ;
    int arg2 ;
    int arg3 ;
    int arg4 ;
    DayTime *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"oiii:DayTime_setYMD self yy mm dd ",NULL,&arg2,&arg3,&arg4) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_DayTime,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        DayTime &_result_ref = (arg1)->setYMD(arg2,arg3,arg4);
        result = (DayTime *) &_result_ref;
    }
    
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_DayTime,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_DayTime_setYMD(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    Tcl_Obj *CONST *argv = objv+1;
    int argc = objc-1;
    if (argc == 4) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_DayTime, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                long tmp;
                if (Tcl_GetLongFromObj(NULL,argv[1],&tmp) == TCL_ERROR) _v = 0;
                else _v = 1;
            }
            if (_v) {
                {
                    long tmp;
                    if (Tcl_GetLongFromObj(NULL,argv[2],&tmp) == TCL_ERROR) _v = 0;
                    else _v = 1;
                }
                if (_v) {
                    {
                        long tmp;
                        if (Tcl_GetLongFromObj(NULL,argv[3],&tmp) == TCL_ERROR) _v = 0;
                        else _v = 1;
                    }
                    if (_v) {
                        return _wrap_DayTime_setYMD__SWIG_1(clientData, interp, objc, objv);
                    }
                }
            }
        }
    }
    if (argc == 5) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_DayTime, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                long tmp;
                if (Tcl_GetLongFromObj(NULL,argv[1],&tmp) == TCL_ERROR) _v = 0;
                else _v = 1;
            }
            if (_v) {
                {
                    long tmp;
                    if (Tcl_GetLongFromObj(NULL,argv[2],&tmp) == TCL_ERROR) _v = 0;
                    else _v = 1;
                }
                if (_v) {
                    {
                        long tmp;
                        if (Tcl_GetLongFromObj(NULL,argv[3],&tmp) == TCL_ERROR) _v = 0;
                        else _v = 1;
                    }
                    if (_v) {
                        {
                            long tmp;
                            if (Tcl_GetLongFromObj(NULL,argv[4],&tmp) == TCL_ERROR) _v = 0;
                            else _v = 1;
                        }
                        if (_v) {
                            return _wrap_DayTime_setYMD__SWIG_0(clientData, interp, objc, objv);
                        }
                    }
                }
            }
        }
    }
    
    Tcl_SetResult(interp,(char *) "No matching function for overloaded 'DayTime_setYMD'", TCL_STATIC);
    return TCL_ERROR;
}


static int
_wrap_DayTime_setHMS__SWIG_0(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    DayTime *arg1 = (DayTime *) 0 ;
    int arg2 ;
    int arg3 ;
    double arg4 ;
    DayTime::TimeFrame arg5 ;
    DayTime *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"oiidi:DayTime_setHMS self hh mm sec f ",NULL,&arg2,&arg3,&arg4,&arg5) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_DayTime,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        DayTime &_result_ref = (arg1)->setHMS(arg2,arg3,arg4,(DayTime::TimeFrame )arg5);
        result = (DayTime *) &_result_ref;
    }
    
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_DayTime,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_DayTime_setHMS__SWIG_1(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    DayTime *arg1 = (DayTime *) 0 ;
    int arg2 ;
    int arg3 ;
    double arg4 ;
    DayTime *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"oiid:DayTime_setHMS self hh mm sec ",NULL,&arg2,&arg3,&arg4) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_DayTime,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        DayTime &_result_ref = (arg1)->setHMS(arg2,arg3,arg4);
        result = (DayTime *) &_result_ref;
    }
    
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_DayTime,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_DayTime_setHMS(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    Tcl_Obj *CONST *argv = objv+1;
    int argc = objc-1;
    if (argc == 4) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_DayTime, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                long tmp;
                if (Tcl_GetLongFromObj(NULL,argv[1],&tmp) == TCL_ERROR) _v = 0;
                else _v = 1;
            }
            if (_v) {
                {
                    long tmp;
                    if (Tcl_GetLongFromObj(NULL,argv[2],&tmp) == TCL_ERROR) _v = 0;
                    else _v = 1;
                }
                if (_v) {
                    {
                        double tmp;
                        if (Tcl_GetDoubleFromObj(NULL,argv[3],&tmp) == TCL_ERROR) _v = 0;
                        else _v = 1;
                    }
                    if (_v) {
                        return _wrap_DayTime_setHMS__SWIG_1(clientData, interp, objc, objv);
                    }
                }
            }
        }
    }
    if (argc == 5) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_DayTime, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                long tmp;
                if (Tcl_GetLongFromObj(NULL,argv[1],&tmp) == TCL_ERROR) _v = 0;
                else _v = 1;
            }
            if (_v) {
                {
                    long tmp;
                    if (Tcl_GetLongFromObj(NULL,argv[2],&tmp) == TCL_ERROR) _v = 0;
                    else _v = 1;
                }
                if (_v) {
                    {
                        double tmp;
                        if (Tcl_GetDoubleFromObj(NULL,argv[3],&tmp) == TCL_ERROR) _v = 0;
                        else _v = 1;
                    }
                    if (_v) {
                        {
                            long tmp;
                            if (Tcl_GetLongFromObj(NULL,argv[4],&tmp) == TCL_ERROR) _v = 0;
                            else _v = 1;
                        }
                        if (_v) {
                            return _wrap_DayTime_setHMS__SWIG_0(clientData, interp, objc, objv);
                        }
                    }
                }
            }
        }
    }
    
    Tcl_SetResult(interp,(char *) "No matching function for overloaded 'DayTime_setHMS'", TCL_STATIC);
    return TCL_ERROR;
}


static int
_wrap_DayTime_setSecOfDay__SWIG_0(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    DayTime *arg1 = (DayTime *) 0 ;
    double arg2 ;
    DayTime::TimeFrame arg3 ;
    DayTime *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"odi:DayTime_setSecOfDay self sod f ",NULL,&arg2,&arg3) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_DayTime,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        DayTime &_result_ref = (arg1)->setSecOfDay(arg2,(DayTime::TimeFrame )arg3);
        result = (DayTime *) &_result_ref;
    }
    
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_DayTime,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_DayTime_setSecOfDay__SWIG_1(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    DayTime *arg1 = (DayTime *) 0 ;
    double arg2 ;
    DayTime *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"od:DayTime_setSecOfDay self sod ",NULL,&arg2) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_DayTime,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        DayTime &_result_ref = (arg1)->setSecOfDay(arg2);
        result = (DayTime *) &_result_ref;
    }
    
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_DayTime,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_DayTime_setSecOfDay(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    Tcl_Obj *CONST *argv = objv+1;
    int argc = objc-1;
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_DayTime, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                double tmp;
                if (Tcl_GetDoubleFromObj(NULL,argv[1],&tmp) == TCL_ERROR) _v = 0;
                else _v = 1;
            }
            if (_v) {
                return _wrap_DayTime_setSecOfDay__SWIG_1(clientData, interp, objc, objv);
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_DayTime, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                double tmp;
                if (Tcl_GetDoubleFromObj(NULL,argv[1],&tmp) == TCL_ERROR) _v = 0;
                else _v = 1;
            }
            if (_v) {
                {
                    long tmp;
                    if (Tcl_GetLongFromObj(NULL,argv[2],&tmp) == TCL_ERROR) _v = 0;
                    else _v = 1;
                }
                if (_v) {
                    return _wrap_DayTime_setSecOfDay__SWIG_0(clientData, interp, objc, objv);
                }
            }
        }
    }
    
    Tcl_SetResult(interp,(char *) "No matching function for overloaded 'DayTime_setSecOfDay'", TCL_STATIC);
    return TCL_ERROR;
}


static int
_wrap_DayTime_setYDoy__SWIG_0(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    DayTime *arg1 = (DayTime *) 0 ;
    int arg2 ;
    int arg3 ;
    DayTime::TimeFrame arg4 ;
    DayTime *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"oiii:DayTime_setYDoy self yy doy f ",NULL,&arg2,&arg3,&arg4) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_DayTime,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        DayTime &_result_ref = (arg1)->setYDoy(arg2,arg3,(DayTime::TimeFrame )arg4);
        result = (DayTime *) &_result_ref;
    }
    
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_DayTime,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_DayTime_setYDoy__SWIG_1(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    DayTime *arg1 = (DayTime *) 0 ;
    int arg2 ;
    int arg3 ;
    DayTime *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"oii:DayTime_setYDoy self yy doy ",NULL,&arg2,&arg3) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_DayTime,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        DayTime &_result_ref = (arg1)->setYDoy(arg2,arg3);
        result = (DayTime *) &_result_ref;
    }
    
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_DayTime,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_DayTime_setYDoy(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    Tcl_Obj *CONST *argv = objv+1;
    int argc = objc-1;
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_DayTime, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                long tmp;
                if (Tcl_GetLongFromObj(NULL,argv[1],&tmp) == TCL_ERROR) _v = 0;
                else _v = 1;
            }
            if (_v) {
                {
                    long tmp;
                    if (Tcl_GetLongFromObj(NULL,argv[2],&tmp) == TCL_ERROR) _v = 0;
                    else _v = 1;
                }
                if (_v) {
                    return _wrap_DayTime_setYDoy__SWIG_1(clientData, interp, objc, objv);
                }
            }
        }
    }
    if (argc == 4) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_DayTime, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                long tmp;
                if (Tcl_GetLongFromObj(NULL,argv[1],&tmp) == TCL_ERROR) _v = 0;
                else _v = 1;
            }
            if (_v) {
                {
                    long tmp;
                    if (Tcl_GetLongFromObj(NULL,argv[2],&tmp) == TCL_ERROR) _v = 0;
                    else _v = 1;
                }
                if (_v) {
                    {
                        long tmp;
                        if (Tcl_GetLongFromObj(NULL,argv[3],&tmp) == TCL_ERROR) _v = 0;
                        else _v = 1;
                    }
                    if (_v) {
                        return _wrap_DayTime_setYDoy__SWIG_0(clientData, interp, objc, objv);
                    }
                }
            }
        }
    }
    
    Tcl_SetResult(interp,(char *) "No matching function for overloaded 'DayTime_setYDoy'", TCL_STATIC);
    return TCL_ERROR;
}


static int
_wrap_DayTime_setToString(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    DayTime *arg1 = (DayTime *) 0 ;
    std::string *arg2 = 0 ;
    std::string *arg3 = 0 ;
    DayTime *result;
    std::string temp2 ;
    std::string temp3 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"ooo:DayTime_setToString self str fmt ",NULL,NULL,NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_DayTime,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        temp2 = std::string(Tcl_GetStringFromObj(objv[2],NULL));
        arg2 = &temp2;
    }
    {
        temp3 = std::string(Tcl_GetStringFromObj(objv[3],NULL));
        arg3 = &temp3;
    }
    {
        DayTime &_result_ref = (arg1)->setToString((std::string const &)*arg2,(std::string const &)*arg3);
        result = (DayTime *) &_result_ref;
    }
    
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_DayTime,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_DayTime_DayTime_printString(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    DayTime *arg1 = (DayTime *) 0 ;
    char *arg2 = (char *) 0 ;
    std::string result;
    
    if (SWIG_GetArgs(interp, objc, objv,"os:DayTime_DayTime_printString self fmt ",NULL,&arg2) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_DayTime,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    result = ((DayTime const *)arg1)->printf((char const *)arg2);
    
    {
        Tcl_SetStringObj(Tcl_GetObjResult(interp),(char*)(&result)->c_str(),(&result)->length());
    }
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_DayTime_printf(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    DayTime *arg1 = (DayTime *) 0 ;
    std::string *arg2 = 0 ;
    std::string result;
    std::string temp2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"oo:DayTime_printf self fmt ",NULL,NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_DayTime,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        temp2 = std::string(Tcl_GetStringFromObj(objv[2],NULL));
        arg2 = &temp2;
    }
    result = ((DayTime const *)arg1)->printf((std::string const &)*arg2);
    
    {
        Tcl_SetStringObj(Tcl_GetObjResult(interp),(char*)(&result)->c_str(),(&result)->length());
    }
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_DayTime_asString(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    DayTime *arg1 = (DayTime *) 0 ;
    std::string result;
    
    if (SWIG_GetArgs(interp, objc, objv,"o:DayTime_asString self ",NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_DayTime,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    result = ((DayTime const *)arg1)->asString();
    
    {
        Tcl_SetStringObj(Tcl_GetObjResult(interp),(char*)(&result)->c_str(),(&result)->length());
    }
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_DayTime_dump(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    DayTime *arg1 = (DayTime *) 0 ;
    std::ostream *arg2 = 0 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"oo:DayTime_dump self s ",NULL,NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_DayTime,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[2], (void **) &arg2, SWIGTYPE_p_std__ostream,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    ((DayTime const *)arg1)->dump(*arg2);
    
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_DayTime_convertJDtoCalendar(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    long arg1 ;
    int *arg2 = 0 ;
    int *arg3 = 0 ;
    int *arg4 = 0 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"looo:DayTime_convertJDtoCalendar jd iyear imonth iday ",&arg1,NULL,NULL,NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[2], (void **) &arg2, SWIGTYPE_p_int,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[3], (void **) &arg3, SWIGTYPE_p_int,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[4], (void **) &arg4, SWIGTYPE_p_int,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    DayTime::convertJDtoCalendar(arg1,*arg2,*arg3,*arg4);
    
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_DayTime_convertCalendarToJD(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    int arg1 ;
    int arg2 ;
    int arg3 ;
    long result;
    
    if (SWIG_GetArgs(interp, objc, objv,"iii:DayTime_convertCalendarToJD iyear imonth iday ",&arg1,&arg2,&arg3) == TCL_ERROR) SWIG_fail;
    result = (long)DayTime::convertCalendarToJD(arg1,arg2,arg3);
    
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_DayTime_convertSODtoTime(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    double arg1 ;
    int *arg2 = 0 ;
    int *arg3 = 0 ;
    double *arg4 = 0 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"dooo:DayTime_convertSODtoTime sod hh mm sec ",&arg1,NULL,NULL,NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[2], (void **) &arg2, SWIGTYPE_p_int,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[3], (void **) &arg3, SWIGTYPE_p_int,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[4], (void **) &arg4, SWIGTYPE_p_double,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    DayTime::convertSODtoTime(arg1,*arg2,*arg3,*arg4);
    
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_DayTime_convertTimeToSOD(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    int arg1 ;
    int arg2 ;
    double arg3 ;
    double result;
    
    if (SWIG_GetArgs(interp, objc, objv,"iid:DayTime_convertTimeToSOD hh mm sec ",&arg1,&arg2,&arg3) == TCL_ERROR) SWIG_fail;
    result = (double)DayTime::convertTimeToSOD(arg1,arg2,arg3);
    
    Tcl_SetObjResult(interp,Tcl_NewDoubleObj((double) result));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_delete_DayTime(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    DayTime *arg1 = (DayTime *) 0 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"o:delete_DayTime self ",NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_DayTime,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    delete arg1;
    
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static void swig_delete_DayTime(void *obj) {
DayTime *arg1 = (DayTime *) obj;
delete arg1;
}
static swig_method swig_DayTime_methods[] = {
    {"setTolerance", _wrap_DayTime_setTolerance}, 
    {"=", _wrap_DayTime_e___}, 
    {"+", _wrap_DayTime_a___}, 
    {"-", _wrap_DayTime_s___}, 
    {"addSeconds", _wrap_DayTime_addSeconds}, 
    {"addMilliSeconds", _wrap_DayTime_addMilliSeconds}, 
    {"addMicroSeconds", _wrap_DayTime_addMicroSeconds}, 
    {"operator_equal_to", _wrap_DayTime_operator_equal_to}, 
    {"operator_not_equal_to", _wrap_DayTime_operator_not_equal_to}, 
    {"operator_less_than", _wrap_DayTime_operator_less_than}, 
    {"operator_greater_than", _wrap_DayTime_operator_greater_than}, 
    {"operator_less_than_equal_to", _wrap_DayTime_operator_less_than_equal_to}, 
    {"operator_greater_than_equal_to", _wrap_DayTime_operator_greater_than_equal_to}, 
    {"setAllButTimeFrame", _wrap_DayTime_setAllButTimeFrame}, 
    {"setTimeFrame", _wrap_DayTime_setTimeFrame}, 
    {"getTimeFrame", _wrap_DayTime_getTimeFrame}, 
    {"JD", _wrap_DayTime_JD}, 
    {"MJD", _wrap_DayTime_MJD}, 
    {"year", _wrap_DayTime_year}, 
    {"month", _wrap_DayTime_month}, 
    {"day", _wrap_DayTime_day}, 
    {"dayOfWeek", _wrap_DayTime_dayOfWeek}, 
    {"getYMD", _wrap_DayTime_getYMD}, 
    {"hour", _wrap_DayTime_hour}, 
    {"minute", _wrap_DayTime_minute}, 
    {"second", _wrap_DayTime_second}, 
    {"secOfDay", _wrap_DayTime_secOfDay}, 
    {"GPS10bitweek", _wrap_DayTime_GPS10bitweek}, 
    {"GPSzcount", _wrap_DayTime_GPSzcount}, 
    {"GPSzcountFloor", _wrap_DayTime_GPSzcountFloor}, 
    {"GPSsecond", _wrap_DayTime_GPSsecond}, 
    {"GPSsow", _wrap_DayTime_GPSsow}, 
    {"GPSday", _wrap_DayTime_GPSday}, 
    {"GPSfullweek", _wrap_DayTime_GPSfullweek}, 
    {"GPSyear", _wrap_DayTime_GPSyear}, 
    {"DOYyear", _wrap_DayTime_DOYyear}, 
    {"DOY", _wrap_DayTime_DOY}, 
    {"DOYsecond", _wrap_DayTime_DOYsecond}, 
    {"MJDdate", _wrap_DayTime_MJDdate}, 
    {"getMJDasLongDouble", _wrap_DayTime_getMJDasLongDouble}, 
    {"unixTime", _wrap_DayTime_unixTime}, 
    {"fullZcount", _wrap_DayTime_fullZcount}, 
    {"fullZcountFloor", _wrap_DayTime_fullZcountFloor}, 
    {"setYMDHMS", _wrap_DayTime_setYMDHMS}, 
    {"setGPS", _wrap_DayTime_setGPS}, 
    {"setGPSfullweek", _wrap_DayTime_setGPSfullweek}, 
    {"setGPSZcount", _wrap_DayTime_setGPSZcount}, 
    {"setYDoySod", _wrap_DayTime_setYDoySod}, 
    {"setMJD", _wrap_DayTime_setMJD}, 
    {"setMJDdate", _wrap_DayTime_setMJDdate}, 
    {"setUnix", _wrap_DayTime_setUnix}, 
    {"setANSI", _wrap_DayTime_setANSI}, 
    {"setSystemTime", _wrap_DayTime_setSystemTime}, 
    {"setLocalTime", _wrap_DayTime_setLocalTime}, 
    {"setYMD", _wrap_DayTime_setYMD}, 
    {"setHMS", _wrap_DayTime_setHMS}, 
    {"setSecOfDay", _wrap_DayTime_setSecOfDay}, 
    {"setYDoy", _wrap_DayTime_setYDoy}, 
    {"setToString", _wrap_DayTime_setToString}, 
    {"DayTime_printString", _wrap_DayTime_DayTime_printString}, 
    {"printf", _wrap_DayTime_printf}, 
    {"asString", _wrap_DayTime_asString}, 
    {"dump", _wrap_DayTime_dump}, 
    {0,0}
};
static swig_attribute swig_DayTime_attributes[] = {
    {0,0,0}
};
static swig_class *swig_DayTime_bases[] = {0};
static char *swig_DayTime_base_names[] = {0};
swig_class _wrap_class_DayTime = { "DayTime", &SWIGTYPE_p_DayTime,_wrap_new_DayTime, swig_delete_DayTime, swig_DayTime_methods, swig_DayTime_attributes, swig_DayTime_bases,swig_DayTime_base_names };

static swig_command_info swig_commands[] = {
    { SWIG_prefix "new_ExceptionLocation", (swig_wrapper_func) _wrap_new_ExceptionLocation, NULL},
    { SWIG_prefix "delete_ExceptionLocation", (swig_wrapper_func) _wrap_delete_ExceptionLocation, NULL},
    { SWIG_prefix "ExceptionLocation_getFileName", (swig_wrapper_func) _wrap_ExceptionLocation_getFileName, NULL},
    { SWIG_prefix "ExceptionLocation_getFunctionName", (swig_wrapper_func) _wrap_ExceptionLocation_getFunctionName, NULL},
    { SWIG_prefix "ExceptionLocation_getLineNumber", (swig_wrapper_func) _wrap_ExceptionLocation_getLineNumber, NULL},
    { SWIG_prefix "ExceptionLocation_dump", (swig_wrapper_func) _wrap_ExceptionLocation_dump, NULL},
    { SWIG_prefix "ExceptionLocation", (swig_wrapper_func) SWIG_ObjectConstructor, &_wrap_class_gpstk_ExceptionLocation},
    { SWIG_prefix "new_Exception", (swig_wrapper_func) _wrap_new_Exception, NULL},
    { SWIG_prefix "delete_Exception", (swig_wrapper_func) _wrap_delete_Exception, NULL},
    { SWIG_prefix "Exception_=", (swig_wrapper_func) _wrap_Exception_e___, NULL},
    { SWIG_prefix "Exception_terminate", (swig_wrapper_func) _wrap_Exception_terminate, NULL},
    { SWIG_prefix "Exception_getErrorId", (swig_wrapper_func) _wrap_Exception_getErrorId, NULL},
    { SWIG_prefix "Exception_setErrorId", (swig_wrapper_func) _wrap_Exception_setErrorId, NULL},
    { SWIG_prefix "Exception_addLocation", (swig_wrapper_func) _wrap_Exception_addLocation, NULL},
    { SWIG_prefix "Exception_getLocation", (swig_wrapper_func) _wrap_Exception_getLocation, NULL},
    { SWIG_prefix "Exception_getLocationCount", (swig_wrapper_func) _wrap_Exception_getLocationCount, NULL},
    { SWIG_prefix "Exception_isRecoverable", (swig_wrapper_func) _wrap_Exception_isRecoverable, NULL},
    { SWIG_prefix "Exception_setSeverity", (swig_wrapper_func) _wrap_Exception_setSeverity, NULL},
    { SWIG_prefix "Exception_addText", (swig_wrapper_func) _wrap_Exception_addText, NULL},
    { SWIG_prefix "Exception_getText", (swig_wrapper_func) _wrap_Exception_getText, NULL},
    { SWIG_prefix "Exception_getTextCount", (swig_wrapper_func) _wrap_Exception_getTextCount, NULL},
    { SWIG_prefix "Exception_getName", (swig_wrapper_func) _wrap_Exception_getName, NULL},
    { SWIG_prefix "Exception_dump", (swig_wrapper_func) _wrap_Exception_dump, NULL},
    { SWIG_prefix "Exception", (swig_wrapper_func) SWIG_ObjectConstructor, &_wrap_class_gpstk_Exception},
    { SWIG_prefix "new_InvalidParameter", (swig_wrapper_func) _wrap_new_InvalidParameter, NULL},
    { SWIG_prefix "delete_InvalidParameter", (swig_wrapper_func) _wrap_delete_InvalidParameter, NULL},
    { SWIG_prefix "InvalidParameter_getName", (swig_wrapper_func) _wrap_InvalidParameter_getName, NULL},
    { SWIG_prefix "InvalidParameter_=", (swig_wrapper_func) _wrap_InvalidParameter_e___, NULL},
    { SWIG_prefix "InvalidParameter", (swig_wrapper_func) SWIG_ObjectConstructor, &_wrap_class_gpstk_InvalidParameter},
    { SWIG_prefix "new_InvalidRequest", (swig_wrapper_func) _wrap_new_InvalidRequest, NULL},
    { SWIG_prefix "delete_InvalidRequest", (swig_wrapper_func) _wrap_delete_InvalidRequest, NULL},
    { SWIG_prefix "InvalidRequest_getName", (swig_wrapper_func) _wrap_InvalidRequest_getName, NULL},
    { SWIG_prefix "InvalidRequest_=", (swig_wrapper_func) _wrap_InvalidRequest_e___, NULL},
    { SWIG_prefix "InvalidRequest", (swig_wrapper_func) SWIG_ObjectConstructor, &_wrap_class_gpstk_InvalidRequest},
    { SWIG_prefix "new_AssertionFailure", (swig_wrapper_func) _wrap_new_AssertionFailure, NULL},
    { SWIG_prefix "delete_AssertionFailure", (swig_wrapper_func) _wrap_delete_AssertionFailure, NULL},
    { SWIG_prefix "AssertionFailure_getName", (swig_wrapper_func) _wrap_AssertionFailure_getName, NULL},
    { SWIG_prefix "AssertionFailure_=", (swig_wrapper_func) _wrap_AssertionFailure_e___, NULL},
    { SWIG_prefix "AssertionFailure", (swig_wrapper_func) SWIG_ObjectConstructor, &_wrap_class_gpstk_AssertionFailure},
    { SWIG_prefix "new_AccessError", (swig_wrapper_func) _wrap_new_AccessError, NULL},
    { SWIG_prefix "delete_AccessError", (swig_wrapper_func) _wrap_delete_AccessError, NULL},
    { SWIG_prefix "AccessError_getName", (swig_wrapper_func) _wrap_AccessError_getName, NULL},
    { SWIG_prefix "AccessError_=", (swig_wrapper_func) _wrap_AccessError_e___, NULL},
    { SWIG_prefix "AccessError", (swig_wrapper_func) SWIG_ObjectConstructor, &_wrap_class_gpstk_AccessError},
    { SWIG_prefix "new_IndexOutOfBoundsException", (swig_wrapper_func) _wrap_new_IndexOutOfBoundsException, NULL},
    { SWIG_prefix "delete_IndexOutOfBoundsException", (swig_wrapper_func) _wrap_delete_IndexOutOfBoundsException, NULL},
    { SWIG_prefix "IndexOutOfBoundsException_getName", (swig_wrapper_func) _wrap_IndexOutOfBoundsException_getName, NULL},
    { SWIG_prefix "IndexOutOfBoundsException_=", (swig_wrapper_func) _wrap_IndexOutOfBoundsException_e___, NULL},
    { SWIG_prefix "IndexOutOfBoundsException", (swig_wrapper_func) SWIG_ObjectConstructor, &_wrap_class_gpstk_IndexOutOfBoundsException},
    { SWIG_prefix "new_InvalidArgumentException", (swig_wrapper_func) _wrap_new_InvalidArgumentException, NULL},
    { SWIG_prefix "delete_InvalidArgumentException", (swig_wrapper_func) _wrap_delete_InvalidArgumentException, NULL},
    { SWIG_prefix "InvalidArgumentException_getName", (swig_wrapper_func) _wrap_InvalidArgumentException_getName, NULL},
    { SWIG_prefix "InvalidArgumentException_=", (swig_wrapper_func) _wrap_InvalidArgumentException_e___, NULL},
    { SWIG_prefix "InvalidArgumentException", (swig_wrapper_func) SWIG_ObjectConstructor, &_wrap_class_gpstk_InvalidArgumentException},
    { SWIG_prefix "new_ConfigurationException", (swig_wrapper_func) _wrap_new_ConfigurationException, NULL},
    { SWIG_prefix "delete_ConfigurationException", (swig_wrapper_func) _wrap_delete_ConfigurationException, NULL},
    { SWIG_prefix "ConfigurationException_getName", (swig_wrapper_func) _wrap_ConfigurationException_getName, NULL},
    { SWIG_prefix "ConfigurationException_=", (swig_wrapper_func) _wrap_ConfigurationException_e___, NULL},
    { SWIG_prefix "ConfigurationException", (swig_wrapper_func) SWIG_ObjectConstructor, &_wrap_class_gpstk_ConfigurationException},
    { SWIG_prefix "new_FileMissingException", (swig_wrapper_func) _wrap_new_FileMissingException, NULL},
    { SWIG_prefix "delete_FileMissingException", (swig_wrapper_func) _wrap_delete_FileMissingException, NULL},
    { SWIG_prefix "FileMissingException_getName", (swig_wrapper_func) _wrap_FileMissingException_getName, NULL},
    { SWIG_prefix "FileMissingException_=", (swig_wrapper_func) _wrap_FileMissingException_e___, NULL},
    { SWIG_prefix "FileMissingException", (swig_wrapper_func) SWIG_ObjectConstructor, &_wrap_class_gpstk_FileMissingException},
    { SWIG_prefix "new_SystemSemaphoreException", (swig_wrapper_func) _wrap_new_SystemSemaphoreException, NULL},
    { SWIG_prefix "delete_SystemSemaphoreException", (swig_wrapper_func) _wrap_delete_SystemSemaphoreException, NULL},
    { SWIG_prefix "SystemSemaphoreException_getName", (swig_wrapper_func) _wrap_SystemSemaphoreException_getName, NULL},
    { SWIG_prefix "SystemSemaphoreException_=", (swig_wrapper_func) _wrap_SystemSemaphoreException_e___, NULL},
    { SWIG_prefix "SystemSemaphoreException", (swig_wrapper_func) SWIG_ObjectConstructor, &_wrap_class_gpstk_SystemSemaphoreException},
    { SWIG_prefix "new_SystemPipeException", (swig_wrapper_func) _wrap_new_SystemPipeException, NULL},
    { SWIG_prefix "delete_SystemPipeException", (swig_wrapper_func) _wrap_delete_SystemPipeException, NULL},
    { SWIG_prefix "SystemPipeException_getName", (swig_wrapper_func) _wrap_SystemPipeException_getName, NULL},
    { SWIG_prefix "SystemPipeException_=", (swig_wrapper_func) _wrap_SystemPipeException_e___, NULL},
    { SWIG_prefix "SystemPipeException", (swig_wrapper_func) SWIG_ObjectConstructor, &_wrap_class_gpstk_SystemPipeException},
    { SWIG_prefix "new_SystemQueueException", (swig_wrapper_func) _wrap_new_SystemQueueException, NULL},
    { SWIG_prefix "delete_SystemQueueException", (swig_wrapper_func) _wrap_delete_SystemQueueException, NULL},
    { SWIG_prefix "SystemQueueException_getName", (swig_wrapper_func) _wrap_SystemQueueException_getName, NULL},
    { SWIG_prefix "SystemQueueException_=", (swig_wrapper_func) _wrap_SystemQueueException_e___, NULL},
    { SWIG_prefix "SystemQueueException", (swig_wrapper_func) SWIG_ObjectConstructor, &_wrap_class_gpstk_SystemQueueException},
    { SWIG_prefix "new_OutOfMemory", (swig_wrapper_func) _wrap_new_OutOfMemory, NULL},
    { SWIG_prefix "delete_OutOfMemory", (swig_wrapper_func) _wrap_delete_OutOfMemory, NULL},
    { SWIG_prefix "OutOfMemory_getName", (swig_wrapper_func) _wrap_OutOfMemory_getName, NULL},
    { SWIG_prefix "OutOfMemory_=", (swig_wrapper_func) _wrap_OutOfMemory_e___, NULL},
    { SWIG_prefix "OutOfMemory", (swig_wrapper_func) SWIG_ObjectConstructor, &_wrap_class_gpstk_OutOfMemory},
    { SWIG_prefix "new_ObjectNotFound", (swig_wrapper_func) _wrap_new_ObjectNotFound, NULL},
    { SWIG_prefix "delete_ObjectNotFound", (swig_wrapper_func) _wrap_delete_ObjectNotFound, NULL},
    { SWIG_prefix "ObjectNotFound_getName", (swig_wrapper_func) _wrap_ObjectNotFound_getName, NULL},
    { SWIG_prefix "ObjectNotFound_=", (swig_wrapper_func) _wrap_ObjectNotFound_e___, NULL},
    { SWIG_prefix "istream", (swig_wrapper_func) _wrap_istream, NULL},
    { SWIG_prefix "ObjectNotFound", (swig_wrapper_func) SWIG_ObjectConstructor, &_wrap_class_gpstk_ObjectNotFound},
    { SWIG_prefix "delete_GPSZcount", (swig_wrapper_func) _wrap_delete_GPSZcount, NULL},
    { SWIG_prefix "new_GPSZcount", (swig_wrapper_func) _wrap_new_GPSZcount, NULL},
    { SWIG_prefix "GPSZcount_getWeek", (swig_wrapper_func) _wrap_GPSZcount_getWeek, NULL},
    { SWIG_prefix "GPSZcount_getZcount", (swig_wrapper_func) _wrap_GPSZcount_getZcount, NULL},
    { SWIG_prefix "GPSZcount_getFullZcount", (swig_wrapper_func) _wrap_GPSZcount_getFullZcount, NULL},
    { SWIG_prefix "GPSZcount_getTotalZcounts", (swig_wrapper_func) _wrap_GPSZcount_getTotalZcounts, NULL},
    { SWIG_prefix "GPSZcount_setWeek", (swig_wrapper_func) _wrap_GPSZcount_setWeek, NULL},
    { SWIG_prefix "GPSZcount_setZcount", (swig_wrapper_func) _wrap_GPSZcount_setZcount, NULL},
    { SWIG_prefix "GPSZcount_setFullZcount", (swig_wrapper_func) _wrap_GPSZcount_setFullZcount, NULL},
    { SWIG_prefix "GPSZcount_addWeeks", (swig_wrapper_func) _wrap_GPSZcount_addWeeks, NULL},
    { SWIG_prefix "GPSZcount_addZcounts", (swig_wrapper_func) _wrap_GPSZcount_addZcounts, NULL},
    { SWIG_prefix "GPSZcount_+", (swig_wrapper_func) _wrap_GPSZcount_a___, NULL},
    { SWIG_prefix "GPSZcount_-", (swig_wrapper_func) _wrap_GPSZcount_s___, NULL},
    { SWIG_prefix "GPSZcount_=", (swig_wrapper_func) _wrap_GPSZcount_e___, NULL},
    { SWIG_prefix "GPSZcount_operator_less_than", (swig_wrapper_func) _wrap_GPSZcount_operator_less_than, NULL},
    { SWIG_prefix "GPSZcount_operator_greater_than", (swig_wrapper_func) _wrap_GPSZcount_operator_greater_than, NULL},
    { SWIG_prefix "GPSZcount_operator_equal_to", (swig_wrapper_func) _wrap_GPSZcount_operator_equal_to, NULL},
    { SWIG_prefix "GPSZcount_operator_not_equal_to", (swig_wrapper_func) _wrap_GPSZcount_operator_not_equal_to, NULL},
    { SWIG_prefix "GPSZcount_operator_less_than_equal_to", (swig_wrapper_func) _wrap_GPSZcount_operator_less_than_equal_to, NULL},
    { SWIG_prefix "GPSZcount_operator_greater_than_equal_to", (swig_wrapper_func) _wrap_GPSZcount_operator_greater_than_equal_to, NULL},
    { SWIG_prefix "GPSZcount_inSameTimeBlock", (swig_wrapper_func) _wrap_GPSZcount_inSameTimeBlock, NULL},
    { SWIG_prefix "GPSZcount_dump", (swig_wrapper_func) _wrap_GPSZcount_dump, NULL},
    { SWIG_prefix "GPSZcount", (swig_wrapper_func) SWIG_ObjectConstructor, &_wrap_class_gpstk_GPSZcount},
    { SWIG_prefix "<<", (swig_wrapper_func) _wrap_ll___, NULL},
    { SWIG_prefix "DayTime_setDayTimeTolerance", (swig_wrapper_func) _wrap_DayTime_setDayTimeTolerance, NULL},
    { SWIG_prefix "DayTime_getDayTimeTolerance", (swig_wrapper_func) _wrap_DayTime_getDayTimeTolerance, NULL},
    { SWIG_prefix "DayTime_setTolerance", (swig_wrapper_func) _wrap_DayTime_setTolerance, NULL},
    { SWIG_prefix "new_DayTime", (swig_wrapper_func) _wrap_new_DayTime, NULL},
    { SWIG_prefix "DayTime_=", (swig_wrapper_func) _wrap_DayTime_e___, NULL},
    { SWIG_prefix "DayTime_+", (swig_wrapper_func) _wrap_DayTime_a___, NULL},
    { SWIG_prefix "DayTime_-", (swig_wrapper_func) _wrap_DayTime_s___, NULL},
    { SWIG_prefix "DayTime_addSeconds", (swig_wrapper_func) _wrap_DayTime_addSeconds, NULL},
    { SWIG_prefix "DayTime_addMilliSeconds", (swig_wrapper_func) _wrap_DayTime_addMilliSeconds, NULL},
    { SWIG_prefix "DayTime_addMicroSeconds", (swig_wrapper_func) _wrap_DayTime_addMicroSeconds, NULL},
    { SWIG_prefix "DayTime_operator_equal_to", (swig_wrapper_func) _wrap_DayTime_operator_equal_to, NULL},
    { SWIG_prefix "DayTime_operator_not_equal_to", (swig_wrapper_func) _wrap_DayTime_operator_not_equal_to, NULL},
    { SWIG_prefix "DayTime_operator_less_than", (swig_wrapper_func) _wrap_DayTime_operator_less_than, NULL},
    { SWIG_prefix "DayTime_operator_greater_than", (swig_wrapper_func) _wrap_DayTime_operator_greater_than, NULL},
    { SWIG_prefix "DayTime_operator_less_than_equal_to", (swig_wrapper_func) _wrap_DayTime_operator_less_than_equal_to, NULL},
    { SWIG_prefix "DayTime_operator_greater_than_equal_to", (swig_wrapper_func) _wrap_DayTime_operator_greater_than_equal_to, NULL},
    { SWIG_prefix "DayTime_setAllButTimeFrame", (swig_wrapper_func) _wrap_DayTime_setAllButTimeFrame, NULL},
    { SWIG_prefix "DayTime_setTimeFrame", (swig_wrapper_func) _wrap_DayTime_setTimeFrame, NULL},
    { SWIG_prefix "DayTime_getTimeFrame", (swig_wrapper_func) _wrap_DayTime_getTimeFrame, NULL},
    { SWIG_prefix "DayTime_JD", (swig_wrapper_func) _wrap_DayTime_JD, NULL},
    { SWIG_prefix "DayTime_MJD", (swig_wrapper_func) _wrap_DayTime_MJD, NULL},
    { SWIG_prefix "DayTime_year", (swig_wrapper_func) _wrap_DayTime_year, NULL},
    { SWIG_prefix "DayTime_month", (swig_wrapper_func) _wrap_DayTime_month, NULL},
    { SWIG_prefix "DayTime_day", (swig_wrapper_func) _wrap_DayTime_day, NULL},
    { SWIG_prefix "DayTime_dayOfWeek", (swig_wrapper_func) _wrap_DayTime_dayOfWeek, NULL},
    { SWIG_prefix "DayTime_getYMD", (swig_wrapper_func) _wrap_DayTime_getYMD, NULL},
    { SWIG_prefix "DayTime_hour", (swig_wrapper_func) _wrap_DayTime_hour, NULL},
    { SWIG_prefix "DayTime_minute", (swig_wrapper_func) _wrap_DayTime_minute, NULL},
    { SWIG_prefix "DayTime_second", (swig_wrapper_func) _wrap_DayTime_second, NULL},
    { SWIG_prefix "DayTime_secOfDay", (swig_wrapper_func) _wrap_DayTime_secOfDay, NULL},
    { SWIG_prefix "DayTime_GPS10bitweek", (swig_wrapper_func) _wrap_DayTime_GPS10bitweek, NULL},
    { SWIG_prefix "DayTime_GPSzcount", (swig_wrapper_func) _wrap_DayTime_GPSzcount, NULL},
    { SWIG_prefix "DayTime_GPSzcountFloor", (swig_wrapper_func) _wrap_DayTime_GPSzcountFloor, NULL},
    { SWIG_prefix "DayTime_GPSsecond", (swig_wrapper_func) _wrap_DayTime_GPSsecond, NULL},
    { SWIG_prefix "DayTime_GPSsow", (swig_wrapper_func) _wrap_DayTime_GPSsow, NULL},
    { SWIG_prefix "DayTime_GPSday", (swig_wrapper_func) _wrap_DayTime_GPSday, NULL},
    { SWIG_prefix "DayTime_GPSfullweek", (swig_wrapper_func) _wrap_DayTime_GPSfullweek, NULL},
    { SWIG_prefix "DayTime_GPSyear", (swig_wrapper_func) _wrap_DayTime_GPSyear, NULL},
    { SWIG_prefix "DayTime_DOYyear", (swig_wrapper_func) _wrap_DayTime_DOYyear, NULL},
    { SWIG_prefix "DayTime_DOY", (swig_wrapper_func) _wrap_DayTime_DOY, NULL},
    { SWIG_prefix "DayTime_DOYsecond", (swig_wrapper_func) _wrap_DayTime_DOYsecond, NULL},
    { SWIG_prefix "DayTime_MJDdate", (swig_wrapper_func) _wrap_DayTime_MJDdate, NULL},
    { SWIG_prefix "DayTime_getMJDasLongDouble", (swig_wrapper_func) _wrap_DayTime_getMJDasLongDouble, NULL},
    { SWIG_prefix "DayTime_unixTime", (swig_wrapper_func) _wrap_DayTime_unixTime, NULL},
    { SWIG_prefix "DayTime_fullZcount", (swig_wrapper_func) _wrap_DayTime_fullZcount, NULL},
    { SWIG_prefix "DayTime_fullZcountFloor", (swig_wrapper_func) _wrap_DayTime_fullZcountFloor, NULL},
    { SWIG_prefix "DayTime_setYMDHMS", (swig_wrapper_func) _wrap_DayTime_setYMDHMS, NULL},
    { SWIG_prefix "DayTime_setGPS", (swig_wrapper_func) _wrap_DayTime_setGPS, NULL},
    { SWIG_prefix "DayTime_setGPSfullweek", (swig_wrapper_func) _wrap_DayTime_setGPSfullweek, NULL},
    { SWIG_prefix "DayTime_setGPSZcount", (swig_wrapper_func) _wrap_DayTime_setGPSZcount, NULL},
    { SWIG_prefix "DayTime_setYDoySod", (swig_wrapper_func) _wrap_DayTime_setYDoySod, NULL},
    { SWIG_prefix "DayTime_setMJD", (swig_wrapper_func) _wrap_DayTime_setMJD, NULL},
    { SWIG_prefix "DayTime_setMJDdate", (swig_wrapper_func) _wrap_DayTime_setMJDdate, NULL},
    { SWIG_prefix "DayTime_setUnix", (swig_wrapper_func) _wrap_DayTime_setUnix, NULL},
    { SWIG_prefix "DayTime_setANSI", (swig_wrapper_func) _wrap_DayTime_setANSI, NULL},
    { SWIG_prefix "DayTime_setSystemTime", (swig_wrapper_func) _wrap_DayTime_setSystemTime, NULL},
    { SWIG_prefix "DayTime_setLocalTime", (swig_wrapper_func) _wrap_DayTime_setLocalTime, NULL},
    { SWIG_prefix "DayTime_setYMD", (swig_wrapper_func) _wrap_DayTime_setYMD, NULL},
    { SWIG_prefix "DayTime_setHMS", (swig_wrapper_func) _wrap_DayTime_setHMS, NULL},
    { SWIG_prefix "DayTime_setSecOfDay", (swig_wrapper_func) _wrap_DayTime_setSecOfDay, NULL},
    { SWIG_prefix "DayTime_setYDoy", (swig_wrapper_func) _wrap_DayTime_setYDoy, NULL},
    { SWIG_prefix "DayTime_setToString", (swig_wrapper_func) _wrap_DayTime_setToString, NULL},
    { SWIG_prefix "DayTime_DayTime_printString", (swig_wrapper_func) _wrap_DayTime_DayTime_printString, NULL},
    { SWIG_prefix "DayTime_printf", (swig_wrapper_func) _wrap_DayTime_printf, NULL},
    { SWIG_prefix "DayTime_asString", (swig_wrapper_func) _wrap_DayTime_asString, NULL},
    { SWIG_prefix "DayTime_dump", (swig_wrapper_func) _wrap_DayTime_dump, NULL},
    { SWIG_prefix "DayTime_convertJDtoCalendar", (swig_wrapper_func) _wrap_DayTime_convertJDtoCalendar, NULL},
    { SWIG_prefix "DayTime_convertCalendarToJD", (swig_wrapper_func) _wrap_DayTime_convertCalendarToJD, NULL},
    { SWIG_prefix "DayTime_convertSODtoTime", (swig_wrapper_func) _wrap_DayTime_convertSODtoTime, NULL},
    { SWIG_prefix "DayTime_convertTimeToSOD", (swig_wrapper_func) _wrap_DayTime_convertTimeToSOD, NULL},
    { SWIG_prefix "delete_DayTime", (swig_wrapper_func) _wrap_delete_DayTime, NULL},
    { SWIG_prefix "DayTime", (swig_wrapper_func) SWIG_ObjectConstructor, &_wrap_class_DayTime},
    {0, 0, 0}
};

static swig_var_info swig_variables[] = {
    { SWIG_prefix "GPSZcount_ZCOUNT_MINUTE", 0, (swig_variable_func) _wrap_GPSZcount_ZCOUNT_MINUTE_get,(swig_variable_func) swig_readonly},
    { SWIG_prefix "GPSZcount_ZCOUNT_HOUR", 0, (swig_variable_func) _wrap_GPSZcount_ZCOUNT_HOUR_get,(swig_variable_func) swig_readonly},
    { SWIG_prefix "GPSZcount_ZCOUNT_DAY", 0, (swig_variable_func) _wrap_GPSZcount_ZCOUNT_DAY_get,(swig_variable_func) swig_readonly},
    { SWIG_prefix "GPSZcount_ZCOUNT_WEEK", 0, (swig_variable_func) _wrap_GPSZcount_ZCOUNT_WEEK_get,(swig_variable_func) swig_readonly},
    { SWIG_prefix "DayTime_FACTOR", 0, (swig_variable_func) _wrap_DayTime_FACTOR_get,(swig_variable_func) swig_readonly},
    { SWIG_prefix "DayTime_JD_TO_MJD", 0, (swig_variable_func) _wrap_DayTime_JD_TO_MJD_get,(swig_variable_func) swig_readonly},
    { SWIG_prefix "DayTime_MJD_JDAY", 0, (swig_variable_func) _wrap_DayTime_MJD_JDAY_get,(swig_variable_func) swig_readonly},
    { SWIG_prefix "DayTime_GPS_EPOCH_JDAY", 0, (swig_variable_func) _wrap_DayTime_GPS_EPOCH_JDAY_get,(swig_variable_func) swig_readonly},
    { SWIG_prefix "DayTime_GPS_EPOCH_MJD", 0, (swig_variable_func) _wrap_DayTime_GPS_EPOCH_MJD_get,(swig_variable_func) swig_readonly},
    { SWIG_prefix "DayTime_UNIX_MJD", 0, (swig_variable_func) _wrap_DayTime_UNIX_MJD_get,(swig_variable_func) swig_readonly},
    { SWIG_prefix "DayTime_HALFWEEK", 0, (swig_variable_func) _wrap_DayTime_HALFWEEK_get,(swig_variable_func) swig_readonly},
    { SWIG_prefix "DayTime_FULLWEEK", 0, (swig_variable_func) _wrap_DayTime_FULLWEEK_get,(swig_variable_func) swig_readonly},
    { SWIG_prefix "DayTime_SEC_DAY", 0, (swig_variable_func) _wrap_DayTime_SEC_DAY_get,(swig_variable_func) swig_readonly},
    { SWIG_prefix "DayTime_MS_PER_DAY", 0, (swig_variable_func) _wrap_DayTime_MS_PER_DAY_get,(swig_variable_func) swig_readonly},
    { SWIG_prefix "DayTime_ONE_NSEC_TOLERANCE", 0, (swig_variable_func) _wrap_DayTime_ONE_NSEC_TOLERANCE_get,(swig_variable_func) swig_readonly},
    { SWIG_prefix "DayTime_ONE_USEC_TOLERANCE", 0, (swig_variable_func) _wrap_DayTime_ONE_USEC_TOLERANCE_get,(swig_variable_func) swig_readonly},
    { SWIG_prefix "DayTime_ONE_MSEC_TOLERANCE", 0, (swig_variable_func) _wrap_DayTime_ONE_MSEC_TOLERANCE_get,(swig_variable_func) swig_readonly},
    { SWIG_prefix "DayTime_ONE_SEC_TOLERANCE", 0, (swig_variable_func) _wrap_DayTime_ONE_SEC_TOLERANCE_get,(swig_variable_func) swig_readonly},
    { SWIG_prefix "DayTime_ONE_MIN_TOLERANCE", 0, (swig_variable_func) _wrap_DayTime_ONE_MIN_TOLERANCE_get,(swig_variable_func) swig_readonly},
    { SWIG_prefix "DayTime_ONE_HOUR_TOLERANCE", 0, (swig_variable_func) _wrap_DayTime_ONE_HOUR_TOLERANCE_get,(swig_variable_func) swig_readonly},
    { SWIG_prefix "DayTime_DAYTIME_TOLERANCE", 0, (swig_variable_func) _wrap_DayTime_DAYTIME_TOLERANCE_get,(swig_variable_func) _wrap_DayTime_DAYTIME_TOLERANCE_set},
    { SWIG_prefix "DayTime_BEGIN_LIMIT_JDAY", 0, (swig_variable_func) _wrap_DayTime_BEGIN_LIMIT_JDAY_get,(swig_variable_func) swig_readonly},
    { SWIG_prefix "DayTime_END_LIMIT_JDAY", 0, (swig_variable_func) _wrap_DayTime_END_LIMIT_JDAY_get,(swig_variable_func) swig_readonly},
    { SWIG_prefix "DayTime_BEGINNING_OF_TIME", 0, (swig_variable_func) _wrap_DayTime_BEGINNING_OF_TIME_get,(swig_variable_func) swig_readonly},
    { SWIG_prefix "DayTime_END_OF_TIME", 0, (swig_variable_func) _wrap_DayTime_END_OF_TIME_get,(swig_variable_func) swig_readonly},
    { SWIG_prefix "DayTime_DAYTIME_TEST_VALID", 0, (swig_variable_func) _wrap_DayTime_DAYTIME_TEST_VALID_get,(swig_variable_func) _wrap_DayTime_DAYTIME_TEST_VALID_set},
    {0,0,0,0}
};

static swig_const_info swig_constants[] = {
{ SWIG_TCL_INT,     (char *)"Exception_unrecoverable", (long) gpstk::Exception::unrecoverable, 0, 0, 0},
{ SWIG_TCL_INT,     (char *)"Exception_recoverable", (long) gpstk::Exception::recoverable, 0, 0, 0},
{ SWIG_TCL_INT,     (char *)"DayTime_Unknown", (long) DayTime::Unknown, 0, 0, 0},
{ SWIG_TCL_INT,     (char *)"DayTime_UTC", (long) DayTime::UTC, 0, 0, 0},
{ SWIG_TCL_INT,     (char *)"DayTime_LocalSystem", (long) DayTime::LocalSystem, 0, 0, 0},
{ SWIG_TCL_INT,     (char *)"DayTime_GPS_Tx", (long) DayTime::GPS_Tx, 0, 0, 0},
{ SWIG_TCL_INT,     (char *)"DayTime_GPS_Rx", (long) DayTime::GPS_Rx, 0, 0, 0},
{ SWIG_TCL_INT,     (char *)"DayTime_GPS_SV", (long) DayTime::GPS_SV, 0, 0, 0},
{ SWIG_TCL_INT,     (char *)"DayTime_GPS_Receiver", (long) DayTime::GPS_Receiver, 0, 0, 0},
    {0,0,0,0,0,0}
};

/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_gpstk__InvalidRequestTo_p_gpstk__Exception(void *x) {
    return (void *)((gpstk::Exception *)  ((gpstk::InvalidRequest *) x));
}
static void *_p_gpstk__IndexOutOfBoundsExceptionTo_p_gpstk__Exception(void *x) {
    return (void *)((gpstk::Exception *)  ((gpstk::IndexOutOfBoundsException *) x));
}
static void *_p_gpstk__InvalidArgumentExceptionTo_p_gpstk__Exception(void *x) {
    return (void *)((gpstk::Exception *)  ((gpstk::InvalidArgumentException *) x));
}
static void *_p_gpstk__ConfigurationExceptionTo_p_gpstk__Exception(void *x) {
    return (void *)((gpstk::Exception *)  ((gpstk::ConfigurationException *) x));
}
static void *_p_gpstk__FileMissingExceptionTo_p_gpstk__Exception(void *x) {
    return (void *)((gpstk::Exception *)  ((gpstk::FileMissingException *) x));
}
static void *_p_gpstk__SystemSemaphoreExceptionTo_p_gpstk__Exception(void *x) {
    return (void *)((gpstk::Exception *)  ((gpstk::SystemSemaphoreException *) x));
}
static void *_p_gpstk__SystemPipeExceptionTo_p_gpstk__Exception(void *x) {
    return (void *)((gpstk::Exception *)  ((gpstk::SystemPipeException *) x));
}
static void *_p_gpstk__SystemQueueExceptionTo_p_gpstk__Exception(void *x) {
    return (void *)((gpstk::Exception *)  ((gpstk::SystemQueueException *) x));
}
static void *_p_gpstk__OutOfMemoryTo_p_gpstk__Exception(void *x) {
    return (void *)((gpstk::Exception *)  ((gpstk::OutOfMemory *) x));
}
static void *_p_gpstk__ObjectNotFoundTo_p_gpstk__Exception(void *x) {
    return (void *)((gpstk::Exception *) (gpstk::AccessError *) ((gpstk::ObjectNotFound *) x));
}
static void *_p_gpstk__InvalidParameterTo_p_gpstk__Exception(void *x) {
    return (void *)((gpstk::Exception *)  ((gpstk::InvalidParameter *) x));
}
static void *_p_gpstk__AccessErrorTo_p_gpstk__Exception(void *x) {
    return (void *)((gpstk::Exception *)  ((gpstk::AccessError *) x));
}
static void *_p_gpstk__AssertionFailureTo_p_gpstk__Exception(void *x) {
    return (void *)((gpstk::Exception *)  ((gpstk::AssertionFailure *) x));
}
static void *_p_gpstk__AccessErrorTo_p_std__ostream(void *x) {
    return (void *)((std::ostream *) (gpstk::Exception *) ((gpstk::AccessError *) x));
}
static void *_p_gpstk__InvalidParameterTo_p_std__ostream(void *x) {
    return (void *)((std::ostream *) (gpstk::Exception *) ((gpstk::InvalidParameter *) x));
}
static void *_p_gpstk__OutOfMemoryTo_p_std__ostream(void *x) {
    return (void *)((std::ostream *) (gpstk::Exception *) ((gpstk::OutOfMemory *) x));
}
static void *_p_gpstk__ObjectNotFoundTo_p_std__ostream(void *x) {
    return (void *)((std::ostream *) (gpstk::Exception *)(gpstk::AccessError *) ((gpstk::ObjectNotFound *) x));
}
static void *_p_gpstk__SystemQueueExceptionTo_p_std__ostream(void *x) {
    return (void *)((std::ostream *) (gpstk::Exception *) ((gpstk::SystemQueueException *) x));
}
static void *_p_gpstk__SystemPipeExceptionTo_p_std__ostream(void *x) {
    return (void *)((std::ostream *) (gpstk::Exception *) ((gpstk::SystemPipeException *) x));
}
static void *_p_gpstk__SystemSemaphoreExceptionTo_p_std__ostream(void *x) {
    return (void *)((std::ostream *) (gpstk::Exception *) ((gpstk::SystemSemaphoreException *) x));
}
static void *_p_gpstk__FileMissingExceptionTo_p_std__ostream(void *x) {
    return (void *)((std::ostream *) (gpstk::Exception *) ((gpstk::FileMissingException *) x));
}
static void *_p_gpstk__ConfigurationExceptionTo_p_std__ostream(void *x) {
    return (void *)((std::ostream *) (gpstk::Exception *) ((gpstk::ConfigurationException *) x));
}
static void *_p_gpstk__InvalidArgumentExceptionTo_p_std__ostream(void *x) {
    return (void *)((std::ostream *) (gpstk::Exception *) ((gpstk::InvalidArgumentException *) x));
}
static void *_p_gpstk__IndexOutOfBoundsExceptionTo_p_std__ostream(void *x) {
    return (void *)((std::ostream *) (gpstk::Exception *) ((gpstk::IndexOutOfBoundsException *) x));
}
static void *_p_gpstk__ExceptionTo_p_std__ostream(void *x) {
    return (void *)((std::ostream *)  ((gpstk::Exception *) x));
}
static void *_p_gpstk__InvalidRequestTo_p_std__ostream(void *x) {
    return (void *)((std::ostream *) (gpstk::Exception *) ((gpstk::InvalidRequest *) x));
}
static void *_p_gpstk__AssertionFailureTo_p_std__ostream(void *x) {
    return (void *)((std::ostream *) (gpstk::Exception *) ((gpstk::AssertionFailure *) x));
}
static void *_p_gpstk__ObjectNotFoundTo_p_gpstk__AccessError(void *x) {
    return (void *)((gpstk::AccessError *)  ((gpstk::ObjectNotFound *) x));
}
static swig_type_info _swigt__p_gpstk__AccessError[] = {{"_p_gpstk__AccessError", 0, "gpstk::AccessError *", &_wrap_class_gpstk_AccessError, 0, 0, 0},{"_p_gpstk__ObjectNotFound", _p_gpstk__ObjectNotFoundTo_p_gpstk__AccessError, 0, 0, 0, 0, 0},{"_p_gpstk__AccessError", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_size_t[] = {{"_p_size_t", 0, "size_t *", 0, 0, 0, 0},{"_p_size_t", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__std__size_t[] = {{"_std__size_t", 0, "std::size_t", 0, 0, 0, 0},{"_std__size_t", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__size_t[] = {{"_size_t", 0, "size_t", 0, 0, 0, 0},{"_size_t", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_gpstk__InvalidParameter[] = {{"_p_gpstk__InvalidParameter", 0, "gpstk::InvalidParameter *", &_wrap_class_gpstk_InvalidParameter, 0, 0, 0},{"_p_gpstk__InvalidParameter", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_DayTime[] = {{"_p_DayTime", 0, "DayTime *", &_wrap_class_DayTime, 0, 0, 0},{"_p_DayTime", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_gpstk__OutOfMemory[] = {{"_p_gpstk__OutOfMemory", 0, "gpstk::OutOfMemory *", &_wrap_class_gpstk_OutOfMemory, 0, 0, 0},{"_p_gpstk__OutOfMemory", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_gpstk__ExceptionLocation[] = {{"_p_gpstk__ExceptionLocation", 0, "gpstk::ExceptionLocation *", &_wrap_class_gpstk_ExceptionLocation, 0, 0, 0},{"_p_gpstk__ExceptionLocation", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_gpstk__GPSZcount[] = {{"_p_gpstk__GPSZcount", 0, "gpstk::GPSZcount *", &_wrap_class_gpstk_GPSZcount, 0, 0, 0},{"_p_gpstk__GPSZcount", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_long_double[] = {{"_p_long_double", 0, "long double *", 0, 0, 0, 0},{"_p_long_double", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_GPSZcount[] = {{"_p_GPSZcount", 0, "GPSZcount *", 0, 0, 0, 0},{"_p_GPSZcount", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_double[] = {{"_p_double", 0, "double *", 0, 0, 0, 0},{"_p_double", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_time_t[] = {{"_p_time_t", 0, "time_t *", 0, 0, 0, 0},{"_p_time_t", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_gpstk__ObjectNotFound[] = {{"_p_gpstk__ObjectNotFound", 0, "gpstk::ObjectNotFound *", &_wrap_class_gpstk_ObjectNotFound, 0, 0, 0},{"_p_gpstk__ObjectNotFound", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_std__ostream[] = {{"_p_std__ostream", 0, "std::ostream *", 0, 0, 0, 0},{"_p_gpstk__AccessError", _p_gpstk__AccessErrorTo_p_std__ostream, 0, 0, 0, 0, 0},{"_p_gpstk__InvalidParameter", _p_gpstk__InvalidParameterTo_p_std__ostream, 0, 0, 0, 0, 0},{"_p_gpstk__OutOfMemory", _p_gpstk__OutOfMemoryTo_p_std__ostream, 0, 0, 0, 0, 0},{"_p_gpstk__ObjectNotFound", _p_gpstk__ObjectNotFoundTo_p_std__ostream, 0, 0, 0, 0, 0},{"_p_std__ostream", 0, 0, 0, 0, 0, 0},{"_p_gpstk__IndexOutOfBoundsException", _p_gpstk__IndexOutOfBoundsExceptionTo_p_std__ostream, 0, 0, 0, 0, 0},{"_p_gpstk__InvalidArgumentException", _p_gpstk__InvalidArgumentExceptionTo_p_std__ostream, 0, 0, 0, 0, 0},{"_p_gpstk__ConfigurationException", _p_gpstk__ConfigurationExceptionTo_p_std__ostream, 0, 0, 0, 0, 0},{"_p_gpstk__FileMissingException", _p_gpstk__FileMissingExceptionTo_p_std__ostream, 0, 0, 0, 0, 0},{"_p_gpstk__SystemSemaphoreException", _p_gpstk__SystemSemaphoreExceptionTo_p_std__ostream, 0, 0, 0, 0, 0},{"_p_gpstk__SystemPipeException", _p_gpstk__SystemPipeExceptionTo_p_std__ostream, 0, 0, 0, 0, 0},{"_p_gpstk__SystemQueueException", _p_gpstk__SystemQueueExceptionTo_p_std__ostream, 0, 0, 0, 0, 0},{"_p_gpstk__Exception", _p_gpstk__ExceptionTo_p_std__ostream, 0, 0, 0, 0, 0},{"_p_gpstk__InvalidRequest", _p_gpstk__InvalidRequestTo_p_std__ostream, 0, 0, 0, 0, 0},{"_p_gpstk__AssertionFailure", _p_gpstk__AssertionFailureTo_p_std__ostream, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_gpstk__InvalidArgumentException[] = {{"_p_gpstk__InvalidArgumentException", 0, "gpstk::InvalidArgumentException *", &_wrap_class_gpstk_InvalidArgumentException, 0, 0, 0},{"_p_gpstk__InvalidArgumentException", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_gpstk__IndexOutOfBoundsException[] = {{"_p_gpstk__IndexOutOfBoundsException", 0, "gpstk::IndexOutOfBoundsException *", &_wrap_class_gpstk_IndexOutOfBoundsException, 0, 0, 0},{"_p_gpstk__IndexOutOfBoundsException", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_gpstk__Exception[] = {{"_p_gpstk__Exception", 0, "gpstk::Exception *", &_wrap_class_gpstk_Exception, 0, 0, 0},{"_p_gpstk__AccessError", _p_gpstk__AccessErrorTo_p_gpstk__Exception, 0, 0, 0, 0, 0},{"_p_gpstk__InvalidParameter", _p_gpstk__InvalidParameterTo_p_gpstk__Exception, 0, 0, 0, 0, 0},{"_p_gpstk__OutOfMemory", _p_gpstk__OutOfMemoryTo_p_gpstk__Exception, 0, 0, 0, 0, 0},{"_p_gpstk__ObjectNotFound", _p_gpstk__ObjectNotFoundTo_p_gpstk__Exception, 0, 0, 0, 0, 0},{"_p_gpstk__IndexOutOfBoundsException", _p_gpstk__IndexOutOfBoundsExceptionTo_p_gpstk__Exception, 0, 0, 0, 0, 0},{"_p_gpstk__InvalidArgumentException", _p_gpstk__InvalidArgumentExceptionTo_p_gpstk__Exception, 0, 0, 0, 0, 0},{"_p_gpstk__ConfigurationException", _p_gpstk__ConfigurationExceptionTo_p_gpstk__Exception, 0, 0, 0, 0, 0},{"_p_gpstk__FileMissingException", _p_gpstk__FileMissingExceptionTo_p_gpstk__Exception, 0, 0, 0, 0, 0},{"_p_gpstk__SystemSemaphoreException", _p_gpstk__SystemSemaphoreExceptionTo_p_gpstk__Exception, 0, 0, 0, 0, 0},{"_p_gpstk__SystemPipeException", _p_gpstk__SystemPipeExceptionTo_p_gpstk__Exception, 0, 0, 0, 0, 0},{"_p_gpstk__SystemQueueException", _p_gpstk__SystemQueueExceptionTo_p_gpstk__Exception, 0, 0, 0, 0, 0},{"_p_gpstk__Exception", 0, 0, 0, 0, 0, 0},{"_p_gpstk__InvalidRequest", _p_gpstk__InvalidRequestTo_p_gpstk__Exception, 0, 0, 0, 0, 0},{"_p_gpstk__AssertionFailure", _p_gpstk__AssertionFailureTo_p_gpstk__Exception, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_gpstk__ConfigurationException[] = {{"_p_gpstk__ConfigurationException", 0, "gpstk::ConfigurationException *", &_wrap_class_gpstk_ConfigurationException, 0, 0, 0},{"_p_gpstk__ConfigurationException", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_gpstk__FileMissingException[] = {{"_p_gpstk__FileMissingException", 0, "gpstk::FileMissingException *", &_wrap_class_gpstk_FileMissingException, 0, 0, 0},{"_p_gpstk__FileMissingException", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_gpstk__SystemSemaphoreException[] = {{"_p_gpstk__SystemSemaphoreException", 0, "gpstk::SystemSemaphoreException *", &_wrap_class_gpstk_SystemSemaphoreException, 0, 0, 0},{"_p_gpstk__SystemSemaphoreException", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_gpstk__SystemPipeException[] = {{"_p_gpstk__SystemPipeException", 0, "gpstk::SystemPipeException *", &_wrap_class_gpstk_SystemPipeException, 0, 0, 0},{"_p_gpstk__SystemPipeException", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_gpstk__SystemQueueException[] = {{"_p_gpstk__SystemQueueException", 0, "gpstk::SystemQueueException *", &_wrap_class_gpstk_SystemQueueException, 0, 0, 0},{"_p_gpstk__SystemQueueException", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_timeval[] = {{"_p_timeval", 0, "timeval *", 0, 0, 0, 0},{"_p_timeval", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__std__ptrdiff_t[] = {{"_std__ptrdiff_t", 0, "std::ptrdiff_t", 0, 0, 0, 0},{"_std__ptrdiff_t", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__ptrdiff_t[] = {{"_ptrdiff_t", 0, "ptrdiff_t", 0, 0, 0, 0},{"_ptrdiff_t", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_gpstk__InvalidRequest[] = {{"_p_gpstk__InvalidRequest", 0, "gpstk::InvalidRequest *", &_wrap_class_gpstk_InvalidRequest, 0, 0, 0},{"_p_gpstk__InvalidRequest", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_gpstk__AssertionFailure[] = {{"_p_gpstk__AssertionFailure", 0, "gpstk::AssertionFailure *", &_wrap_class_gpstk_AssertionFailure, 0, 0, 0},{"_p_gpstk__AssertionFailure", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_int[] = {{"_p_int", 0, "int *", 0, 0, 0, 0},{"_p_int", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};

static swig_type_info *swig_types_initial[] = {
_swigt__p_gpstk__AccessError, 
_swigt__p_size_t, 
_swigt__std__size_t, 
_swigt__size_t, 
_swigt__p_gpstk__InvalidParameter, 
_swigt__p_DayTime, 
_swigt__p_gpstk__OutOfMemory, 
_swigt__p_gpstk__ExceptionLocation, 
_swigt__p_gpstk__GPSZcount, 
_swigt__p_long_double, 
_swigt__p_GPSZcount, 
_swigt__p_double, 
_swigt__p_time_t, 
_swigt__p_gpstk__ObjectNotFound, 
_swigt__p_std__ostream, 
_swigt__p_gpstk__InvalidArgumentException, 
_swigt__p_gpstk__IndexOutOfBoundsException, 
_swigt__p_gpstk__Exception, 
_swigt__p_gpstk__ConfigurationException, 
_swigt__p_gpstk__FileMissingException, 
_swigt__p_gpstk__SystemSemaphoreException, 
_swigt__p_gpstk__SystemPipeException, 
_swigt__p_gpstk__SystemQueueException, 
_swigt__p_timeval, 
_swigt__std__ptrdiff_t, 
_swigt__ptrdiff_t, 
_swigt__p_gpstk__InvalidRequest, 
_swigt__p_gpstk__AssertionFailure, 
_swigt__p_int, 
0
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

#ifdef __cplusplus
}
#endif

SWIGEXPORT(int) SWIG_init(Tcl_Interp *interp) {
    int i;
    static int _init = 0;
    if (interp == 0) return TCL_ERROR;
#ifdef USE_TCL_STUBS
    if (Tcl_InitStubs(interp, (char*)"8.1", 0) == NULL) {
        return TCL_ERROR;
    }
#endif
    
    Tcl_PkgProvide(interp, (char*)SWIG_name, (char*)SWIG_version);
    
#ifdef SWIG_namespace
    Tcl_Eval(interp, "namespace eval " SWIG_namespace " { }");
#endif
    if (!_init) {
        SWIG_Tcl_LookupTypePointer(interp);
        for (i = 0; swig_types_initial[i]; i++) {
            swig_types[i] = SWIG_TypeRegister(swig_types_initial[i]);
        }
        for (i = 0; swig_types_initial[i]; i++) {
            SWIG_PropagateClientData(swig_types[i]);
        }
        _init = 1;
    }
    for (i = 0; swig_commands[i].name; i++) {
        Tcl_CreateObjCommand(interp, (char *) swig_commands[i].name, (swig_wrapper_func) swig_commands[i].wrapper, swig_commands[i].clientdata, NULL);
    }
    for (i = 0; swig_variables[i].name; i++) {
        Tcl_SetVar(interp, (char *) swig_variables[i].name, (char *) "", TCL_GLOBAL_ONLY);
        Tcl_TraceVar(interp, (char *) swig_variables[i].name, TCL_TRACE_READS | TCL_GLOBAL_ONLY, (Tcl_VarTraceProc *) swig_variables[i].get, (ClientData) swig_variables[i].addr);
        Tcl_TraceVar(interp, (char *) swig_variables[i].name, TCL_TRACE_WRITES | TCL_GLOBAL_ONLY, (Tcl_VarTraceProc *) swig_variables[i].set, (ClientData) swig_variables[i].addr);
    }
    SWIG_InstallConstants(interp, swig_constants);
    
    return TCL_OK;
}
SWIGEXPORT(int) Gpstk_SafeInit(Tcl_Interp *interp) {
    return SWIG_init(interp);
}

