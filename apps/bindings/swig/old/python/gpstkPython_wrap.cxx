/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.25
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGPYTHON

#ifdef __cplusplus
template<class T> class SwigValueWrapper {
    T *tt;
public:
    SwigValueWrapper() : tt(0) { }
    SwigValueWrapper(const SwigValueWrapper<T>& rhs) : tt(new T(*rhs.tt)) { }
    SwigValueWrapper(const T& t) : tt(new T(t)) { }
    ~SwigValueWrapper() { delete tt; } 
    SwigValueWrapper& operator=(const T& t) { delete tt; tt = new T(t); return *this; }
    operator T&() const { return *tt; }
    T *operator&() { return tt; }
private:
    SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
};
#endif

/***********************************************************************
 *
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 *
 ************************************************************************/

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
#  if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#    define SWIGTEMPLATEDISAMBIGUATOR template
#  else
#    define SWIGTEMPLATEDISAMBIGUATOR 
#  endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__) || defined(__ICC)
#   define SWIGUNUSED __attribute__ ((unused)) 
# else
#   define SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods for Windows DLLs */
#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   define SWIGEXPORT
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif



#include <Python.h>

/***********************************************************************
 * swigrun.swg
 *
 *     This file contains generic CAPI SWIG runtime support for pointer
 *     type checking.
 *
 ************************************************************************/

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "2"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the swig runtime code.
  In 99.9% of the cases, swig just needs to declare them as 'static'.
  
  But only do this if is strictly necessary, ie, if you have problems
  with your compiler or so.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store inforomation on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;


/* 
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (int)(*f1 - *f2);
  }
  return (l1 - f1) - (l2 - f2);
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = (SWIG_TypeNameComp(nb, ne, tb, te) == 0) ? 1 : 0;
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCompare(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = (SWIG_TypeNameComp(nb, ne, tb, te) == 0) ? 1 : 0;
    if (*ne) ++ne;
  }
  return equiv;
}


/* think of this as a c++ template<> or a scheme macro */
#define SWIG_TypeCheck_Template(comparison, ty)         \
  if (ty) {                                             \
    swig_cast_info *iter = ty->cast;                    \
    while (iter) {                                      \
      if (comparison) {                                 \
        if (iter == ty->cast) return iter;              \
        /* Move iter to the top of the linked list */   \
        iter->prev->next = iter->next;                  \
        if (iter->next)                                 \
          iter->next->prev = iter->prev;                \
        iter->next = ty->cast;                          \
        iter->prev = 0;                                 \
        if (ty->cast) ty->cast->prev = iter;            \
        ty->cast = iter;                                \
        return iter;                                    \
      }                                                 \
      iter = iter->next;                                \
    }                                                   \
  }                                                     \
  return 0

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  SWIG_TypeCheck_Template(strcmp(iter->type->name, c) == 0, ty);
}

/* Same as previous function, except strcmp is replaced with a pointer comparison */
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *into) {
  SWIG_TypeCheck_Template(iter->type == from, into);
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr);
}

/* 
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/* 
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  if (!ti->clientdata) {
    swig_cast_info *cast = ti->cast;
    /* if (ti->clientdata == clientdata) return; */
    ti->clientdata = clientdata;
    
    while (cast) {
      if (!cast->converter)
	SWIG_TypeClientData(cast->type, clientdata);
      cast = cast->next;
    }
  }
}

/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start, 
                            swig_module_info *end, 
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      register size_t l = 0;
      register size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	register size_t i = (l + r) >> 1; 
	const char *iname = iter->types[i]->name;
	if (iname) {
	  register int compare = strcmp(name, iname);
	  if (compare == 0) {	    
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start, 
                     swig_module_info *end, 
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      register size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }
  
  /* neither found a match */
  return 0;
}


/* 
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  register const unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    register unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/* 
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  register unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    register char d = *(c++);
    register unsigned char uu = 0;
    if ((d >= '0') && (d <= '9'))
      uu = ((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = ((d - ('a'-10)) << 4);
    else 
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (d - ('a'-10));
    else 
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/* 
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------
 * SWIG API. Portion that goes into the runtime
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

/* -----------------------------------------------------------------------------
 * for internal method declarations
 * ----------------------------------------------------------------------------- */

#ifndef SWIGINTERN
#  define SWIGINTERN static SWIGUNUSED
#endif

#ifndef SWIGINTERNINLINE
#  define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/*
  Exception handling in wrappers
*/
#define SWIG_fail                goto fail
#define SWIG_arg_fail(arg)       SWIG_Python_ArgFail(arg)
#define SWIG_append_errmsg(msg)   SWIG_Python_AddErrMesg(msg,0)
#define SWIG_preppend_errmsg(msg) SWIG_Python_AddErrMesg(msg,1)
#define SWIG_type_error(type,obj) SWIG_Python_TypeError(type,obj)
#define SWIG_null_ref(type)       SWIG_Python_NullRef(type)

/*
  Contract support
*/
#define SWIG_contract_assert(expr, msg) \
 if (!(expr)) { PyErr_SetString(PyExc_RuntimeError, (char *) msg ); goto fail; } else

/* -----------------------------------------------------------------------------
 * Constant declarations
 * ----------------------------------------------------------------------------- */

/* Constant Types */
#define SWIG_PY_INT     1
#define SWIG_PY_FLOAT   2
#define SWIG_PY_STRING  3
#define SWIG_PY_POINTER 4
#define SWIG_PY_BINARY  5

/* Constant information structure */
typedef struct swig_const_info {
    int type;
    char *name;
    long lvalue;
    double dvalue;
    void   *pvalue;
    swig_type_info **ptype;
} swig_const_info;


/* -----------------------------------------------------------------------------
 * Alloc. memory flags
 * ----------------------------------------------------------------------------- */
#define SWIG_OLDOBJ  1
#define SWIG_NEWOBJ  SWIG_OLDOBJ + 1
#define SWIG_PYSTR   SWIG_NEWOBJ + 1

#ifdef __cplusplus
}
#endif


/***********************************************************************
 * pyrun.swg
 *
 *     This file contains the runtime support for Python modules
 *     and includes code for managing global variables and pointer
 *     type checking.
 *
 * Author : David Beazley (beazley@cs.uchicago.edu)
 ************************************************************************/

/* Common SWIG API */
#define SWIG_ConvertPtr(obj, pp, type, flags)    SWIG_Python_ConvertPtr(obj, pp, type, flags)
#define SWIG_NewPointerObj(p, type, flags)       SWIG_Python_NewPointerObj(p, type, flags)
#define SWIG_MustGetPtr(p, type, argnum, flags)  SWIG_Python_MustGetPtr(p, type, argnum, flags)
 

/* Python-specific SWIG API */
#define SWIG_ConvertPacked(obj, ptr, sz, ty, flags)   SWIG_Python_ConvertPacked(obj, ptr, sz, ty, flags)
#define SWIG_NewPackedObj(ptr, sz, type)              SWIG_Python_NewPackedObj(ptr, sz, type)

/* Runtime API */
#define SWIG_GetModule(clientdata) SWIG_Python_GetModule()
#define SWIG_SetModule(clientdata, pointer) SWIG_Python_SetModule(pointer)

/* -----------------------------------------------------------------------------
 * Pointer declarations
 * ----------------------------------------------------------------------------- */
/*
  Use SWIG_NO_COBJECT_TYPES to force the use of strings to represent
  C/C++ pointers in the python side. Very useful for debugging, but
  not always safe.
*/
#if !defined(SWIG_NO_COBJECT_TYPES) && !defined(SWIG_COBJECT_TYPES)
#  define SWIG_COBJECT_TYPES
#endif

/* Flags for pointer conversion */
#define SWIG_POINTER_EXCEPTION     0x1
#define SWIG_POINTER_DISOWN        0x2


/* Add PyOS_snprintf for old Pythons */
#if PY_VERSION_HEX < 0x02020000
#define PyOS_snprintf snprintf
#endif

#ifdef __cplusplus
extern "C" {
#endif

/* -----------------------------------------------------------------------------
 * Create a new pointer string 
 * ----------------------------------------------------------------------------- */
#ifndef SWIG_BUFFER_SIZE
#define SWIG_BUFFER_SIZE 1024
#endif

#if defined(SWIG_COBJECT_TYPES)
#if !defined(SWIG_COBJECT_PYTHON)
/* -----------------------------------------------------------------------------
 * Implements a simple Swig Object type, and use it instead of PyCObject
 * ----------------------------------------------------------------------------- */

typedef struct {
  PyObject_HEAD
  void *ptr;
  const char *desc;
} PySwigObject;

/* Declarations for objects of type PySwigObject */

SWIGRUNTIME int
PySwigObject_print(PySwigObject *v, FILE *fp, int flags)
{
  char result[SWIG_BUFFER_SIZE];
  flags = flags;
  if (SWIG_PackVoidPtr(result, v->ptr, v->desc, sizeof(result))) {
    fputs("<Swig Object at ", fp); fputs(result, fp); fputs(">", fp);
    return 0; 
  } else {
    return 1; 
  }
}
  
SWIGRUNTIME PyObject *
PySwigObject_repr(PySwigObject *v)
{
  char result[SWIG_BUFFER_SIZE];
  return SWIG_PackVoidPtr(result, v->ptr, v->desc, sizeof(result)) ?
    PyString_FromFormat("<Swig Object at %s>", result) : 0;
}

SWIGRUNTIME PyObject *
PySwigObject_str(PySwigObject *v)
{
  char result[SWIG_BUFFER_SIZE];
  return SWIG_PackVoidPtr(result, v->ptr, v->desc, sizeof(result)) ?
    PyString_FromString(result) : 0;
}

SWIGRUNTIME PyObject *
PySwigObject_long(PySwigObject *v)
{
  return PyLong_FromVoidPtr(v->ptr);
}

SWIGRUNTIME PyObject *
PySwigObject_format(const char* fmt, PySwigObject *v)
{
  PyObject *res = NULL;
  PyObject *args = PyTuple_New(1);
  if (args && (PyTuple_SetItem(args, 0, PySwigObject_long(v)) == 0)) {
    PyObject *ofmt = PyString_FromString(fmt);
    if (ofmt) {
      res = PyString_Format(ofmt,args);
      Py_DECREF(ofmt);
    }
    Py_DECREF(args);
  }  
  return res;
}

SWIGRUNTIME PyObject *
PySwigObject_oct(PySwigObject *v)
{
  return PySwigObject_format("%o",v);
}

SWIGRUNTIME PyObject *
PySwigObject_hex(PySwigObject *v)
{
  return PySwigObject_format("%x",v);
}

SWIGRUNTIME int
PySwigObject_compare(PySwigObject *v, PySwigObject *w)
{
  int c = strcmp(v->desc, w->desc);
  if (c) {
    return (c > 0) ? 1 : -1;
  } else {
    void *i = v->ptr;
    void *j = w->ptr;
    return (i < j) ? -1 : ((i > j) ? 1 : 0);
  }
}

SWIGRUNTIME void
PySwigObject_dealloc(PySwigObject *self)
{
  PyObject_DEL(self);
}

SWIGRUNTIME PyTypeObject*
PySwigObject_type(void) {
  static char pyswigobject_type__doc__[] = 
    "Swig object carries a C/C++ instance pointer";
  
  static PyNumberMethods PySwigObject_as_number = {
    (binaryfunc)0, /*nb_add*/
    (binaryfunc)0, /*nb_subtract*/
    (binaryfunc)0, /*nb_multiply*/
    (binaryfunc)0, /*nb_divide*/
    (binaryfunc)0, /*nb_remainder*/
    (binaryfunc)0, /*nb_divmod*/
    (ternaryfunc)0,/*nb_power*/
    (unaryfunc)0,  /*nb_negative*/
    (unaryfunc)0,  /*nb_positive*/
    (unaryfunc)0,  /*nb_absolute*/
    (inquiry)0,    /*nb_nonzero*/
    0,		   /*nb_invert*/
    0,		   /*nb_lshift*/
    0,		   /*nb_rshift*/
    0,		   /*nb_and*/
    0,		   /*nb_xor*/
    0,		   /*nb_or*/
    (coercion)0,   /*nb_coerce*/
    (unaryfunc)PySwigObject_long, /*nb_int*/
    (unaryfunc)PySwigObject_long, /*nb_long*/
    (unaryfunc)0,                 /*nb_float*/
    (unaryfunc)PySwigObject_oct,  /*nb_oct*/
    (unaryfunc)PySwigObject_hex,  /*nb_hex*/
#if PY_VERSION_HEX >= 0x02000000
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_inplace_true_divide */ 
#endif
  };

  static PyTypeObject pyswigobject_type
#if !defined(__cplusplus)
  ;  
  static int type_init = 0;
  if (!type_init) {
    PyTypeObject tmp
#endif
    = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,					/*ob_size*/
    (char *)"PySwigObject",		/*tp_name*/
    sizeof(PySwigObject),		/*tp_basicsize*/
    0,					/*tp_itemsize*/
    /* methods */
    (destructor)PySwigObject_dealloc,	/*tp_dealloc*/
    (printfunc)PySwigObject_print,	/*tp_print*/
    (getattrfunc)0,			/*tp_getattr*/
    (setattrfunc)0,			/*tp_setattr*/
    (cmpfunc)PySwigObject_compare,	/*tp_compare*/
    (reprfunc)PySwigObject_repr,	/*tp_repr*/
    &PySwigObject_as_number,	        /*tp_as_number*/
    0,					/*tp_as_sequence*/
    0,					/*tp_as_mapping*/
    (hashfunc)0,			/*tp_hash*/
    (ternaryfunc)0,			/*tp_call*/
    (reprfunc)PySwigObject_str,		/*tp_str*/
    /* Space for future expansion */
    0,0,0,0,
    pyswigobject_type__doc__, 	        /* Documentation string */
#if PY_VERSION_HEX >= 0x02000000
    0,                                  /* tp_traverse */
    0,                                  /* tp_clear */
#endif
#if PY_VERSION_HEX >= 0x02010000
    0,                                  /* tp_richcompare */
    0,                                  /* tp_weaklistoffset */
#endif
#if PY_VERSION_HEX >= 0x02020000
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, /* tp_iter -> tp_weaklist */
#endif
#if PY_VERSION_HEX >= 0x02030000
    0,                                  /* tp_del */
#endif
#ifdef COUNT_ALLOCS
    0,0,0,0                             /* tp_alloc -> tp_next */
#endif
    };
#if !defined(__cplusplus)
    pyswigobject_type = tmp;
    type_init = 1;
  }
#endif
  return &pyswigobject_type;
}

SWIGRUNTIME PyObject *
PySwigObject_FromVoidPtrAndDesc(void *ptr, const char *desc)
{
  PySwigObject *self = PyObject_NEW(PySwigObject, PySwigObject_type());
  if (self) {
    self->ptr = ptr;
    self->desc = desc;
  }
  return (PyObject *)self;
}

SWIGRUNTIMEINLINE void *
PySwigObject_AsVoidPtr(PyObject *self)
{
  return ((PySwigObject *)self)->ptr;
}

SWIGRUNTIMEINLINE const char *
PySwigObject_GetDesc(PyObject *self)
{
  return ((PySwigObject *)self)->desc;
}

SWIGRUNTIMEINLINE int
PySwigObject_Check(PyObject *op) {
  return ((op)->ob_type == PySwigObject_type()) 
    || (strcmp((op)->ob_type->tp_name,"PySwigObject") == 0);
}

/* -----------------------------------------------------------------------------
 * Implements a simple Swig Packed type, and use it instead of string
 * ----------------------------------------------------------------------------- */

typedef struct {
  PyObject_HEAD
  void *pack;
  const char *desc;
  size_t size;
} PySwigPacked;

SWIGRUNTIME int
PySwigPacked_print(PySwigPacked *v, FILE *fp, int flags)
{
  char result[SWIG_BUFFER_SIZE];
  flags = flags;
  fputs("<Swig Packed ", fp); 
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))) {
    fputs("at ", fp); 
    fputs(result, fp); 
  }
  fputs(v->desc,fp); 
  fputs(">", fp);
  return 0; 
}
  
SWIGRUNTIME PyObject *
PySwigPacked_repr(PySwigPacked *v)
{
  char result[SWIG_BUFFER_SIZE];
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))) {
    return PyString_FromFormat("<Swig Packed at %s%s>", result, v->desc);
  } else {
    return PyString_FromFormat("<Swig Packed %s>", v->desc);
  }  
}

SWIGRUNTIME PyObject *
PySwigPacked_str(PySwigPacked *v)
{
  char result[SWIG_BUFFER_SIZE];
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))){
    return PyString_FromFormat("%s%s", result, v->desc);
  } else {
    return PyString_FromFormat("%s", v->desc);
  }  
}

SWIGRUNTIME int
PySwigPacked_compare(PySwigPacked *v, PySwigPacked *w)
{
  int c = strcmp(v->desc, w->desc);
  if (c) {
    return (c > 0) ? 1 : -1;
  } else {
    size_t i = v->size;
    size_t j = w->size;
    int s = (i < j) ? -1 : ((i > j) ? 1 : 0);
    return s ? s : strncmp((char *)v->pack, (char *)w->pack, 2*v->size);
  }
}

SWIGRUNTIME void
PySwigPacked_dealloc(PySwigPacked *self)
{
  free(self->pack);
  PyObject_DEL(self);
}

SWIGRUNTIME PyTypeObject*
PySwigPacked_type(void) {
  static char pyswigpacked_type__doc__[] = 
    "Swig object carries a C/C++ instance pointer";
  static PyTypeObject pyswigpacked_type
#if !defined(__cplusplus)
  ;
  static int type_init = 0;  
  if (!type_init) {
    PyTypeObject tmp
#endif
    = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,					/*ob_size*/
    (char *)"PySwigPacked",		/*tp_name*/
    sizeof(PySwigPacked),		/*tp_basicsize*/
    0,					/*tp_itemsize*/
    /* methods */
    (destructor)PySwigPacked_dealloc,	/*tp_dealloc*/
    (printfunc)PySwigPacked_print,	/*tp_print*/
    (getattrfunc)0,			/*tp_getattr*/
    (setattrfunc)0,			/*tp_setattr*/
    (cmpfunc)PySwigPacked_compare,	/*tp_compare*/
    (reprfunc)PySwigPacked_repr,	/*tp_repr*/
    0,	                                /*tp_as_number*/
    0,					/*tp_as_sequence*/
    0,					/*tp_as_mapping*/
    (hashfunc)0,			/*tp_hash*/
    (ternaryfunc)0,			/*tp_call*/
    (reprfunc)PySwigPacked_str,		/*tp_str*/
    /* Space for future expansion */
    0,0,0,0,
    pyswigpacked_type__doc__, 	        /* Documentation string */
#if PY_VERSION_HEX >= 0x02000000
    0,                                  /* tp_traverse */
    0,                                  /* tp_clear */
#endif
#if PY_VERSION_HEX >= 0x02010000
    0,                                  /* tp_richcompare */
    0,                                  /* tp_weaklistoffset */
#endif
#if PY_VERSION_HEX >= 0x02020000         
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, /* tp_iter -> tp_weaklist */
#endif
#if PY_VERSION_HEX >= 0x02030000
    0,                                  /* tp_del */
#endif
#ifdef COUNT_ALLOCS
    0,0,0,0                             /* tp_alloc -> tp_next */
#endif
    };
#if !defined(__cplusplus)
    pyswigpacked_type = tmp;
    type_init = 1;
  }
#endif
  return &pyswigpacked_type;
}

SWIGRUNTIME PyObject *
PySwigPacked_FromDataAndDesc(void *ptr, size_t size, const char *desc)
{
  PySwigPacked *self = PyObject_NEW(PySwigPacked, PySwigPacked_type());
  if (self == NULL) {
    return NULL;
  } else {
    void *pack = malloc(size);
    if (pack) {
      memcpy(pack, ptr, size);
      self->pack = pack;
      self->desc = desc;
      self->size = size;
      return (PyObject *) self;
    }
    return NULL;
  }
}

SWIGRUNTIMEINLINE const char *
PySwigPacked_UnpackData(PyObject *obj, void *ptr, size_t size)
{
  PySwigPacked *self = (PySwigPacked *)obj;
  if (self->size != size) return 0;
  memcpy(ptr, self->pack, size);
  return self->desc;
}

SWIGRUNTIMEINLINE const char *
PySwigPacked_GetDesc(PyObject *self)
{
  return ((PySwigPacked *)self)->desc;
}

SWIGRUNTIMEINLINE int
PySwigPacked_Check(PyObject *op) {
  return ((op)->ob_type == PySwigPacked_type()) 
    || (strcmp((op)->ob_type->tp_name,"PySwigPacked") == 0);
}

#else
/* -----------------------------------------------------------------------------
 * Use the old Python PyCObject instead of PySwigObject
 * ----------------------------------------------------------------------------- */

#define PySwigObject_GetDesc(obj)	           PyCObject_GetDesc(obj)
#define PySwigObject_Check(obj)	           PyCObject_Check(obj)
#define PySwigObject_AsVoidPtr(obj)	   PyCObject_AsVoidPtr(obj)
#define PySwigObject_FromVoidPtrAndDesc(p, d)  PyCObject_FromVoidPtrAndDesc(p, d, NULL)

#endif

#endif

/* -----------------------------------------------------------------------------
 * errors manipulation
 * ----------------------------------------------------------------------------- */

SWIGRUNTIME void
SWIG_Python_TypeError(const char *type, PyObject *obj)
{
  if (type) {
#if defined(SWIG_COBJECT_TYPES)
    if (obj && PySwigObject_Check(obj)) {
      const char *otype = (const char *) PySwigObject_GetDesc(obj);
      if (otype) {
	PyErr_Format(PyExc_TypeError, "a '%s' is expected, 'PySwigObject(%s)' is received",
		     type, otype);
	return;
      }
    } else 
#endif      
    {
      const char *otype = (obj ? obj->ob_type->tp_name : 0); 
      if (otype) {
	PyObject *str = PyObject_Str(obj);
	const char *cstr = str ? PyString_AsString(str) : 0;
	if (cstr) {
	  PyErr_Format(PyExc_TypeError, "a '%s' is expected, '%s(%s)' is received",
		       type, otype, cstr);
	} else {
	  PyErr_Format(PyExc_TypeError, "a '%s' is expected, '%s' is received",
		       type, otype);
	}
	Py_XDECREF(str);
	return;
      }
    }   
    PyErr_Format(PyExc_TypeError, "a '%s' is expected", type);
  } else {
    PyErr_Format(PyExc_TypeError, "unexpected type is received");
  }
}

SWIGRUNTIMEINLINE void
SWIG_Python_NullRef(const char *type)
{
  if (type) {
    PyErr_Format(PyExc_TypeError, "null reference of type '%s' was received",type);
  } else {
    PyErr_Format(PyExc_TypeError, "null reference was received");
  }
}

SWIGRUNTIME int
SWIG_Python_AddErrMesg(const char* mesg, int infront)
{
  if (PyErr_Occurred()) {
    PyObject *type = 0;
    PyObject *value = 0;
    PyObject *traceback = 0;
    PyErr_Fetch(&type, &value, &traceback);
    if (value) {
      PyObject *old_str = PyObject_Str(value);
      Py_XINCREF(type);
      PyErr_Clear();
      if (infront) {
	PyErr_Format(type, "%s %s", mesg, PyString_AsString(old_str));
      } else {
	PyErr_Format(type, "%s %s", PyString_AsString(old_str), mesg);
      }
      Py_DECREF(old_str);
    }
    return 1;
  } else {
    return 0;
  }
}

SWIGRUNTIME int
SWIG_Python_ArgFail(int argnum)
{
  if (PyErr_Occurred()) {
    /* add information about failing argument */
    char mesg[256];
    PyOS_snprintf(mesg, sizeof(mesg), "argument number %d:", argnum);
    return SWIG_Python_AddErrMesg(mesg, 1);
  } else {
    return 0;
  }
}


/* -----------------------------------------------------------------------------
 * pointers/data manipulation
 * ----------------------------------------------------------------------------- */

/* Convert a pointer value */
SWIGRUNTIME int
SWIG_Python_ConvertPtr(PyObject *obj, void **ptr, swig_type_info *ty, int flags) {
  swig_cast_info *tc;
  const char *c = 0;
  static PyObject *SWIG_this = 0;
  int    newref = 0;
  PyObject  *pyobj = 0;
  void *vptr;
  
  if (!obj) return 0;
  if (obj == Py_None) {
    *ptr = 0;
    return 0;
  }

#ifdef SWIG_COBJECT_TYPES
  if (!(PySwigObject_Check(obj))) {
    if (!SWIG_this)
      SWIG_this = PyString_FromString("this");
    pyobj = obj;
    obj = PyObject_GetAttr(obj,SWIG_this);
    newref = 1;
    if (!obj) goto type_error;
    if (!PySwigObject_Check(obj)) {
      Py_DECREF(obj);
      goto type_error;
    }
  }  
  vptr = PySwigObject_AsVoidPtr(obj);
  c = (const char *) PySwigObject_GetDesc(obj);
  if (newref) { Py_DECREF(obj); }
  goto type_check;
#else
  if (!(PyString_Check(obj))) {
    if (!SWIG_this)
      SWIG_this = PyString_FromString("this");
    pyobj = obj;
    obj = PyObject_GetAttr(obj,SWIG_this);
    newref = 1;
    if (!obj) goto type_error;
    if (!PyString_Check(obj)) {
      Py_DECREF(obj);
      goto type_error;
    }
  } 
  c = PyString_AS_STRING(obj);
  /* Pointer values must start with leading underscore */
  c = SWIG_UnpackVoidPtr(c, &vptr, ty->name);
  if (newref) { Py_DECREF(obj); }
  if (!c) goto type_error;
#endif

type_check:
  if (ty) {
    tc = SWIG_TypeCheck(c,ty);
    if (!tc) goto type_error;
    *ptr = SWIG_TypeCast(tc,vptr);
  } else {
    *ptr = vptr;
  }
  if ((pyobj) && (flags & SWIG_POINTER_DISOWN)) {
    PyObject_SetAttrString(pyobj,(char*)"thisown",Py_False);
  }
  return 0;

type_error:
  PyErr_Clear();
  if (pyobj && !obj) {    
    obj = pyobj;
    if (PyCFunction_Check(obj)) {
      /* here we get the method pointer for callbacks */
      char *doc = (((PyCFunctionObject *)obj) -> m_ml -> ml_doc);
      c = doc ? strstr(doc, "swig_ptr: ") : 0;
      if (c) {
	c = ty ? SWIG_UnpackVoidPtr(c + 10, &vptr, ty->name) : 0;
	if (!c) goto type_error;
	goto type_check;
      }
    }
  }
  if (flags & SWIG_POINTER_EXCEPTION) {
    if (ty) {
      SWIG_Python_TypeError(SWIG_TypePrettyName(ty), obj);
    } else {
      SWIG_Python_TypeError("C/C++ pointer", obj);
    }
  }
  return -1;
}

/* Convert a pointer value, signal an exception on a type mismatch */
SWIGRUNTIME void *
SWIG_Python_MustGetPtr(PyObject *obj, swig_type_info *ty, int argnum, int flags) {
  void *result;
  if (SWIG_Python_ConvertPtr(obj, &result, ty, flags) == -1) {
    PyErr_Clear();
    if (flags & SWIG_POINTER_EXCEPTION) {
      SWIG_Python_TypeError(SWIG_TypePrettyName(ty), obj);
      SWIG_Python_ArgFail(argnum);
    }
  }
  return result;
}

/* Convert a packed value value */
SWIGRUNTIME int
SWIG_Python_ConvertPacked(PyObject *obj, void *ptr, size_t sz, swig_type_info *ty, int flags) {
  swig_cast_info *tc;
  const char *c = 0;

#if defined(SWIG_COBJECT_TYPES) && !defined(SWIG_COBJECT_PYTHON)
  c = PySwigPacked_UnpackData(obj, ptr, sz);
#else
  if ((!obj) || (!PyString_Check(obj))) goto type_error;
  c = PyString_AS_STRING(obj);
  /* Pointer values must start with leading underscore */
  c = SWIG_UnpackDataName(c, ptr, sz, ty->name);
#endif
  if (!c) goto type_error;
  if (ty) {
    tc = SWIG_TypeCheck(c,ty);
    if (!tc) goto type_error;
  }
  return 0;

type_error:
  PyErr_Clear();
  if (flags & SWIG_POINTER_EXCEPTION) {
    if (ty) {
      SWIG_Python_TypeError(SWIG_TypePrettyName(ty), obj);
    } else {
      SWIG_Python_TypeError("C/C++ packed data", obj);
    }
  }
  return -1;
}  

/* Create a new array object */
SWIGRUNTIME PyObject *
SWIG_Python_NewPointerObj(void *ptr, swig_type_info *type, int own) {
  PyObject *robj = 0;
  if (!type) {
    if (!PyErr_Occurred()) {
      PyErr_Format(PyExc_TypeError, "Swig: null type passed to NewPointerObj");
    }
    return robj;
  }
  if (!ptr) {
    Py_INCREF(Py_None);
    return Py_None;
  }
#ifdef SWIG_COBJECT_TYPES
  robj = PySwigObject_FromVoidPtrAndDesc((void *) ptr, (char *)type->name);
#else
  {
    char result[SWIG_BUFFER_SIZE];
    robj = SWIG_PackVoidPtr(result, ptr, type->name, sizeof(result)) ?
      PyString_FromString(result) : 0;
  }
#endif
  if (!robj || (robj == Py_None)) return robj;
  if (type->clientdata) {
    PyObject *inst;
    PyObject *args = Py_BuildValue((char*)"(O)", robj);
    Py_DECREF(robj);
    inst = PyObject_CallObject((PyObject *) type->clientdata, args);
    Py_DECREF(args);
    if (inst) {
      if (own) {
        PyObject_SetAttrString(inst,(char*)"thisown",Py_True);
      }
      robj = inst;
    }
  }
  return robj;
}

SWIGRUNTIME PyObject *
SWIG_Python_NewPackedObj(void *ptr, size_t sz, swig_type_info *type) {
  PyObject *robj = 0;
  if (!ptr) {
    Py_INCREF(Py_None);
    return Py_None;
  }
#if defined(SWIG_COBJECT_TYPES) && !defined(SWIG_COBJECT_PYTHON)
  robj = PySwigPacked_FromDataAndDesc((void *) ptr, sz, (char *)type->name);
#else
  {
    char result[SWIG_BUFFER_SIZE];
    robj = SWIG_PackDataName(result, ptr, sz, type->name, sizeof(result)) ?
      PyString_FromString(result) : 0;
  }
#endif
  return robj;
}

/* -----------------------------------------------------------------------------*
 *  Get type list 
 * -----------------------------------------------------------------------------*/

#ifdef SWIG_LINK_RUNTIME
void *SWIG_ReturnGlobalTypeList(void *);
#endif

SWIGRUNTIME swig_module_info *
SWIG_Python_GetModule(void) {
  static void *type_pointer = (void *)0;
  /* first check if module already created */
  if (!type_pointer) {
#ifdef SWIG_LINK_RUNTIME
    type_pointer = SWIG_ReturnGlobalTypeList((void *)0);
#else
    type_pointer = PyCObject_Import((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION,
				    (char*)"type_pointer" SWIG_TYPE_TABLE_NAME);
    if (PyErr_Occurred()) {
      PyErr_Clear();
      type_pointer = (void *)0;
    }
  }
#endif
  return (swig_module_info *) type_pointer;
}

SWIGRUNTIME void
SWIG_Python_SetModule(swig_module_info *swig_module) {
  static PyMethodDef swig_empty_runtime_method_table[] = { {NULL, NULL, 0, NULL} };/* Sentinel */

  PyObject *module = Py_InitModule((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION,
				   swig_empty_runtime_method_table);
  PyObject *pointer = PyCObject_FromVoidPtr((void *) swig_module, NULL);
  if (pointer && module) {
    PyModule_AddObject(module, (char*)"type_pointer" SWIG_TYPE_TABLE_NAME, pointer);
  }
}

#ifdef __cplusplus
}
#endif


/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_DayTimeException swig_types[0]
#define SWIGTYPE_p_EndOfFile swig_types[1]
#define SWIGTYPE_p_ExtraWaveFact swig_types[2]
#define SWIGTYPE_p_FFStreamError swig_types[3]
#define SWIGTYPE_p_FileSpec swig_types[4]
#define SWIGTYPE_p_FileSpec__FileSpecSortType swig_types[5]
#define SWIGTYPE_p_FileSpec__FileSpecType swig_types[6]
#define SWIGTYPE_p_FilterPair swig_types[7]
#define SWIGTYPE_p_FormatException swig_types[8]
#define SWIGTYPE_p_InvalidIonoModel swig_types[9]
#define SWIGTYPE_p_InvalidTropModel swig_types[10]
#define SWIGTYPE_p_MatrixTdouble_t swig_types[11]
#define SWIGTYPE_p_NoAlmanacFound swig_types[12]
#define SWIGTYPE_p_NoEphemerisFound swig_types[13]
#define SWIGTYPE_p_NoIonoModelFound swig_types[14]
#define SWIGTYPE_p_ORDMap swig_types[15]
#define SWIGTYPE_p_PRNModeMap swig_types[16]
#define SWIGTYPE_p_PRNStatusMap swig_types[17]
#define SWIGTYPE_p_RinexDatum swig_types[18]
#define SWIGTYPE_p_RinexMetMap swig_types[19]
#define SWIGTYPE_p_RinexMetType swig_types[20]
#define SWIGTYPE_p_RinexObsType swig_types[21]
#define SWIGTYPE_p_RinexObsTypeMap swig_types[22]
#define SWIGTYPE_p_RinexPrnMap swig_types[23]
#define SWIGTYPE_p_SVBitsMap swig_types[24]
#define SWIGTYPE_p_SVNotPresentException swig_types[25]
#define SWIGTYPE_p_StatsTdouble_t swig_types[26]
#define SWIGTYPE_p_StringUtils__StringException swig_types[27]
#define SWIGTYPE_p_VectorTbool_t swig_types[28]
#define SWIGTYPE_p_VectorTdouble_t swig_types[29]
#define SWIGTYPE_p_allocator_type swig_types[30]
#define SWIGTYPE_p_bool swig_types[31]
#define SWIGTYPE_p_char swig_types[32]
#define SWIGTYPE_p_char_type swig_types[33]
#define SWIGTYPE_p_codeType swig_types[34]
#define SWIGTYPE_p_difference_type swig_types[35]
#define SWIGTYPE_p_double swig_types[36]
#define SWIGTYPE_p_f_enum_std__ios_base__event_r_std__ios_base_int__void swig_types[37]
#define SWIGTYPE_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iosTchar_std__char_traitsTchar_t_t swig_types[38]
#define SWIGTYPE_p_f_r_std__basic_ios__char_std__char_traits__char______r_gpstk__AccessError swig_types[39]
#define SWIGTYPE_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iostreamTchar_std__char_traitsTchar_t_t swig_types[40]
#define SWIGTYPE_p_f_r_std__basic_ios__char_std__char_traits__char______r_gpstk__InvalidParameter swig_types[41]
#define SWIGTYPE_p_f_r_std__basic_ios__char_std__char_traits__char______r_gpstk__OutOfMemory swig_types[42]
#define SWIGTYPE_p_f_r_std__basic_ios__char_std__char_traits__char______r_gpstk__WrongBlockNumber swig_types[43]
#define SWIGTYPE_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_istreamTchar_std__char_traitsTchar_t_t swig_types[44]
#define SWIGTYPE_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_ostreamTchar_std__char_traitsTchar_t_t swig_types[45]
#define SWIGTYPE_p_f_r_std__basic_ios__char_std__char_traits__char______r_gpstk__InvalidValue swig_types[46]
#define SWIGTYPE_p_f_r_std__basic_ios__char_std__char_traits__char______r_gpstk__WrongBlockFormat swig_types[47]
#define SWIGTYPE_p_f_r_std__basic_ios__char_std__char_traits__char______r_gpstk__ObjectNotFound swig_types[48]
#define SWIGTYPE_p_f_r_std__basic_ios__char_std__char_traits__char______r_gpstk__SystemPipeException swig_types[49]
#define SWIGTYPE_p_f_r_std__basic_ios__char_std__char_traits__char______r_gpstk__SystemSemaphoreException swig_types[50]
#define SWIGTYPE_p_f_r_std__basic_ios__char_std__char_traits__char______r_gpstk__FileMissingException swig_types[51]
#define SWIGTYPE_p_f_r_std__basic_ios__char_std__char_traits__char______r_gpstk__ConfigurationException swig_types[52]
#define SWIGTYPE_p_f_r_std__basic_ios__char_std__char_traits__char______r_gpstk__InvalidArgumentException swig_types[53]
#define SWIGTYPE_p_f_r_std__basic_ios__char_std__char_traits__char______r_gpstk__IndexOutOfBoundsException swig_types[54]
#define SWIGTYPE_p_f_r_std__basic_ios__char_std__char_traits__char______r_gpstk__Exception swig_types[55]
#define SWIGTYPE_p_f_r_std__basic_ios__char_std__char_traits__char______r_gpstk__SystemQueueException swig_types[56]
#define SWIGTYPE_p_f_r_std__basic_ios__char_std__char_traits__char______r_gpstk__FileHunterException swig_types[57]
#define SWIGTYPE_p_f_r_std__basic_ios__char_std__char_traits__char______r_gpstk__GeometryException swig_types[58]
#define SWIGTYPE_p_f_r_std__basic_ios__char_std__char_traits__char______r_gpstk__NoGeoidException swig_types[59]
#define SWIGTYPE_p_f_r_std__basic_ios__char_std__char_traits__char______r_DayTimeException swig_types[60]
#define SWIGTYPE_p_f_r_std__basic_ios__char_std__char_traits__char______r_FormatException swig_types[61]
#define SWIGTYPE_p_f_r_std__basic_ios__char_std__char_traits__char______r_gpstk__InvalidRequest swig_types[62]
#define SWIGTYPE_p_f_r_std__basic_ios__char_std__char_traits__char______r_gpstk__AssertionFailure swig_types[63]
#define SWIGTYPE_p_f_r_std__basic_istream__char_std__char_traits__char______r_std__basic_istreamTchar_std__char_traitsTchar_t_t swig_types[64]
#define SWIGTYPE_p_f_r_std__basic_istream__char_std__char_traits__char______r_std__basic_iostreamTchar_std__char_traitsTchar_t_t swig_types[65]
#define SWIGTYPE_p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_ostreamTchar_std__char_traitsTchar_t_t swig_types[66]
#define SWIGTYPE_p_f_r_std__basic_ostream__char_std__char_traits__char______r_gpstk__AccessError swig_types[67]
#define SWIGTYPE_p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_iostreamTchar_std__char_traitsTchar_t_t swig_types[68]
#define SWIGTYPE_p_f_r_std__basic_ostream__char_std__char_traits__char______r_gpstk__InvalidParameter swig_types[69]
#define SWIGTYPE_p_f_r_std__basic_ostream__char_std__char_traits__char______r_gpstk__OutOfMemory swig_types[70]
#define SWIGTYPE_p_f_r_std__basic_ostream__char_std__char_traits__char______r_gpstk__WrongBlockNumber swig_types[71]
#define SWIGTYPE_p_f_r_std__basic_ostream__char_std__char_traits__char______r_gpstk__InvalidValue swig_types[72]
#define SWIGTYPE_p_f_r_std__basic_ostream__char_std__char_traits__char______r_gpstk__WrongBlockFormat swig_types[73]
#define SWIGTYPE_p_f_r_std__basic_ostream__char_std__char_traits__char______r_gpstk__ObjectNotFound swig_types[74]
#define SWIGTYPE_p_f_r_std__basic_ostream__char_std__char_traits__char______r_gpstk__SystemQueueException swig_types[75]
#define SWIGTYPE_p_f_r_std__basic_ostream__char_std__char_traits__char______r_gpstk__SystemPipeException swig_types[76]
#define SWIGTYPE_p_f_r_std__basic_ostream__char_std__char_traits__char______r_gpstk__SystemSemaphoreException swig_types[77]
#define SWIGTYPE_p_f_r_std__basic_ostream__char_std__char_traits__char______r_gpstk__FileMissingException swig_types[78]
#define SWIGTYPE_p_f_r_std__basic_ostream__char_std__char_traits__char______r_gpstk__ConfigurationException swig_types[79]
#define SWIGTYPE_p_f_r_std__basic_ostream__char_std__char_traits__char______r_gpstk__InvalidArgumentException swig_types[80]
#define SWIGTYPE_p_f_r_std__basic_ostream__char_std__char_traits__char______r_gpstk__IndexOutOfBoundsException swig_types[81]
#define SWIGTYPE_p_f_r_std__basic_ostream__char_std__char_traits__char______r_gpstk__Exception swig_types[82]
#define SWIGTYPE_p_f_r_std__basic_ostream__char_std__char_traits__char______r_gpstk__FileHunterException swig_types[83]
#define SWIGTYPE_p_f_r_std__basic_ostream__char_std__char_traits__char______r_gpstk__GeometryException swig_types[84]
#define SWIGTYPE_p_f_r_std__basic_ostream__char_std__char_traits__char______r_gpstk__NoGeoidException swig_types[85]
#define SWIGTYPE_p_f_r_std__basic_ostream__char_std__char_traits__char______r_DayTimeException swig_types[86]
#define SWIGTYPE_p_f_r_std__basic_ostream__char_std__char_traits__char______r_FormatException swig_types[87]
#define SWIGTYPE_p_f_r_std__basic_ostream__char_std__char_traits__char______r_gpstk__InvalidRequest swig_types[88]
#define SWIGTYPE_p_f_r_std__basic_ostream__char_std__char_traits__char______r_gpstk__AssertionFailure swig_types[89]
#define SWIGTYPE_p_f_r_std__ios_base__r_std__ios_base swig_types[90]
#define SWIGTYPE_p_f_r_std__ios_base__r_gpstk__AccessError swig_types[91]
#define SWIGTYPE_p_f_r_std__ios_base__r_gpstk__InvalidParameter swig_types[92]
#define SWIGTYPE_p_f_r_std__ios_base__r_gpstk__WrongBlockNumber swig_types[93]
#define SWIGTYPE_p_f_r_std__ios_base__r_gpstk__OutOfMemory swig_types[94]
#define SWIGTYPE_p_f_r_std__ios_base__r_std__basic_istreamTchar_std__char_traitsTchar_t_t swig_types[95]
#define SWIGTYPE_p_f_r_std__ios_base__r_std__basic_ostreamTchar_std__char_traitsTchar_t_t swig_types[96]
#define SWIGTYPE_p_f_r_std__ios_base__r_gpstk__SystemSemaphoreException swig_types[97]
#define SWIGTYPE_p_f_r_std__ios_base__r_gpstk__WrongBlockFormat swig_types[98]
#define SWIGTYPE_p_f_r_std__ios_base__r_gpstk__ConfigurationException swig_types[99]
#define SWIGTYPE_p_f_r_std__ios_base__r_std__basic_iosTchar_std__char_traitsTchar_t_t swig_types[100]
#define SWIGTYPE_p_f_r_std__ios_base__r_gpstk__InvalidValue swig_types[101]
#define SWIGTYPE_p_f_r_std__ios_base__r_gpstk__ObjectNotFound swig_types[102]
#define SWIGTYPE_p_f_r_std__ios_base__r_gpstk__Exception swig_types[103]
#define SWIGTYPE_p_f_r_std__ios_base__r_gpstk__SystemPipeException swig_types[104]
#define SWIGTYPE_p_f_r_std__ios_base__r_gpstk__FileHunterException swig_types[105]
#define SWIGTYPE_p_f_r_std__ios_base__r_gpstk__GeometryException swig_types[106]
#define SWIGTYPE_p_f_r_std__ios_base__r_gpstk__NoGeoidException swig_types[107]
#define SWIGTYPE_p_f_r_std__ios_base__r_DayTimeException swig_types[108]
#define SWIGTYPE_p_f_r_std__ios_base__r_FormatException swig_types[109]
#define SWIGTYPE_p_f_r_std__ios_base__r_gpstk__IndexOutOfBoundsException swig_types[110]
#define SWIGTYPE_p_f_r_std__ios_base__r_gpstk__InvalidRequest swig_types[111]
#define SWIGTYPE_p_f_r_std__ios_base__r_std__basic_iostreamTchar_std__char_traitsTchar_t_t swig_types[112]
#define SWIGTYPE_p_f_r_std__ios_base__r_gpstk__InvalidArgumentException swig_types[113]
#define SWIGTYPE_p_f_r_std__ios_base__r_gpstk__FileMissingException swig_types[114]
#define SWIGTYPE_p_f_r_std__ios_base__r_gpstk__SystemQueueException swig_types[115]
#define SWIGTYPE_p_f_r_std__ios_base__r_gpstk__AssertionFailure swig_types[116]
#define SWIGTYPE_p_first_type swig_types[117]
#define SWIGTYPE_p_float swig_types[118]
#define SWIGTYPE_p_fmtflags swig_types[119]
#define SWIGTYPE_p_gpstk__AccessError swig_types[120]
#define SWIGTYPE_p_gpstk__AlmOrbit swig_types[121]
#define SWIGTYPE_p_gpstk__AlmanacStore swig_types[122]
#define SWIGTYPE_p_gpstk__AssertionFailure swig_types[123]
#define SWIGTYPE_p_gpstk__BCEphemerisStore swig_types[124]
#define SWIGTYPE_p_gpstk__ClockModel swig_types[125]
#define SWIGTYPE_p_gpstk__CodeBuffer swig_types[126]
#define SWIGTYPE_p_gpstk__ConfigurationException swig_types[127]
#define SWIGTYPE_p_gpstk__CorrectedEphemerisRange swig_types[128]
#define SWIGTYPE_p_gpstk__DayTime swig_types[129]
#define SWIGTYPE_p_gpstk__ECEF swig_types[130]
#define SWIGTYPE_p_gpstk__EngAlmanac swig_types[131]
#define SWIGTYPE_p_gpstk__EngEphemeris swig_types[132]
#define SWIGTYPE_p_gpstk__EngNav swig_types[133]
#define SWIGTYPE_p_gpstk__EphemerisStore swig_types[134]
#define SWIGTYPE_p_gpstk__EpochClockModel swig_types[135]
#define SWIGTYPE_p_gpstk__Exception swig_types[136]
#define SWIGTYPE_p_gpstk__ExceptionLocation swig_types[137]
#define SWIGTYPE_p_gpstk__FFBinaryStream swig_types[138]
#define SWIGTYPE_p_gpstk__FFData swig_types[139]
#define SWIGTYPE_p_gpstk__FFStream swig_types[140]
#define SWIGTYPE_p_gpstk__FFTextStream swig_types[141]
#define SWIGTYPE_p_gpstk__FICAStream swig_types[142]
#define SWIGTYPE_p_gpstk__FICBase swig_types[143]
#define SWIGTYPE_p_gpstk__FICData swig_types[144]
#define SWIGTYPE_p_gpstk__FICHeader swig_types[145]
#define SWIGTYPE_p_gpstk__FICStream swig_types[146]
#define SWIGTYPE_p_gpstk__FICStreamBase swig_types[147]
#define SWIGTYPE_p_gpstk__FileHunter swig_types[148]
#define SWIGTYPE_p_gpstk__FileHunterException swig_types[149]
#define SWIGTYPE_p_gpstk__FileMissingException swig_types[150]
#define SWIGTYPE_p_gpstk__FileStoreTgpstk__RinexNavHeader_t swig_types[151]
#define SWIGTYPE_p_gpstk__FileStoreTgpstk__SP3Header_t swig_types[152]
#define SWIGTYPE_p_gpstk__GGHeightTropModel swig_types[153]
#define SWIGTYPE_p_gpstk__GGTropModel swig_types[154]
#define SWIGTYPE_p_gpstk__GPSZcount swig_types[155]
#define SWIGTYPE_p_gpstk__GenXSequence swig_types[156]
#define SWIGTYPE_p_gpstk__Geodetic swig_types[157]
#define SWIGTYPE_p_gpstk__GeoidModel swig_types[158]
#define SWIGTYPE_p_gpstk__GeometryException swig_types[159]
#define SWIGTYPE_p_gpstk__IndexOutOfBoundsException swig_types[160]
#define SWIGTYPE_p_gpstk__InvalidArgumentException swig_types[161]
#define SWIGTYPE_p_gpstk__InvalidParameter swig_types[162]
#define SWIGTYPE_p_gpstk__InvalidRequest swig_types[163]
#define SWIGTYPE_p_gpstk__InvalidValue swig_types[164]
#define SWIGTYPE_p_gpstk__IonoModel swig_types[165]
#define SWIGTYPE_p_gpstk__IonoModelStore swig_types[166]
#define SWIGTYPE_p_gpstk__LinearClockModel swig_types[167]
#define SWIGTYPE_p_gpstk__MSCStream swig_types[168]
#define SWIGTYPE_p_gpstk__MatrixTdouble_t swig_types[169]
#define SWIGTYPE_p_gpstk__NBTropModel swig_types[170]
#define SWIGTYPE_p_gpstk__NoGeoidException swig_types[171]
#define SWIGTYPE_p_gpstk__ORDEpoch swig_types[172]
#define SWIGTYPE_p_gpstk__ObjectNotFound swig_types[173]
#define SWIGTYPE_p_gpstk__ObsClockModel swig_types[174]
#define SWIGTYPE_p_gpstk__ObsEpoch swig_types[175]
#define SWIGTYPE_p_gpstk__ObsRngDev swig_types[176]
#define SWIGTYPE_p_gpstk__Observation swig_types[177]
#define SWIGTYPE_p_gpstk__ObservationPlus swig_types[178]
#define SWIGTYPE_p_gpstk__OutOfMemory swig_types[179]
#define SWIGTYPE_p_gpstk__Position swig_types[180]
#define SWIGTYPE_p_gpstk__RAIMSolution swig_types[181]
#define SWIGTYPE_p_gpstk__RinexEphemerisStore swig_types[182]
#define SWIGTYPE_p_gpstk__RinexMetBase swig_types[183]
#define SWIGTYPE_p_gpstk__RinexMetData swig_types[184]
#define SWIGTYPE_p_gpstk__RinexMetHeader swig_types[185]
#define SWIGTYPE_p_gpstk__RinexMetStream swig_types[186]
#define SWIGTYPE_p_gpstk__RinexNavBase swig_types[187]
#define SWIGTYPE_p_gpstk__RinexNavData swig_types[188]
#define SWIGTYPE_p_gpstk__RinexNavHeader swig_types[189]
#define SWIGTYPE_p_gpstk__RinexNavStream swig_types[190]
#define SWIGTYPE_p_gpstk__RinexObsBase swig_types[191]
#define SWIGTYPE_p_gpstk__RinexObsData swig_types[192]
#define SWIGTYPE_p_gpstk__RinexObsData__RinexPrnMap__iterator swig_types[193]
#define SWIGTYPE_p_gpstk__RinexObsHeader swig_types[194]
#define SWIGTYPE_p_gpstk__RinexObsStream swig_types[195]
#define SWIGTYPE_p_gpstk__RinexPrn swig_types[196]
#define SWIGTYPE_p_gpstk__RungeKutta4 swig_types[197]
#define SWIGTYPE_p_gpstk__RxObsData swig_types[198]
#define SWIGTYPE_p_gpstk__SMODFStream swig_types[199]
#define SWIGTYPE_p_gpstk__SP3Base swig_types[200]
#define SWIGTYPE_p_gpstk__SP3Data swig_types[201]
#define SWIGTYPE_p_gpstk__SP3EphemerisStore swig_types[202]
#define SWIGTYPE_p_gpstk__SP3Header swig_types[203]
#define SWIGTYPE_p_gpstk__SP3Stream swig_types[204]
#define SWIGTYPE_p_gpstk__SVPCodeGen swig_types[205]
#define SWIGTYPE_p_gpstk__SatID swig_types[206]
#define SWIGTYPE_p_gpstk__SimpleTropModel swig_types[207]
#define SWIGTYPE_p_gpstk__StringUtils__StringException swig_types[208]
#define SWIGTYPE_p_gpstk__SystemPipeException swig_types[209]
#define SWIGTYPE_p_gpstk__SystemQueueException swig_types[210]
#define SWIGTYPE_p_gpstk__SystemSemaphoreException swig_types[211]
#define SWIGTYPE_p_gpstk__TabularEphemerisStore swig_types[212]
#define SWIGTYPE_p_gpstk__Triple swig_types[213]
#define SWIGTYPE_p_gpstk__TropModel swig_types[214]
#define SWIGTYPE_p_gpstk__ValidTypeTchar_t swig_types[215]
#define SWIGTYPE_p_gpstk__ValidTypeTdouble_t swig_types[216]
#define SWIGTYPE_p_gpstk__ValidTypeTfloat_t swig_types[217]
#define SWIGTYPE_p_gpstk__ValidTypeTint_t swig_types[218]
#define SWIGTYPE_p_gpstk__ValidTypeTlong_t swig_types[219]
#define SWIGTYPE_p_gpstk__ValidTypeTshort_t swig_types[220]
#define SWIGTYPE_p_gpstk__ValidTypeTunsigned_char_t swig_types[221]
#define SWIGTYPE_p_gpstk__ValidTypeTunsigned_int_t swig_types[222]
#define SWIGTYPE_p_gpstk__ValidTypeTunsigned_long_t swig_types[223]
#define SWIGTYPE_p_gpstk__ValidTypeTunsigned_short_t swig_types[224]
#define SWIGTYPE_p_gpstk__WrongBlockFormat swig_types[225]
#define SWIGTYPE_p_gpstk__WrongBlockNumber swig_types[226]
#define SWIGTYPE_p_gpstk__WxObsData swig_types[227]
#define SWIGTYPE_p_gpstk__WxObservation swig_types[228]
#define SWIGTYPE_p_gpstk__X1Sequence swig_types[229]
#define SWIGTYPE_p_gpstk__X2Sequence swig_types[230]
#define SWIGTYPE_p_gpstk__Xvt swig_types[231]
#define SWIGTYPE_p_gpstk__ZeroTropModel swig_types[232]
#define SWIGTYPE_p_int swig_types[233]
#define SWIGTYPE_p_int_type swig_types[234]
#define SWIGTYPE_p_iostate swig_types[235]
#define SWIGTYPE_p_key_type swig_types[236]
#define SWIGTYPE_p_long swig_types[237]
#define SWIGTYPE_p_long_double swig_types[238]
#define SWIGTYPE_p_long_long swig_types[239]
#define SWIGTYPE_p_mapped_type swig_types[240]
#define SWIGTYPE_p_off_type swig_types[241]
#define SWIGTYPE_p_openmode swig_types[242]
#define SWIGTYPE_p_p_void swig_types[243]
#define SWIGTYPE_p_pos_type swig_types[244]
#define SWIGTYPE_p_second_type swig_types[245]
#define SWIGTYPE_p_seekdir swig_types[246]
#define SWIGTYPE_p_sensorPosType swig_types[247]
#define SWIGTYPE_p_sensorType swig_types[248]
#define SWIGTYPE_p_short swig_types[249]
#define SWIGTYPE_p_size_t swig_types[250]
#define SWIGTYPE_p_size_type swig_types[251]
#define SWIGTYPE_p_state_type swig_types[252]
#define SWIGTYPE_p_std__bad_exception swig_types[253]
#define SWIGTYPE_p_std__basic_iosTchar_std__char_traitsTchar_t_t swig_types[254]
#define SWIGTYPE_p_std__basic_iostreamTchar_std__char_traitsTchar_t_t swig_types[255]
#define SWIGTYPE_p_std__basic_istreamTchar_std__char_traitsTchar_t_t swig_types[256]
#define SWIGTYPE_p_std__basic_istreamTchar_std__char_traitsTchar_t_t__char_type swig_types[257]
#define SWIGTYPE_p_std__basic_istreamTchar_std__char_traitsTchar_t_t__off_type swig_types[258]
#define SWIGTYPE_p_std__basic_istreamTchar_std__char_traitsTchar_t_t__pos_type swig_types[259]
#define SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t swig_types[260]
#define SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t__off_type swig_types[261]
#define SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t__pos_type swig_types[262]
#define SWIGTYPE_p_std__basic_streambufTchar_std__char_traitsTchar_t_t swig_types[263]
#define SWIGTYPE_p_std__basic_stringTchar_std__char_traitsTchar_t_std__allocatorTchar_t_t swig_types[264]
#define SWIGTYPE_p_std__domain_error swig_types[265]
#define SWIGTYPE_p_std__exception swig_types[266]
#define SWIGTYPE_p_std__invalid_argument swig_types[267]
#define SWIGTYPE_p_std__ios__openmode swig_types[268]
#define SWIGTYPE_p_std__ios_base swig_types[269]
#define SWIGTYPE_p_std__length_error swig_types[270]
#define SWIGTYPE_p_std__listTdouble_t swig_types[271]
#define SWIGTYPE_p_std__listTgpstk__EngEphemeris_t swig_types[272]
#define SWIGTYPE_p_std__locale swig_types[273]
#define SWIGTYPE_p_std__logic_error swig_types[274]
#define SWIGTYPE_p_std__mapTRinexObsType_RinexDatum_std__lessTRinexObsType_t_std__allocatorTstd__pairTRinexObsType_const_RinexDatum_t_t_t swig_types[275]
#define SWIGTYPE_p_std__mapTRinexObsType_RinexDatum_std__lessTRinexObsType_t_std__allocatorTstd__pairTRinexObsType_const_RinexDatum_t_t_t__allocator_type swig_types[276]
#define SWIGTYPE_p_std__mapTRinexObsType_RinexDatum_std__lessTRinexObsType_t_std__allocatorTstd__pairTRinexObsType_const_RinexDatum_t_t_t__key_type swig_types[277]
#define SWIGTYPE_p_std__mapTRinexObsType_RinexDatum_std__lessTRinexObsType_t_std__allocatorTstd__pairTRinexObsType_const_RinexDatum_t_t_t__mapped_type swig_types[278]
#define SWIGTYPE_p_std__mapTgpstk__DayTime_gpstk__ObsEpoch_std__lessTgpstk__DayTime_t_std__allocatorTstd__pairTgpstk__DayTime_const_gpstk__ObsEpoch_t_t_t swig_types[279]
#define SWIGTYPE_p_std__mapTgpstk__DayTime_gpstk__WxObservation_std__lessTgpstk__DayTime_t_std__allocatorTstd__pairTgpstk__DayTime_const_gpstk__WxObservation_t_t_t swig_types[280]
#define SWIGTYPE_p_std__mapTgpstk__RinexMetHeader__RinexMetType_double_std__lessTgpstk__RinexMetHeader__RinexMetType_t_std__allocatorTstd__pairTgpstk__RinexMetHeader__RinexMetType_const_double_t_t_t swig_types[281]
#define SWIGTYPE_p_std__mapTgpstk__RinexPrn_gpstk__RinexObsData__RinexObsTypeMap_std__lessTgpstk__RinexPrn_t_std__allocatorTstd__pairTgpstk__RinexPrn_const_gpstk__RinexObsData__RinexObsTypeMap_t_t_t__allocator_type swig_types[282]
#define SWIGTYPE_p_std__mapTgpstk__RinexPrn_gpstk__RinexObsData__RinexObsTypeMap_std__lessTgpstk__RinexPrn_t_std__allocatorTstd__pairTgpstk__RinexPrn_const_gpstk__RinexObsData__RinexObsTypeMap_t_t_t__key_type swig_types[283]
#define SWIGTYPE_p_std__mapTgpstk__RinexPrn_int_std__lessTgpstk__RinexPrn_t_std__allocatorTstd__pairTgpstk__RinexPrn_const_int_t_t_t swig_types[284]
#define SWIGTYPE_p_std__mapTgpstk__RinexPrn_int_std__lessTgpstk__RinexPrn_t_std__allocatorTstd__pairTgpstk__RinexPrn_const_int_t_t_t__allocator_type swig_types[285]
#define SWIGTYPE_p_std__mapTgpstk__RinexPrn_int_std__lessTgpstk__RinexPrn_t_std__allocatorTstd__pairTgpstk__RinexPrn_const_int_t_t_t__key_type swig_types[286]
#define SWIGTYPE_p_std__mapTgpstk__RinexPrn_std__mapTRinexObsType_RinexDatum_std__lessTRinexObsType_t_std__allocatorTstd__pairTRinexObsType_const_RinexDatum_t_t_t_std__lessTgpstk__RinexPrn_t_std__allocatorTstd__pairTgpstk__RinexPrn_const_std__mapTRinexObsType_RinexDatum_std__lessTRinexObsType_t_std__allocatorTstd__pairTRinexObsType_const_RinexDatum_t_t_t_t_t_t swig_types[287]
#define SWIGTYPE_p_std__mapTgpstk__RinexPrn_std__vectorTint_std__allocatorTint_t_t_std__lessTgpstk__RinexPrn_t_std__allocatorTstd__pairTgpstk__RinexPrn_const_std__vectorTint_std__allocatorTint_t_t_t_t_t swig_types[288]
#define SWIGTYPE_p_std__mapTshort_gpstk__AlmOrbit_std__lessTshort_t_std__allocatorTstd__pairTshort_const_gpstk__AlmOrbit_t_t_t swig_types[289]
#define SWIGTYPE_p_std__mapTshort_gpstk__ObsClockModel__PRNMode_std__lessTshort_t_std__allocatorTstd__pairTshort_const_gpstk__ObsClockModel__PRNMode_t_t_t swig_types[290]
#define SWIGTYPE_p_std__mapTshort_gpstk__ObsClockModel__PRNStatus_std__lessTshort_t_std__allocatorTstd__pairTshort_const_gpstk__ObsClockModel__PRNStatus_t_t_t swig_types[291]
#define SWIGTYPE_p_std__mapTshort_gpstk__ObsRngDev_std__lessTshort_t_std__allocatorTstd__pairTshort_const_gpstk__ObsRngDev_t_t_t swig_types[292]
#define SWIGTYPE_p_std__mapTshort_gpstk__Observation_std__lessTshort_t_std__allocatorTstd__pairTshort_const_gpstk__Observation_t_t_t swig_types[293]
#define SWIGTYPE_p_std__mapTshort_short_std__lessTshort_t_std__allocatorTstd__pairTshort_const_short_t_t_t swig_types[294]
#define SWIGTYPE_p_std__out_of_range swig_types[295]
#define SWIGTYPE_p_std__overflow_error swig_types[296]
#define SWIGTYPE_p_std__range_error swig_types[297]
#define SWIGTYPE_p_std__runtime_error swig_types[298]
#define SWIGTYPE_p_std__setTshort_t swig_types[299]
#define SWIGTYPE_p_std__string swig_types[300]
#define SWIGTYPE_p_std__underflow_error swig_types[301]
#define SWIGTYPE_p_std__valarrayTdouble_t swig_types[302]
#define SWIGTYPE_p_std__vectorTExtraWaveFact_std__allocatorTExtraWaveFact_t_t swig_types[303]
#define SWIGTYPE_p_std__vectorTRinexObsType_std__allocatorTRinexObsType_t_t swig_types[304]
#define SWIGTYPE_p_std__vectorTchar_std__allocatorTchar_t_t swig_types[305]
#define SWIGTYPE_p_std__vectorTdouble_std__allocatorTdouble_t_t swig_types[306]
#define SWIGTYPE_p_std__vectorTdouble_std__allocatorTdouble_t_t__allocator_type swig_types[307]
#define SWIGTYPE_p_std__vectorTgpstk__RinexMetHeader__RinexMetType_std__allocatorTgpstk__RinexMetHeader__RinexMetType_t_t swig_types[308]
#define SWIGTYPE_p_std__vectorTgpstk__RinexPrn_std__allocatorTgpstk__RinexPrn_t_t swig_types[309]
#define SWIGTYPE_p_std__vectorTint_std__allocatorTint_t_t swig_types[310]
#define SWIGTYPE_p_std__vectorTint_std__allocatorTint_t_t__allocator_type swig_types[311]
#define SWIGTYPE_p_std__vectorTlong_std__allocatorTlong_t_t swig_types[312]
#define SWIGTYPE_p_std__vectorTsensorPosType_std__allocatorTsensorPosType_t_t swig_types[313]
#define SWIGTYPE_p_std__vectorTsensorType_std__allocatorTsensorType_t_t swig_types[314]
#define SWIGTYPE_p_std__vectorTstd__string_std__allocatorTstd__string_t_t swig_types[315]
#define SWIGTYPE_p_time_t swig_types[316]
#define SWIGTYPE_p_timeval swig_types[317]
#define SWIGTYPE_p_traits_type swig_types[318]
#define SWIGTYPE_p_unsigned_int swig_types[319]
#define SWIGTYPE_p_unsigned_long swig_types[320]
#define SWIGTYPE_p_unsigned_long_long swig_types[321]
#define SWIGTYPE_p_unsigned_short swig_types[322]
#define SWIGTYPE_p_value_type swig_types[323]
#define SWIGTYPE_ptrdiff_t swig_types[324]
#define SWIGTYPE_size_t swig_types[325]
#define SWIGTYPE_std__ptrdiff_t swig_types[326]
#define SWIGTYPE_std__size_t swig_types[327]
static swig_type_info *swig_types[328];
static swig_module_info swig_module = {swig_types, 328, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */


/*-----------------------------------------------
              @(target):= _gpstkPython.so
  ------------------------------------------------*/
#define SWIG_init    init_gpstkPython

#define SWIG_name    "_gpstkPython"

#include <iostream>
#include <fstream>
#include <valarray>
#include <string>
#include <map>
#include <ios>

#include "../../../src/DayTime.hpp"
#include "../../../src/FFStream.hpp"
#include "../../../src/RinexObsBase.hpp"
#include "../../../src/Triple.hpp"
#include "../../../src/RinexObsHeader.hpp"
#include "../../../src/Exception.hpp"
#include "../../../src/GPSZcount.hpp"
#include "../../../src/RinexObsStream.hpp"
#include "../../../src/ECEF.hpp"
#include "../../../src/Geodetic.hpp"
#include "../../../src/geometry.hpp"
#include "../../../src/Xvt.hpp"
#include "../../../src/RinexObsData.hpp"
#include "../../../src/Position.hpp"
#include "../../../src/RAIMSolution.hpp"
#include "../../../src/AlmanacStore.hpp"
#include "../../../src/AlmOrbit.hpp"
#include "../../../src/ValidType.hpp"
#include "../../../src/X1Sequence.hpp"
// mergePCodeWords.h must be present in directory for X2Sequence
#include "../../../src/X2Sequence.hpp"
#include "../../../src/CodeBuffer.hpp"
#include "../../../src/SatID.hpp"
#include "../../../src/GenXSequence.hpp"
#include "../../../src/SVPCodeGen.hpp"
#include "../../../src/EphemerisRange.hpp"
#include "../../../src/EngEphemeris.hpp"
#include "../../../src/EngAlmanac.hpp"
#include "../../../src/EngNav.hpp"
#include "../../../src/ObservationStore.hpp"
#include "../../../src/IonoModel.hpp"
#include "../../../src/IonoModelStore.hpp"
#include "../../../src/TropModel.hpp"
#include "../../../src/ClockModel.hpp"
#include "../../../src/ObsClockModel.hpp"
#include "../../../src/EpochClockModel.hpp"
#include "../../../src/LinearClockModel.hpp"
#include "../../../src/ObsRngDev.hpp"
#include "../../../src/ORDEpoch.hpp"
#include "../../../src/RungeKutta4.hpp"
#include "../../../src/Stats.hpp"
#include "../../../src/RinexEphemerisStore.hpp"
#include "../../../src/SP3EphemerisStore.hpp"
#include "../../../src/FileHunter.hpp"
//#include "../../../src/FileStore.hpp"
#include "../../../src/RinexNavHeader.hpp"
//#include "../../../src/TabularEphemerisStore.hpp"
//#include "../../../src/EphemerisStore.hpp"
#include "../../../src/BCEphemerisStore.hpp"
#include "../../../src/SP3Header.hpp"
//#include "../../../src/SP3Base.hpp"
//#include "../../../src/RinexNavBase.hpp"
#include "../../../src/FFData.hpp"
#include "../../../src/FICStream.hpp"
#include "../../../src/FICAStream.hpp"
#include "../../../src/MSCStream.hpp"
#include "../../../src/RinexMetStream.hpp"
#include "../../../src/RinexNavStream.hpp"
#include "../../../src/SMODFStream.hpp"
#include "../../../src/SP3Stream.hpp"
#include "../../../src/FFTextStream.hpp"

#include "../../../src/FICData.hpp"
#include "../../../src/FICHeader.hpp"
#include "../../../src/RinexMetData.hpp"
#include "../../../src/RinexMetHeader.hpp"
#include "../../../src/RinexNavData.hpp"
#include "../../../src/SP3Data.hpp"
#include "../../../src/icd_200_constants.hpp"

#include "gpstkPythonUtils.cpp"
#include "streamRead.cpp"

using namespace std;
using namespace gpstk;

// RinexObsType and ExtraWaveFact are defined under scope of RinexObsHeader
// SWIG doesn't support nested C++ structs so the wrap file will call
//   RinexObsType in global space
// This is to define RinexObsType and ExtraWaveFact in the global space
typedef RinexObsHeader::RinexObsType RinexObsType;
typedef RinexObsHeader::ExtraWaveFact ExtraWaveFact;

// Same technique for nested classes in DayTime.hpp
typedef DayTime::DayTimeException DayTimeException;
typedef DayTime::FormatException FormatException;

typedef RinexObsData::RinexDatum RinexDatum;

// Originally from gpstkPython2.i
typedef AlmanacStore::NoAlmanacFound NoAlmanacFound;
typedef EngAlmanac::SVNotPresentException SVNotPresentException;
typedef TropModel::InvalidTropModel InvalidTropModel;
typedef IonoModelStore::NoIonoModelFound NoIonoModelFound;
typedef IonoModel::InvalidIonoModel InvalidIonoModel;

typedef RinexMetHeader::RinexMetType RinexMetType;
typedef RinexMetHeader::sensorType sensorType;
typedef RinexMetHeader::sensorPosType sensorPosType;
typedef EphemerisStore::NoEphemerisFound NoEphemerisFound;
typedef RinexObsData::RinexPrnMap RinexPrnMap;


  
#if defined(__SUNPRO_CC) 
#define SWIG_STD_NOASSIGN_STL
#define SWIG_STD_NOINSERT_TEMPLATE_STL
#endif



#include <string>
#include <stdexcept>


#include <utility>


#include <iostream>  


#if PY_VERSION_HEX < 0x02000000
#define PySequence_Size PySequence_Length
#endif
#include <stdexcept>


#define  SWIG_MemoryError    1
#define  SWIG_IOError        2
#define  SWIG_RuntimeError   3
#define  SWIG_IndexError     4
#define  SWIG_TypeError      5
#define  SWIG_DivisionByZero 6
#define  SWIG_OverflowError  7
#define  SWIG_SyntaxError    8
#define  SWIG_ValueError     9
#define  SWIG_SystemError   10
#define  SWIG_UnknownError  99


SWIGINTERN void SWIG_exception_(int code, const char *msg) {
  switch(code) {
  case SWIG_MemoryError:
    PyErr_SetString(PyExc_MemoryError,msg);
    break;
  case SWIG_IOError:
    PyErr_SetString(PyExc_IOError,msg);
    break;
  case SWIG_RuntimeError:
    PyErr_SetString(PyExc_RuntimeError,msg);
    break;
  case SWIG_IndexError:
    PyErr_SetString(PyExc_IndexError,msg);
    break;
  case SWIG_TypeError:
    PyErr_SetString(PyExc_TypeError,msg);
    break;
  case SWIG_DivisionByZero:
    PyErr_SetString(PyExc_ZeroDivisionError,msg);
    break;
  case SWIG_OverflowError:
    PyErr_SetString(PyExc_OverflowError,msg);
    break;
  case SWIG_SyntaxError:
    PyErr_SetString(PyExc_SyntaxError,msg);
    break;
  case SWIG_ValueError:
    PyErr_SetString(PyExc_ValueError,msg);
    break;
  case SWIG_SystemError:
    PyErr_SetString(PyExc_SystemError,msg);
    break;
  default:
    PyErr_SetString(PyExc_RuntimeError,msg);
    break;
  }
}

#define SWIG_exception(a,b) { SWIG_exception_(a,b); SWIG_fail; }


#include <stdexcept>


#include <algorithm>


#include <map>
#include <algorithm>
#include <stdexcept>


#include <string>


#include <vector>


#include <limits.h>


SWIGINTERN int
  SWIG_CheckLongInRange(long value, long min_value, long max_value,
			const char *errmsg)
{
  if (value < min_value) {
    if (errmsg) {
      PyErr_Format(PyExc_OverflowError, 
		   "value %ld is less than '%s' minimum %ld", 
		   value, errmsg, min_value);
    }
    return 0;    
  } else if (value > max_value) {
    if (errmsg) {
      PyErr_Format(PyExc_OverflowError,
		   "value %ld is greater than '%s' maximum %ld", 
		   value, errmsg, max_value);
    }
    return 0;
  }
  return 1;
}


SWIGINTERN int
  SWIG_AsVal_long(PyObject * obj, long* val)
{
  if (PyInt_Check(obj)) {
    if (val) *val = PyInt_AS_LONG(obj);
    return 1;
  }
  if (PyLong_Check(obj)) {
    long v = PyLong_AsLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return 1;
    } else {
      if (!val) PyErr_Clear();
      return 0;
    }
  }
  if (val) {
    SWIG_type_error("long", obj);
  }
  return 0;
 }


#if INT_MAX != LONG_MAX
SWIGINTERN int
  SWIG_AsVal_int(PyObject *obj, int *val)
{ 
  const char* errmsg = val ? "int" : (char*)0;
  long v;
  if (SWIG_AsVal_long(obj, &v)) {
    if (SWIG_CheckLongInRange(v, INT_MIN,INT_MAX, errmsg)) {
      if (val) *val = (int)(v);
      return 1;
    } else {
      return 0;
    }
  } else {
    PyErr_Clear();
  }
  if (val) {
    SWIG_type_error(errmsg, obj);
  }
  return 0;    
}
#else
SWIGINTERNINLINE int
  SWIG_AsVal_int(PyObject *obj, int *val)
{
  return SWIG_AsVal_long(obj,(long*)val);
}
#endif


  /*@/usr/local/share/swig/1.3.25/python/pymacros.swg,66,SWIG_define@*/
#define SWIG_From_int PyInt_FromLong
/*@@*/


namespace swig {  
  template <class Type>
  struct noconst_traits {
    typedef Type noconst_type;
  };

  template <class Type>
  struct noconst_traits<const Type> {
    typedef Type noconst_type;
  };

  /*
    type categories
  */
  struct pointer_category { };  
  struct value_category { };

  /*
    General traits that provides type_name and type_info
  */
  template <class Type> struct traits { };

  template <class Type>
  inline const char* type_name() {
    return traits<typename noconst_traits<Type >::noconst_type >::type_name();
  }

  template <class Type> 
  struct traits_info {
    static swig_type_info *type_query(std::string name) {
      name += " *";
      return SWIG_TypeQuery(name.c_str());
    }    
    static swig_type_info *type_info() {
      static swig_type_info *info = type_query(type_name<Type>());
      return info;
    }
  };

  template <class Type>
  inline swig_type_info *type_info() {
    return traits_info<Type>::type_info();
  }

  /*
    Partial specialization for pointers
  */
  template <class Type> struct traits <Type *> {
    typedef pointer_category category;
    static std::string make_ptr_name(const char* name) {
      std::string ptrname = name;
      ptrname += " *";
      return ptrname;
    }    
    static const char* type_name() {
      static std::string name = make_ptr_name(swig::type_name<Type>());
      return name.c_str();
    }
  };

  template <class Type, class Category> 
  struct traits_as { };
 
  template <class Type, class Category> 
  struct traits_check { };

}


namespace swig {  
  /*
    Traits that provides the from method
  */
  template <class Type> struct traits_from_ptr {
    static PyObject *from(Type *val, int owner = 0) {
      return SWIG_NewPointerObj(val, type_info<Type>(), owner);
    }
  };

  template <class Type> struct traits_from {
    static PyObject *from(const Type& val) {
      return traits_from_ptr<Type>::from(new Type(val), 1);
    }
  };

  template <class Type> struct traits_from<Type *> {
    static PyObject *from(Type* val) {
      return traits_from_ptr<Type>::from(val, 0);
    }
  };

  template <class Type>
  inline PyObject *from(const Type& val) {
    return traits_from<Type>::from(val);
  }

  template <class Type>
  inline PyObject *from_ptr(Type* val, int owner) {
    return traits_from_ptr<Type>::from(val, owner);
  }

  /*
    Traits that provides the asval/as/check method
  */
  template <class Type>
  struct traits_asptr {   
    static int asptr(PyObject *obj, Type **val) {
      Type *p;
      int res = (SWIG_ConvertPtr(obj, (void**)&p, type_info<Type>(), 0) != -1) 
	? SWIG_OLDOBJ : 0;
      if (res) {
	if (val) {
	  *val = p;
	}
      } else {
	SWIG_type_error(type_name<Type>(), obj);
      }
      return res;
    }
  }; 

  template <class Type>
  inline int asptr(PyObject *obj, Type **vptr) {
    return traits_asptr<Type>::asptr(obj, vptr);
  }

  template <class Type> 
  struct traits_asval {
    static bool asval(PyObject *obj, Type *val) {
      if (val) {
	Type *p = 0;
	int res = traits_asptr<Type>::asptr(obj, &p);
	if ((res != 0) && p) {
	  typedef typename noconst_traits<Type>::noconst_type noconst_type;
	  *(const_cast<noconst_type*>(val)) = *p;
	  if (res == SWIG_NEWOBJ) delete p;
	  return true;
	} else {
	  return false;
	}
      } else {
	return traits_asptr<Type>::asptr(obj, (Type **)(0)) ? true : false;
      }
    }
  };

  template <class Type> struct traits_asval<Type*> {
    static bool asval(PyObject *obj, Type **val) {
      if (val) {
        typedef typename noconst_traits<Type>::noconst_type noconst_type;
        noconst_type *p = 0;
        int res = traits_asptr<noconst_type>::asptr(obj, &p);
        if (res) {
          *(const_cast<noconst_type**>(val)) = p;
     	  return true;
	} else {
	  return false;
	}
      } else {
	return traits_asptr<Type>::asptr(obj, (Type **)(0)) ? true : false;
      }
    }
  };
  
  template <class Type>
  inline bool asval(PyObject *obj, Type *val) {
    return traits_asval<Type>::asval(obj, val) ? true : false;
  }

  template <class Type> 
  struct traits_as<Type, value_category> {
    static Type as(PyObject *obj, bool throw_error) {
      Type v;
      if (!obj || !asval(obj, &v)) {
	if (!PyErr_Occurred()) {
	  SWIG_type_error(swig::type_name<Type>(), obj);
	}
	if (throw_error) throw std::invalid_argument("bad type");
      }
      return v;
    }
  };

  template <class Type> 
  struct traits_as<Type, pointer_category> {
    static Type as(PyObject *obj, bool throw_error) {
      Type *v = 0;      
      int res = (obj ? traits_asptr<Type>::asptr(obj, &v) : 0);
      if (res && v) {
	if (res == SWIG_NEWOBJ) {
	  Type r(*v);
	  delete v;
	  return r;
	} else {
	  return *v;
	}
      } else {
	// Uninitialized return value, no Type() constructor required.
	static Type *v_def = (Type*) malloc(sizeof(Type));
	if (!PyErr_Occurred()) {
	  SWIG_type_error(swig::type_name<Type>(), obj);
	}
	if (throw_error) throw std::invalid_argument("bad type");
	memset(v_def,0,sizeof(Type));
	return *v_def;
      }
    }
  };

  template <class Type> 
  struct traits_as<Type*, pointer_category> {
    static Type* as(PyObject *obj, bool throw_error) {
      Type *v = 0;      
      int res = (obj ? traits_asptr<Type>::asptr(obj, &v) : 0);
      if (res) {
	return v;
      } else {
	if (!PyErr_Occurred()) {
	  SWIG_type_error(swig::type_name<Type>(), obj);
	}
	if (throw_error) throw std::invalid_argument("bad type");
	return 0;
      }
    }
  };
    
  template <class Type>
  inline Type as(PyObject *obj, bool te = false) {
    return traits_as<Type, typename traits<Type>::category>::as(obj, te);
  }

  template <class Type> 
  struct traits_check<Type, value_category> {
    static bool check(PyObject *obj) {
      return obj && asval(obj, (Type *)(0));
    }
  };

  template <class Type> 
  struct traits_check<Type, pointer_category> {
    static bool check(PyObject *obj) {
      return obj && asptr(obj, (Type **)(0));
    }
  };

  template <class Type>
  inline bool check(PyObject *obj) {
    return traits_check<Type, typename traits<Type>::category>::check(obj);
  }
}


namespace swig {
  template <> struct traits<int > {
    typedef value_category category;
    static const char* type_name() { return"int"; }
  };  
  template <>  struct traits_asval<int > {   
    typedef int value_type;
    static int asval(PyObject *obj, value_type *val) { 
      return SWIG_AsVal_int(obj, val);
    }
  };
  template <>  struct traits_from<int > {
    typedef int value_type;
    static PyObject *from(const value_type& val) {
      return SWIG_From_int(val);
    }
  };
}


  namespace swig {
    struct PyObject_var {
      PyObject* ptr;
      PyObject_var(PyObject* obj = 0) : ptr(obj) { }      
      ~PyObject_var() { if (ptr) Py_DECREF(ptr); }      
      operator PyObject*() { return ptr; }
      PyObject* operator->() const { return ptr; }
    };
  }


namespace swig {
  inline size_t
  check_index(ptrdiff_t i, size_t size, bool insert = false) {
    if ( i < 0 ) {
      if ((size_t) (-i) <= size) 
	return (size_t) (i + size);
    } else if ( (size_t) i < size ) {
      return (size_t) i;
    } else if (insert && ((size_t) i == size)) {
      return size;
    }
    
    throw std::out_of_range("index out of range");
  }

  inline size_t
  slice_index(ptrdiff_t i, size_t size) {
    if ( i < 0 ) {
      if ((size_t) (-i) <= size) {
	return (size_t) (i + size);
      } else {
	throw std::out_of_range("index out of range");
      }
    } else {
      return ( (size_t) i < size ) ? ((size_t) i) : size;
    }
  }

  template <class Sequence, class Difference>
  inline typename Sequence::iterator 
  getpos(Sequence* self, Difference i)  {
    typename Sequence::iterator pos = self->begin(); 
    std::advance(pos, check_index(i,self->size()));
    return pos;
  }

  template <class Sequence, class Difference>
  inline typename Sequence::const_iterator 
  cgetpos(const Sequence* self, Difference i)  {
    typename Sequence::const_iterator pos = self->begin(); 
    std::advance(pos, check_index(i,self->size()));
    return pos;
  }

  template <class Sequence, class Difference>
  inline Sequence*
  getslice(const Sequence* self, Difference i, Difference j) { 
    typename Sequence::size_type size = self->size();
    typename Sequence::size_type ii = swig::check_index(i, size);
    typename Sequence::size_type jj = swig::slice_index(j, size);
    
    if (jj > ii) {
      typename Sequence::const_iterator vb = self->begin();
      typename Sequence::const_iterator ve = self->begin();
      std::advance(vb,ii);
      std::advance(ve,jj);
      return new Sequence(vb, ve);
    } else {
      return new Sequence();
    }
  }

  template <class Sequence, class Difference, class InputSeq>
  inline void
  setslice(Sequence* self, Difference i, Difference j, const InputSeq& v) {
    typename Sequence::size_type size = self->size();
    typename Sequence::size_type ii = swig::check_index(i, size, true);
    typename Sequence::size_type jj = swig::slice_index(j, size);
    if (jj < ii) jj = ii;
    typename Sequence::iterator sb = self->begin();
    typename InputSeq::const_iterator vmid = v.begin();
    std::advance(sb,ii);
    std::advance(vmid, jj - ii);
    self->insert(std::copy(v.begin(), vmid, sb), vmid, v.end());
  }
 
  template <class Sequence, class Difference>
  inline void
  delslice(Sequence* self, Difference i, Difference j) {
    typename Sequence::size_type size = self->size();
    typename Sequence::size_type ii = swig::check_index(i, size, true);
    typename Sequence::size_type jj = swig::slice_index(j, size);
    if (jj > ii) {
      typename Sequence::iterator sb = self->begin();
      typename Sequence::iterator se = self->begin();
      std::advance(sb,ii);
      std::advance(se,jj);
      self->erase(sb,se);
    }
  }
}


#include <iterator>
namespace swig
{
  template <class T> 
  struct PySequence_Ref
  {
    PySequence_Ref(PyObject* seq, int index) 
      : _seq(seq), _index(index)
    {
    }

    operator T () const 
    {
      swig::PyObject_var item = PySequence_GetItem(_seq, _index);
      try {
	return swig::as<T>(item, true);
      } catch (std::exception& e) {
	char msg[1024];
	PyOS_snprintf(msg, sizeof(msg), "in sequence element %d ", _index);
	if (!PyErr_Occurred()) {
	  SWIG_type_error(swig::type_name<T>(), item);
	}
	SWIG_append_errmsg(msg);
	SWIG_append_errmsg(e.what());
	throw;
      }
    }
    
    PySequence_Ref& operator=(const T& v) 
    {
      PySequence_SetItem(_seq, _index, swig::from<T>(v));
      return *this;
    }
    
  private:
    PyObject* _seq;
    int _index;
  };

  template <class T> 
  struct PySequence_ArrowProxy 
  {
    PySequence_ArrowProxy(const T& x): m_value(x) {}
    const T* operator->() const { return &m_value; }
    operator const T*() const { return &m_value; }
    T m_value;
  };    

  template <class T, class Reference > 
  struct PySequence_Iter
  {
    typedef PySequence_Iter<T, Reference > self;

    typedef std::random_access_iterator_tag iterator_category;
    typedef Reference reference;
    typedef T value_type;
    typedef T* pointer;
    typedef int difference_type;

    PySequence_Iter()
    {
    }

    PySequence_Iter(PyObject* seq, int index)
      : _seq(seq), _index(index)
    {
    }

    reference operator*() const
    { 
      return reference(_seq, _index);
    }

    PySequence_ArrowProxy<T>
    operator->() const {
      return PySequence_ArrowProxy<T>(operator*());
    }

    bool operator==(const self& ri) const 
    { 
      return (_index == ri._index) && (_seq == ri._seq);
    }

    bool operator!=(const self& ri) const 
    {
      return !(operator==(ri));
    }    

    self& operator ++ ()
    {
      ++_index;      
      return *this;
    }

    self& operator -- ()
    {
      --_index;
      return *this;
    }

    self& operator += (difference_type n) 
    {
      _index += n;
      return *this;
    }

    self operator +(difference_type n) const
    {
      return self(_seq, _index + n);
    }

    self& operator -= (difference_type n) 
    {
      _index -= n;
      return *this;
    }

    self operator -(difference_type n) const
    {
      return self(_seq, _index - n);
    }    

    difference_type operator - (const self& ri) const
    {
      return _index - ri._index;
    }

    reference 
    operator[](difference_type n) const 
    { 
      return reference(_seq, _index + n);
    }

  private:
    PyObject* _seq;
    int _index;
  }; 

  template <class T> 
  struct PySequence_Cont
  {
    typedef PySequence_Ref<T> reference;
    typedef const PySequence_Ref<T> const_reference;
    typedef T value_type;
    typedef T* pointer;
    typedef int difference_type;
    typedef int size_type;
    typedef const pointer const_pointer;
    typedef PySequence_Iter<T, reference> iterator;
    typedef PySequence_Iter<T, const_reference> const_iterator;

    PySequence_Cont(PyObject* seq) : _seq(0)
    {
      if (!PySequence_Check(seq)) {
	throw std::invalid_argument("a sequence is expected");
      }
      _seq = seq;
      Py_INCREF(_seq);
    }

    ~PySequence_Cont() 
    {
      if (_seq) Py_DECREF(_seq);
    }

    size_type size() const
    {
      return PySequence_Size(_seq);
    }

    bool empty() const
    {
      return size() == 0;
    }    

    iterator begin()
    {
      return iterator(_seq, 0);
    }

    const_iterator begin() const
    {
      return const_iterator(_seq, 0);
    }
    
    iterator end()
    {
      return iterator(_seq, size());
    }
    
    const_iterator end() const
    {
      return const_iterator(_seq, size());
    }    

    reference operator[](difference_type n) 
    { 
      return reference(_seq, n);
    }

    const_reference operator[](difference_type n)  const
    { 
      return const_reference(_seq, n);
    }

    bool check(bool set_err = true) const
    {
      int s = size();
      for (int i = 0; i < s; ++i) {
	swig::PyObject_var item = PySequence_GetItem(_seq, i);
	if (!swig::check<value_type>(item)) {
	  if (set_err) {
	    char msg[1024];
	    PyOS_snprintf(msg, sizeof(msg), "in sequence element %d", i);
	    SWIG_type_error(swig::type_name<value_type>(), item);
	    SWIG_append_errmsg(msg);
	  }
	  return 0;
	}
      }
      return 1;  
    }

  private:
    PyObject* _seq;
  };

}


  namespace swig {
    template <class PySeq, class Seq> 
    inline void
    assign(const PySeq& pyseq, Seq* seq) {
#ifdef SWIG_STD_NOASSIGN_STL
      typedef typename PySeq::value_type value_type;
      typename PySeq::const_iterator it = pyseq.begin();
      for (;it != pyseq.end(); ++it) {
	seq->insert(seq->end(),(value_type)(*it));
      }
#else
      seq->assign(pyseq.begin(), pyseq.end());
#endif
    }

    template <class Seq, class T = typename Seq::value_type >
    struct traits_asptr_stdseq {
      typedef Seq sequence;
      typedef T value_type;
		    
      static int asptr(PyObject *obj, sequence **seq) {
	if (PySequence_Check(obj)) {
	  try {
	    PySequence_Cont<value_type> pyseq(obj);
	    if (seq) {
	      sequence *pseq = new sequence();
	      assign(pyseq, pseq);
	      *seq = pseq;
	      return SWIG_NEWOBJ;
	    } else {
	      return pyseq.check();
	    }
	  } catch (std::exception& e) {
	    if (seq) {
	      if (!PyErr_Occurred())
		PyErr_SetString(PyExc_TypeError, e.what());
	    }
	    return 0;
	  }
	} else {
	  sequence *p;
	  if (SWIG_ConvertPtr(obj,(void**)&p,
			      swig::type_info<sequence>(),0) != -1) {
	    if (seq) *seq = p;
	    return 1;
	  }
	}
	if (seq) {
	  PyErr_Format(PyExc_TypeError, "a %s is expected", 
		       swig::type_name<sequence>());
	}
	return 0;	  
      }
    };

    template <class Seq, class T = typename Seq::value_type >
    struct traits_from_stdseq {
      typedef Seq sequence;
      typedef T value_type;
      typedef typename Seq::size_type size_type;
      typedef typename sequence::const_iterator const_iterator;

      static PyObject *from(const sequence& seq) {
	size_type size = seq.size();
	if (size <= (size_type)INT_MAX) {
	  PyObject *obj = PyTuple_New((int)size);
	  int i = 0;
	  for (const_iterator it = seq.begin();
	       it != seq.end(); ++it, ++i) {
	    PyTuple_SetItem(obj,i,swig::from<value_type>(*it));
	  }
	  return obj;
	} else {
	  PyErr_SetString(PyExc_OverflowError,
			  "sequence size not valid in python");
	  return NULL;
	}
      }
    };
  }


  namespace swig {
    template <class T>
    struct traits_asptr<std::vector<T> >  {
      static int asptr(PyObject *obj, std::vector<T> **vec) {
	return traits_asptr_stdseq<std::vector<T> >::asptr(obj, vec);
      }
    };
    
    template <class T>
    struct traits_from<std::vector<T> > {
      static PyObject *from(const std::vector<T>& vec) {
	return traits_from_stdseq<std::vector<T> >::from(vec);
      }
    };
  }


      namespace swig {
	template <>  struct traits<std::vector<int, std::allocator<int > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "int" "," "std::allocator<int >" " >";
	  }
	};
      }
    

SWIGINTERNINLINE PyObject*
  SWIG_From_bool(bool value)
{
  PyObject *obj = value ? Py_True : Py_False;
  Py_INCREF(obj);
  return obj;
}


SWIGINTERNINLINE PyObject* 
  SWIG_From_unsigned_SS_long(unsigned long value)
{
  return (value > LONG_MAX) ?
    PyLong_FromUnsignedLong(value) 
    : PyInt_FromLong((long)(value)); 
}


SWIGINTERN int
  SWIG_AsVal_unsigned_SS_long(PyObject *obj, unsigned long *val) 
{
  if (PyInt_Check(obj)) {
    long v = PyInt_AS_LONG(obj);
    if (v >= 0) {
      if (val) *val = v;
      return 1;
    }   
  }
  if (PyLong_Check(obj)) {
    unsigned long v = PyLong_AsUnsignedLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return 1;
    } else {
      if (!val) PyErr_Clear();
      return 0;
    }
  } 
  if (val) {
    SWIG_type_error("unsigned long", obj);
  }
  return 0;
}


SWIGINTERNINLINE unsigned long
SWIG_As_unsigned_SS_long(PyObject* obj)
{
  unsigned long v;
  if (!SWIG_AsVal_unsigned_SS_long(obj, &v)) {
    /*
      this is needed to make valgrind/purify happier. 
     */
    memset((void*)&v, 0, sizeof(unsigned long));
  }
  return v;
}

  
SWIGINTERNINLINE int
SWIG_Check_unsigned_SS_long(PyObject* obj)
{
  return SWIG_AsVal_unsigned_SS_long(obj, (unsigned long*)0);
}


SWIGINTERNINLINE int
SWIG_As_int(PyObject* obj)
{
  int v;
  if (!SWIG_AsVal_int(obj, &v)) {
    /*
      this is needed to make valgrind/purify happier. 
     */
    memset((void*)&v, 0, sizeof(int));
  }
  return v;
}

  
SWIGINTERNINLINE int
SWIG_Check_int(PyObject* obj)
{
  return SWIG_AsVal_int(obj, (int*)0);
}

static bool std_vector_Sl_int_Sg____nonzero__(std::vector<int > const *self){
      return !(self->empty());
    }
static std::vector<int >::size_type std_vector_Sl_int_Sg____len__(std::vector<int > const *self){
      return self->size();
    }
static std::vector<int >::value_type std_vector_Sl_int_Sg__pop(std::vector<int > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector<int,std::allocator<int > >::value_type x = self->back();
      self->pop_back();
      return x;
    }

SWIGINTERNINLINE long
SWIG_As_long(PyObject* obj)
{
  long v;
  if (!SWIG_AsVal_long(obj, &v)) {
    /*
      this is needed to make valgrind/purify happier. 
     */
    memset((void*)&v, 0, sizeof(long));
  }
  return v;
}

  
SWIGINTERNINLINE int
SWIG_Check_long(PyObject* obj)
{
  return SWIG_AsVal_long(obj, (long*)0);
}

static std::vector<int,std::allocator<int > > *std_vector_Sl_int_Sg____getslice__(std::vector<int > *self,std::vector<int >::difference_type i,std::vector<int >::difference_type j){
      return swig::getslice(self, i, j);
    }
static void std_vector_Sl_int_Sg____setslice__(std::vector<int > *self,std::vector<int >::difference_type i,std::vector<int >::difference_type j,std::vector<int,std::allocator<int > > const &v){
      swig::setslice(self, i, j, v);
    }
static void std_vector_Sl_int_Sg____delslice__(std::vector<int > *self,std::vector<int >::difference_type i,std::vector<int >::difference_type j){
      swig::delslice(self, i, j);
    }
static void std_vector_Sl_int_Sg____delitem__(std::vector<int > *self,std::vector<int >::difference_type i){
      self->erase(swig::getpos(self,i));
    }
static std::vector<int >::value_type const &std_vector_Sl_int_Sg____getitem__(std::vector<int > const *self,std::vector<int >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
static void std_vector_Sl_int_Sg____setitem__(std::vector<int > *self,std::vector<int >::difference_type i,std::vector<int >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
static void std_vector_Sl_int_Sg__append(std::vector<int > *self,std::vector<int >::value_type const &x){
      self->push_back(x);
    }

SWIGINTERN int
  SWIG_AsVal_double(PyObject *obj, double *val)
{
  if (PyFloat_Check(obj)) {
    if (val) *val = PyFloat_AS_DOUBLE(obj);
    return 1;
  }  
  if (PyInt_Check(obj)) {
    if (val) *val = PyInt_AS_LONG(obj);
    return 1;
  }
  if (PyLong_Check(obj)) {
    double v = PyLong_AsDouble(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return 1;
    } else {
      if (!val) PyErr_Clear();
      return 0;
    }
  }
  if (val) {
    SWIG_type_error("double", obj);
  }
  return 0;
}


  /*@/usr/local/share/swig/1.3.25/python/pymacros.swg,66,SWIG_define@*/
#define SWIG_From_double PyFloat_FromDouble
/*@@*/


namespace swig {
  template <> struct traits<double > {
    typedef value_category category;
    static const char* type_name() { return"double"; }
  };  
  template <>  struct traits_asval<double > {   
    typedef double value_type;
    static int asval(PyObject *obj, value_type *val) { 
      return SWIG_AsVal_double(obj, val);
    }
  };
  template <>  struct traits_from<double > {
    typedef double value_type;
    static PyObject *from(const value_type& val) {
      return SWIG_From_double(val);
    }
  };
}


      namespace swig {
	template <>  struct traits<std::vector<double, std::allocator<double > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "double" "," "std::allocator<double >" " >";
	  }
	};
      }
    

SWIGINTERNINLINE double
SWIG_As_double(PyObject* obj)
{
  double v;
  if (!SWIG_AsVal_double(obj, &v)) {
    /*
      this is needed to make valgrind/purify happier. 
     */
    memset((void*)&v, 0, sizeof(double));
  }
  return v;
}

  
SWIGINTERNINLINE int
SWIG_Check_double(PyObject* obj)
{
  return SWIG_AsVal_double(obj, (double*)0);
}

static bool std_vector_Sl_double_Sg____nonzero__(std::vector<double > const *self){
      return !(self->empty());
    }
static std::vector<double >::size_type std_vector_Sl_double_Sg____len__(std::vector<double > const *self){
      return self->size();
    }
static std::vector<double >::value_type std_vector_Sl_double_Sg__pop(std::vector<double > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector<double,std::allocator<double > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
static std::vector<double,std::allocator<double > > *std_vector_Sl_double_Sg____getslice__(std::vector<double > *self,std::vector<double >::difference_type i,std::vector<double >::difference_type j){
      return swig::getslice(self, i, j);
    }
static void std_vector_Sl_double_Sg____setslice__(std::vector<double > *self,std::vector<double >::difference_type i,std::vector<double >::difference_type j,std::vector<double,std::allocator<double > > const &v){
      swig::setslice(self, i, j, v);
    }
static void std_vector_Sl_double_Sg____delslice__(std::vector<double > *self,std::vector<double >::difference_type i,std::vector<double >::difference_type j){
      swig::delslice(self, i, j);
    }
static void std_vector_Sl_double_Sg____delitem__(std::vector<double > *self,std::vector<double >::difference_type i){
      self->erase(swig::getpos(self,i));
    }
static std::vector<double >::value_type const &std_vector_Sl_double_Sg____getitem__(std::vector<double > const *self,std::vector<double >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
static void std_vector_Sl_double_Sg____setitem__(std::vector<double > *self,std::vector<double >::difference_type i,std::vector<double >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
static void std_vector_Sl_double_Sg__append(std::vector<double > *self,std::vector<double >::value_type const &x){
      self->push_back(x);
    }

#include <stdexcept>


SWIGINTERN PyObject *
SWIG_FromCharPtr(const char* cptr)
{ 
  if (cptr) {
    size_t size = strlen(cptr);
    if (size > INT_MAX) {
      return SWIG_NewPointerObj((char*)(cptr), 
				SWIG_TypeQuery("char *"), 0);
    } else {
      if (size != 0) {
	return PyString_FromStringAndSize(cptr, size);
      } else {
	return PyString_FromString(cptr);
      }
    }
  }
  Py_INCREF(Py_None);
  return Py_None;
}


/* returns SWIG_OLDOBJ if the input is a raw char*, SWIG_PYSTR if is a PyString */
SWIGINTERN int
SWIG_AsCharPtrAndSize(PyObject *obj, char** cptr, size_t* psize)
{
  static swig_type_info* pchar_info = 0;
  char* vptr = 0;
  if (!pchar_info) pchar_info = SWIG_TypeQuery("char *");
  if (SWIG_ConvertPtr(obj, (void**)&vptr, pchar_info, 0) != -1) {
    if (cptr) *cptr = vptr;
    if (psize) *psize = vptr ? (strlen(vptr) + 1) : 0;
    return SWIG_OLDOBJ;
  } else {
    PyErr_Clear();
    if (PyString_Check(obj)) {
      if (cptr) {
	*cptr = PyString_AS_STRING(obj);
	if (psize) {
	  *psize = PyString_GET_SIZE(obj) + 1;
	}
      }
      return SWIG_PYSTR;
    }
  }
  if (cptr) {
    SWIG_type_error("char *", obj);
  }
  return 0;
}


  SWIGINTERN int
    SWIG_AsPtr_std_string(PyObject* obj, std::string **val)
    {
      static swig_type_info* string_info = SWIG_TypeQuery("std::string *");
      std::string *vptr;    
      if (SWIG_ConvertPtr(obj, (void**)&vptr, string_info, 0) != -1) {
	if (val) *val = vptr;
	return SWIG_OLDOBJ;
      } else {
	PyErr_Clear();
	char* buf = 0 ; size_t size = 0;
	if (SWIG_AsCharPtrAndSize(obj, &buf, &size)) {
	  if (buf) {
	    if (val) *val = new std::string(buf, size - 1);
	    return SWIG_NEWOBJ;
	  }
	} else {
	  PyErr_Clear();
	}  
	if (val) {
	  PyErr_SetString(PyExc_TypeError,"a string is expected");
	}
	return 0;
      }
    }


#include <ios>


SWIGINTERN int
  SWIG_AsVal_bool(PyObject *obj, bool *val)
{
  if (obj == Py_True) {
    if (val) *val = true;
    return 1;
  }
  if (obj == Py_False) {
    if (val) *val = false;
    return 1;
  }
  int res = 0;
  if (SWIG_AsVal_int(obj, &res)) {    
    if (val) *val = res ? true : false;
    return 1;
  } else {
    PyErr_Clear();
  }  
  if (val) {
    SWIG_type_error("bool", obj);
  }
  return 0;
}


SWIGINTERNINLINE bool
SWIG_As_bool(PyObject* obj)
{
  bool v;
  if (!SWIG_AsVal_bool(obj, &v)) {
    /*
      this is needed to make valgrind/purify happier. 
     */
    memset((void*)&v, 0, sizeof(bool));
  }
  return v;
}

  
SWIGINTERNINLINE int
SWIG_Check_bool(PyObject* obj)
{
  return SWIG_AsVal_bool(obj, (bool*)0);
}


SWIGINTERNINLINE PyObject*
  SWIG_From_char(char c) 
{ 
  return PyString_FromStringAndSize(&c,1);
}


SWIGINTERN int
SWIG_AsCharArray(PyObject *obj, char *val, size_t size)
{ 
  char* cptr; size_t csize;  
  if (SWIG_AsCharPtrAndSize(obj, &cptr, &csize)) {
    /* in C you can do:        

         char x[5] = "hello"; 

        ie, assing the array using an extra '0' char.
    */
    if ((csize == size + 1) && !(cptr[csize-1])) --csize;
    if (csize <= size) {
      if (val) {
	if (csize) memcpy(val, cptr, csize);
	if (csize < size) memset(val + csize, 0, size - csize);
      }
      return 1;
    }
  }
  if (val) {
    PyErr_Format(PyExc_TypeError,
		 "a char array of maximum size %lu is expected", 
		 (unsigned long) size);
  }
  return 0;
}


SWIGINTERN int
  SWIG_AsVal_char(PyObject *obj, char *val)
{
  const char* errmsg = val ? "char" : (char*)0;
  long v;
  if (SWIG_AsVal_long(obj, &v)) {
    if (SWIG_CheckLongInRange(v, CHAR_MIN,CHAR_MAX, errmsg)) {
      if (val) *val = (char)(v);
      return 1;
    } else {
      return 0;
    }    
  } else {
    PyErr_Clear();
    return SWIG_AsCharArray(obj, val, 1);
  }
 }


SWIGINTERNINLINE char
SWIG_As_char(PyObject* obj)
{
  char v;
  if (!SWIG_AsVal_char(obj, &v)) {
    /*
      this is needed to make valgrind/purify happier. 
     */
    memset((void*)&v, 0, sizeof(char));
  }
  return v;
}

  
SWIGINTERNINLINE int
SWIG_Check_char(PyObject* obj)
{
  return SWIG_AsVal_char(obj, (char*)0);
}


#include <iostream>

extern std::istream std::cin;
extern std::ostream std::cout;
extern std::ostream std::cerr;
extern std::ostream std::clog;

SWIGINTERN int
  SWIG_AsVal_short(PyObject *obj, short *val)
{ 
  const char* errmsg = val ? "short" : (char*)0;
  long v;
  if (SWIG_AsVal_long(obj, &v)) {
    if (SWIG_CheckLongInRange(v, SHRT_MIN, SHRT_MAX, errmsg)) {
      if (val) *val = (short)(v);
      return 1;
    } else {
      return 0;
    }    
  } else {
    PyErr_Clear();
  }
  if (val) {
    SWIG_type_error(errmsg, obj);
  }
  return 0;    
}


SWIGINTERNINLINE short
SWIG_As_short(PyObject* obj)
{
  short v;
  if (!SWIG_AsVal_short(obj, &v)) {
    /*
      this is needed to make valgrind/purify happier. 
     */
    memset((void*)&v, 0, sizeof(short));
  }
  return v;
}

  
SWIGINTERNINLINE int
SWIG_Check_short(PyObject* obj)
{
  return SWIG_AsVal_short(obj, (short*)0);
}


SWIGINTERNINLINE int
  SWIG_CheckUnsignedLongInRange(unsigned long value,
				unsigned long max_value,
				const char *errmsg) 
{
  if (value > max_value) {
    if (errmsg) {
      PyErr_Format(PyExc_OverflowError,
		   "value %lu is greater than '%s' minimum %lu",
		   value, errmsg, max_value);
    }
    return 0;
  }
  return 1;
 }


SWIGINTERN int
  SWIG_AsVal_unsigned_SS_short(PyObject *obj, unsigned short *val)
{ 
  const char* errmsg = val ? "unsigned short" : (char*)0;
  unsigned long v;
  if (SWIG_AsVal_unsigned_SS_long(obj, &v)) {
    if (SWIG_CheckUnsignedLongInRange(v, USHRT_MAX, errmsg)) {
      if (val) *val = (unsigned short)(v);
      return 1;
    } else {
      return 0;
    }
  } else {
    PyErr_Clear();
  }
  if (val) {
    SWIG_type_error(errmsg, obj);
  }
  return 0;
}


SWIGINTERNINLINE unsigned short
SWIG_As_unsigned_SS_short(PyObject* obj)
{
  unsigned short v;
  if (!SWIG_AsVal_unsigned_SS_short(obj, &v)) {
    /*
      this is needed to make valgrind/purify happier. 
     */
    memset((void*)&v, 0, sizeof(unsigned short));
  }
  return v;
}

  
SWIGINTERNINLINE int
SWIG_Check_unsigned_SS_short(PyObject* obj)
{
  return SWIG_AsVal_unsigned_SS_short(obj, (unsigned short*)0);
}


#if UINT_MAX != ULONG_MAX
SWIGINTERN int
  SWIG_AsVal_unsigned_SS_int(PyObject *obj, unsigned int *val)
{ 
  const char* errmsg = val ? "unsigned int" : (char*)0;
  unsigned long v;
  if (SWIG_AsVal_unsigned_SS_long(obj, &v)) {
    if (SWIG_CheckUnsignedLongInRange(v, INT_MAX, errmsg)) {
      if (val) *val = (unsigned int)(v);
      return 1;
    }
  } else {
    PyErr_Clear();
  }
  if (val) {
    SWIG_type_error(errmsg, obj);
  }
  return 0;    
}
#else
SWIGINTERNINLINE unsigned int
  SWIG_AsVal_unsigned_SS_int(PyObject *obj, unsigned int *val)
{
  return SWIG_AsVal_unsigned_SS_long(obj,(unsigned long *)val);
}
#endif


SWIGINTERNINLINE unsigned int
SWIG_As_unsigned_SS_int(PyObject* obj)
{
  unsigned int v;
  if (!SWIG_AsVal_unsigned_SS_int(obj, &v)) {
    /*
      this is needed to make valgrind/purify happier. 
     */
    memset((void*)&v, 0, sizeof(unsigned int));
  }
  return v;
}

  
SWIGINTERNINLINE int
SWIG_Check_unsigned_SS_int(PyObject* obj)
{
  return SWIG_AsVal_unsigned_SS_int(obj, (unsigned int*)0);
}


SWIGINTERN int
  SWIG_AsVal_long_SS_long(PyObject *obj, long long *val)
{
  if (PyLong_Check(obj)) {
    long long v = PyLong_AsLongLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return 1;
    } else {
      if (!val) PyErr_Clear();
      return 0;
    }
  }
  if (PyInt_Check(obj)) {
    if (val) *val = PyInt_AS_LONG(obj);
    return 1;
  }
  if (val) {
    SWIG_type_error("long long", obj);
  }
  return 0;
}


SWIGINTERNINLINE long long
SWIG_As_long_SS_long(PyObject* obj)
{
  long long v;
  if (!SWIG_AsVal_long_SS_long(obj, &v)) {
    /*
      this is needed to make valgrind/purify happier. 
     */
    memset((void*)&v, 0, sizeof(long long));
  }
  return v;
}

  
SWIGINTERNINLINE int
SWIG_Check_long_SS_long(PyObject* obj)
{
  return SWIG_AsVal_long_SS_long(obj, (long long*)0);
}


SWIGINTERN int
  SWIG_AsVal_unsigned_SS_long_SS_long(PyObject *obj, unsigned long long *val)
{
  unsigned long v;
  if (PyLong_Check(obj)) {
    unsigned long long v = PyLong_AsUnsignedLongLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return 1;
    } else {
      if (!val) PyErr_Clear();
      return 0;
    }
  }
  if (SWIG_AsVal_unsigned_SS_long(obj,&v)) {
    if (val) *val = v;
    return 1;
  } else {
    PyErr_Clear();
  }
  if (val) {
    SWIG_type_error("unsigned long long", obj);
  }  
  return 0;
}


SWIGINTERNINLINE unsigned long long
SWIG_As_unsigned_SS_long_SS_long(PyObject* obj)
{
  unsigned long long v;
  if (!SWIG_AsVal_unsigned_SS_long_SS_long(obj, &v)) {
    /*
      this is needed to make valgrind/purify happier. 
     */
    memset((void*)&v, 0, sizeof(unsigned long long));
  }
  return v;
}

  
SWIGINTERNINLINE int
SWIG_Check_unsigned_SS_long_SS_long(PyObject* obj)
{
  return SWIG_AsVal_unsigned_SS_long_SS_long(obj, (unsigned long long*)0);
}


#include <float.h>
SWIGINTERN int
  SWIG_CheckDoubleInRange(double value, double min_value, 
			  double max_value, const char* errmsg)
{
  if (value < min_value) {
    if (errmsg) {
      PyErr_Format(PyExc_OverflowError, 
		   "value %g is less than %s minimum %g", 
		   value, errmsg, min_value);
    }
    return 0;
  } else if (value > max_value) {
    if (errmsg) {
      PyErr_Format(PyExc_OverflowError, 
		   "value %g is greater than %s maximum %g", 
		   value, errmsg, max_value);
    }
    return 0;
  }
  return 1;
}


SWIGINTERN int
  SWIG_AsVal_float(PyObject *obj, float *val)
{
  const char* errmsg = val ? "float" : (char*)0;
  double v;
  if (SWIG_AsVal_double(obj, &v)) {
    if (SWIG_CheckDoubleInRange(v, -FLT_MAX, FLT_MAX, errmsg)) {
      if (val) *val = (float)(v);
      return 1;
    } else {
      return 0;
    }
  } else {
    PyErr_Clear();
  }
  if (val) {
    SWIG_type_error(errmsg, obj);
  }
  return 0;
}


SWIGINTERNINLINE float
SWIG_As_float(PyObject* obj)
{
  float v;
  if (!SWIG_AsVal_float(obj, &v)) {
    /*
      this is needed to make valgrind/purify happier. 
     */
    memset((void*)&v, 0, sizeof(float));
  }
  return v;
}

  
SWIGINTERNINLINE int
SWIG_Check_float(PyObject* obj)
{
  return SWIG_AsVal_float(obj, (float*)0);
}

static std::basic_ostream<char,std::char_traits<char > > &std_basic_ostream_Sl_char_Sg__operator_Sl__Sl___SWIG_17(std::basic_ostream<char > *self,std::basic_string<char,std::char_traits<char >,std::allocator<char > > const &s){
	  *self << s;
	  return *self;
	}

SWIGINTERNINLINE int
SWIG_AsCharPtr(PyObject *obj, char **val)
{
  if (SWIG_AsCharPtrAndSize(obj, val, (size_t*)(0))) {
    return 1;
  }
  if (val) {
    PyErr_Clear();
    SWIG_type_error("char *", obj);
  }
  return 0;
}


  /*@/usr/local/share/swig/1.3.25/python/pymacros.swg,66,SWIG_define@*/
#define SWIG_From_short PyInt_FromLong
/*@@*/


  /*@/usr/local/share/swig/1.3.25/python/pymacros.swg,66,SWIG_define@*/
#define SWIG_From_long PyInt_FromLong
/*@@*/


#if UINT_MAX < LONG_MAX
/*@/usr/local/share/swig/1.3.25/python/pymacros.swg,66,SWIG_define@*/
#define SWIG_From_unsigned_SS_int SWIG_From_long
/*@@*/
#else
/*@/usr/local/share/swig/1.3.25/python/pymacros.swg,66,SWIG_define@*/
#define SWIG_From_unsigned_SS_int SWIG_From_unsigned_SS_long
/*@@*/
#endif


SWIGINTERNINLINE PyObject *
SWIG_FromCharArray(const char* carray, size_t size)
{
  if (size > INT_MAX) {
    return SWIG_NewPointerObj((char *)(carray), 
			      SWIG_TypeQuery("char *"), 0);
  } else {
    return PyString_FromStringAndSize(carray, (int)(size));
  }
}


SWIGINTERNINLINE PyObject*
  SWIG_From_std_string(const std::string& s)
  {
    return SWIG_FromCharArray(s.data(), s.size());
  }


  /*@/usr/local/share/swig/1.3.25/python/pymacros.swg,66,SWIG_define@*/
#define SWIG_From_float PyFloat_FromDouble
/*@@*/


  namespace swig {
    template <>  struct traits<RinexObsType > {
      typedef pointer_category category;
      static const char* type_name() { return"RinexObsType"; }
    };
  }


  namespace swig {
    template <>  struct traits<RinexDatum > {
      typedef pointer_category category;
      static const char* type_name() { return"RinexDatum"; }
    };
  }


  namespace swig {
    template <class T, class U >
    struct traits_asptr<std::pair<T,U> >  {
      static int asptr(PyObject *obj, std::pair<T,U> **val) {
	typedef std::pair<T,U> value_type;
	if (PySequence_Check(obj) && (PySequence_Size(obj) == 2)) {
	  swig::PyObject_var first = PySequence_GetItem(obj,0);
	  swig::PyObject_var second = PySequence_GetItem(obj,1);
	  T *pfirst = 0;
	  U *psecond = 0;
	  if (val) {
	    *val = new std::pair<T,U>;
	    pfirst = &((*val)->first);
	    psecond = &((*val)->second);
	  }	  
	  if (swig::asval(first,pfirst) && swig::asval(second,psecond)) {
	    return SWIG_NEWOBJ;
	  } else {
	    delete *val;
	  }
	} else {
	  value_type *p;
	  if (SWIG_ConvertPtr(obj,(void**)&p,
			      swig::type_info<value_type>(),0) != -1) {
	    if (val) *val = p;
	    return SWIG_OLDOBJ;
	  }
	}
	if (val) {
	  PyErr_Format(PyExc_TypeError, "a %s is expected", 
		       swig::type_name<value_type>());
	}
	return 0;
      }
    };

    template <class T, class U >
    struct traits_from<std::pair<T,U> >   {
      static PyObject *from(const std::pair<T,U>& val) {
	PyObject* obj = PyTuple_New(2);
	PyTuple_SetItem(obj,0,swig::from(val.first));
	PyTuple_SetItem(obj,1,swig::from(val.second));
	return obj;
      }
    };
  }


      namespace swig {
	template <>  struct traits<std::pair<RinexObsType,RinexDatum > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::pair<" "RinexObsType" "," "RinexDatum" " >";
	  }
	};
      }
    

  namespace swig {
    template <class PySeq, class K, class T >
    inline void
    assign(const PySeq& pyseq, std::map<K,T > *map) {
      typedef typename std::map<K,T>::value_type value_type;
      typename PySeq::const_iterator it = pyseq.begin();
      for (;it != pyseq.end(); ++it) {
	map->insert(value_type(it->first, it->second));
      }
    }

    template <class K, class T>
    struct traits_asptr<std::map<K,T> >  {
      typedef std::map<K,T> map_type;
      static int asptr(PyObject *obj, map_type **val) {
	if (PyDict_Check(obj)) {
	  PyObject_var items = PyMapping_Items(obj);
	  return traits_asptr_stdseq<std::map<K,T>, std::pair<K, T> >
	    ::asptr(items, val);
	}
	if (val) {
	  PyErr_SetString(PyExc_TypeError, "a dictionary is expected");
	}
	return 0;
      }      
    };
      
    template <class K, class T >
    struct traits_from<std::map<K,T> >  {
      typedef std::map<K,T> map_type;
      typedef typename map_type::const_iterator const_iterator;
      typedef typename map_type::size_type size_type;
            
      static PyObject *from(const map_type& map) {
	size_type size = map.size();
	int pysize = (size <= (size_type) INT_MAX) ? (int) size : -1;
	if (pysize < 0) {
	  PyErr_SetString(PyExc_OverflowError,
			  "map size not valid in python");
	  return NULL;
	}
	PyObject *obj = PyDict_New();
	for (const_iterator i= map.begin(); i!= map.end(); ++i) {
	  PyDict_SetItem(obj,
			 swig::from(i->first),
			 swig::from(i->second));
	}
	return obj;
      }
    };
  }


      namespace swig {
	template <>  struct traits<std::map<RinexObsType, RinexDatum, std::less<RinexObsType >, std::allocator<std::pair<RinexObsType const,RinexDatum > > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::map<" "RinexObsType" "," "RinexDatum" "," "std::less<RinexObsType >" "," "std::allocator<std::pair<RinexObsType const,RinexDatum > >" " >";
	  }
	};
      }
    
static bool std_map_Sl_RinexObsType_Sc_RinexDatum_Sg____nonzero__(std::map<RinexObsType,RinexDatum > const *self){
      return !(self->empty());
    }
static std::map<RinexObsType,RinexDatum >::size_type std_map_Sl_RinexObsType_Sc_RinexDatum_Sg____len__(std::map<RinexObsType,RinexDatum > const *self){
      return self->size();
    }
static std::map<RinexObsType,RinexDatum >::mapped_type std_map_Sl_RinexObsType_Sc_RinexDatum_Sg____getitem__(std::map<RinexObsType,RinexDatum > const *self,std::map<RinexObsType,RinexDatum >::key_type const &key){
      std::map<RinexObsType,RinexDatum,std::less<RinexObsType >,std::allocator<std::pair<RinexObsType const,RinexDatum > > >::const_iterator i = self->find(key);
      if (i != self->end())
	return i->second;
      else
	throw std::out_of_range("key not found");
    }
static void std_map_Sl_RinexObsType_Sc_RinexDatum_Sg____setitem__(std::map<RinexObsType,RinexDatum > *self,std::map<RinexObsType,RinexDatum >::key_type const &key,std::map<RinexObsType,RinexDatum >::mapped_type const &x){
      self->insert(std::map<RinexObsType,RinexDatum,std::less<RinexObsType >,std::allocator<std::pair<RinexObsType const,RinexDatum > > >::value_type(key,x));
    }
static void std_map_Sl_RinexObsType_Sc_RinexDatum_Sg____delitem__(std::map<RinexObsType,RinexDatum > *self,std::map<RinexObsType,RinexDatum >::key_type const &key){
      std::map<RinexObsType,RinexDatum,std::less<RinexObsType >,std::allocator<std::pair<RinexObsType const,RinexDatum > > >::iterator i = self->find(key);
      if (i != self->end())
	self->erase(i);
      else
	throw std::out_of_range("key not found");
    }
static bool std_map_Sl_RinexObsType_Sc_RinexDatum_Sg__has_key(std::map<RinexObsType,RinexDatum > const *self,std::map<RinexObsType,RinexDatum >::key_type const &key){
      std::map<RinexObsType,RinexDatum,std::less<RinexObsType >,std::allocator<std::pair<RinexObsType const,RinexDatum > > >::const_iterator i = self->find(key);
      return i != self->end();
    }
static PyObject *std_map_Sl_RinexObsType_Sc_RinexDatum_Sg__keys(std::map<RinexObsType,RinexDatum > *self){
      std::map<RinexObsType,RinexDatum,std::less<RinexObsType >,std::allocator<std::pair<RinexObsType const,RinexDatum > > >::size_type size = self->size();
      int pysize = (size <= (std::map<RinexObsType,RinexDatum,std::less<RinexObsType >,std::allocator<std::pair<RinexObsType const,RinexDatum > > >::size_type) INT_MAX) ? (int) size : -1;
      if (pysize < 0) {
	PyErr_SetString(PyExc_OverflowError,
			"map size not valid in python");
	return NULL;
      }
      PyObject* keyList = PyList_New(pysize);
      std::map<RinexObsType,RinexDatum,std::less<RinexObsType >,std::allocator<std::pair<RinexObsType const,RinexDatum > > >::const_iterator i = self->begin();
      for (int j = 0; j < pysize; ++i, ++j) {
	PyList_SetItem(keyList, j, swig::from(i->first));
      }
      return keyList;
    }
static PyObject *std_map_Sl_RinexObsType_Sc_RinexDatum_Sg__values(std::map<RinexObsType,RinexDatum > *self){
      std::map<RinexObsType,RinexDatum,std::less<RinexObsType >,std::allocator<std::pair<RinexObsType const,RinexDatum > > >::size_type size = self->size();
      int pysize = (size <= (std::map<RinexObsType,RinexDatum,std::less<RinexObsType >,std::allocator<std::pair<RinexObsType const,RinexDatum > > >::size_type) INT_MAX) ? (int) size : -1;
      if (pysize < 0) {
	PyErr_SetString(PyExc_OverflowError,
			"map size not valid in python");
	return NULL;
      }
      PyObject* valList = PyTuple_New(pysize);
      std::map<RinexObsType,RinexDatum,std::less<RinexObsType >,std::allocator<std::pair<RinexObsType const,RinexDatum > > >::const_iterator i = self->begin();
      for (int j = 0; j < pysize; ++i, ++j) {
	PyTuple_SetItem(valList, j, swig::from(i->second));
      }
      return valList;
    }
static PyObject *std_map_Sl_RinexObsType_Sc_RinexDatum_Sg__items(std::map<RinexObsType,RinexDatum > *self){
      std::map<RinexObsType,RinexDatum,std::less<RinexObsType >,std::allocator<std::pair<RinexObsType const,RinexDatum > > >::size_type size = self->size();
      int pysize = (size <= (std::map<RinexObsType,RinexDatum,std::less<RinexObsType >,std::allocator<std::pair<RinexObsType const,RinexDatum > > >::size_type) INT_MAX) ? (int) size : -1;
      if (pysize < 0) {
	PyErr_SetString(PyExc_OverflowError,
			"map size not valid in python");
	return NULL;
      }    
      PyObject* itemList = PyTuple_New(pysize);
      std::map<RinexObsType,RinexDatum,std::less<RinexObsType >,std::allocator<std::pair<RinexObsType const,RinexDatum > > >::const_iterator i = self->begin();
      for (int j = 0; j < pysize; ++i, ++j) {
	PyTuple_SetItem(itemList, j, swig::from(*i));
      }
      return itemList;
    }
static bool std_map_Sl_RinexObsType_Sc_RinexDatum_Sg____contains__(std::map<RinexObsType,RinexDatum > *self,std::map<RinexObsType,RinexDatum >::key_type const &key){
      return self->find(key) != self->end();
    }
static PyObject *std_map_Sl_RinexObsType_Sc_RinexDatum_Sg____iter__(std::map<RinexObsType,RinexDatum > *self){
      std::map<RinexObsType,RinexDatum,std::less<RinexObsType >,std::allocator<std::pair<RinexObsType const,RinexDatum > > >::size_type size = self->size();
      int pysize = (size <= (std::map<RinexObsType,RinexDatum,std::less<RinexObsType >,std::allocator<std::pair<RinexObsType const,RinexDatum > > >::size_type) INT_MAX) ? (int) size : -1;
      if (pysize < 0) {
	PyErr_SetString(PyExc_OverflowError,
			"map size not valid in python");
	return NULL;
      }
      PyObject* keyTuple = PyTuple_New(pysize);
      std::map<RinexObsType,RinexDatum,std::less<RinexObsType >,std::allocator<std::pair<RinexObsType const,RinexDatum > > >::const_iterator i = self->begin();
      for (int j = 0; j < pysize; ++i, ++j) {
	PyTuple_SetItem(keyTuple, j, swig::from(i->first));
      }
#if PY_VERSION_HEX >= 0x02020000
      PyObject* iter = PyObject_GetIter(keyTuple);
      Py_DECREF(keyTuple);
      return iter;
#else
      return keyTuple;
#endif
    }
static bool std_map_Sl_RinexPrn_Sc_RinexObsData_RinexObsTypeMap_Sg____nonzero__(std::map<RinexPrn,RinexObsData::RinexObsTypeMap > const *self){
      return !(self->empty());
    }
static std::map<RinexPrn,RinexObsData::RinexObsTypeMap >::size_type std_map_Sl_RinexPrn_Sc_RinexObsData_RinexObsTypeMap_Sg____len__(std::map<RinexPrn,RinexObsData::RinexObsTypeMap > const *self){
      return self->size();
    }
static std::map<RinexPrn,RinexObsData::RinexObsTypeMap >::mapped_type std_map_Sl_RinexPrn_Sc_RinexObsData_RinexObsTypeMap_Sg____getitem__(std::map<RinexPrn,RinexObsData::RinexObsTypeMap > const *self,std::map<RinexPrn,RinexObsData::RinexObsTypeMap >::key_type const &key){
      std::map<RinexPrn,RinexObsData::RinexObsTypeMap,std::less<RinexPrn >,std::allocator<std::pair<RinexPrn const,RinexObsData::RinexObsTypeMap > > >::const_iterator i = self->find(key);
      if (i != self->end())
	return i->second;
      else
	throw std::out_of_range("key not found");
    }
static void std_map_Sl_RinexPrn_Sc_RinexObsData_RinexObsTypeMap_Sg____setitem__(std::map<RinexPrn,RinexObsData::RinexObsTypeMap > *self,std::map<RinexPrn,RinexObsData::RinexObsTypeMap >::key_type const &key,std::map<RinexPrn,RinexObsData::RinexObsTypeMap >::mapped_type const &x){
      self->insert(std::map<RinexPrn,RinexObsData::RinexObsTypeMap,std::less<RinexPrn >,std::allocator<std::pair<RinexPrn const,RinexObsData::RinexObsTypeMap > > >::value_type(key,x));
    }
static void std_map_Sl_RinexPrn_Sc_RinexObsData_RinexObsTypeMap_Sg____delitem__(std::map<RinexPrn,RinexObsData::RinexObsTypeMap > *self,std::map<RinexPrn,RinexObsData::RinexObsTypeMap >::key_type const &key){
      std::map<RinexPrn,RinexObsData::RinexObsTypeMap,std::less<RinexPrn >,std::allocator<std::pair<RinexPrn const,RinexObsData::RinexObsTypeMap > > >::iterator i = self->find(key);
      if (i != self->end())
	self->erase(i);
      else
	throw std::out_of_range("key not found");
    }
static bool std_map_Sl_RinexPrn_Sc_RinexObsData_RinexObsTypeMap_Sg__has_key(std::map<RinexPrn,RinexObsData::RinexObsTypeMap > const *self,std::map<RinexPrn,RinexObsData::RinexObsTypeMap >::key_type const &key){
      std::map<RinexPrn,RinexObsData::RinexObsTypeMap,std::less<RinexPrn >,std::allocator<std::pair<RinexPrn const,RinexObsData::RinexObsTypeMap > > >::const_iterator i = self->find(key);
      return i != self->end();
    }
static PyObject *std_map_Sl_RinexPrn_Sc_RinexObsData_RinexObsTypeMap_Sg__keys(std::map<RinexPrn,RinexObsData::RinexObsTypeMap > *self){
      std::map<RinexPrn,RinexObsData::RinexObsTypeMap,std::less<RinexPrn >,std::allocator<std::pair<RinexPrn const,RinexObsData::RinexObsTypeMap > > >::size_type size = self->size();
      int pysize = (size <= (std::map<RinexPrn,RinexObsData::RinexObsTypeMap,std::less<RinexPrn >,std::allocator<std::pair<RinexPrn const,RinexObsData::RinexObsTypeMap > > >::size_type) INT_MAX) ? (int) size : -1;
      if (pysize < 0) {
	PyErr_SetString(PyExc_OverflowError,
			"map size not valid in python");
	return NULL;
      }
      PyObject* keyList = PyList_New(pysize);
      std::map<RinexPrn,RinexObsData::RinexObsTypeMap,std::less<RinexPrn >,std::allocator<std::pair<RinexPrn const,RinexObsData::RinexObsTypeMap > > >::const_iterator i = self->begin();
      for (int j = 0; j < pysize; ++i, ++j) {
	PyList_SetItem(keyList, j, swig::from(i->first));
      }
      return keyList;
    }
static PyObject *std_map_Sl_RinexPrn_Sc_RinexObsData_RinexObsTypeMap_Sg__values(std::map<RinexPrn,RinexObsData::RinexObsTypeMap > *self){
      std::map<RinexPrn,RinexObsData::RinexObsTypeMap,std::less<RinexPrn >,std::allocator<std::pair<RinexPrn const,RinexObsData::RinexObsTypeMap > > >::size_type size = self->size();
      int pysize = (size <= (std::map<RinexPrn,RinexObsData::RinexObsTypeMap,std::less<RinexPrn >,std::allocator<std::pair<RinexPrn const,RinexObsData::RinexObsTypeMap > > >::size_type) INT_MAX) ? (int) size : -1;
      if (pysize < 0) {
	PyErr_SetString(PyExc_OverflowError,
			"map size not valid in python");
	return NULL;
      }
      PyObject* valList = PyTuple_New(pysize);
      std::map<RinexPrn,RinexObsData::RinexObsTypeMap,std::less<RinexPrn >,std::allocator<std::pair<RinexPrn const,RinexObsData::RinexObsTypeMap > > >::const_iterator i = self->begin();
      for (int j = 0; j < pysize; ++i, ++j) {
	PyTuple_SetItem(valList, j, swig::from(i->second));
      }
      return valList;
    }
static PyObject *std_map_Sl_RinexPrn_Sc_RinexObsData_RinexObsTypeMap_Sg__items(std::map<RinexPrn,RinexObsData::RinexObsTypeMap > *self){
      std::map<RinexPrn,RinexObsData::RinexObsTypeMap,std::less<RinexPrn >,std::allocator<std::pair<RinexPrn const,RinexObsData::RinexObsTypeMap > > >::size_type size = self->size();
      int pysize = (size <= (std::map<RinexPrn,RinexObsData::RinexObsTypeMap,std::less<RinexPrn >,std::allocator<std::pair<RinexPrn const,RinexObsData::RinexObsTypeMap > > >::size_type) INT_MAX) ? (int) size : -1;
      if (pysize < 0) {
	PyErr_SetString(PyExc_OverflowError,
			"map size not valid in python");
	return NULL;
      }    
      PyObject* itemList = PyTuple_New(pysize);
      std::map<RinexPrn,RinexObsData::RinexObsTypeMap,std::less<RinexPrn >,std::allocator<std::pair<RinexPrn const,RinexObsData::RinexObsTypeMap > > >::const_iterator i = self->begin();
      for (int j = 0; j < pysize; ++i, ++j) {
	PyTuple_SetItem(itemList, j, swig::from(*i));
      }
      return itemList;
    }
static bool std_map_Sl_RinexPrn_Sc_RinexObsData_RinexObsTypeMap_Sg____contains__(std::map<RinexPrn,RinexObsData::RinexObsTypeMap > *self,std::map<RinexPrn,RinexObsData::RinexObsTypeMap >::key_type const &key){
      return self->find(key) != self->end();
    }
static PyObject *std_map_Sl_RinexPrn_Sc_RinexObsData_RinexObsTypeMap_Sg____iter__(std::map<RinexPrn,RinexObsData::RinexObsTypeMap > *self){
      std::map<RinexPrn,RinexObsData::RinexObsTypeMap,std::less<RinexPrn >,std::allocator<std::pair<RinexPrn const,RinexObsData::RinexObsTypeMap > > >::size_type size = self->size();
      int pysize = (size <= (std::map<RinexPrn,RinexObsData::RinexObsTypeMap,std::less<RinexPrn >,std::allocator<std::pair<RinexPrn const,RinexObsData::RinexObsTypeMap > > >::size_type) INT_MAX) ? (int) size : -1;
      if (pysize < 0) {
	PyErr_SetString(PyExc_OverflowError,
			"map size not valid in python");
	return NULL;
      }
      PyObject* keyTuple = PyTuple_New(pysize);
      std::map<RinexPrn,RinexObsData::RinexObsTypeMap,std::less<RinexPrn >,std::allocator<std::pair<RinexPrn const,RinexObsData::RinexObsTypeMap > > >::const_iterator i = self->begin();
      for (int j = 0; j < pysize; ++i, ++j) {
	PyTuple_SetItem(keyTuple, j, swig::from(i->first));
      }
#if PY_VERSION_HEX >= 0x02020000
      PyObject* iter = PyObject_GetIter(keyTuple);
      Py_DECREF(keyTuple);
      return iter;
#else
      return keyTuple;
#endif
    }

  namespace swig {
    template <>  struct traits<RinexPrn > {
      typedef pointer_category category;
      static const char* type_name() { return"RinexPrn"; }
    };
  }


      namespace swig {
	template <>  struct traits<std::pair<RinexPrn,int > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::pair<" "RinexPrn" "," "int" " >";
	  }
	};
      }
    

      namespace swig {
	template <>  struct traits<std::map<RinexPrn, int, std::less<RinexPrn >, std::allocator<std::pair<RinexPrn const,int > > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::map<" "RinexPrn" "," "int" "," "std::less<RinexPrn >" "," "std::allocator<std::pair<RinexPrn const,int > >" " >";
	  }
	};
      }
    
static bool std_map_Sl_RinexPrn_Sc_int_Sg____nonzero__(std::map<RinexPrn,int > const *self){
      return !(self->empty());
    }
static std::map<RinexPrn,int >::size_type std_map_Sl_RinexPrn_Sc_int_Sg____len__(std::map<RinexPrn,int > const *self){
      return self->size();
    }
static std::map<RinexPrn,int >::mapped_type std_map_Sl_RinexPrn_Sc_int_Sg____getitem__(std::map<RinexPrn,int > const *self,std::map<RinexPrn,int >::key_type const &key){
      std::map<RinexPrn,int,std::less<RinexPrn >,std::allocator<std::pair<RinexPrn const,int > > >::const_iterator i = self->find(key);
      if (i != self->end())
	return i->second;
      else
	throw std::out_of_range("key not found");
    }
static void std_map_Sl_RinexPrn_Sc_int_Sg____setitem__(std::map<RinexPrn,int > *self,std::map<RinexPrn,int >::key_type const &key,std::map<RinexPrn,int >::mapped_type const &x){
      self->insert(std::map<RinexPrn,int,std::less<RinexPrn >,std::allocator<std::pair<RinexPrn const,int > > >::value_type(key,x));
    }
static void std_map_Sl_RinexPrn_Sc_int_Sg____delitem__(std::map<RinexPrn,int > *self,std::map<RinexPrn,int >::key_type const &key){
      std::map<RinexPrn,int,std::less<RinexPrn >,std::allocator<std::pair<RinexPrn const,int > > >::iterator i = self->find(key);
      if (i != self->end())
	self->erase(i);
      else
	throw std::out_of_range("key not found");
    }
static bool std_map_Sl_RinexPrn_Sc_int_Sg__has_key(std::map<RinexPrn,int > const *self,std::map<RinexPrn,int >::key_type const &key){
      std::map<RinexPrn,int,std::less<RinexPrn >,std::allocator<std::pair<RinexPrn const,int > > >::const_iterator i = self->find(key);
      return i != self->end();
    }
static PyObject *std_map_Sl_RinexPrn_Sc_int_Sg__keys(std::map<RinexPrn,int > *self){
      std::map<RinexPrn,int,std::less<RinexPrn >,std::allocator<std::pair<RinexPrn const,int > > >::size_type size = self->size();
      int pysize = (size <= (std::map<RinexPrn,int,std::less<RinexPrn >,std::allocator<std::pair<RinexPrn const,int > > >::size_type) INT_MAX) ? (int) size : -1;
      if (pysize < 0) {
	PyErr_SetString(PyExc_OverflowError,
			"map size not valid in python");
	return NULL;
      }
      PyObject* keyList = PyList_New(pysize);
      std::map<RinexPrn,int,std::less<RinexPrn >,std::allocator<std::pair<RinexPrn const,int > > >::const_iterator i = self->begin();
      for (int j = 0; j < pysize; ++i, ++j) {
	PyList_SetItem(keyList, j, swig::from(i->first));
      }
      return keyList;
    }
static PyObject *std_map_Sl_RinexPrn_Sc_int_Sg__values(std::map<RinexPrn,int > *self){
      std::map<RinexPrn,int,std::less<RinexPrn >,std::allocator<std::pair<RinexPrn const,int > > >::size_type size = self->size();
      int pysize = (size <= (std::map<RinexPrn,int,std::less<RinexPrn >,std::allocator<std::pair<RinexPrn const,int > > >::size_type) INT_MAX) ? (int) size : -1;
      if (pysize < 0) {
	PyErr_SetString(PyExc_OverflowError,
			"map size not valid in python");
	return NULL;
      }
      PyObject* valList = PyTuple_New(pysize);
      std::map<RinexPrn,int,std::less<RinexPrn >,std::allocator<std::pair<RinexPrn const,int > > >::const_iterator i = self->begin();
      for (int j = 0; j < pysize; ++i, ++j) {
	PyTuple_SetItem(valList, j, swig::from(i->second));
      }
      return valList;
    }
static PyObject *std_map_Sl_RinexPrn_Sc_int_Sg__items(std::map<RinexPrn,int > *self){
      std::map<RinexPrn,int,std::less<RinexPrn >,std::allocator<std::pair<RinexPrn const,int > > >::size_type size = self->size();
      int pysize = (size <= (std::map<RinexPrn,int,std::less<RinexPrn >,std::allocator<std::pair<RinexPrn const,int > > >::size_type) INT_MAX) ? (int) size : -1;
      if (pysize < 0) {
	PyErr_SetString(PyExc_OverflowError,
			"map size not valid in python");
	return NULL;
      }    
      PyObject* itemList = PyTuple_New(pysize);
      std::map<RinexPrn,int,std::less<RinexPrn >,std::allocator<std::pair<RinexPrn const,int > > >::const_iterator i = self->begin();
      for (int j = 0; j < pysize; ++i, ++j) {
	PyTuple_SetItem(itemList, j, swig::from(*i));
      }
      return itemList;
    }
static bool std_map_Sl_RinexPrn_Sc_int_Sg____contains__(std::map<RinexPrn,int > *self,std::map<RinexPrn,int >::key_type const &key){
      return self->find(key) != self->end();
    }
static PyObject *std_map_Sl_RinexPrn_Sc_int_Sg____iter__(std::map<RinexPrn,int > *self){
      std::map<RinexPrn,int,std::less<RinexPrn >,std::allocator<std::pair<RinexPrn const,int > > >::size_type size = self->size();
      int pysize = (size <= (std::map<RinexPrn,int,std::less<RinexPrn >,std::allocator<std::pair<RinexPrn const,int > > >::size_type) INT_MAX) ? (int) size : -1;
      if (pysize < 0) {
	PyErr_SetString(PyExc_OverflowError,
			"map size not valid in python");
	return NULL;
      }
      PyObject* keyTuple = PyTuple_New(pysize);
      std::map<RinexPrn,int,std::less<RinexPrn >,std::allocator<std::pair<RinexPrn const,int > > >::const_iterator i = self->begin();
      for (int j = 0; j < pysize; ++i, ++j) {
	PyTuple_SetItem(keyTuple, j, swig::from(i->first));
      }
#if PY_VERSION_HEX >= 0x02020000
      PyObject* iter = PyObject_GetIter(keyTuple);
      Py_DECREF(keyTuple);
      return iter;
#else
      return keyTuple;
#endif
    }

  /*@/usr/local/share/swig/1.3.25/python/pymacros.swg,66,SWIG_define@*/
#define SWIG_From_unsigned_SS_char PyInt_FromLong
/*@@*/

#ifdef __cplusplus
extern "C" {
#endif
static PyObject *_wrap_new_vectori__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<int > *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_vectori")) goto fail;
    result = (std::vector<int > *)new std::vector<int >();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__vectorTint_std__allocatorTint_t_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_vectori__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<int > *arg1 = 0 ;
    std::vector<int > *result;
    int res1 = 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_vectori",&obj0)) goto fail;
    {
        std::vector<int,std::allocator<int > > *ptr = (std::vector<int,std::allocator<int > > *)0;
        res1 = swig::asptr(obj0, &ptr);
        if (!res1) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::vector<int >", obj0);
        } else if (!ptr) {
            SWIG_null_ref("std::vector<int >");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = ptr;
    }
    result = (std::vector<int > *)new std::vector<int >((std::vector<int > const &)*arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__vectorTint_std__allocatorTint_t_t, 1);
    if (res1 == SWIG_NEWOBJ) delete arg1;
    return resultobj;
    fail:
    if (res1 == SWIG_NEWOBJ) delete arg1;
    return NULL;
}


static PyObject *_wrap_vectori_empty(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<int > *arg1 = (std::vector<int > *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:vectori_empty",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTint_std__allocatorTint_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)((std::vector<int > const *)arg1)->empty();
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vectori_size(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<int > *arg1 = (std::vector<int > *) 0 ;
    std::vector<int >::size_type result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:vectori_size",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTint_std__allocatorTint_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = ((std::vector<int > const *)arg1)->size();
    
    {
        resultobj = SWIG_From_unsigned_SS_long((unsigned long)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vectori_clear(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<int > *arg1 = (std::vector<int > *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:vectori_clear",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTint_std__allocatorTint_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    (arg1)->clear();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vectori_swap(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<int > *arg1 = (std::vector<int > *) 0 ;
    std::vector<int > *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:vectori_swap",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTint_std__allocatorTint_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__vectorTint_std__allocatorTint_t_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("std::vector<int >");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    (arg1)->swap(*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vectori_get_allocator(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<int > *arg1 = (std::vector<int > *) 0 ;
    SwigValueWrapper<std::allocator<int > > result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:vectori_get_allocator",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTint_std__allocatorTint_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = ((std::vector<int > const *)arg1)->get_allocator();
    
    {
        std::vector<int >::allocator_type * resultptr;
        resultptr = new std::vector<int >::allocator_type((std::vector<int >::allocator_type &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_std__vectorTint_std__allocatorTint_t_t__allocator_type, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_vectori__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<int >::size_type arg1 ;
    std::vector<int > *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_vectori",&obj0)) goto fail;
    {
        arg1 = (std::vector<int >::size_type)(SWIG_As_unsigned_SS_long(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    result = (std::vector<int > *)new std::vector<int >(arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__vectorTint_std__allocatorTint_t_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vectori_pop_back(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<int > *arg1 = (std::vector<int > *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:vectori_pop_back",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTint_std__allocatorTint_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    (arg1)->pop_back();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vectori_resize__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<int > *arg1 = (std::vector<int > *) 0 ;
    std::vector<int >::size_type arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:vectori_resize",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTint_std__allocatorTint_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (std::vector<int >::size_type)(SWIG_As_unsigned_SS_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    (arg1)->resize(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_vectori__SWIG_3(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<int >::size_type arg1 ;
    std::vector<int >::value_type *arg2 = 0 ;
    std::vector<int > *result;
    std::vector<int >::value_type temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:new_vectori",&obj0,&obj1)) goto fail;
    {
        arg1 = (std::vector<int >::size_type)(SWIG_As_unsigned_SS_long(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        temp2 = (std::vector<int >::value_type)(SWIG_As_int(obj1));
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = &temp2;
    }
    result = (std::vector<int > *)new std::vector<int >(arg1,(int const &)*arg2);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__vectorTint_std__allocatorTint_t_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_vectori(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_new_vectori__SWIG_0(self,args);
    }
    if (argc == 1) {
        int _v;
        _v = SWIG_Check_unsigned_SS_long(argv[0]);
        if (_v) {
            return _wrap_new_vectori__SWIG_2(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        _v = swig::asptr(argv[0], (std::vector<int,std::allocator<int > >**)(0));
        if (_v) {
            return _wrap_new_vectori__SWIG_1(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        _v = SWIG_Check_unsigned_SS_long(argv[0]);
        if (_v) {
            _v = SWIG_Check_int(argv[1]);
            if (_v) {
                return _wrap_new_vectori__SWIG_3(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'new_vectori'");
    return NULL;
}


static PyObject *_wrap_vectori_push_back(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<int > *arg1 = (std::vector<int > *) 0 ;
    std::vector<int >::value_type *arg2 = 0 ;
    std::vector<int >::value_type temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:vectori_push_back",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTint_std__allocatorTint_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        temp2 = (std::vector<int >::value_type)(SWIG_As_int(obj1));
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = &temp2;
    }
    (arg1)->push_back((int const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vectori_front(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<int > *arg1 = (std::vector<int > *) 0 ;
    std::vector<int >::value_type *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:vectori_front",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTint_std__allocatorTint_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        std::vector<int >::value_type const &_result_ref = ((std::vector<int > const *)arg1)->front();
        result = (std::vector<int >::value_type *) &_result_ref;
    }
    
    {
        resultobj = SWIG_From_int((int)(*result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vectori_back(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<int > *arg1 = (std::vector<int > *) 0 ;
    std::vector<int >::value_type *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:vectori_back",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTint_std__allocatorTint_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        std::vector<int >::value_type const &_result_ref = ((std::vector<int > const *)arg1)->back();
        result = (std::vector<int >::value_type *) &_result_ref;
    }
    
    {
        resultobj = SWIG_From_int((int)(*result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vectori_assign(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<int > *arg1 = (std::vector<int > *) 0 ;
    std::vector<int >::size_type arg2 ;
    std::vector<int >::value_type *arg3 = 0 ;
    std::vector<int >::value_type temp3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:vectori_assign",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTint_std__allocatorTint_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (std::vector<int >::size_type)(SWIG_As_unsigned_SS_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        temp3 = (std::vector<int >::value_type)(SWIG_As_int(obj2));
        if (SWIG_arg_fail(3)) SWIG_fail;
        arg3 = &temp3;
    }
    (arg1)->assign(arg2,(int const &)*arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vectori_resize__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<int > *arg1 = (std::vector<int > *) 0 ;
    std::vector<int >::size_type arg2 ;
    std::vector<int >::value_type *arg3 = 0 ;
    std::vector<int >::value_type temp3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:vectori_resize",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTint_std__allocatorTint_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (std::vector<int >::size_type)(SWIG_As_unsigned_SS_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        temp3 = (std::vector<int >::value_type)(SWIG_As_int(obj2));
        if (SWIG_arg_fail(3)) SWIG_fail;
        arg3 = &temp3;
    }
    (arg1)->resize(arg2,(int const &)*arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vectori_resize(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[4];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_std__vectorTint_std__allocatorTint_t_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_unsigned_SS_long(argv[1]);
            if (_v) {
                return _wrap_vectori_resize__SWIG_0(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_std__vectorTint_std__allocatorTint_t_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_unsigned_SS_long(argv[1]);
            if (_v) {
                _v = SWIG_Check_int(argv[2]);
                if (_v) {
                    return _wrap_vectori_resize__SWIG_1(self,args);
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'vectori_resize'");
    return NULL;
}


static PyObject *_wrap_vectori_reserve(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<int > *arg1 = (std::vector<int > *) 0 ;
    std::vector<int >::size_type arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:vectori_reserve",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTint_std__allocatorTint_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (std::vector<int >::size_type)(SWIG_As_unsigned_SS_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    (arg1)->reserve(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vectori_capacity(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<int > *arg1 = (std::vector<int > *) 0 ;
    std::vector<int >::size_type result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:vectori_capacity",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTint_std__allocatorTint_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = ((std::vector<int > const *)arg1)->capacity();
    
    {
        resultobj = SWIG_From_unsigned_SS_long((unsigned long)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vectori___nonzero__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<int > *arg1 = (std::vector<int > *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:vectori___nonzero__",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTint_std__allocatorTint_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)std_vector_Sl_int_Sg____nonzero__((std::vector<int > const *)arg1);
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vectori___len__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<int > *arg1 = (std::vector<int > *) 0 ;
    std::vector<int >::size_type result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:vectori___len__",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTint_std__allocatorTint_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = std_vector_Sl_int_Sg____len__((std::vector<int > const *)arg1);
    
    {
        resultobj = SWIG_From_unsigned_SS_long((unsigned long)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vectori_pop(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<int > *arg1 = (std::vector<int > *) 0 ;
    std::vector<int >::value_type result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:vectori_pop",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTint_std__allocatorTint_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            result = (std::vector<int >::value_type)std_vector_Sl_int_Sg__pop(arg1);
        }
        catch (std::out_of_range& e) {
            if (!PyErr_Occurred()) {
                SWIG_exception(SWIG_IndexError,const_cast<char*>(e.what()));
            } else {
                SWIG_fail;
            }
        }
        /*@/usr/local/share/swig/1.3.25/exception.i,341,SWIG_CATCH_UNKNOWN@*/  catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "unknown exception");
        }
        /*@@*/
    }
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vectori___getslice__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<int > *arg1 = (std::vector<int > *) 0 ;
    std::vector<int >::difference_type arg2 ;
    std::vector<int >::difference_type arg3 ;
    std::vector<int,std::allocator<int > > *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:vectori___getslice__",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTint_std__allocatorTint_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (std::vector<int >::difference_type)(SWIG_As_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (std::vector<int >::difference_type)(SWIG_As_long(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        try {
            result = (std::vector<int,std::allocator<int > > *)std_vector_Sl_int_Sg____getslice__(arg1,arg2,arg3);
        }
        catch (std::out_of_range& e) {
            if (!PyErr_Occurred()) {
                SWIG_exception(SWIG_IndexError,const_cast<char*>(e.what()));
            } else {
                SWIG_fail;
            }
        }
        /*@/usr/local/share/swig/1.3.25/exception.i,341,SWIG_CATCH_UNKNOWN@*/  catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "unknown exception");
        }
        /*@@*/
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__vectorTint_std__allocatorTint_t_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vectori___setslice__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<int > *arg1 = (std::vector<int > *) 0 ;
    std::vector<int >::difference_type arg2 ;
    std::vector<int >::difference_type arg3 ;
    std::vector<int,std::allocator<int > > *arg4 = 0 ;
    int res4 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:vectori___setslice__",&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTint_std__allocatorTint_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (std::vector<int >::difference_type)(SWIG_As_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (std::vector<int >::difference_type)(SWIG_As_long(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        std::vector<int,std::allocator<int > > *ptr = (std::vector<int,std::allocator<int > > *)0;
        res4 = swig::asptr(obj3, &ptr);
        if (!res4) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::vector<int,std::allocator<int > >", obj3);
        } else if (!ptr) {
            SWIG_null_ref("std::vector<int,std::allocator<int > >");
        }
        if (SWIG_arg_fail(4)) SWIG_fail;
        arg4 = ptr;
    }
    {
        try {
            std_vector_Sl_int_Sg____setslice__(arg1,arg2,arg3,(std::vector<int,std::allocator<int > > const &)*arg4);
        }
        catch (std::out_of_range& e) {
            if (!PyErr_Occurred()) {
                SWIG_exception(SWIG_IndexError,const_cast<char*>(e.what()));
            } else {
                SWIG_fail;
            }
        }
        catch (std::invalid_argument& e) {
            if (!PyErr_Occurred()) {
                SWIG_exception(SWIG_TypeError,const_cast<char*>(e.what()));
            } else {
                SWIG_fail;
            }      
        }
        /*@/usr/local/share/swig/1.3.25/exception.i,341,SWIG_CATCH_UNKNOWN@*/  catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "unknown exception");
        }
        /*@@*/
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    if (res4 == SWIG_NEWOBJ) delete arg4;
    return resultobj;
    fail:
    if (res4 == SWIG_NEWOBJ) delete arg4;
    return NULL;
}


static PyObject *_wrap_vectori___delslice__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<int > *arg1 = (std::vector<int > *) 0 ;
    std::vector<int >::difference_type arg2 ;
    std::vector<int >::difference_type arg3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:vectori___delslice__",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTint_std__allocatorTint_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (std::vector<int >::difference_type)(SWIG_As_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (std::vector<int >::difference_type)(SWIG_As_long(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        try {
            std_vector_Sl_int_Sg____delslice__(arg1,arg2,arg3);
        }
        catch (std::out_of_range& e) {
            if (!PyErr_Occurred()) {
                SWIG_exception(SWIG_IndexError,const_cast<char*>(e.what()));
            } else {
                SWIG_fail;
            }
        }
        /*@/usr/local/share/swig/1.3.25/exception.i,341,SWIG_CATCH_UNKNOWN@*/  catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "unknown exception");
        }
        /*@@*/
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vectori___delitem__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<int > *arg1 = (std::vector<int > *) 0 ;
    std::vector<int >::difference_type arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:vectori___delitem__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTint_std__allocatorTint_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (std::vector<int >::difference_type)(SWIG_As_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        try {
            std_vector_Sl_int_Sg____delitem__(arg1,arg2);
        }
        catch (std::out_of_range& e) {
            if (!PyErr_Occurred()) {
                SWIG_exception(SWIG_IndexError,const_cast<char*>(e.what()));
            } else {
                SWIG_fail;
            }
        }
        /*@/usr/local/share/swig/1.3.25/exception.i,341,SWIG_CATCH_UNKNOWN@*/  catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "unknown exception");
        }
        /*@@*/
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vectori___getitem__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<int > *arg1 = (std::vector<int > *) 0 ;
    std::vector<int >::difference_type arg2 ;
    std::vector<int >::value_type *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:vectori___getitem__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTint_std__allocatorTint_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (std::vector<int >::difference_type)(SWIG_As_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        try {
            {
                std::vector<int >::value_type const &_result_ref = std_vector_Sl_int_Sg____getitem__((std::vector<int > const *)arg1,arg2);
                result = (std::vector<int >::value_type *) &_result_ref;
            }
        }
        catch (std::out_of_range& e) {
            if (!PyErr_Occurred()) {
                SWIG_exception(SWIG_IndexError,const_cast<char*>(e.what()));
            } else {
                SWIG_fail;
            }
        }
        /*@/usr/local/share/swig/1.3.25/exception.i,341,SWIG_CATCH_UNKNOWN@*/  catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "unknown exception");
        }
        /*@@*/
    }
    {
        resultobj = SWIG_From_int((int)(*result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vectori___setitem__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<int > *arg1 = (std::vector<int > *) 0 ;
    std::vector<int >::difference_type arg2 ;
    std::vector<int >::value_type *arg3 = 0 ;
    std::vector<int >::value_type temp3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:vectori___setitem__",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTint_std__allocatorTint_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (std::vector<int >::difference_type)(SWIG_As_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        temp3 = (std::vector<int >::value_type)(SWIG_As_int(obj2));
        if (SWIG_arg_fail(3)) SWIG_fail;
        arg3 = &temp3;
    }
    {
        try {
            std_vector_Sl_int_Sg____setitem__(arg1,arg2,(int const &)*arg3);
        }
        catch (std::out_of_range& e) {
            if (!PyErr_Occurred()) {
                SWIG_exception(SWIG_IndexError,const_cast<char*>(e.what()));
            } else {
                SWIG_fail;
            }
        }
        /*@/usr/local/share/swig/1.3.25/exception.i,341,SWIG_CATCH_UNKNOWN@*/  catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "unknown exception");
        }
        /*@@*/
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vectori_append(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<int > *arg1 = (std::vector<int > *) 0 ;
    std::vector<int >::value_type *arg2 = 0 ;
    std::vector<int >::value_type temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:vectori_append",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTint_std__allocatorTint_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        temp2 = (std::vector<int >::value_type)(SWIG_As_int(obj1));
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = &temp2;
    }
    std_vector_Sl_int_Sg__append(arg1,(int const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_vectori(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<int > *arg1 = (std::vector<int > *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_vectori",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTint_std__allocatorTint_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * vectori_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_std__vectorTint_std__allocatorTint_t_t, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_vectord__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<double > *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_vectord")) goto fail;
    result = (std::vector<double > *)new std::vector<double >();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__vectorTdouble_std__allocatorTdouble_t_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_vectord__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<double > *arg1 = 0 ;
    std::vector<double > *result;
    int res1 = 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_vectord",&obj0)) goto fail;
    {
        std::vector<double,std::allocator<double > > *ptr = (std::vector<double,std::allocator<double > > *)0;
        res1 = swig::asptr(obj0, &ptr);
        if (!res1) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::vector<double >", obj0);
        } else if (!ptr) {
            SWIG_null_ref("std::vector<double >");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = ptr;
    }
    result = (std::vector<double > *)new std::vector<double >((std::vector<double > const &)*arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__vectorTdouble_std__allocatorTdouble_t_t, 1);
    if (res1 == SWIG_NEWOBJ) delete arg1;
    return resultobj;
    fail:
    if (res1 == SWIG_NEWOBJ) delete arg1;
    return NULL;
}


static PyObject *_wrap_vectord_empty(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<double > *arg1 = (std::vector<double > *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:vectord_empty",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTdouble_std__allocatorTdouble_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)((std::vector<double > const *)arg1)->empty();
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vectord_size(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<double > *arg1 = (std::vector<double > *) 0 ;
    std::vector<double >::size_type result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:vectord_size",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTdouble_std__allocatorTdouble_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = ((std::vector<double > const *)arg1)->size();
    
    {
        resultobj = SWIG_From_unsigned_SS_long((unsigned long)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vectord_clear(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<double > *arg1 = (std::vector<double > *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:vectord_clear",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTdouble_std__allocatorTdouble_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    (arg1)->clear();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vectord_swap(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<double > *arg1 = (std::vector<double > *) 0 ;
    std::vector<double > *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:vectord_swap",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTdouble_std__allocatorTdouble_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__vectorTdouble_std__allocatorTdouble_t_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("std::vector<double >");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    (arg1)->swap(*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vectord_get_allocator(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<double > *arg1 = (std::vector<double > *) 0 ;
    SwigValueWrapper<std::allocator<double > > result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:vectord_get_allocator",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTdouble_std__allocatorTdouble_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = ((std::vector<double > const *)arg1)->get_allocator();
    
    {
        std::vector<double >::allocator_type * resultptr;
        resultptr = new std::vector<double >::allocator_type((std::vector<double >::allocator_type &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_std__vectorTdouble_std__allocatorTdouble_t_t__allocator_type, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_vectord__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<double >::size_type arg1 ;
    std::vector<double > *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_vectord",&obj0)) goto fail;
    {
        arg1 = (std::vector<double >::size_type)(SWIG_As_unsigned_SS_long(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    result = (std::vector<double > *)new std::vector<double >(arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__vectorTdouble_std__allocatorTdouble_t_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vectord_pop_back(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<double > *arg1 = (std::vector<double > *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:vectord_pop_back",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTdouble_std__allocatorTdouble_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    (arg1)->pop_back();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vectord_resize__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<double > *arg1 = (std::vector<double > *) 0 ;
    std::vector<double >::size_type arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:vectord_resize",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTdouble_std__allocatorTdouble_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (std::vector<double >::size_type)(SWIG_As_unsigned_SS_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    (arg1)->resize(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_vectord__SWIG_3(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<double >::size_type arg1 ;
    std::vector<double >::value_type *arg2 = 0 ;
    std::vector<double > *result;
    std::vector<double >::value_type temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:new_vectord",&obj0,&obj1)) goto fail;
    {
        arg1 = (std::vector<double >::size_type)(SWIG_As_unsigned_SS_long(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        temp2 = (std::vector<double >::value_type)(SWIG_As_double(obj1));
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = &temp2;
    }
    result = (std::vector<double > *)new std::vector<double >(arg1,(double const &)*arg2);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__vectorTdouble_std__allocatorTdouble_t_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_vectord(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_new_vectord__SWIG_0(self,args);
    }
    if (argc == 1) {
        int _v;
        _v = SWIG_Check_unsigned_SS_long(argv[0]);
        if (_v) {
            return _wrap_new_vectord__SWIG_2(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        _v = swig::asptr(argv[0], (std::vector<double,std::allocator<double > >**)(0));
        if (_v) {
            return _wrap_new_vectord__SWIG_1(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        _v = SWIG_Check_unsigned_SS_long(argv[0]);
        if (_v) {
            _v = SWIG_Check_double(argv[1]);
            if (_v) {
                return _wrap_new_vectord__SWIG_3(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'new_vectord'");
    return NULL;
}


static PyObject *_wrap_vectord_push_back(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<double > *arg1 = (std::vector<double > *) 0 ;
    std::vector<double >::value_type *arg2 = 0 ;
    std::vector<double >::value_type temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:vectord_push_back",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTdouble_std__allocatorTdouble_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        temp2 = (std::vector<double >::value_type)(SWIG_As_double(obj1));
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = &temp2;
    }
    (arg1)->push_back((double const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vectord_front(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<double > *arg1 = (std::vector<double > *) 0 ;
    std::vector<double >::value_type *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:vectord_front",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTdouble_std__allocatorTdouble_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        std::vector<double >::value_type const &_result_ref = ((std::vector<double > const *)arg1)->front();
        result = (std::vector<double >::value_type *) &_result_ref;
    }
    
    {
        resultobj = SWIG_From_double((double)(*result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vectord_back(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<double > *arg1 = (std::vector<double > *) 0 ;
    std::vector<double >::value_type *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:vectord_back",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTdouble_std__allocatorTdouble_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        std::vector<double >::value_type const &_result_ref = ((std::vector<double > const *)arg1)->back();
        result = (std::vector<double >::value_type *) &_result_ref;
    }
    
    {
        resultobj = SWIG_From_double((double)(*result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vectord_assign(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<double > *arg1 = (std::vector<double > *) 0 ;
    std::vector<double >::size_type arg2 ;
    std::vector<double >::value_type *arg3 = 0 ;
    std::vector<double >::value_type temp3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:vectord_assign",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTdouble_std__allocatorTdouble_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (std::vector<double >::size_type)(SWIG_As_unsigned_SS_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        temp3 = (std::vector<double >::value_type)(SWIG_As_double(obj2));
        if (SWIG_arg_fail(3)) SWIG_fail;
        arg3 = &temp3;
    }
    (arg1)->assign(arg2,(double const &)*arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vectord_resize__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<double > *arg1 = (std::vector<double > *) 0 ;
    std::vector<double >::size_type arg2 ;
    std::vector<double >::value_type *arg3 = 0 ;
    std::vector<double >::value_type temp3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:vectord_resize",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTdouble_std__allocatorTdouble_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (std::vector<double >::size_type)(SWIG_As_unsigned_SS_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        temp3 = (std::vector<double >::value_type)(SWIG_As_double(obj2));
        if (SWIG_arg_fail(3)) SWIG_fail;
        arg3 = &temp3;
    }
    (arg1)->resize(arg2,(double const &)*arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vectord_resize(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[4];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_std__vectorTdouble_std__allocatorTdouble_t_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_unsigned_SS_long(argv[1]);
            if (_v) {
                return _wrap_vectord_resize__SWIG_0(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_std__vectorTdouble_std__allocatorTdouble_t_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_unsigned_SS_long(argv[1]);
            if (_v) {
                _v = SWIG_Check_double(argv[2]);
                if (_v) {
                    return _wrap_vectord_resize__SWIG_1(self,args);
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'vectord_resize'");
    return NULL;
}


static PyObject *_wrap_vectord_reserve(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<double > *arg1 = (std::vector<double > *) 0 ;
    std::vector<double >::size_type arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:vectord_reserve",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTdouble_std__allocatorTdouble_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (std::vector<double >::size_type)(SWIG_As_unsigned_SS_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    (arg1)->reserve(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vectord_capacity(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<double > *arg1 = (std::vector<double > *) 0 ;
    std::vector<double >::size_type result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:vectord_capacity",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTdouble_std__allocatorTdouble_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = ((std::vector<double > const *)arg1)->capacity();
    
    {
        resultobj = SWIG_From_unsigned_SS_long((unsigned long)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vectord___nonzero__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<double > *arg1 = (std::vector<double > *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:vectord___nonzero__",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTdouble_std__allocatorTdouble_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)std_vector_Sl_double_Sg____nonzero__((std::vector<double > const *)arg1);
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vectord___len__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<double > *arg1 = (std::vector<double > *) 0 ;
    std::vector<double >::size_type result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:vectord___len__",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTdouble_std__allocatorTdouble_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = std_vector_Sl_double_Sg____len__((std::vector<double > const *)arg1);
    
    {
        resultobj = SWIG_From_unsigned_SS_long((unsigned long)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vectord_pop(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<double > *arg1 = (std::vector<double > *) 0 ;
    std::vector<double >::value_type result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:vectord_pop",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTdouble_std__allocatorTdouble_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            result = (std::vector<double >::value_type)std_vector_Sl_double_Sg__pop(arg1);
        }
        catch (std::out_of_range& e) {
            if (!PyErr_Occurred()) {
                SWIG_exception(SWIG_IndexError,const_cast<char*>(e.what()));
            } else {
                SWIG_fail;
            }
        }
        /*@/usr/local/share/swig/1.3.25/exception.i,341,SWIG_CATCH_UNKNOWN@*/  catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "unknown exception");
        }
        /*@@*/
    }
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vectord___getslice__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<double > *arg1 = (std::vector<double > *) 0 ;
    std::vector<double >::difference_type arg2 ;
    std::vector<double >::difference_type arg3 ;
    std::vector<double,std::allocator<double > > *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:vectord___getslice__",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTdouble_std__allocatorTdouble_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (std::vector<double >::difference_type)(SWIG_As_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (std::vector<double >::difference_type)(SWIG_As_long(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        try {
            result = (std::vector<double,std::allocator<double > > *)std_vector_Sl_double_Sg____getslice__(arg1,arg2,arg3);
        }
        catch (std::out_of_range& e) {
            if (!PyErr_Occurred()) {
                SWIG_exception(SWIG_IndexError,const_cast<char*>(e.what()));
            } else {
                SWIG_fail;
            }
        }
        /*@/usr/local/share/swig/1.3.25/exception.i,341,SWIG_CATCH_UNKNOWN@*/  catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "unknown exception");
        }
        /*@@*/
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__vectorTdouble_std__allocatorTdouble_t_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vectord___setslice__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<double > *arg1 = (std::vector<double > *) 0 ;
    std::vector<double >::difference_type arg2 ;
    std::vector<double >::difference_type arg3 ;
    std::vector<double,std::allocator<double > > *arg4 = 0 ;
    int res4 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:vectord___setslice__",&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTdouble_std__allocatorTdouble_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (std::vector<double >::difference_type)(SWIG_As_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (std::vector<double >::difference_type)(SWIG_As_long(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        std::vector<double,std::allocator<double > > *ptr = (std::vector<double,std::allocator<double > > *)0;
        res4 = swig::asptr(obj3, &ptr);
        if (!res4) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::vector<double,std::allocator<double > >", obj3);
        } else if (!ptr) {
            SWIG_null_ref("std::vector<double,std::allocator<double > >");
        }
        if (SWIG_arg_fail(4)) SWIG_fail;
        arg4 = ptr;
    }
    {
        try {
            std_vector_Sl_double_Sg____setslice__(arg1,arg2,arg3,(std::vector<double,std::allocator<double > > const &)*arg4);
        }
        catch (std::out_of_range& e) {
            if (!PyErr_Occurred()) {
                SWIG_exception(SWIG_IndexError,const_cast<char*>(e.what()));
            } else {
                SWIG_fail;
            }
        }
        catch (std::invalid_argument& e) {
            if (!PyErr_Occurred()) {
                SWIG_exception(SWIG_TypeError,const_cast<char*>(e.what()));
            } else {
                SWIG_fail;
            }      
        }
        /*@/usr/local/share/swig/1.3.25/exception.i,341,SWIG_CATCH_UNKNOWN@*/  catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "unknown exception");
        }
        /*@@*/
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    if (res4 == SWIG_NEWOBJ) delete arg4;
    return resultobj;
    fail:
    if (res4 == SWIG_NEWOBJ) delete arg4;
    return NULL;
}


static PyObject *_wrap_vectord___delslice__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<double > *arg1 = (std::vector<double > *) 0 ;
    std::vector<double >::difference_type arg2 ;
    std::vector<double >::difference_type arg3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:vectord___delslice__",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTdouble_std__allocatorTdouble_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (std::vector<double >::difference_type)(SWIG_As_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (std::vector<double >::difference_type)(SWIG_As_long(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        try {
            std_vector_Sl_double_Sg____delslice__(arg1,arg2,arg3);
        }
        catch (std::out_of_range& e) {
            if (!PyErr_Occurred()) {
                SWIG_exception(SWIG_IndexError,const_cast<char*>(e.what()));
            } else {
                SWIG_fail;
            }
        }
        /*@/usr/local/share/swig/1.3.25/exception.i,341,SWIG_CATCH_UNKNOWN@*/  catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "unknown exception");
        }
        /*@@*/
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vectord___delitem__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<double > *arg1 = (std::vector<double > *) 0 ;
    std::vector<double >::difference_type arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:vectord___delitem__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTdouble_std__allocatorTdouble_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (std::vector<double >::difference_type)(SWIG_As_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        try {
            std_vector_Sl_double_Sg____delitem__(arg1,arg2);
        }
        catch (std::out_of_range& e) {
            if (!PyErr_Occurred()) {
                SWIG_exception(SWIG_IndexError,const_cast<char*>(e.what()));
            } else {
                SWIG_fail;
            }
        }
        /*@/usr/local/share/swig/1.3.25/exception.i,341,SWIG_CATCH_UNKNOWN@*/  catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "unknown exception");
        }
        /*@@*/
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vectord___getitem__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<double > *arg1 = (std::vector<double > *) 0 ;
    std::vector<double >::difference_type arg2 ;
    std::vector<double >::value_type *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:vectord___getitem__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTdouble_std__allocatorTdouble_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (std::vector<double >::difference_type)(SWIG_As_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        try {
            {
                std::vector<double >::value_type const &_result_ref = std_vector_Sl_double_Sg____getitem__((std::vector<double > const *)arg1,arg2);
                result = (std::vector<double >::value_type *) &_result_ref;
            }
        }
        catch (std::out_of_range& e) {
            if (!PyErr_Occurred()) {
                SWIG_exception(SWIG_IndexError,const_cast<char*>(e.what()));
            } else {
                SWIG_fail;
            }
        }
        /*@/usr/local/share/swig/1.3.25/exception.i,341,SWIG_CATCH_UNKNOWN@*/  catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "unknown exception");
        }
        /*@@*/
    }
    {
        resultobj = SWIG_From_double((double)(*result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vectord___setitem__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<double > *arg1 = (std::vector<double > *) 0 ;
    std::vector<double >::difference_type arg2 ;
    std::vector<double >::value_type *arg3 = 0 ;
    std::vector<double >::value_type temp3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:vectord___setitem__",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTdouble_std__allocatorTdouble_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (std::vector<double >::difference_type)(SWIG_As_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        temp3 = (std::vector<double >::value_type)(SWIG_As_double(obj2));
        if (SWIG_arg_fail(3)) SWIG_fail;
        arg3 = &temp3;
    }
    {
        try {
            std_vector_Sl_double_Sg____setitem__(arg1,arg2,(double const &)*arg3);
        }
        catch (std::out_of_range& e) {
            if (!PyErr_Occurred()) {
                SWIG_exception(SWIG_IndexError,const_cast<char*>(e.what()));
            } else {
                SWIG_fail;
            }
        }
        /*@/usr/local/share/swig/1.3.25/exception.i,341,SWIG_CATCH_UNKNOWN@*/  catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "unknown exception");
        }
        /*@@*/
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vectord_append(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<double > *arg1 = (std::vector<double > *) 0 ;
    std::vector<double >::value_type *arg2 = 0 ;
    std::vector<double >::value_type temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:vectord_append",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTdouble_std__allocatorTdouble_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        temp2 = (std::vector<double >::value_type)(SWIG_As_double(obj1));
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = &temp2;
    }
    std_vector_Sl_double_Sg__append(arg1,(double const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_vectord(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<double > *arg1 = (std::vector<double > *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_vectord",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTdouble_std__allocatorTdouble_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * vectord_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_std__vectorTdouble_std__allocatorTdouble_t_t, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_delete_exception(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::exception *arg1 = (std::exception *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_exception",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__exception, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_exception_what(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::exception *arg1 = (std::exception *) 0 ;
    char *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:exception_what",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__exception, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (char *)((std::exception const *)arg1)->what();
    
    resultobj = SWIG_FromCharPtr(result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_exception(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::exception *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_exception")) goto fail;
    result = (std::exception *)new std::exception();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__exception, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject * exception_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_std__exception, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_bad_exception(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::bad_exception *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_bad_exception")) goto fail;
    result = (std::bad_exception *)new std::bad_exception();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__bad_exception, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_bad_exception(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::bad_exception *arg1 = (std::bad_exception *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_bad_exception",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__bad_exception, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * bad_exception_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_std__bad_exception, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_logic_error(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::string *arg1 = 0 ;
    std::logic_error *result;
    int res1 = 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_logic_error",&obj0)) goto fail;
    {
        std::string *ptr = (std::string *)0;
        res1 = SWIG_AsPtr_std_string(obj0, &ptr);
        if (!res1) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj0);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = ptr;
    }
    result = (std::logic_error *)new std::logic_error((std::string const &)*arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__logic_error, 1);
    if (res1 == SWIG_NEWOBJ) delete arg1;
    return resultobj;
    fail:
    if (res1 == SWIG_NEWOBJ) delete arg1;
    return NULL;
}


static PyObject *_wrap_delete_logic_error(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::logic_error *arg1 = (std::logic_error *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_logic_error",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__logic_error, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * logic_error_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_std__logic_error, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_domain_error(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::string *arg1 = 0 ;
    std::domain_error *result;
    int res1 = 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_domain_error",&obj0)) goto fail;
    {
        std::string *ptr = (std::string *)0;
        res1 = SWIG_AsPtr_std_string(obj0, &ptr);
        if (!res1) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj0);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = ptr;
    }
    result = (std::domain_error *)new std::domain_error((std::string const &)*arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__domain_error, 1);
    if (res1 == SWIG_NEWOBJ) delete arg1;
    return resultobj;
    fail:
    if (res1 == SWIG_NEWOBJ) delete arg1;
    return NULL;
}


static PyObject *_wrap_delete_domain_error(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::domain_error *arg1 = (std::domain_error *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_domain_error",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__domain_error, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * domain_error_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_std__domain_error, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_invalid_argument(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::string *arg1 = 0 ;
    std::invalid_argument *result;
    int res1 = 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_invalid_argument",&obj0)) goto fail;
    {
        std::string *ptr = (std::string *)0;
        res1 = SWIG_AsPtr_std_string(obj0, &ptr);
        if (!res1) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj0);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = ptr;
    }
    result = (std::invalid_argument *)new std::invalid_argument((std::string const &)*arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__invalid_argument, 1);
    if (res1 == SWIG_NEWOBJ) delete arg1;
    return resultobj;
    fail:
    if (res1 == SWIG_NEWOBJ) delete arg1;
    return NULL;
}


static PyObject *_wrap_delete_invalid_argument(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::invalid_argument *arg1 = (std::invalid_argument *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_invalid_argument",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__invalid_argument, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * invalid_argument_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_std__invalid_argument, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_length_error(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::string *arg1 = 0 ;
    std::length_error *result;
    int res1 = 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_length_error",&obj0)) goto fail;
    {
        std::string *ptr = (std::string *)0;
        res1 = SWIG_AsPtr_std_string(obj0, &ptr);
        if (!res1) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj0);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = ptr;
    }
    result = (std::length_error *)new std::length_error((std::string const &)*arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__length_error, 1);
    if (res1 == SWIG_NEWOBJ) delete arg1;
    return resultobj;
    fail:
    if (res1 == SWIG_NEWOBJ) delete arg1;
    return NULL;
}


static PyObject *_wrap_delete_length_error(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::length_error *arg1 = (std::length_error *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_length_error",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__length_error, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * length_error_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_std__length_error, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_out_of_range(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::string *arg1 = 0 ;
    std::out_of_range *result;
    int res1 = 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_out_of_range",&obj0)) goto fail;
    {
        std::string *ptr = (std::string *)0;
        res1 = SWIG_AsPtr_std_string(obj0, &ptr);
        if (!res1) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj0);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = ptr;
    }
    result = (std::out_of_range *)new std::out_of_range((std::string const &)*arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__out_of_range, 1);
    if (res1 == SWIG_NEWOBJ) delete arg1;
    return resultobj;
    fail:
    if (res1 == SWIG_NEWOBJ) delete arg1;
    return NULL;
}


static PyObject *_wrap_delete_out_of_range(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::out_of_range *arg1 = (std::out_of_range *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_out_of_range",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__out_of_range, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * out_of_range_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_std__out_of_range, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_runtime_error(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::string *arg1 = 0 ;
    std::runtime_error *result;
    int res1 = 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_runtime_error",&obj0)) goto fail;
    {
        std::string *ptr = (std::string *)0;
        res1 = SWIG_AsPtr_std_string(obj0, &ptr);
        if (!res1) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj0);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = ptr;
    }
    result = (std::runtime_error *)new std::runtime_error((std::string const &)*arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__runtime_error, 1);
    if (res1 == SWIG_NEWOBJ) delete arg1;
    return resultobj;
    fail:
    if (res1 == SWIG_NEWOBJ) delete arg1;
    return NULL;
}


static PyObject *_wrap_delete_runtime_error(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::runtime_error *arg1 = (std::runtime_error *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_runtime_error",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__runtime_error, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * runtime_error_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_std__runtime_error, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_range_error(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::string *arg1 = 0 ;
    std::range_error *result;
    int res1 = 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_range_error",&obj0)) goto fail;
    {
        std::string *ptr = (std::string *)0;
        res1 = SWIG_AsPtr_std_string(obj0, &ptr);
        if (!res1) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj0);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = ptr;
    }
    result = (std::range_error *)new std::range_error((std::string const &)*arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__range_error, 1);
    if (res1 == SWIG_NEWOBJ) delete arg1;
    return resultobj;
    fail:
    if (res1 == SWIG_NEWOBJ) delete arg1;
    return NULL;
}


static PyObject *_wrap_delete_range_error(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::range_error *arg1 = (std::range_error *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_range_error",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__range_error, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * range_error_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_std__range_error, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_overflow_error(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::string *arg1 = 0 ;
    std::overflow_error *result;
    int res1 = 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_overflow_error",&obj0)) goto fail;
    {
        std::string *ptr = (std::string *)0;
        res1 = SWIG_AsPtr_std_string(obj0, &ptr);
        if (!res1) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj0);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = ptr;
    }
    result = (std::overflow_error *)new std::overflow_error((std::string const &)*arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__overflow_error, 1);
    if (res1 == SWIG_NEWOBJ) delete arg1;
    return resultobj;
    fail:
    if (res1 == SWIG_NEWOBJ) delete arg1;
    return NULL;
}


static PyObject *_wrap_delete_overflow_error(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::overflow_error *arg1 = (std::overflow_error *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_overflow_error",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__overflow_error, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * overflow_error_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_std__overflow_error, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_underflow_error(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::string *arg1 = 0 ;
    std::underflow_error *result;
    int res1 = 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_underflow_error",&obj0)) goto fail;
    {
        std::string *ptr = (std::string *)0;
        res1 = SWIG_AsPtr_std_string(obj0, &ptr);
        if (!res1) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj0);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = ptr;
    }
    result = (std::underflow_error *)new std::underflow_error((std::string const &)*arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__underflow_error, 1);
    if (res1 == SWIG_NEWOBJ) delete arg1;
    return resultobj;
    fail:
    if (res1 == SWIG_NEWOBJ) delete arg1;
    return NULL;
}


static PyObject *_wrap_delete_underflow_error(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::underflow_error *arg1 = (std::underflow_error *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_underflow_error",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__underflow_error, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * underflow_error_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_std__underflow_error, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static int _wrap_ios_base_boolalpha_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable ios_base_boolalpha is read-only.");
    return 1;
}


static PyObject *_wrap_ios_base_boolalpha_get(void) {
    PyObject *pyobj = NULL;
    
    {
        pyobj = SWIG_From_int((std::ios_base::fmtflags)(std::ios_base::boolalpha)); 
    }
    return pyobj;
}


static int _wrap_ios_base_dec_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable ios_base_dec is read-only.");
    return 1;
}


static PyObject *_wrap_ios_base_dec_get(void) {
    PyObject *pyobj = NULL;
    
    {
        pyobj = SWIG_From_int((std::ios_base::fmtflags)(std::ios_base::dec)); 
    }
    return pyobj;
}


static int _wrap_ios_base_fixed_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable ios_base_fixed is read-only.");
    return 1;
}


static PyObject *_wrap_ios_base_fixed_get(void) {
    PyObject *pyobj = NULL;
    
    {
        pyobj = SWIG_From_int((std::ios_base::fmtflags)(std::ios_base::fixed)); 
    }
    return pyobj;
}


static int _wrap_ios_base_hex_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable ios_base_hex is read-only.");
    return 1;
}


static PyObject *_wrap_ios_base_hex_get(void) {
    PyObject *pyobj = NULL;
    
    {
        pyobj = SWIG_From_int((std::ios_base::fmtflags)(std::ios_base::hex)); 
    }
    return pyobj;
}


static int _wrap_ios_base_internal_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable ios_base_internal is read-only.");
    return 1;
}


static PyObject *_wrap_ios_base_internal_get(void) {
    PyObject *pyobj = NULL;
    
    {
        pyobj = SWIG_From_int((std::ios_base::fmtflags)(std::ios_base::internal)); 
    }
    return pyobj;
}


static int _wrap_ios_base_left_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable ios_base_left is read-only.");
    return 1;
}


static PyObject *_wrap_ios_base_left_get(void) {
    PyObject *pyobj = NULL;
    
    {
        pyobj = SWIG_From_int((std::ios_base::fmtflags)(std::ios_base::left)); 
    }
    return pyobj;
}


static int _wrap_ios_base_oct_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable ios_base_oct is read-only.");
    return 1;
}


static PyObject *_wrap_ios_base_oct_get(void) {
    PyObject *pyobj = NULL;
    
    {
        pyobj = SWIG_From_int((std::ios_base::fmtflags)(std::ios_base::oct)); 
    }
    return pyobj;
}


static int _wrap_ios_base_right_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable ios_base_right is read-only.");
    return 1;
}


static PyObject *_wrap_ios_base_right_get(void) {
    PyObject *pyobj = NULL;
    
    {
        pyobj = SWIG_From_int((std::ios_base::fmtflags)(std::ios_base::right)); 
    }
    return pyobj;
}


static int _wrap_ios_base_scientific_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable ios_base_scientific is read-only.");
    return 1;
}


static PyObject *_wrap_ios_base_scientific_get(void) {
    PyObject *pyobj = NULL;
    
    {
        pyobj = SWIG_From_int((std::ios_base::fmtflags)(std::ios_base::scientific)); 
    }
    return pyobj;
}


static int _wrap_ios_base_showbase_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable ios_base_showbase is read-only.");
    return 1;
}


static PyObject *_wrap_ios_base_showbase_get(void) {
    PyObject *pyobj = NULL;
    
    {
        pyobj = SWIG_From_int((std::ios_base::fmtflags)(std::ios_base::showbase)); 
    }
    return pyobj;
}


static int _wrap_ios_base_showpoint_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable ios_base_showpoint is read-only.");
    return 1;
}


static PyObject *_wrap_ios_base_showpoint_get(void) {
    PyObject *pyobj = NULL;
    
    {
        pyobj = SWIG_From_int((std::ios_base::fmtflags)(std::ios_base::showpoint)); 
    }
    return pyobj;
}


static int _wrap_ios_base_showpos_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable ios_base_showpos is read-only.");
    return 1;
}


static PyObject *_wrap_ios_base_showpos_get(void) {
    PyObject *pyobj = NULL;
    
    {
        pyobj = SWIG_From_int((std::ios_base::fmtflags)(std::ios_base::showpos)); 
    }
    return pyobj;
}


static int _wrap_ios_base_skipws_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable ios_base_skipws is read-only.");
    return 1;
}


static PyObject *_wrap_ios_base_skipws_get(void) {
    PyObject *pyobj = NULL;
    
    {
        pyobj = SWIG_From_int((std::ios_base::fmtflags)(std::ios_base::skipws)); 
    }
    return pyobj;
}


static int _wrap_ios_base_unitbuf_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable ios_base_unitbuf is read-only.");
    return 1;
}


static PyObject *_wrap_ios_base_unitbuf_get(void) {
    PyObject *pyobj = NULL;
    
    {
        pyobj = SWIG_From_int((std::ios_base::fmtflags)(std::ios_base::unitbuf)); 
    }
    return pyobj;
}


static int _wrap_ios_base_uppercase_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable ios_base_uppercase is read-only.");
    return 1;
}


static PyObject *_wrap_ios_base_uppercase_get(void) {
    PyObject *pyobj = NULL;
    
    {
        pyobj = SWIG_From_int((std::ios_base::fmtflags)(std::ios_base::uppercase)); 
    }
    return pyobj;
}


static int _wrap_ios_base_adjustfield_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable ios_base_adjustfield is read-only.");
    return 1;
}


static PyObject *_wrap_ios_base_adjustfield_get(void) {
    PyObject *pyobj = NULL;
    
    {
        pyobj = SWIG_From_int((std::ios_base::fmtflags)(std::ios_base::adjustfield)); 
    }
    return pyobj;
}


static int _wrap_ios_base_basefield_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable ios_base_basefield is read-only.");
    return 1;
}


static PyObject *_wrap_ios_base_basefield_get(void) {
    PyObject *pyobj = NULL;
    
    {
        pyobj = SWIG_From_int((std::ios_base::fmtflags)(std::ios_base::basefield)); 
    }
    return pyobj;
}


static int _wrap_ios_base_floatfield_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable ios_base_floatfield is read-only.");
    return 1;
}


static PyObject *_wrap_ios_base_floatfield_get(void) {
    PyObject *pyobj = NULL;
    
    {
        pyobj = SWIG_From_int((std::ios_base::fmtflags)(std::ios_base::floatfield)); 
    }
    return pyobj;
}


static int _wrap_ios_base_badbit_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable ios_base_badbit is read-only.");
    return 1;
}


static PyObject *_wrap_ios_base_badbit_get(void) {
    PyObject *pyobj = NULL;
    
    {
        pyobj = SWIG_From_int((std::ios_base::iostate)(std::ios_base::badbit)); 
    }
    return pyobj;
}


static int _wrap_ios_base_eofbit_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable ios_base_eofbit is read-only.");
    return 1;
}


static PyObject *_wrap_ios_base_eofbit_get(void) {
    PyObject *pyobj = NULL;
    
    {
        pyobj = SWIG_From_int((std::ios_base::iostate)(std::ios_base::eofbit)); 
    }
    return pyobj;
}


static int _wrap_ios_base_failbit_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable ios_base_failbit is read-only.");
    return 1;
}


static PyObject *_wrap_ios_base_failbit_get(void) {
    PyObject *pyobj = NULL;
    
    {
        pyobj = SWIG_From_int((std::ios_base::iostate)(std::ios_base::failbit)); 
    }
    return pyobj;
}


static int _wrap_ios_base_goodbit_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable ios_base_goodbit is read-only.");
    return 1;
}


static PyObject *_wrap_ios_base_goodbit_get(void) {
    PyObject *pyobj = NULL;
    
    {
        pyobj = SWIG_From_int((std::ios_base::iostate)(std::ios_base::goodbit)); 
    }
    return pyobj;
}


static int _wrap_ios_base_app_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable ios_base_app is read-only.");
    return 1;
}


static PyObject *_wrap_ios_base_app_get(void) {
    PyObject *pyobj = NULL;
    
    {
        pyobj = SWIG_From_int((std::ios_base::openmode)(std::ios_base::app)); 
    }
    return pyobj;
}


static int _wrap_ios_base_ate_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable ios_base_ate is read-only.");
    return 1;
}


static PyObject *_wrap_ios_base_ate_get(void) {
    PyObject *pyobj = NULL;
    
    {
        pyobj = SWIG_From_int((std::ios_base::openmode)(std::ios_base::ate)); 
    }
    return pyobj;
}


static int _wrap_ios_base_binary_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable ios_base_binary is read-only.");
    return 1;
}


static PyObject *_wrap_ios_base_binary_get(void) {
    PyObject *pyobj = NULL;
    
    {
        pyobj = SWIG_From_int((std::ios_base::openmode)(std::ios_base::binary)); 
    }
    return pyobj;
}


static int _wrap_ios_base_ios_base_in_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable ios_base_ios_base_in is read-only.");
    return 1;
}


static PyObject *_wrap_ios_base_ios_base_in_get(void) {
    PyObject *pyobj = NULL;
    
    {
        pyobj = SWIG_From_int((std::ios_base::openmode)(std::ios_base::in)); 
    }
    return pyobj;
}


static int _wrap_ios_base_out_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable ios_base_out is read-only.");
    return 1;
}


static PyObject *_wrap_ios_base_out_get(void) {
    PyObject *pyobj = NULL;
    
    {
        pyobj = SWIG_From_int((std::ios_base::openmode)(std::ios_base::out)); 
    }
    return pyobj;
}


static int _wrap_ios_base_trunc_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable ios_base_trunc is read-only.");
    return 1;
}


static PyObject *_wrap_ios_base_trunc_get(void) {
    PyObject *pyobj = NULL;
    
    {
        pyobj = SWIG_From_int((std::ios_base::openmode)(std::ios_base::trunc)); 
    }
    return pyobj;
}


static int _wrap_ios_base_beg_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable ios_base_beg is read-only.");
    return 1;
}


static PyObject *_wrap_ios_base_beg_get(void) {
    PyObject *pyobj = NULL;
    
    {
        pyobj = SWIG_From_int((std::ios_base::seekdir)(std::ios_base::beg)); 
    }
    return pyobj;
}


static int _wrap_ios_base_cur_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable ios_base_cur is read-only.");
    return 1;
}


static PyObject *_wrap_ios_base_cur_get(void) {
    PyObject *pyobj = NULL;
    
    {
        pyobj = SWIG_From_int((std::ios_base::seekdir)(std::ios_base::cur)); 
    }
    return pyobj;
}


static int _wrap_ios_base_end_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable ios_base_end is read-only.");
    return 1;
}


static PyObject *_wrap_ios_base_end_get(void) {
    PyObject *pyobj = NULL;
    
    {
        pyobj = SWIG_From_int((std::ios_base::seekdir)(std::ios_base::end)); 
    }
    return pyobj;
}


static PyObject *_wrap_ios_base_register_callback(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::ios_base *arg1 = (std::ios_base *) 0 ;
    std::ios_base::event_callback arg2 = (std::ios_base::event_callback) 0 ;
    int arg3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:ios_base_register_callback",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__ios_base, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_f_enum_std__ios_base__event_r_std__ios_base_int__void, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    {
        arg3 = (int)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    (arg1)->register_callback(arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ios_base_flags__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::ios_base *arg1 = (std::ios_base *) 0 ;
    std::ios_base::fmtflags result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ios_base_flags",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__ios_base, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (std::ios_base::fmtflags)((std::ios_base const *)arg1)->flags();
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ios_base_flags__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::ios_base *arg1 = (std::ios_base *) 0 ;
    std::ios_base::fmtflags arg2 ;
    std::ios_base::fmtflags result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ios_base_flags",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__ios_base, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (std::ios_base::fmtflags)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (std::ios_base::fmtflags)(arg1)->flags(arg2);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ios_base_flags(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_std__ios_base, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_ios_base_flags__SWIG_0(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_std__ios_base, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_int(argv[1]);
            if (_v) {
                return _wrap_ios_base_flags__SWIG_1(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'ios_base_flags'");
    return NULL;
}


static PyObject *_wrap_ios_base_setf__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::ios_base *arg1 = (std::ios_base *) 0 ;
    std::ios_base::fmtflags arg2 ;
    std::ios_base::fmtflags result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ios_base_setf",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__ios_base, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (std::ios_base::fmtflags)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (std::ios_base::fmtflags)(arg1)->setf(arg2);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ios_base_setf__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::ios_base *arg1 = (std::ios_base *) 0 ;
    std::ios_base::fmtflags arg2 ;
    std::ios_base::fmtflags arg3 ;
    std::ios_base::fmtflags result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:ios_base_setf",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__ios_base, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (std::ios_base::fmtflags)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (std::ios_base::fmtflags)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    result = (std::ios_base::fmtflags)(arg1)->setf(arg2,arg3);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ios_base_setf(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[4];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_std__ios_base, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_int(argv[1]);
            if (_v) {
                return _wrap_ios_base_setf__SWIG_0(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_std__ios_base, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_int(argv[1]);
            if (_v) {
                _v = SWIG_Check_int(argv[2]);
                if (_v) {
                    return _wrap_ios_base_setf__SWIG_1(self,args);
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'ios_base_setf'");
    return NULL;
}


static PyObject *_wrap_ios_base_unsetf(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::ios_base *arg1 = (std::ios_base *) 0 ;
    std::ios_base::fmtflags arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ios_base_unsetf",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__ios_base, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (std::ios_base::fmtflags)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    (arg1)->unsetf(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ios_base_precision__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::ios_base *arg1 = (std::ios_base *) 0 ;
    std::streamsize result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ios_base_precision",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__ios_base, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = ((std::ios_base const *)arg1)->precision();
    
    {
        resultobj = SWIG_From_unsigned_SS_long((unsigned long)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ios_base_precision__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::ios_base *arg1 = (std::ios_base *) 0 ;
    std::streamsize arg2 ;
    std::streamsize result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ios_base_precision",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__ios_base, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (std::streamsize)(SWIG_As_unsigned_SS_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (arg1)->precision(arg2);
    
    {
        resultobj = SWIG_From_unsigned_SS_long((unsigned long)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ios_base_precision(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_std__ios_base, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_ios_base_precision__SWIG_0(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_std__ios_base, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_unsigned_SS_long(argv[1]);
            if (_v) {
                return _wrap_ios_base_precision__SWIG_1(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'ios_base_precision'");
    return NULL;
}


static PyObject *_wrap_ios_base_width__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::ios_base *arg1 = (std::ios_base *) 0 ;
    std::streamsize result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ios_base_width",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__ios_base, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = ((std::ios_base const *)arg1)->width();
    
    {
        resultobj = SWIG_From_unsigned_SS_long((unsigned long)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ios_base_width__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::ios_base *arg1 = (std::ios_base *) 0 ;
    std::streamsize arg2 ;
    std::streamsize result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ios_base_width",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__ios_base, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (std::streamsize)(SWIG_As_unsigned_SS_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (arg1)->width(arg2);
    
    {
        resultobj = SWIG_From_unsigned_SS_long((unsigned long)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ios_base_width(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_std__ios_base, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_ios_base_width__SWIG_0(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_std__ios_base, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_unsigned_SS_long(argv[1]);
            if (_v) {
                return _wrap_ios_base_width__SWIG_1(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'ios_base_width'");
    return NULL;
}


static PyObject *_wrap_ios_base_sync_with_stdio__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    bool arg1 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ios_base_sync_with_stdio",&obj0)) goto fail;
    {
        arg1 = (bool)(SWIG_As_bool(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    result = (bool)std::ios_base::sync_with_stdio(arg1);
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ios_base_sync_with_stdio__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    bool result;
    
    if(!PyArg_ParseTuple(args,(char *)":ios_base_sync_with_stdio")) goto fail;
    result = (bool)std::ios_base::sync_with_stdio();
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ios_base_sync_with_stdio(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[2];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 1); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_ios_base_sync_with_stdio__SWIG_1(self,args);
    }
    if (argc == 1) {
        int _v;
        _v = SWIG_Check_bool(argv[0]);
        if (_v) {
            return _wrap_ios_base_sync_with_stdio__SWIG_0(self,args);
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'ios_base_sync_with_stdio'");
    return NULL;
}


static PyObject *_wrap_ios_base_imbue(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::ios_base *arg1 = (std::ios_base *) 0 ;
    std::locale *arg2 = 0 ;
    std::locale result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ios_base_imbue",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__ios_base, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__locale, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("std::locale");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (arg1)->imbue((std::locale const &)*arg2);
    
    {
        std::locale * resultptr;
        resultptr = new std::locale((std::locale &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_std__locale, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ios_base_getloc(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::ios_base *arg1 = (std::ios_base *) 0 ;
    std::locale result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ios_base_getloc",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__ios_base, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = ((std::ios_base const *)arg1)->getloc();
    
    {
        std::locale * resultptr;
        resultptr = new std::locale((std::locale &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_std__locale, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ios_base_xalloc(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    int result;
    
    if(!PyArg_ParseTuple(args,(char *)":ios_base_xalloc")) goto fail;
    result = (int)std::ios_base::xalloc();
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ios_base_iword(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::ios_base *arg1 = (std::ios_base *) 0 ;
    int arg2 ;
    long *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ios_base_iword",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__ios_base, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        long &_result_ref = (arg1)->iword(arg2);
        result = (long *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_long, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ios_base_pword(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::ios_base *arg1 = (std::ios_base *) 0 ;
    int arg2 ;
    void **result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ios_base_pword",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__ios_base, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        void *&_result_ref = (arg1)->pword(arg2);
        result = (void **) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_p_void, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_ios_base(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::ios_base *arg1 = (std::ios_base *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_ios_base",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__ios_base, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * ios_base_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_std__ios_base, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_ios_rdstate(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::basic_ios<char > *arg1 = (std::basic_ios<char > *) 0 ;
    std::ios_base::iostate result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ios_rdstate",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__basic_iosTchar_std__char_traitsTchar_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (std::ios_base::iostate)((std::basic_ios<char > const *)arg1)->rdstate();
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ios_clear__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::basic_ios<char > *arg1 = (std::basic_ios<char > *) 0 ;
    std::ios_base::iostate arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ios_clear",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__basic_iosTchar_std__char_traitsTchar_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (std::ios_base::iostate)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    (arg1)->clear(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ios_clear__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::basic_ios<char > *arg1 = (std::basic_ios<char > *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ios_clear",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__basic_iosTchar_std__char_traitsTchar_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    (arg1)->clear();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ios_clear(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_std__basic_iosTchar_std__char_traitsTchar_t_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_ios_clear__SWIG_1(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_std__basic_iosTchar_std__char_traitsTchar_t_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_int(argv[1]);
            if (_v) {
                return _wrap_ios_clear__SWIG_0(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'ios_clear'");
    return NULL;
}


static PyObject *_wrap_ios_setstate(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::basic_ios<char > *arg1 = (std::basic_ios<char > *) 0 ;
    std::ios_base::iostate arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ios_setstate",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__basic_iosTchar_std__char_traitsTchar_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (std::ios_base::iostate)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    (arg1)->setstate(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ios_good(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::basic_ios<char > *arg1 = (std::basic_ios<char > *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ios_good",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__basic_iosTchar_std__char_traitsTchar_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)((std::basic_ios<char > const *)arg1)->good();
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ios_eof(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::basic_ios<char > *arg1 = (std::basic_ios<char > *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ios_eof",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__basic_iosTchar_std__char_traitsTchar_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)((std::basic_ios<char > const *)arg1)->eof();
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ios_fail(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::basic_ios<char > *arg1 = (std::basic_ios<char > *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ios_fail",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__basic_iosTchar_std__char_traitsTchar_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)((std::basic_ios<char > const *)arg1)->fail();
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ios_bad(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::basic_ios<char > *arg1 = (std::basic_ios<char > *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ios_bad",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__basic_iosTchar_std__char_traitsTchar_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)((std::basic_ios<char > const *)arg1)->bad();
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ios_exceptions__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::basic_ios<char > *arg1 = (std::basic_ios<char > *) 0 ;
    std::ios_base::iostate result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ios_exceptions",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__basic_iosTchar_std__char_traitsTchar_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (std::ios_base::iostate)((std::basic_ios<char > const *)arg1)->exceptions();
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ios_exceptions__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::basic_ios<char > *arg1 = (std::basic_ios<char > *) 0 ;
    std::ios_base::iostate arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ios_exceptions",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__basic_iosTchar_std__char_traitsTchar_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (std::ios_base::iostate)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    (arg1)->exceptions(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ios_exceptions(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_std__basic_iosTchar_std__char_traitsTchar_t_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_ios_exceptions__SWIG_0(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_std__basic_iosTchar_std__char_traitsTchar_t_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_int(argv[1]);
            if (_v) {
                return _wrap_ios_exceptions__SWIG_1(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'ios_exceptions'");
    return NULL;
}


static PyObject *_wrap_new_ios(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::basic_streambuf<char,std::char_traits<char > > *arg1 = (std::basic_streambuf<char,std::char_traits<char > > *) 0 ;
    std::basic_ios<char > *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_ios",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__basic_streambufTchar_std__char_traitsTchar_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (std::basic_ios<char > *)new std::basic_ios<char >(arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__basic_iosTchar_std__char_traitsTchar_t_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_ios(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::basic_ios<char > *arg1 = (std::basic_ios<char > *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_ios",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__basic_iosTchar_std__char_traitsTchar_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ios_tie__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::basic_ios<char > *arg1 = (std::basic_ios<char > *) 0 ;
    std::basic_ostream<char,std::char_traits<char > > *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ios_tie",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__basic_iosTchar_std__char_traitsTchar_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (std::basic_ostream<char,std::char_traits<char > > *)((std::basic_ios<char > const *)arg1)->tie();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ios_tie__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::basic_ios<char > *arg1 = (std::basic_ios<char > *) 0 ;
    std::basic_ostream<char,std::char_traits<char > > *arg2 = (std::basic_ostream<char,std::char_traits<char > > *) 0 ;
    std::basic_ostream<char,std::char_traits<char > > *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ios_tie",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__basic_iosTchar_std__char_traitsTchar_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    result = (std::basic_ostream<char,std::char_traits<char > > *)(arg1)->tie(arg2);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ios_tie(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_std__basic_iosTchar_std__char_traitsTchar_t_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_ios_tie__SWIG_0(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_std__basic_iosTchar_std__char_traitsTchar_t_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                return _wrap_ios_tie__SWIG_1(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'ios_tie'");
    return NULL;
}


static PyObject *_wrap_ios_rdbuf__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::basic_ios<char > *arg1 = (std::basic_ios<char > *) 0 ;
    std::basic_streambuf<char,std::char_traits<char > > *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ios_rdbuf",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__basic_iosTchar_std__char_traitsTchar_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (std::basic_streambuf<char,std::char_traits<char > > *)((std::basic_ios<char > const *)arg1)->rdbuf();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__basic_streambufTchar_std__char_traitsTchar_t_t, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ios_rdbuf__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::basic_ios<char > *arg1 = (std::basic_ios<char > *) 0 ;
    std::basic_streambuf<char,std::char_traits<char > > *arg2 = (std::basic_streambuf<char,std::char_traits<char > > *) 0 ;
    std::basic_streambuf<char,std::char_traits<char > > *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ios_rdbuf",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__basic_iosTchar_std__char_traitsTchar_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__basic_streambufTchar_std__char_traitsTchar_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    result = (std::basic_streambuf<char,std::char_traits<char > > *)(arg1)->rdbuf(arg2);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__basic_streambufTchar_std__char_traitsTchar_t_t, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ios_rdbuf(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_std__basic_iosTchar_std__char_traitsTchar_t_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_ios_rdbuf__SWIG_0(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_std__basic_iosTchar_std__char_traitsTchar_t_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_std__basic_streambufTchar_std__char_traitsTchar_t_t, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                return _wrap_ios_rdbuf__SWIG_1(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'ios_rdbuf'");
    return NULL;
}


static PyObject *_wrap_ios_copyfmt(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::basic_ios<char > *arg1 = (std::basic_ios<char > *) 0 ;
    std::basic_ios<char > *arg2 = 0 ;
    std::basic_ios<char > *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ios_copyfmt",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__basic_iosTchar_std__char_traitsTchar_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__basic_iosTchar_std__char_traitsTchar_t_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("std::basic_ios<char >");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        std::basic_ios<char > &_result_ref = (arg1)->copyfmt((std::basic_ios<char > const &)*arg2);
        result = (std::basic_ios<char > *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__basic_iosTchar_std__char_traitsTchar_t_t, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ios_fill__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::basic_ios<char > *arg1 = (std::basic_ios<char > *) 0 ;
    std::basic_ios<char >::char_type result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ios_fill",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__basic_iosTchar_std__char_traitsTchar_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (std::basic_ios<char >::char_type)((std::basic_ios<char > const *)arg1)->fill();
    
    {
        resultobj = SWIG_From_char((char)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ios_fill__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::basic_ios<char > *arg1 = (std::basic_ios<char > *) 0 ;
    std::basic_ios<char >::char_type arg2 ;
    std::basic_ios<char >::char_type result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ios_fill",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__basic_iosTchar_std__char_traitsTchar_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (std::basic_ios<char >::char_type)(SWIG_As_char(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (std::basic_ios<char >::char_type)(arg1)->fill(arg2);
    
    {
        resultobj = SWIG_From_char((char)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ios_fill(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_std__basic_iosTchar_std__char_traitsTchar_t_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_ios_fill__SWIG_0(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_std__basic_iosTchar_std__char_traitsTchar_t_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_char(argv[1]);
            if (_v) {
                return _wrap_ios_fill__SWIG_1(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'ios_fill'");
    return NULL;
}


static PyObject *_wrap_ios_imbue(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::basic_ios<char > *arg1 = (std::basic_ios<char > *) 0 ;
    std::locale *arg2 = 0 ;
    std::locale result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ios_imbue",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__basic_iosTchar_std__char_traitsTchar_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__locale, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("std::locale");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (arg1)->imbue((std::locale const &)*arg2);
    
    {
        std::locale * resultptr;
        resultptr = new std::locale((std::locale &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_std__locale, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ios_narrow(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::basic_ios<char > *arg1 = (std::basic_ios<char > *) 0 ;
    std::basic_ios<char >::char_type arg2 ;
    char arg3 ;
    char result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:ios_narrow",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__basic_iosTchar_std__char_traitsTchar_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (std::basic_ios<char >::char_type)(SWIG_As_char(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (char)(SWIG_As_char(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    result = (char)((std::basic_ios<char > const *)arg1)->narrow(arg2,arg3);
    
    {
        resultobj = SWIG_From_char((char)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ios_widen(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::basic_ios<char > *arg1 = (std::basic_ios<char > *) 0 ;
    char arg2 ;
    std::basic_ios<char >::char_type result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ios_widen",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__basic_iosTchar_std__char_traitsTchar_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (char)(SWIG_As_char(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (std::basic_ios<char >::char_type)((std::basic_ios<char > const *)arg1)->widen(arg2);
    
    {
        resultobj = SWIG_From_char((char)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject * ios_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_std__basic_iosTchar_std__char_traitsTchar_t_t, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static int _wrap_cin_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable cin is read-only.");
    return 1;
}


static PyObject *_wrap_cin_get(void) {
    PyObject *pyobj = NULL;
    
    pyobj = SWIG_NewPointerObj((void *)(&std::cin), SWIGTYPE_p_std__basic_istreamTchar_std__char_traitsTchar_t_t, 0);
    return pyobj;
}


static int _wrap_cout_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable cout is read-only.");
    return 1;
}


static PyObject *_wrap_cout_get(void) {
    PyObject *pyobj = NULL;
    
    pyobj = SWIG_NewPointerObj((void *)(&std::cout), SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0);
    return pyobj;
}


static int _wrap_cerr_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable cerr is read-only.");
    return 1;
}


static PyObject *_wrap_cerr_get(void) {
    PyObject *pyobj = NULL;
    
    pyobj = SWIG_NewPointerObj((void *)(&std::cerr), SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0);
    return pyobj;
}


static int _wrap_clog_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable clog is read-only.");
    return 1;
}


static PyObject *_wrap_clog_get(void) {
    PyObject *pyobj = NULL;
    
    pyobj = SWIG_NewPointerObj((void *)(&std::clog), SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0);
    return pyobj;
}


static PyObject *_wrap_new_ostream(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::basic_streambuf<char,std::char_traits<char > > *arg1 = (std::basic_streambuf<char,std::char_traits<char > > *) 0 ;
    std::basic_ostream<char > *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_ostream",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__basic_streambufTchar_std__char_traitsTchar_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (std::basic_ostream<char > *)new std::basic_ostream<char >(arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_ostream(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::basic_ostream<char > *arg1 = (std::basic_ostream<char > *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_ostream",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ostream___lshift____SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::basic_ostream<char > *arg1 = (std::basic_ostream<char > *) 0 ;
    std::basic_ostream<char,std::char_traits<char > > &(*arg2)(std::basic_ostream<char,std::char_traits<char > > &) = (std::basic_ostream<char,std::char_traits<char > > &(*)(std::basic_ostream<char,std::char_traits<char > > &)) 0 ;
    std::basic_ostream<char,std::char_traits<char > > *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ostream___lshift__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_ostreamTchar_std__char_traitsTchar_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    {
        std::basic_ostream<char,std::char_traits<char > > &_result_ref = (arg1)->operator <<(*arg2);
        result = (std::basic_ostream<char,std::char_traits<char > > *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ostream___lshift____SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::basic_ostream<char > *arg1 = (std::basic_ostream<char > *) 0 ;
    std::basic_ios<char,std::char_traits<char > > &(*arg2)(std::basic_ios<char,std::char_traits<char > > &) = (std::basic_ios<char,std::char_traits<char > > &(*)(std::basic_ios<char,std::char_traits<char > > &)) 0 ;
    std::basic_ostream<char,std::char_traits<char > > *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ostream___lshift__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iosTchar_std__char_traitsTchar_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    {
        std::basic_ostream<char,std::char_traits<char > > &_result_ref = (arg1)->operator <<(*arg2);
        result = (std::basic_ostream<char,std::char_traits<char > > *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ostream___lshift____SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::basic_ostream<char > *arg1 = (std::basic_ostream<char > *) 0 ;
    std::ios_base &(*arg2)(std::ios_base &) = (std::ios_base &(*)(std::ios_base &)) 0 ;
    std::basic_ostream<char,std::char_traits<char > > *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ostream___lshift__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_f_r_std__ios_base__r_std__ios_base, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    {
        std::basic_ostream<char,std::char_traits<char > > &_result_ref = (arg1)->operator <<(*arg2);
        result = (std::basic_ostream<char,std::char_traits<char > > *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ostream___lshift____SWIG_3(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::basic_ostream<char > *arg1 = (std::basic_ostream<char > *) 0 ;
    long arg2 ;
    std::basic_ostream<char,std::char_traits<char > > *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ostream___lshift__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (long)(SWIG_As_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        std::basic_ostream<char,std::char_traits<char > > &_result_ref = (arg1)->operator <<(arg2);
        result = (std::basic_ostream<char,std::char_traits<char > > *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ostream___lshift____SWIG_4(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::basic_ostream<char > *arg1 = (std::basic_ostream<char > *) 0 ;
    unsigned long arg2 ;
    std::basic_ostream<char,std::char_traits<char > > *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ostream___lshift__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (unsigned long)(SWIG_As_unsigned_SS_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        std::basic_ostream<char,std::char_traits<char > > &_result_ref = (arg1)->operator <<(arg2);
        result = (std::basic_ostream<char,std::char_traits<char > > *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ostream___lshift____SWIG_5(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::basic_ostream<char > *arg1 = (std::basic_ostream<char > *) 0 ;
    bool arg2 ;
    std::basic_ostream<char,std::char_traits<char > > *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ostream___lshift__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (bool)(SWIG_As_bool(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        std::basic_ostream<char,std::char_traits<char > > &_result_ref = (arg1)->operator <<(arg2);
        result = (std::basic_ostream<char,std::char_traits<char > > *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ostream___lshift____SWIG_6(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::basic_ostream<char > *arg1 = (std::basic_ostream<char > *) 0 ;
    short arg2 ;
    std::basic_ostream<char,std::char_traits<char > > *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ostream___lshift__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (short)(SWIG_As_short(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        std::basic_ostream<char,std::char_traits<char > > &_result_ref = (arg1)->operator <<(arg2);
        result = (std::basic_ostream<char,std::char_traits<char > > *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ostream___lshift____SWIG_7(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::basic_ostream<char > *arg1 = (std::basic_ostream<char > *) 0 ;
    unsigned short arg2 ;
    std::basic_ostream<char,std::char_traits<char > > *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ostream___lshift__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (unsigned short)(SWIG_As_unsigned_SS_short(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        std::basic_ostream<char,std::char_traits<char > > &_result_ref = (arg1)->operator <<(arg2);
        result = (std::basic_ostream<char,std::char_traits<char > > *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ostream___lshift____SWIG_8(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::basic_ostream<char > *arg1 = (std::basic_ostream<char > *) 0 ;
    int arg2 ;
    std::basic_ostream<char,std::char_traits<char > > *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ostream___lshift__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        std::basic_ostream<char,std::char_traits<char > > &_result_ref = (arg1)->operator <<(arg2);
        result = (std::basic_ostream<char,std::char_traits<char > > *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ostream___lshift____SWIG_9(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::basic_ostream<char > *arg1 = (std::basic_ostream<char > *) 0 ;
    unsigned int arg2 ;
    std::basic_ostream<char,std::char_traits<char > > *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ostream___lshift__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (unsigned int)(SWIG_As_unsigned_SS_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        std::basic_ostream<char,std::char_traits<char > > &_result_ref = (arg1)->operator <<(arg2);
        result = (std::basic_ostream<char,std::char_traits<char > > *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ostream___lshift____SWIG_10(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::basic_ostream<char > *arg1 = (std::basic_ostream<char > *) 0 ;
    long long arg2 ;
    std::basic_ostream<char,std::char_traits<char > > *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ostream___lshift__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (long long)(SWIG_As_long_SS_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        std::basic_ostream<char,std::char_traits<char > > &_result_ref = (arg1)->operator <<(arg2);
        result = (std::basic_ostream<char,std::char_traits<char > > *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ostream___lshift____SWIG_11(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::basic_ostream<char > *arg1 = (std::basic_ostream<char > *) 0 ;
    unsigned long long arg2 ;
    std::basic_ostream<char,std::char_traits<char > > *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ostream___lshift__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (unsigned long long)(SWIG_As_unsigned_SS_long_SS_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        std::basic_ostream<char,std::char_traits<char > > &_result_ref = (arg1)->operator <<(arg2);
        result = (std::basic_ostream<char,std::char_traits<char > > *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ostream___lshift____SWIG_12(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::basic_ostream<char > *arg1 = (std::basic_ostream<char > *) 0 ;
    double arg2 ;
    std::basic_ostream<char,std::char_traits<char > > *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ostream___lshift__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        std::basic_ostream<char,std::char_traits<char > > &_result_ref = (arg1)->operator <<(arg2);
        result = (std::basic_ostream<char,std::char_traits<char > > *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ostream___lshift____SWIG_13(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::basic_ostream<char > *arg1 = (std::basic_ostream<char > *) 0 ;
    float arg2 ;
    std::basic_ostream<char,std::char_traits<char > > *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ostream___lshift__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (float)(SWIG_As_float(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        std::basic_ostream<char,std::char_traits<char > > &_result_ref = (arg1)->operator <<(arg2);
        result = (std::basic_ostream<char,std::char_traits<char > > *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ostream___lshift____SWIG_14(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::basic_ostream<char > *arg1 = (std::basic_ostream<char > *) 0 ;
    long double arg2 ;
    std::basic_ostream<char,std::char_traits<char > > *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ostream___lshift__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        long double * argp;
        SWIG_Python_ConvertPtr(obj1, (void **)&argp, SWIGTYPE_p_long_double, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("long double");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *argp;
    }
    {
        std::basic_ostream<char,std::char_traits<char > > &_result_ref = (arg1)->operator <<(arg2);
        result = (std::basic_ostream<char,std::char_traits<char > > *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ostream___lshift____SWIG_15(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::basic_ostream<char > *arg1 = (std::basic_ostream<char > *) 0 ;
    void *arg2 = (void *) 0 ;
    std::basic_ostream<char,std::char_traits<char > > *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ostream___lshift__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        if ((SWIG_ConvertPtr(obj1,(void **)(&arg2),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(2);SWIG_fail;
        }
    }
    {
        std::basic_ostream<char,std::char_traits<char > > &_result_ref = (arg1)->operator <<((void const *)arg2);
        result = (std::basic_ostream<char,std::char_traits<char > > *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ostream___lshift____SWIG_16(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::basic_ostream<char > *arg1 = (std::basic_ostream<char > *) 0 ;
    std::basic_streambuf<char,std::char_traits<char > > *arg2 = (std::basic_streambuf<char,std::char_traits<char > > *) 0 ;
    std::basic_ostream<char,std::char_traits<char > > *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ostream___lshift__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__basic_streambufTchar_std__char_traitsTchar_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    {
        std::basic_ostream<char,std::char_traits<char > > &_result_ref = (arg1)->operator <<(arg2);
        result = (std::basic_ostream<char,std::char_traits<char > > *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ostream___lshift____SWIG_17(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::basic_ostream<char > *arg1 = (std::basic_ostream<char > *) 0 ;
    std::basic_string<char,std::char_traits<char >,std::allocator<char > > *arg2 = 0 ;
    std::basic_ostream<char,std::char_traits<char > > *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ostream___lshift__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__basic_stringTchar_std__char_traitsTchar_t_std__allocatorTchar_t_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("std::basic_string<char,std::char_traits<char >,std::allocator<char > >");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        std::basic_ostream<char,std::char_traits<char > > &_result_ref = std_basic_ostream_Sl_char_Sg__operator_Sl__Sl___SWIG_17(arg1,(std::basic_string<char,std::char_traits<char >,std::allocator<char > > const &)*arg2);
        result = (std::basic_ostream<char,std::char_traits<char > > *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ostream___lshift__(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                return _wrap_ostream___lshift____SWIG_0(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iosTchar_std__char_traitsTchar_t_t, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                return _wrap_ostream___lshift____SWIG_1(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_f_r_std__ios_base__r_std__ios_base, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                return _wrap_ostream___lshift____SWIG_2(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_long_double, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_ostream___lshift____SWIG_14(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_std__basic_streambufTchar_std__char_traitsTchar_t_t, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                return _wrap_ostream___lshift____SWIG_16(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_std__basic_stringTchar_std__char_traitsTchar_t_std__allocatorTchar_t_t, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_ostream___lshift____SWIG_17(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], &ptr, 0, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                return _wrap_ostream___lshift____SWIG_15(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_unsigned_SS_short(argv[1]);
            if (_v) {
                return _wrap_ostream___lshift____SWIG_7(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_short(argv[1]);
            if (_v) {
                return _wrap_ostream___lshift____SWIG_6(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_unsigned_SS_int(argv[1]);
            if (_v) {
                return _wrap_ostream___lshift____SWIG_9(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_int(argv[1]);
            if (_v) {
                return _wrap_ostream___lshift____SWIG_8(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_unsigned_SS_long(argv[1]);
            if (_v) {
                return _wrap_ostream___lshift____SWIG_4(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_long(argv[1]);
            if (_v) {
                return _wrap_ostream___lshift____SWIG_3(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_unsigned_SS_long_SS_long(argv[1]);
            if (_v) {
                return _wrap_ostream___lshift____SWIG_11(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_long_SS_long(argv[1]);
            if (_v) {
                return _wrap_ostream___lshift____SWIG_10(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_float(argv[1]);
            if (_v) {
                return _wrap_ostream___lshift____SWIG_13(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_double(argv[1]);
            if (_v) {
                return _wrap_ostream___lshift____SWIG_12(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_bool(argv[1]);
            if (_v) {
                return _wrap_ostream___lshift____SWIG_5(self,args);
            }
        }
    }
    
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


static PyObject *_wrap_ostream_put(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::basic_ostream<char > *arg1 = (std::basic_ostream<char > *) 0 ;
    std::basic_ostream<char >::char_type arg2 ;
    std::basic_ostream<char,std::char_traits<char > > *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ostream_put",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (std::basic_ostream<char >::char_type)(SWIG_As_char(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        std::basic_ostream<char,std::char_traits<char > > &_result_ref = (arg1)->put(arg2);
        result = (std::basic_ostream<char,std::char_traits<char > > *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ostream_write(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::basic_ostream<char > *arg1 = (std::basic_ostream<char > *) 0 ;
    std::basic_ostream<char >::char_type *arg2 = (std::basic_ostream<char >::char_type *) 0 ;
    std::streamsize arg3 ;
    std::basic_ostream<char,std::char_traits<char > > *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:ostream_write",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    if (!SWIG_AsCharPtr(obj1, (char**)&arg2)) {
        SWIG_arg_fail(2);SWIG_fail;
    }
    {
        arg3 = (std::streamsize)(SWIG_As_unsigned_SS_long(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        std::basic_ostream<char,std::char_traits<char > > &_result_ref = (arg1)->write((std::basic_ostream<char >::char_type const *)arg2,arg3);
        result = (std::basic_ostream<char,std::char_traits<char > > *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ostream_flush(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::basic_ostream<char > *arg1 = (std::basic_ostream<char > *) 0 ;
    std::basic_ostream<char,std::char_traits<char > > *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ostream_flush",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        std::basic_ostream<char,std::char_traits<char > > &_result_ref = (arg1)->flush();
        result = (std::basic_ostream<char,std::char_traits<char > > *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ostream_tellp(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::basic_ostream<char > *arg1 = (std::basic_ostream<char > *) 0 ;
    std::basic_ostream<char >::pos_type result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ostream_tellp",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (arg1)->tellp();
    
    {
        std::basic_ostream<char >::pos_type * resultptr;
        resultptr = new std::basic_ostream<char >::pos_type((std::basic_ostream<char >::pos_type &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t__pos_type, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ostream_seekp__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::basic_ostream<char > *arg1 = (std::basic_ostream<char > *) 0 ;
    std::basic_ostream<char >::pos_type arg2 ;
    std::basic_ostream<char,std::char_traits<char > > *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ostream_seekp",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        std::basic_ostream<char >::pos_type * argp;
        SWIG_Python_ConvertPtr(obj1, (void **)&argp, SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t__pos_type, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("std::basic_ostream<char >::pos_type");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *argp;
    }
    {
        std::basic_ostream<char,std::char_traits<char > > &_result_ref = (arg1)->seekp(arg2);
        result = (std::basic_ostream<char,std::char_traits<char > > *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ostream_seekp__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::basic_ostream<char > *arg1 = (std::basic_ostream<char > *) 0 ;
    std::basic_ostream<char >::off_type arg2 ;
    std::ios_base::seekdir arg3 ;
    std::basic_ostream<char,std::char_traits<char > > *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:ostream_seekp",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        std::basic_ostream<char >::off_type * argp;
        SWIG_Python_ConvertPtr(obj1, (void **)&argp, SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t__off_type, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("std::basic_ostream<char >::off_type");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *argp;
    }
    {
        arg3 = (std::ios_base::seekdir)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        std::basic_ostream<char,std::char_traits<char > > &_result_ref = (arg1)->seekp(arg2,arg3);
        result = (std::basic_ostream<char,std::char_traits<char > > *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ostream_seekp(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[4];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t__pos_type, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_ostream_seekp__SWIG_0(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t__off_type, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                _v = SWIG_Check_int(argv[2]);
                if (_v) {
                    return _wrap_ostream_seekp__SWIG_1(self,args);
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'ostream_seekp'");
    return NULL;
}


static PyObject * ostream_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_istream(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::basic_streambuf<char,std::char_traits<char > > *arg1 = (std::basic_streambuf<char,std::char_traits<char > > *) 0 ;
    std::basic_istream<char > *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_istream",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__basic_streambufTchar_std__char_traitsTchar_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (std::basic_istream<char > *)new std::basic_istream<char >(arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__basic_istreamTchar_std__char_traitsTchar_t_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_istream(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::basic_istream<char > *arg1 = (std::basic_istream<char > *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_istream",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__basic_istreamTchar_std__char_traitsTchar_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_istream___rshift____SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::basic_istream<char > *arg1 = (std::basic_istream<char > *) 0 ;
    std::basic_istream<char,std::char_traits<char > > &(*arg2)(std::basic_istream<char,std::char_traits<char > > &) = (std::basic_istream<char,std::char_traits<char > > &(*)(std::basic_istream<char,std::char_traits<char > > &)) 0 ;
    std::basic_istream<char,std::char_traits<char > > *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:istream___rshift__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__basic_istreamTchar_std__char_traitsTchar_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_f_r_std__basic_istream__char_std__char_traits__char______r_std__basic_istreamTchar_std__char_traitsTchar_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    {
        std::basic_istream<char,std::char_traits<char > > &_result_ref = (arg1)->operator >>(*arg2);
        result = (std::basic_istream<char,std::char_traits<char > > *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__basic_istreamTchar_std__char_traitsTchar_t_t, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_istream___rshift____SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::basic_istream<char > *arg1 = (std::basic_istream<char > *) 0 ;
    std::basic_ios<char,std::char_traits<char > > &(*arg2)(std::basic_ios<char,std::char_traits<char > > &) = (std::basic_ios<char,std::char_traits<char > > &(*)(std::basic_ios<char,std::char_traits<char > > &)) 0 ;
    std::basic_istream<char,std::char_traits<char > > *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:istream___rshift__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__basic_istreamTchar_std__char_traitsTchar_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iosTchar_std__char_traitsTchar_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    {
        std::basic_istream<char,std::char_traits<char > > &_result_ref = (arg1)->operator >>(*arg2);
        result = (std::basic_istream<char,std::char_traits<char > > *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__basic_istreamTchar_std__char_traitsTchar_t_t, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_istream___rshift____SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::basic_istream<char > *arg1 = (std::basic_istream<char > *) 0 ;
    std::ios_base &(*arg2)(std::ios_base &) = (std::ios_base &(*)(std::ios_base &)) 0 ;
    std::basic_istream<char,std::char_traits<char > > *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:istream___rshift__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__basic_istreamTchar_std__char_traitsTchar_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_f_r_std__ios_base__r_std__ios_base, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    {
        std::basic_istream<char,std::char_traits<char > > &_result_ref = (arg1)->operator >>(*arg2);
        result = (std::basic_istream<char,std::char_traits<char > > *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__basic_istreamTchar_std__char_traitsTchar_t_t, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_istream___rshift____SWIG_3(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::basic_istream<char > *arg1 = (std::basic_istream<char > *) 0 ;
    bool *arg2 = 0 ;
    std::basic_istream<char,std::char_traits<char > > *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:istream___rshift__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__basic_istreamTchar_std__char_traitsTchar_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_bool, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("bool");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        std::basic_istream<char,std::char_traits<char > > &_result_ref = (arg1)->operator >>(*arg2);
        result = (std::basic_istream<char,std::char_traits<char > > *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__basic_istreamTchar_std__char_traitsTchar_t_t, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_istream___rshift____SWIG_4(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::basic_istream<char > *arg1 = (std::basic_istream<char > *) 0 ;
    short *arg2 = 0 ;
    std::basic_istream<char,std::char_traits<char > > *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:istream___rshift__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__basic_istreamTchar_std__char_traitsTchar_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_short, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("short");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        std::basic_istream<char,std::char_traits<char > > &_result_ref = (arg1)->operator >>(*arg2);
        result = (std::basic_istream<char,std::char_traits<char > > *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__basic_istreamTchar_std__char_traitsTchar_t_t, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_istream___rshift____SWIG_5(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::basic_istream<char > *arg1 = (std::basic_istream<char > *) 0 ;
    unsigned short *arg2 = 0 ;
    std::basic_istream<char,std::char_traits<char > > *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:istream___rshift__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__basic_istreamTchar_std__char_traitsTchar_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_unsigned_short, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("unsigned short");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        std::basic_istream<char,std::char_traits<char > > &_result_ref = (arg1)->operator >>(*arg2);
        result = (std::basic_istream<char,std::char_traits<char > > *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__basic_istreamTchar_std__char_traitsTchar_t_t, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_istream___rshift____SWIG_6(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::basic_istream<char > *arg1 = (std::basic_istream<char > *) 0 ;
    int *arg2 = 0 ;
    std::basic_istream<char,std::char_traits<char > > *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:istream___rshift__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__basic_istreamTchar_std__char_traitsTchar_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_int, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("int");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        std::basic_istream<char,std::char_traits<char > > &_result_ref = (arg1)->operator >>(*arg2);
        result = (std::basic_istream<char,std::char_traits<char > > *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__basic_istreamTchar_std__char_traitsTchar_t_t, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_istream___rshift____SWIG_7(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::basic_istream<char > *arg1 = (std::basic_istream<char > *) 0 ;
    unsigned int *arg2 = 0 ;
    std::basic_istream<char,std::char_traits<char > > *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:istream___rshift__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__basic_istreamTchar_std__char_traitsTchar_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_unsigned_int, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("unsigned int");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        std::basic_istream<char,std::char_traits<char > > &_result_ref = (arg1)->operator >>(*arg2);
        result = (std::basic_istream<char,std::char_traits<char > > *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__basic_istreamTchar_std__char_traitsTchar_t_t, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_istream___rshift____SWIG_8(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::basic_istream<char > *arg1 = (std::basic_istream<char > *) 0 ;
    long *arg2 = 0 ;
    std::basic_istream<char,std::char_traits<char > > *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:istream___rshift__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__basic_istreamTchar_std__char_traitsTchar_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_long, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("long");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        std::basic_istream<char,std::char_traits<char > > &_result_ref = (arg1)->operator >>(*arg2);
        result = (std::basic_istream<char,std::char_traits<char > > *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__basic_istreamTchar_std__char_traitsTchar_t_t, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_istream___rshift____SWIG_9(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::basic_istream<char > *arg1 = (std::basic_istream<char > *) 0 ;
    unsigned long *arg2 = 0 ;
    std::basic_istream<char,std::char_traits<char > > *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:istream___rshift__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__basic_istreamTchar_std__char_traitsTchar_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_unsigned_long, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("unsigned long");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        std::basic_istream<char,std::char_traits<char > > &_result_ref = (arg1)->operator >>(*arg2);
        result = (std::basic_istream<char,std::char_traits<char > > *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__basic_istreamTchar_std__char_traitsTchar_t_t, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_istream___rshift____SWIG_10(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::basic_istream<char > *arg1 = (std::basic_istream<char > *) 0 ;
    long long *arg2 = 0 ;
    std::basic_istream<char,std::char_traits<char > > *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:istream___rshift__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__basic_istreamTchar_std__char_traitsTchar_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_long_long, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("long long");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        std::basic_istream<char,std::char_traits<char > > &_result_ref = (arg1)->operator >>(*arg2);
        result = (std::basic_istream<char,std::char_traits<char > > *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__basic_istreamTchar_std__char_traitsTchar_t_t, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_istream___rshift____SWIG_11(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::basic_istream<char > *arg1 = (std::basic_istream<char > *) 0 ;
    unsigned long long *arg2 = 0 ;
    std::basic_istream<char,std::char_traits<char > > *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:istream___rshift__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__basic_istreamTchar_std__char_traitsTchar_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_unsigned_long_long, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("unsigned long long");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        std::basic_istream<char,std::char_traits<char > > &_result_ref = (arg1)->operator >>(*arg2);
        result = (std::basic_istream<char,std::char_traits<char > > *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__basic_istreamTchar_std__char_traitsTchar_t_t, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_istream___rshift____SWIG_12(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::basic_istream<char > *arg1 = (std::basic_istream<char > *) 0 ;
    float *arg2 = 0 ;
    std::basic_istream<char,std::char_traits<char > > *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:istream___rshift__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__basic_istreamTchar_std__char_traitsTchar_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_float, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("float");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        std::basic_istream<char,std::char_traits<char > > &_result_ref = (arg1)->operator >>(*arg2);
        result = (std::basic_istream<char,std::char_traits<char > > *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__basic_istreamTchar_std__char_traitsTchar_t_t, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_istream___rshift____SWIG_13(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::basic_istream<char > *arg1 = (std::basic_istream<char > *) 0 ;
    double *arg2 = 0 ;
    std::basic_istream<char,std::char_traits<char > > *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:istream___rshift__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__basic_istreamTchar_std__char_traitsTchar_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_double, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("double");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        std::basic_istream<char,std::char_traits<char > > &_result_ref = (arg1)->operator >>(*arg2);
        result = (std::basic_istream<char,std::char_traits<char > > *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__basic_istreamTchar_std__char_traitsTchar_t_t, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_istream___rshift____SWIG_14(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::basic_istream<char > *arg1 = (std::basic_istream<char > *) 0 ;
    long double *arg2 = 0 ;
    std::basic_istream<char,std::char_traits<char > > *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:istream___rshift__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__basic_istreamTchar_std__char_traitsTchar_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_long_double, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("long double");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        std::basic_istream<char,std::char_traits<char > > &_result_ref = (arg1)->operator >>(*arg2);
        result = (std::basic_istream<char,std::char_traits<char > > *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__basic_istreamTchar_std__char_traitsTchar_t_t, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_istream___rshift____SWIG_15(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::basic_istream<char > *arg1 = (std::basic_istream<char > *) 0 ;
    void **arg2 = 0 ;
    std::basic_istream<char,std::char_traits<char > > *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:istream___rshift__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__basic_istreamTchar_std__char_traitsTchar_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_p_void, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("void");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        std::basic_istream<char,std::char_traits<char > > &_result_ref = (arg1)->operator >>(*arg2);
        result = (std::basic_istream<char,std::char_traits<char > > *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__basic_istreamTchar_std__char_traitsTchar_t_t, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_istream___rshift____SWIG_16(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::basic_istream<char > *arg1 = (std::basic_istream<char > *) 0 ;
    std::basic_streambuf<char,std::char_traits<char > > *arg2 = (std::basic_streambuf<char,std::char_traits<char > > *) 0 ;
    std::basic_istream<char,std::char_traits<char > > *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:istream___rshift__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__basic_istreamTchar_std__char_traitsTchar_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__basic_streambufTchar_std__char_traitsTchar_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    {
        std::basic_istream<char,std::char_traits<char > > &_result_ref = (arg1)->operator >>(arg2);
        result = (std::basic_istream<char,std::char_traits<char > > *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__basic_istreamTchar_std__char_traitsTchar_t_t, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_istream___rshift__(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_std__basic_istreamTchar_std__char_traitsTchar_t_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_f_r_std__basic_istream__char_std__char_traits__char______r_std__basic_istreamTchar_std__char_traitsTchar_t_t, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                return _wrap_istream___rshift____SWIG_0(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_std__basic_istreamTchar_std__char_traitsTchar_t_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iosTchar_std__char_traitsTchar_t_t, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                return _wrap_istream___rshift____SWIG_1(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_std__basic_istreamTchar_std__char_traitsTchar_t_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_f_r_std__ios_base__r_std__ios_base, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                return _wrap_istream___rshift____SWIG_2(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_std__basic_istreamTchar_std__char_traitsTchar_t_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_bool, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_istream___rshift____SWIG_3(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_std__basic_istreamTchar_std__char_traitsTchar_t_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_short, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_istream___rshift____SWIG_4(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_std__basic_istreamTchar_std__char_traitsTchar_t_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_unsigned_short, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_istream___rshift____SWIG_5(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_std__basic_istreamTchar_std__char_traitsTchar_t_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_int, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_istream___rshift____SWIG_6(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_std__basic_istreamTchar_std__char_traitsTchar_t_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_unsigned_int, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_istream___rshift____SWIG_7(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_std__basic_istreamTchar_std__char_traitsTchar_t_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_long, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_istream___rshift____SWIG_8(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_std__basic_istreamTchar_std__char_traitsTchar_t_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_unsigned_long, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_istream___rshift____SWIG_9(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_std__basic_istreamTchar_std__char_traitsTchar_t_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_long_long, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_istream___rshift____SWIG_10(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_std__basic_istreamTchar_std__char_traitsTchar_t_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_unsigned_long_long, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_istream___rshift____SWIG_11(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_std__basic_istreamTchar_std__char_traitsTchar_t_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_float, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_istream___rshift____SWIG_12(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_std__basic_istreamTchar_std__char_traitsTchar_t_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_double, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_istream___rshift____SWIG_13(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_std__basic_istreamTchar_std__char_traitsTchar_t_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_long_double, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_istream___rshift____SWIG_14(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_std__basic_istreamTchar_std__char_traitsTchar_t_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_p_void, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_istream___rshift____SWIG_15(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_std__basic_istreamTchar_std__char_traitsTchar_t_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_std__basic_streambufTchar_std__char_traitsTchar_t_t, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                return _wrap_istream___rshift____SWIG_16(self,args);
            }
        }
    }
    
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


static PyObject *_wrap_istream_gcount(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::basic_istream<char > *arg1 = (std::basic_istream<char > *) 0 ;
    std::streamsize result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:istream_gcount",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__basic_istreamTchar_std__char_traitsTchar_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = ((std::basic_istream<char > const *)arg1)->gcount();
    
    {
        resultobj = SWIG_From_unsigned_SS_long((unsigned long)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_istream_get__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::basic_istream<char > *arg1 = (std::basic_istream<char > *) 0 ;
    std::basic_istream<char >::int_type result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:istream_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__basic_istreamTchar_std__char_traitsTchar_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (std::basic_istream<char >::int_type)(arg1)->get();
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_istream_get__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::basic_istream<char > *arg1 = (std::basic_istream<char > *) 0 ;
    std::basic_istream<char >::char_type *arg2 = 0 ;
    std::basic_istream<char,std::char_traits<char > > *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:istream_get",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__basic_istreamTchar_std__char_traitsTchar_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__basic_istreamTchar_std__char_traitsTchar_t_t__char_type, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("std::basic_istream<char >::char_type");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        std::basic_istream<char,std::char_traits<char > > &_result_ref = (arg1)->get(*arg2);
        result = (std::basic_istream<char,std::char_traits<char > > *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__basic_istreamTchar_std__char_traitsTchar_t_t, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_istream_get__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::basic_istream<char > *arg1 = (std::basic_istream<char > *) 0 ;
    std::basic_istream<char >::char_type *arg2 = (std::basic_istream<char >::char_type *) 0 ;
    std::streamsize arg3 ;
    std::basic_istream<char >::char_type arg4 ;
    std::basic_istream<char,std::char_traits<char > > *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:istream_get",&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__basic_istreamTchar_std__char_traitsTchar_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    if (!SWIG_AsCharPtr(obj1, (char**)&arg2)) {
        SWIG_arg_fail(2);SWIG_fail;
    }
    {
        arg3 = (std::streamsize)(SWIG_As_unsigned_SS_long(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = (std::basic_istream<char >::char_type)(SWIG_As_char(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    {
        std::basic_istream<char,std::char_traits<char > > &_result_ref = (arg1)->get(arg2,arg3,arg4);
        result = (std::basic_istream<char,std::char_traits<char > > *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__basic_istreamTchar_std__char_traitsTchar_t_t, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_istream_get__SWIG_3(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::basic_istream<char > *arg1 = (std::basic_istream<char > *) 0 ;
    std::basic_istream<char >::char_type *arg2 = (std::basic_istream<char >::char_type *) 0 ;
    std::streamsize arg3 ;
    std::basic_istream<char,std::char_traits<char > > *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:istream_get",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__basic_istreamTchar_std__char_traitsTchar_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    if (!SWIG_AsCharPtr(obj1, (char**)&arg2)) {
        SWIG_arg_fail(2);SWIG_fail;
    }
    {
        arg3 = (std::streamsize)(SWIG_As_unsigned_SS_long(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        std::basic_istream<char,std::char_traits<char > > &_result_ref = (arg1)->get(arg2,arg3);
        result = (std::basic_istream<char,std::char_traits<char > > *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__basic_istreamTchar_std__char_traitsTchar_t_t, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_istream_get__SWIG_4(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::basic_istream<char > *arg1 = (std::basic_istream<char > *) 0 ;
    std::basic_streambuf<char,std::char_traits<char > > *arg2 = 0 ;
    std::basic_istream<char >::char_type arg3 ;
    std::basic_istream<char,std::char_traits<char > > *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:istream_get",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__basic_istreamTchar_std__char_traitsTchar_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__basic_streambufTchar_std__char_traitsTchar_t_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("std::basic_streambuf<char,std::char_traits<char > >");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (std::basic_istream<char >::char_type)(SWIG_As_char(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        std::basic_istream<char,std::char_traits<char > > &_result_ref = (arg1)->get(*arg2,arg3);
        result = (std::basic_istream<char,std::char_traits<char > > *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__basic_istreamTchar_std__char_traitsTchar_t_t, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_istream_get__SWIG_5(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::basic_istream<char > *arg1 = (std::basic_istream<char > *) 0 ;
    std::basic_streambuf<char,std::char_traits<char > > *arg2 = 0 ;
    std::basic_istream<char,std::char_traits<char > > *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:istream_get",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__basic_istreamTchar_std__char_traitsTchar_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__basic_streambufTchar_std__char_traitsTchar_t_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("std::basic_streambuf<char,std::char_traits<char > >");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        std::basic_istream<char,std::char_traits<char > > &_result_ref = (arg1)->get(*arg2);
        result = (std::basic_istream<char,std::char_traits<char > > *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__basic_istreamTchar_std__char_traitsTchar_t_t, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_istream_get(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[5];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 4); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_std__basic_istreamTchar_std__char_traitsTchar_t_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_istream_get__SWIG_0(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_std__basic_istreamTchar_std__char_traitsTchar_t_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_std__basic_istreamTchar_std__char_traitsTchar_t_t__char_type, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_istream_get__SWIG_1(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_std__basic_istreamTchar_std__char_traitsTchar_t_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_std__basic_streambufTchar_std__char_traitsTchar_t_t, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_istream_get__SWIG_5(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_std__basic_istreamTchar_std__char_traitsTchar_t_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_std__basic_streambufTchar_std__char_traitsTchar_t_t, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                _v = SWIG_Check_char(argv[2]);
                if (_v) {
                    return _wrap_istream_get__SWIG_4(self,args);
                }
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_std__basic_istreamTchar_std__char_traitsTchar_t_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_AsCharPtr(argv[1], (char **)(0));
            if (_v) {
                _v = SWIG_Check_unsigned_SS_long(argv[2]);
                if (_v) {
                    return _wrap_istream_get__SWIG_3(self,args);
                }
            }
        }
    }
    if (argc == 4) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_std__basic_istreamTchar_std__char_traitsTchar_t_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_AsCharPtr(argv[1], (char **)(0));
            if (_v) {
                _v = SWIG_Check_unsigned_SS_long(argv[2]);
                if (_v) {
                    _v = SWIG_Check_char(argv[3]);
                    if (_v) {
                        return _wrap_istream_get__SWIG_2(self,args);
                    }
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'istream_get'");
    return NULL;
}


static PyObject *_wrap_istream_getline__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::basic_istream<char > *arg1 = (std::basic_istream<char > *) 0 ;
    std::basic_istream<char >::char_type *arg2 = (std::basic_istream<char >::char_type *) 0 ;
    std::streamsize arg3 ;
    std::basic_istream<char >::char_type arg4 ;
    std::basic_istream<char,std::char_traits<char > > *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:istream_getline",&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__basic_istreamTchar_std__char_traitsTchar_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    if (!SWIG_AsCharPtr(obj1, (char**)&arg2)) {
        SWIG_arg_fail(2);SWIG_fail;
    }
    {
        arg3 = (std::streamsize)(SWIG_As_unsigned_SS_long(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = (std::basic_istream<char >::char_type)(SWIG_As_char(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    {
        std::basic_istream<char,std::char_traits<char > > &_result_ref = (arg1)->getline(arg2,arg3,arg4);
        result = (std::basic_istream<char,std::char_traits<char > > *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__basic_istreamTchar_std__char_traitsTchar_t_t, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_istream_getline__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::basic_istream<char > *arg1 = (std::basic_istream<char > *) 0 ;
    std::basic_istream<char >::char_type *arg2 = (std::basic_istream<char >::char_type *) 0 ;
    std::streamsize arg3 ;
    std::basic_istream<char,std::char_traits<char > > *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:istream_getline",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__basic_istreamTchar_std__char_traitsTchar_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    if (!SWIG_AsCharPtr(obj1, (char**)&arg2)) {
        SWIG_arg_fail(2);SWIG_fail;
    }
    {
        arg3 = (std::streamsize)(SWIG_As_unsigned_SS_long(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        std::basic_istream<char,std::char_traits<char > > &_result_ref = (arg1)->getline(arg2,arg3);
        result = (std::basic_istream<char,std::char_traits<char > > *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__basic_istreamTchar_std__char_traitsTchar_t_t, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_istream_getline(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[5];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 4); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_std__basic_istreamTchar_std__char_traitsTchar_t_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_AsCharPtr(argv[1], (char **)(0));
            if (_v) {
                _v = SWIG_Check_unsigned_SS_long(argv[2]);
                if (_v) {
                    return _wrap_istream_getline__SWIG_1(self,args);
                }
            }
        }
    }
    if (argc == 4) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_std__basic_istreamTchar_std__char_traitsTchar_t_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_AsCharPtr(argv[1], (char **)(0));
            if (_v) {
                _v = SWIG_Check_unsigned_SS_long(argv[2]);
                if (_v) {
                    _v = SWIG_Check_char(argv[3]);
                    if (_v) {
                        return _wrap_istream_getline__SWIG_0(self,args);
                    }
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'istream_getline'");
    return NULL;
}


static PyObject *_wrap_istream_ignore__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::basic_istream<char > *arg1 = (std::basic_istream<char > *) 0 ;
    std::streamsize arg2 ;
    std::basic_istream<char >::int_type arg3 ;
    std::basic_istream<char,std::char_traits<char > > *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:istream_ignore",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__basic_istreamTchar_std__char_traitsTchar_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (std::streamsize)(SWIG_As_unsigned_SS_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (std::basic_istream<char >::int_type)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        std::basic_istream<char,std::char_traits<char > > &_result_ref = (arg1)->ignore(arg2,arg3);
        result = (std::basic_istream<char,std::char_traits<char > > *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__basic_istreamTchar_std__char_traitsTchar_t_t, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_istream_ignore__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::basic_istream<char > *arg1 = (std::basic_istream<char > *) 0 ;
    std::streamsize arg2 ;
    std::basic_istream<char,std::char_traits<char > > *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:istream_ignore",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__basic_istreamTchar_std__char_traitsTchar_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (std::streamsize)(SWIG_As_unsigned_SS_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        std::basic_istream<char,std::char_traits<char > > &_result_ref = (arg1)->ignore(arg2);
        result = (std::basic_istream<char,std::char_traits<char > > *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__basic_istreamTchar_std__char_traitsTchar_t_t, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_istream_ignore__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::basic_istream<char > *arg1 = (std::basic_istream<char > *) 0 ;
    std::basic_istream<char,std::char_traits<char > > *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:istream_ignore",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__basic_istreamTchar_std__char_traitsTchar_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        std::basic_istream<char,std::char_traits<char > > &_result_ref = (arg1)->ignore();
        result = (std::basic_istream<char,std::char_traits<char > > *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__basic_istreamTchar_std__char_traitsTchar_t_t, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_istream_ignore(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[4];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_std__basic_istreamTchar_std__char_traitsTchar_t_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_istream_ignore__SWIG_2(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_std__basic_istreamTchar_std__char_traitsTchar_t_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_unsigned_SS_long(argv[1]);
            if (_v) {
                return _wrap_istream_ignore__SWIG_1(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_std__basic_istreamTchar_std__char_traitsTchar_t_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_unsigned_SS_long(argv[1]);
            if (_v) {
                _v = SWIG_Check_int(argv[2]);
                if (_v) {
                    return _wrap_istream_ignore__SWIG_0(self,args);
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'istream_ignore'");
    return NULL;
}


static PyObject *_wrap_istream_peek(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::basic_istream<char > *arg1 = (std::basic_istream<char > *) 0 ;
    std::basic_istream<char >::int_type result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:istream_peek",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__basic_istreamTchar_std__char_traitsTchar_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (std::basic_istream<char >::int_type)(arg1)->peek();
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_istream_read(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::basic_istream<char > *arg1 = (std::basic_istream<char > *) 0 ;
    std::basic_istream<char >::char_type *arg2 = (std::basic_istream<char >::char_type *) 0 ;
    std::streamsize arg3 ;
    std::basic_istream<char,std::char_traits<char > > *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:istream_read",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__basic_istreamTchar_std__char_traitsTchar_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    if (!SWIG_AsCharPtr(obj1, (char**)&arg2)) {
        SWIG_arg_fail(2);SWIG_fail;
    }
    {
        arg3 = (std::streamsize)(SWIG_As_unsigned_SS_long(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        std::basic_istream<char,std::char_traits<char > > &_result_ref = (arg1)->read(arg2,arg3);
        result = (std::basic_istream<char,std::char_traits<char > > *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__basic_istreamTchar_std__char_traitsTchar_t_t, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_istream_readsome(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::basic_istream<char > *arg1 = (std::basic_istream<char > *) 0 ;
    std::basic_istream<char >::char_type *arg2 = (std::basic_istream<char >::char_type *) 0 ;
    std::streamsize arg3 ;
    std::streamsize result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:istream_readsome",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__basic_istreamTchar_std__char_traitsTchar_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    if (!SWIG_AsCharPtr(obj1, (char**)&arg2)) {
        SWIG_arg_fail(2);SWIG_fail;
    }
    {
        arg3 = (std::streamsize)(SWIG_As_unsigned_SS_long(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    result = (arg1)->readsome(arg2,arg3);
    
    {
        resultobj = SWIG_From_unsigned_SS_long((unsigned long)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_istream_putback(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::basic_istream<char > *arg1 = (std::basic_istream<char > *) 0 ;
    std::basic_istream<char >::char_type arg2 ;
    std::basic_istream<char,std::char_traits<char > > *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:istream_putback",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__basic_istreamTchar_std__char_traitsTchar_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (std::basic_istream<char >::char_type)(SWIG_As_char(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        std::basic_istream<char,std::char_traits<char > > &_result_ref = (arg1)->putback(arg2);
        result = (std::basic_istream<char,std::char_traits<char > > *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__basic_istreamTchar_std__char_traitsTchar_t_t, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_istream_unget(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::basic_istream<char > *arg1 = (std::basic_istream<char > *) 0 ;
    std::basic_istream<char,std::char_traits<char > > *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:istream_unget",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__basic_istreamTchar_std__char_traitsTchar_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        std::basic_istream<char,std::char_traits<char > > &_result_ref = (arg1)->unget();
        result = (std::basic_istream<char,std::char_traits<char > > *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__basic_istreamTchar_std__char_traitsTchar_t_t, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_istream_sync(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::basic_istream<char > *arg1 = (std::basic_istream<char > *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:istream_sync",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__basic_istreamTchar_std__char_traitsTchar_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int)(arg1)->sync();
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_istream_tellg(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::basic_istream<char > *arg1 = (std::basic_istream<char > *) 0 ;
    std::basic_istream<char >::pos_type result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:istream_tellg",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__basic_istreamTchar_std__char_traitsTchar_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (arg1)->tellg();
    
    {
        std::basic_istream<char >::pos_type * resultptr;
        resultptr = new std::basic_istream<char >::pos_type((std::basic_istream<char >::pos_type &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_std__basic_istreamTchar_std__char_traitsTchar_t_t__pos_type, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_istream_seekg__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::basic_istream<char > *arg1 = (std::basic_istream<char > *) 0 ;
    std::basic_istream<char >::pos_type arg2 ;
    std::basic_istream<char,std::char_traits<char > > *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:istream_seekg",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__basic_istreamTchar_std__char_traitsTchar_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        std::basic_istream<char >::pos_type * argp;
        SWIG_Python_ConvertPtr(obj1, (void **)&argp, SWIGTYPE_p_std__basic_istreamTchar_std__char_traitsTchar_t_t__pos_type, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("std::basic_istream<char >::pos_type");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *argp;
    }
    {
        std::basic_istream<char,std::char_traits<char > > &_result_ref = (arg1)->seekg(arg2);
        result = (std::basic_istream<char,std::char_traits<char > > *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__basic_istreamTchar_std__char_traitsTchar_t_t, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_istream_seekg__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::basic_istream<char > *arg1 = (std::basic_istream<char > *) 0 ;
    std::basic_istream<char >::off_type arg2 ;
    std::ios_base::seekdir arg3 ;
    std::basic_istream<char,std::char_traits<char > > *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:istream_seekg",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__basic_istreamTchar_std__char_traitsTchar_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        std::basic_istream<char >::off_type * argp;
        SWIG_Python_ConvertPtr(obj1, (void **)&argp, SWIGTYPE_p_std__basic_istreamTchar_std__char_traitsTchar_t_t__off_type, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("std::basic_istream<char >::off_type");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *argp;
    }
    {
        arg3 = (std::ios_base::seekdir)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        std::basic_istream<char,std::char_traits<char > > &_result_ref = (arg1)->seekg(arg2,arg3);
        result = (std::basic_istream<char,std::char_traits<char > > *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__basic_istreamTchar_std__char_traitsTchar_t_t, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_istream_seekg(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[4];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_std__basic_istreamTchar_std__char_traitsTchar_t_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_std__basic_istreamTchar_std__char_traitsTchar_t_t__pos_type, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_istream_seekg__SWIG_0(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_std__basic_istreamTchar_std__char_traitsTchar_t_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_std__basic_istreamTchar_std__char_traitsTchar_t_t__off_type, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                _v = SWIG_Check_int(argv[2]);
                if (_v) {
                    return _wrap_istream_seekg__SWIG_1(self,args);
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'istream_seekg'");
    return NULL;
}


static PyObject * istream_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_std__basic_istreamTchar_std__char_traitsTchar_t_t, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_iostream(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::basic_streambuf<char,std::char_traits<char > > *arg1 = (std::basic_streambuf<char,std::char_traits<char > > *) 0 ;
    std::basic_iostream<char > *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_iostream",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__basic_streambufTchar_std__char_traitsTchar_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (std::basic_iostream<char > *)new std::basic_iostream<char >(arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__basic_iostreamTchar_std__char_traitsTchar_t_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_iostream(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::basic_iostream<char > *arg1 = (std::basic_iostream<char > *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_iostream",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__basic_iostreamTchar_std__char_traitsTchar_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * iostream_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_std__basic_iostreamTchar_std__char_traitsTchar_t_t, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_endl(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::basic_ostream<char,std::char_traits<char > > *arg1 = 0 ;
    std::basic_ostream<char,std::char_traits<char > > *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:endl",&obj0)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("std::basic_ostream<char,std::char_traits<char > >");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        std::basic_ostream<char,std::char_traits<char > > &_result_ref = std::SWIGTEMPLATEDISAMBIGUATOR endl<char,std::char_traits<char > >(*arg1);
        result = (std::basic_ostream<char,std::char_traits<char > > *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ends(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::basic_ostream<char,std::char_traits<char > > *arg1 = 0 ;
    std::basic_ostream<char,std::char_traits<char > > *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ends",&obj0)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("std::basic_ostream<char,std::char_traits<char > >");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        std::basic_ostream<char,std::char_traits<char > > &_result_ref = std::SWIGTEMPLATEDISAMBIGUATOR ends<char,std::char_traits<char > >(*arg1);
        result = (std::basic_ostream<char,std::char_traits<char > > *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_flush(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::basic_ostream<char,std::char_traits<char > > *arg1 = 0 ;
    std::basic_ostream<char,std::char_traits<char > > *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:flush",&obj0)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("std::basic_ostream<char,std::char_traits<char > >");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        std::basic_ostream<char,std::char_traits<char > > &_result_ref = std::SWIGTEMPLATEDISAMBIGUATOR flush<char,std::char_traits<char > >(*arg1);
        result = (std::basic_ostream<char,std::char_traits<char > > *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0);
    return resultobj;
    fail:
    return NULL;
}


static int _wrap_PI_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable PI is read-only.");
    return 1;
}


static PyObject *_wrap_PI_get(void) {
    PyObject *pyobj = NULL;
    
    {
        pyobj = SWIG_From_double((double)(gpstk::PI)); 
    }
    return pyobj;
}


static int _wrap_TWO_PI_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable TWO_PI is read-only.");
    return 1;
}


static PyObject *_wrap_TWO_PI_get(void) {
    PyObject *pyobj = NULL;
    
    {
        pyobj = SWIG_From_double((double)(gpstk::TWO_PI)); 
    }
    return pyobj;
}


static int _wrap_SQRT_PI_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable SQRT_PI is read-only.");
    return 1;
}


static PyObject *_wrap_SQRT_PI_get(void) {
    PyObject *pyobj = NULL;
    
    {
        pyobj = SWIG_From_double((double)(gpstk::SQRT_PI)); 
    }
    return pyobj;
}


static int _wrap_REL_CONST_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable REL_CONST is read-only.");
    return 1;
}


static PyObject *_wrap_REL_CONST_get(void) {
    PyObject *pyobj = NULL;
    
    {
        pyobj = SWIG_From_double((double)(gpstk::REL_CONST)); 
    }
    return pyobj;
}


static int _wrap_OSC_FREQ_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable OSC_FREQ is read-only.");
    return 1;
}


static PyObject *_wrap_OSC_FREQ_get(void) {
    PyObject *pyobj = NULL;
    
    {
        pyobj = SWIG_From_double((double)(gpstk::OSC_FREQ)); 
    }
    return pyobj;
}


static int _wrap_C_GPS_M_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable C_GPS_M is read-only.");
    return 1;
}


static PyObject *_wrap_C_GPS_M_get(void) {
    PyObject *pyobj = NULL;
    
    {
        pyobj = SWIG_From_double((double)(gpstk::C_GPS_M)); 
    }
    return pyobj;
}


static int _wrap_RSVCLK_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable RSVCLK is read-only.");
    return 1;
}


static PyObject *_wrap_RSVCLK_get(void) {
    PyObject *pyobj = NULL;
    
    {
        pyobj = SWIG_From_double((double)(gpstk::RSVCLK)); 
    }
    return pyobj;
}


static int _wrap_L1_FREQ_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable L1_FREQ is read-only.");
    return 1;
}


static PyObject *_wrap_L1_FREQ_get(void) {
    PyObject *pyobj = NULL;
    
    {
        pyobj = SWIG_From_double((double)(gpstk::L1_FREQ)); 
    }
    return pyobj;
}


static int _wrap_L2_FREQ_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable L2_FREQ is read-only.");
    return 1;
}


static PyObject *_wrap_L2_FREQ_get(void) {
    PyObject *pyobj = NULL;
    
    {
        pyobj = SWIG_From_double((double)(gpstk::L2_FREQ)); 
    }
    return pyobj;
}


static int _wrap_L1_MULT_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable L1_MULT is read-only.");
    return 1;
}


static PyObject *_wrap_L1_MULT_get(void) {
    PyObject *pyobj = NULL;
    
    {
        pyobj = SWIG_From_double((double)(gpstk::L1_MULT)); 
    }
    return pyobj;
}


static int _wrap_L2_MULT_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable L2_MULT is read-only.");
    return 1;
}


static PyObject *_wrap_L2_MULT_get(void) {
    PyObject *pyobj = NULL;
    
    {
        pyobj = SWIG_From_double((double)(gpstk::L2_MULT)); 
    }
    return pyobj;
}


static int _wrap_SV_ACCURACY_MAX_INDEX_VALUE_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable SV_ACCURACY_MAX_INDEX_VALUE is read-only.");
    return 1;
}


static PyObject *_wrap_SV_ACCURACY_MAX_INDEX_VALUE_get(void) {
    PyObject *pyobj = NULL;
    
    {
        pyobj = SWIG_From_int((int)(gpstk::SV_ACCURACY_MAX_INDEX_VALUE)); 
    }
    return pyobj;
}


static int _wrap_SV_ACCURACY_MIN_INDEX_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable SV_ACCURACY_MIN_INDEX is read-only.");
    return 1;
}


static PyObject *_wrap_SV_ACCURACY_MIN_INDEX_get(void) {
    PyObject *pyobj = NULL;
    
    pyobj = SWIG_NewPointerObj((void *)(gpstk::SV_ACCURACY_MIN_INDEX), SWIGTYPE_p_double, 0);
    return pyobj;
}


static int _wrap_SV_ACCURACY_MAX_INDEX_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable SV_ACCURACY_MAX_INDEX is read-only.");
    return 1;
}


static PyObject *_wrap_SV_ACCURACY_MAX_INDEX_get(void) {
    PyObject *pyobj = NULL;
    
    pyobj = SWIG_NewPointerObj((void *)(gpstk::SV_ACCURACY_MAX_INDEX), SWIGTYPE_p_double, 0);
    return pyobj;
}


static PyObject *_wrap_accuracy2ura(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    double *arg1 = 0 ;
    short result;
    double temp1 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:accuracy2ura",&obj0)) goto fail;
    {
        temp1 = (double)(SWIG_As_double(obj0));
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = &temp1;
    }
    result = (short)gpstk::accuracy2ura((double const &)*arg1);
    
    {
        resultobj = SWIG_From_short((short)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ura2accuracy(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    short *arg1 = 0 ;
    double result;
    short temp1 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ura2accuracy",&obj0)) goto fail;
    {
        temp1 = (short)(SWIG_As_short(obj0));
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = &temp1;
    }
    result = (double)gpstk::ura2accuracy((short const &)*arg1);
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ios_out(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::ios::openmode result;
    
    if(!PyArg_ParseTuple(args,(char *)":ios_out")) goto fail;
    result = ios_out();
    
    {
        std::ios::openmode * resultptr;
        resultptr = new std::ios::openmode((std::ios::openmode &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_std__ios__openmode, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ios_in(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::ios::openmode result;
    
    if(!PyArg_ParseTuple(args,(char *)":ios_in")) goto fail;
    result = ios_in();
    
    {
        std::ios::openmode * resultptr;
        resultptr = new std::ios::openmode((std::ios::openmode &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_std__ios__openmode, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ios_out_trunc(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::ios::openmode result;
    
    if(!PyArg_ParseTuple(args,(char *)":ios_out_trunc")) goto fail;
    result = ios_out_trunc();
    
    {
        std::ios::openmode * resultptr;
        resultptr = new std::ios::openmode((std::ios::openmode &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_std__ios__openmode, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_read(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    FFStream *arg1 = 0 ;
    FFData *arg2 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:read",&obj0,&obj1)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__FFStream, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("FFStream");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_gpstk__FFData, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("FFData");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (bool)read(*arg1,(FFData const &)*arg2);
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_write(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    FFStream *arg1 = 0 ;
    FFData *arg2 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:write",&obj0,&obj1)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__FFStream, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("FFStream");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_gpstk__FFData, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("FFData");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (bool)write(*arg1,*arg2);
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexPrnMap_find(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RinexObsData *arg1 = 0 ;
    RinexPrn arg2 ;
    RinexObsData::RinexPrnMap::iterator result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RinexPrnMap_find",&obj0,&obj1)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexObsData, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("RinexObsData");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        RinexPrn * argp;
        SWIG_Python_ConvertPtr(obj1, (void **)&argp, SWIGTYPE_p_gpstk__RinexPrn, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("RinexPrn");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *argp;
    }
    result = RinexPrnMap_find(*arg1,arg2);
    
    {
        RinexObsData::RinexPrnMap::iterator * resultptr;
        resultptr = new RinexObsData::RinexPrnMap::iterator((RinexObsData::RinexPrnMap::iterator &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_gpstk__RinexObsData__RinexPrnMap__iterator, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexPrnMap_end(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RinexObsData *arg1 = 0 ;
    RinexObsData::RinexPrnMap::iterator result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RinexPrnMap_end",&obj0)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexObsData, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("RinexObsData");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    result = RinexPrnMap_end(*arg1);
    
    {
        RinexObsData::RinexPrnMap::iterator * resultptr;
        resultptr = new RinexObsData::RinexPrnMap::iterator((RinexObsData::RinexPrnMap::iterator &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_gpstk__RinexObsData__RinexPrnMap__iterator, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_getPseudoRangeCode__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RinexObsData arg1 ;
    RinexPrn arg2 ;
    RinexObsType arg3 ;
    RinexObsData::RinexDatum result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:getPseudoRangeCode",&obj0,&obj1,&obj2)) goto fail;
    {
        RinexObsData * argp;
        SWIG_Python_ConvertPtr(obj0, (void **)&argp, SWIGTYPE_p_gpstk__RinexObsData, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("RinexObsData");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = *argp;
    }
    {
        RinexPrn * argp;
        SWIG_Python_ConvertPtr(obj1, (void **)&argp, SWIGTYPE_p_gpstk__RinexPrn, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("RinexPrn");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *argp;
    }
    {
        RinexObsType * argp;
        SWIG_Python_ConvertPtr(obj2, (void **)&argp, SWIGTYPE_p_RinexObsType, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("RinexObsType");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
        arg3 = *argp;
    }
    result = getPseudoRangeCode(arg1,arg2,arg3);
    
    {
        RinexObsData::RinexDatum * resultptr;
        resultptr = new RinexObsData::RinexDatum((RinexObsData::RinexDatum &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_RinexDatum, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_getPseudoRangeCode__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RinexObsData::RinexPrnMap::iterator arg1 ;
    RinexObsHeader::RinexObsType arg2 ;
    RinexObsData::RinexDatum result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:getPseudoRangeCode",&obj0,&obj1)) goto fail;
    {
        RinexObsData::RinexPrnMap::iterator * argp;
        SWIG_Python_ConvertPtr(obj0, (void **)&argp, SWIGTYPE_p_gpstk__RinexObsData__RinexPrnMap__iterator, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("RinexObsData::RinexPrnMap::iterator");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = *argp;
    }
    {
        RinexObsHeader::RinexObsType * argp;
        SWIG_Python_ConvertPtr(obj1, (void **)&argp, SWIGTYPE_p_RinexObsType, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("RinexObsHeader::RinexObsType");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *argp;
    }
    result = getPseudoRangeCode(arg1,arg2);
    
    {
        RinexObsData::RinexDatum * resultptr;
        resultptr = new RinexObsData::RinexDatum((RinexObsData::RinexDatum &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_RinexDatum, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_getPseudoRangeCode(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[4];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_gpstk__RinexObsData__RinexPrnMap__iterator, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_RinexObsType, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_getPseudoRangeCode__SWIG_1(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_gpstk__RinexObsData, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_gpstk__RinexPrn, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                {
                    void *ptr = 0;
                    if (SWIG_ConvertPtr(argv[2], &ptr, SWIGTYPE_p_RinexObsType, 0) == -1) {
                        _v = 0;
                        PyErr_Clear();
                    } else {
                        _v = (ptr != 0);
                    }
                }
                if (_v) {
                    return _wrap_getPseudoRangeCode__SWIG_0(self,args);
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'getPseudoRangeCode'");
    return NULL;
}


static PyObject *_wrap_RinexPrnMap_compare(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RinexObsData::RinexPrnMap::iterator arg1 ;
    RinexObsData::RinexPrnMap::iterator arg2 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RinexPrnMap_compare",&obj0,&obj1)) goto fail;
    {
        RinexObsData::RinexPrnMap::iterator * argp;
        SWIG_Python_ConvertPtr(obj0, (void **)&argp, SWIGTYPE_p_gpstk__RinexObsData__RinexPrnMap__iterator, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("RinexObsData::RinexPrnMap::iterator");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = *argp;
    }
    {
        RinexObsData::RinexPrnMap::iterator * argp;
        SWIG_Python_ConvertPtr(obj1, (void **)&argp, SWIGTYPE_p_gpstk__RinexObsData__RinexPrnMap__iterator, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("RinexObsData::RinexPrnMap::iterator");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *argp;
    }
    result = (bool)RinexPrnMap_compare(arg1,arg2);
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_FFData(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::FFData *arg1 = (gpstk::FFData *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_FFData",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__FFData, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FFData_putRecord(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::FFData *arg1 = (gpstk::FFData *) 0 ;
    gpstk::FFStream *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:FFData_putRecord",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__FFData, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_gpstk__FFStream, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("gpstk::FFStream");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        ((gpstk::FFData const *)arg1)->putRecord(*arg2);
    }
    catch(FFStreamError &_e) {
        {
            FFStreamError * temp = new FFStreamError(_e);
            if (SWIGTYPE_p_FFStreamError->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_FFStreamError->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_FFStreamError,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"FFStreamError");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_FFStreamError,1));
                    */
            }
            SWIG_fail;
        }
    }
    catch(gpstk::StringUtils::StringException &_e) {
        {
            gpstk::StringUtils::StringException * temp = new gpstk::StringUtils::StringException(_e);
            if (SWIGTYPE_p_gpstk__StringUtils__StringException->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_gpstk__StringUtils__StringException->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__StringUtils__StringException,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"gpstk::StringUtils::StringException");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__StringUtils__StringException,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FFData_getRecord(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::FFData *arg1 = (gpstk::FFData *) 0 ;
    gpstk::FFStream *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:FFData_getRecord",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__FFData, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_gpstk__FFStream, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("gpstk::FFStream");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        (arg1)->getRecord(*arg2);
    }
    catch(FFStreamError &_e) {
        {
            FFStreamError * temp = new FFStreamError(_e);
            if (SWIGTYPE_p_FFStreamError->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_FFStreamError->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_FFStreamError,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"FFStreamError");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_FFStreamError,1));
                    */
            }
            SWIG_fail;
        }
    }
    catch(gpstk::StringUtils::StringException &_e) {
        {
            gpstk::StringUtils::StringException * temp = new gpstk::StringUtils::StringException(_e);
            if (SWIGTYPE_p_gpstk__StringUtils__StringException->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_gpstk__StringUtils__StringException->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__StringUtils__StringException,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"gpstk::StringUtils::StringException");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__StringUtils__StringException,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FFData_dump(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::FFData *arg1 = (gpstk::FFData *) 0 ;
    std::ostream *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:FFData_dump",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__FFData, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("std::ostream");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    ((gpstk::FFData const *)arg1)->dump(*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FFData_isHeader(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::FFData *arg1 = (gpstk::FFData *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:FFData_isHeader",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__FFData, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)((gpstk::FFData const *)arg1)->isHeader();
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FFData_isData(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::FFData *arg1 = (gpstk::FFData *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:FFData_isData",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__FFData, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)((gpstk::FFData const *)arg1)->isData();
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_streamRead__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::ostream *arg1 = 0 ;
    gpstk::FFData *arg2 = 0 ;
    std::ostream *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:streamRead",&obj0,&obj1)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("std::ostream");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_gpstk__FFData, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("gpstk::FFData");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        {
            std::ostream &_result_ref = operator <<(*arg1,(gpstk::FFData const &)*arg2);
            result = (std::ostream *) &_result_ref;
        }
    }
    catch(FFStreamError &_e) {
        {
            FFStreamError * temp = new FFStreamError(_e);
            if (SWIGTYPE_p_FFStreamError->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_FFStreamError->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_FFStreamError,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"FFStreamError");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_FFStreamError,1));
                    */
            }
            SWIG_fail;
        }
    }
    catch(gpstk::StringUtils::StringException &_e) {
        {
            gpstk::StringUtils::StringException * temp = new gpstk::StringUtils::StringException(_e);
            if (SWIGTYPE_p_gpstk__StringUtils__StringException->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_gpstk__StringUtils__StringException->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__StringUtils__StringException,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"gpstk::StringUtils::StringException");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__StringUtils__StringException,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_streamWrite(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::istream *arg1 = 0 ;
    gpstk::FFData *arg2 = 0 ;
    std::istream *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:streamWrite",&obj0,&obj1)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__basic_istreamTchar_std__char_traitsTchar_t_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("std::istream");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_gpstk__FFData, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("gpstk::FFData");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        {
            std::istream &_result_ref = operator >>(*arg1,*arg2);
            result = (std::istream *) &_result_ref;
        }
    }
    catch(FFStreamError &_e) {
        {
            FFStreamError * temp = new FFStreamError(_e);
            if (SWIGTYPE_p_FFStreamError->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_FFStreamError->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_FFStreamError,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"FFStreamError");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_FFStreamError,1));
                    */
            }
            SWIG_fail;
        }
    }
    catch(gpstk::StringUtils::StringException &_e) {
        {
            gpstk::StringUtils::StringException * temp = new gpstk::StringUtils::StringException(_e);
            if (SWIGTYPE_p_gpstk__StringUtils__StringException->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_gpstk__StringUtils__StringException->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__StringUtils__StringException,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"gpstk::StringUtils::StringException");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__StringUtils__StringException,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__basic_istreamTchar_std__char_traitsTchar_t_t, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject * FFData_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_gpstk__FFData, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_delete_FFStream(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::FFStream *arg1 = (gpstk::FFStream *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_FFStream",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__FFStream, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_FFStream__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::FFStream *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_FFStream")) goto fail;
    result = (gpstk::FFStream *)new gpstk::FFStream();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__FFStream, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_FFStream__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    char *arg1 = (char *) 0 ;
    std::ios::openmode arg2 ;
    gpstk::FFStream *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:new_FFStream",&obj0,&obj1)) goto fail;
    if (!SWIG_AsCharPtr(obj0, (char**)&arg1)) {
        SWIG_arg_fail(1);SWIG_fail;
    }
    {
        std::ios::openmode * argp;
        SWIG_Python_ConvertPtr(obj1, (void **)&argp, SWIGTYPE_p_std__ios__openmode, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("std::ios::openmode");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *argp;
    }
    result = (gpstk::FFStream *)new gpstk::FFStream((char const *)arg1,arg2);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__FFStream, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_FFStream__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    char *arg1 = (char *) 0 ;
    gpstk::FFStream *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_FFStream",&obj0)) goto fail;
    if (!SWIG_AsCharPtr(obj0, (char**)&arg1)) {
        SWIG_arg_fail(1);SWIG_fail;
    }
    result = (gpstk::FFStream *)new gpstk::FFStream((char const *)arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__FFStream, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_FFStream(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_new_FFStream__SWIG_0(self,args);
    }
    if (argc == 1) {
        int _v;
        _v = SWIG_AsCharPtr(argv[0], (char **)(0));
        if (_v) {
            return _wrap_new_FFStream__SWIG_2(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        _v = SWIG_AsCharPtr(argv[0], (char **)(0));
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_std__ios__openmode, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_new_FFStream__SWIG_1(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'new_FFStream'");
    return NULL;
}


static PyObject *_wrap_FFStream_open(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::FFStream *arg1 = (gpstk::FFStream *) 0 ;
    char *arg2 = (char *) 0 ;
    std::ios::openmode arg3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:FFStream_open",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__FFStream, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    if (!SWIG_AsCharPtr(obj1, (char**)&arg2)) {
        SWIG_arg_fail(2);SWIG_fail;
    }
    {
        std::ios::openmode * argp;
        SWIG_Python_ConvertPtr(obj2, (void **)&argp, SWIGTYPE_p_std__ios__openmode, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("std::ios::openmode");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
        arg3 = *argp;
    }
    (arg1)->open((char const *)arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FFStream_conditionalThrow(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::FFStream *arg1 = (gpstk::FFStream *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:FFStream_conditionalThrow",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__FFStream, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        (arg1)->conditionalThrow();
    }
    catch(FFStreamError &_e) {
        {
            FFStreamError * temp = new FFStreamError(_e);
            if (SWIGTYPE_p_FFStreamError->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_FFStreamError->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_FFStreamError,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"FFStreamError");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_FFStreamError,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FFStream_mostRecentException_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::FFStream *arg1 = (gpstk::FFStream *) 0 ;
    FFStreamError arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:FFStream_mostRecentException_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__FFStream, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        FFStreamError * argp;
        SWIG_Python_ConvertPtr(obj1, (void **)&argp, SWIGTYPE_p_FFStreamError, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("FFStreamError");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *argp;
    }
    if (arg1) (arg1)->mostRecentException = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FFStream_mostRecentException_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::FFStream *arg1 = (gpstk::FFStream *) 0 ;
    FFStreamError result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:FFStream_mostRecentException_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__FFStream, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result =  ((arg1)->mostRecentException);
    
    {
        FFStreamError * resultptr;
        resultptr = new FFStreamError((FFStreamError &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_FFStreamError, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FFStream_recordNumber_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::FFStream *arg1 = (gpstk::FFStream *) 0 ;
    unsigned int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:FFStream_recordNumber_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__FFStream, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (unsigned int)(SWIG_As_unsigned_SS_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->recordNumber = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FFStream_recordNumber_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::FFStream *arg1 = (gpstk::FFStream *) 0 ;
    unsigned int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:FFStream_recordNumber_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__FFStream, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (unsigned int) ((arg1)->recordNumber);
    
    {
        resultobj = SWIG_From_unsigned_SS_int((unsigned int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FFStream_filename_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::FFStream *arg1 = (gpstk::FFStream *) 0 ;
    std::string *arg2 = (std::string *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:FFStream_filename_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__FFStream, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__string, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->filename = *arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FFStream_filename_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::FFStream *arg1 = (gpstk::FFStream *) 0 ;
    std::string *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:FFStream_filename_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__FFStream, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (std::string *)& ((arg1)->filename);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__string, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject * FFStream_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_gpstk__FFStream, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_delete_FFTextStream(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::FFTextStream *arg1 = (gpstk::FFTextStream *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_FFTextStream",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__FFTextStream, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_FFTextStream__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::FFTextStream *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_FFTextStream")) goto fail;
    result = (gpstk::FFTextStream *)new gpstk::FFTextStream();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__FFTextStream, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_FFTextStream__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    char *arg1 = (char *) 0 ;
    std::ios::openmode arg2 ;
    gpstk::FFTextStream *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:new_FFTextStream",&obj0,&obj1)) goto fail;
    if (!SWIG_AsCharPtr(obj0, (char**)&arg1)) {
        SWIG_arg_fail(1);SWIG_fail;
    }
    {
        std::ios::openmode * argp;
        SWIG_Python_ConvertPtr(obj1, (void **)&argp, SWIGTYPE_p_std__ios__openmode, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("std::ios::openmode");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *argp;
    }
    result = (gpstk::FFTextStream *)new gpstk::FFTextStream((char const *)arg1,arg2);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__FFTextStream, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_FFTextStream__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    char *arg1 = (char *) 0 ;
    gpstk::FFTextStream *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_FFTextStream",&obj0)) goto fail;
    if (!SWIG_AsCharPtr(obj0, (char**)&arg1)) {
        SWIG_arg_fail(1);SWIG_fail;
    }
    result = (gpstk::FFTextStream *)new gpstk::FFTextStream((char const *)arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__FFTextStream, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_FFTextStream(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_new_FFTextStream__SWIG_0(self,args);
    }
    if (argc == 1) {
        int _v;
        _v = SWIG_AsCharPtr(argv[0], (char **)(0));
        if (_v) {
            return _wrap_new_FFTextStream__SWIG_2(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        _v = SWIG_AsCharPtr(argv[0], (char **)(0));
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_std__ios__openmode, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_new_FFTextStream__SWIG_1(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'new_FFTextStream'");
    return NULL;
}


static PyObject *_wrap_FFTextStream_open(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::FFTextStream *arg1 = (gpstk::FFTextStream *) 0 ;
    char *arg2 = (char *) 0 ;
    std::ios::openmode arg3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:FFTextStream_open",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__FFTextStream, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    if (!SWIG_AsCharPtr(obj1, (char**)&arg2)) {
        SWIG_arg_fail(2);SWIG_fail;
    }
    {
        std::ios::openmode * argp;
        SWIG_Python_ConvertPtr(obj2, (void **)&argp, SWIGTYPE_p_std__ios__openmode, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("std::ios::openmode");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
        arg3 = *argp;
    }
    (arg1)->open((char const *)arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FFTextStream_lineNumber_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::FFTextStream *arg1 = (gpstk::FFTextStream *) 0 ;
    unsigned int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:FFTextStream_lineNumber_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__FFTextStream, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (unsigned int)(SWIG_As_unsigned_SS_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->lineNumber = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FFTextStream_lineNumber_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::FFTextStream *arg1 = (gpstk::FFTextStream *) 0 ;
    unsigned int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:FFTextStream_lineNumber_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__FFTextStream, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (unsigned int) ((arg1)->lineNumber);
    
    {
        resultobj = SWIG_From_unsigned_SS_int((unsigned int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FFTextStream_formattedGetLine__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::FFTextStream *arg1 = (gpstk::FFTextStream *) 0 ;
    std::string *arg2 = 0 ;
    bool arg3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:FFTextStream_formattedGetLine",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__FFTextStream, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__string, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (bool const)(SWIG_As_bool(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    try {
        (arg1)->formattedGetLine(*arg2,arg3);
    }
    catch(EndOfFile &_e) {
        {
            EndOfFile * temp = new EndOfFile(_e);
            if (SWIGTYPE_p_EndOfFile->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_EndOfFile->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_EndOfFile,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"EndOfFile");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_EndOfFile,1));
                    */
            }
            SWIG_fail;
        }
    }
    catch(FFStreamError &_e) {
        {
            FFStreamError * temp = new FFStreamError(_e);
            if (SWIGTYPE_p_FFStreamError->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_FFStreamError->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_FFStreamError,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"FFStreamError");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_FFStreamError,1));
                    */
            }
            SWIG_fail;
        }
    }
    catch(gpstk::StringUtils::StringException &_e) {
        {
            gpstk::StringUtils::StringException * temp = new gpstk::StringUtils::StringException(_e);
            if (SWIGTYPE_p_gpstk__StringUtils__StringException->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_gpstk__StringUtils__StringException->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__StringUtils__StringException,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"gpstk::StringUtils::StringException");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__StringUtils__StringException,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FFTextStream_formattedGetLine__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::FFTextStream *arg1 = (gpstk::FFTextStream *) 0 ;
    std::string *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:FFTextStream_formattedGetLine",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__FFTextStream, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__string, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        (arg1)->formattedGetLine(*arg2);
    }
    catch(EndOfFile &_e) {
        {
            EndOfFile * temp = new EndOfFile(_e);
            if (SWIGTYPE_p_EndOfFile->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_EndOfFile->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_EndOfFile,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"EndOfFile");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_EndOfFile,1));
                    */
            }
            SWIG_fail;
        }
    }
    catch(FFStreamError &_e) {
        {
            FFStreamError * temp = new FFStreamError(_e);
            if (SWIGTYPE_p_FFStreamError->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_FFStreamError->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_FFStreamError,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"FFStreamError");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_FFStreamError,1));
                    */
            }
            SWIG_fail;
        }
    }
    catch(gpstk::StringUtils::StringException &_e) {
        {
            gpstk::StringUtils::StringException * temp = new gpstk::StringUtils::StringException(_e);
            if (SWIGTYPE_p_gpstk__StringUtils__StringException->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_gpstk__StringUtils__StringException->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__StringUtils__StringException,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"gpstk::StringUtils::StringException");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__StringUtils__StringException,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FFTextStream_formattedGetLine(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[4];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_gpstk__FFTextStream, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_std__string, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_FFTextStream_formattedGetLine__SWIG_1(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_gpstk__FFTextStream, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_std__string, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                _v = SWIG_Check_bool(argv[2]);
                if (_v) {
                    return _wrap_FFTextStream_formattedGetLine__SWIG_0(self,args);
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'FFTextStream_formattedGetLine'");
    return NULL;
}


static PyObject * FFTextStream_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_gpstk__FFTextStream, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_ExceptionLocation__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::string *arg1 = 0 ;
    std::string *arg2 = 0 ;
    unsigned long *arg3 = 0 ;
    gpstk::ExceptionLocation *result;
    int res1 = 0 ;
    int res2 = 0 ;
    unsigned long temp3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:new_ExceptionLocation",&obj0,&obj1,&obj2)) goto fail;
    {
        std::string *ptr = (std::string *)0;
        res1 = SWIG_AsPtr_std_string(obj0, &ptr);
        if (!res1) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj0);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = ptr;
    }
    {
        std::string *ptr = (std::string *)0;
        res2 = SWIG_AsPtr_std_string(obj1, &ptr);
        if (!res2) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj1);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = ptr;
    }
    {
        temp3 = (unsigned long)(SWIG_As_unsigned_SS_long(obj2));
        if (SWIG_arg_fail(3)) SWIG_fail;
        arg3 = &temp3;
    }
    result = (gpstk::ExceptionLocation *)new gpstk::ExceptionLocation((std::string const &)*arg1,(std::string const &)*arg2,(unsigned long const &)*arg3);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__ExceptionLocation, 1);
    if (res1 == SWIG_NEWOBJ) delete arg1;
    if (res2 == SWIG_NEWOBJ) delete arg2;
    return resultobj;
    fail:
    if (res1 == SWIG_NEWOBJ) delete arg1;
    if (res2 == SWIG_NEWOBJ) delete arg2;
    return NULL;
}


static PyObject *_wrap_new_ExceptionLocation__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::string *arg1 = 0 ;
    std::string *arg2 = 0 ;
    gpstk::ExceptionLocation *result;
    int res1 = 0 ;
    int res2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:new_ExceptionLocation",&obj0,&obj1)) goto fail;
    {
        std::string *ptr = (std::string *)0;
        res1 = SWIG_AsPtr_std_string(obj0, &ptr);
        if (!res1) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj0);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = ptr;
    }
    {
        std::string *ptr = (std::string *)0;
        res2 = SWIG_AsPtr_std_string(obj1, &ptr);
        if (!res2) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj1);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = ptr;
    }
    result = (gpstk::ExceptionLocation *)new gpstk::ExceptionLocation((std::string const &)*arg1,(std::string const &)*arg2);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__ExceptionLocation, 1);
    if (res1 == SWIG_NEWOBJ) delete arg1;
    if (res2 == SWIG_NEWOBJ) delete arg2;
    return resultobj;
    fail:
    if (res1 == SWIG_NEWOBJ) delete arg1;
    if (res2 == SWIG_NEWOBJ) delete arg2;
    return NULL;
}


static PyObject *_wrap_new_ExceptionLocation__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::string *arg1 = 0 ;
    gpstk::ExceptionLocation *result;
    int res1 = 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_ExceptionLocation",&obj0)) goto fail;
    {
        std::string *ptr = (std::string *)0;
        res1 = SWIG_AsPtr_std_string(obj0, &ptr);
        if (!res1) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj0);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = ptr;
    }
    result = (gpstk::ExceptionLocation *)new gpstk::ExceptionLocation((std::string const &)*arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__ExceptionLocation, 1);
    if (res1 == SWIG_NEWOBJ) delete arg1;
    return resultobj;
    fail:
    if (res1 == SWIG_NEWOBJ) delete arg1;
    return NULL;
}


static PyObject *_wrap_new_ExceptionLocation__SWIG_3(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::ExceptionLocation *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_ExceptionLocation")) goto fail;
    result = (gpstk::ExceptionLocation *)new gpstk::ExceptionLocation();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__ExceptionLocation, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_ExceptionLocation(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[4];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_new_ExceptionLocation__SWIG_3(self,args);
    }
    if (argc == 1) {
        int _v;
        _v = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
        if (_v) {
            return _wrap_new_ExceptionLocation__SWIG_2(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        _v = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
        if (_v) {
            _v = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
            if (_v) {
                return _wrap_new_ExceptionLocation__SWIG_1(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        _v = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
        if (_v) {
            _v = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
            if (_v) {
                _v = SWIG_Check_unsigned_SS_long(argv[2]);
                if (_v) {
                    return _wrap_new_ExceptionLocation__SWIG_0(self,args);
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'new_ExceptionLocation'");
    return NULL;
}


static PyObject *_wrap_delete_ExceptionLocation(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::ExceptionLocation *arg1 = (gpstk::ExceptionLocation *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_ExceptionLocation",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__ExceptionLocation, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ExceptionLocation_getFileName(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::ExceptionLocation *arg1 = (gpstk::ExceptionLocation *) 0 ;
    std::string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ExceptionLocation_getFileName",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__ExceptionLocation, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = ((gpstk::ExceptionLocation const *)arg1)->getFileName();
    
    {
        resultobj = SWIG_From_std_string((std::string)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ExceptionLocation_getFunctionName(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::ExceptionLocation *arg1 = (gpstk::ExceptionLocation *) 0 ;
    std::string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ExceptionLocation_getFunctionName",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__ExceptionLocation, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = ((gpstk::ExceptionLocation const *)arg1)->getFunctionName();
    
    {
        resultobj = SWIG_From_std_string((std::string)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ExceptionLocation_getLineNumber(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::ExceptionLocation *arg1 = (gpstk::ExceptionLocation *) 0 ;
    unsigned long result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ExceptionLocation_getLineNumber",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__ExceptionLocation, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (unsigned long)((gpstk::ExceptionLocation const *)arg1)->getLineNumber();
    
    {
        resultobj = SWIG_From_unsigned_SS_long((unsigned long)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ExceptionLocation_dump(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::ExceptionLocation *arg1 = (gpstk::ExceptionLocation *) 0 ;
    std::ostream *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ExceptionLocation_dump",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__ExceptionLocation, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("std::ostream");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    ((gpstk::ExceptionLocation const *)arg1)->dump(*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Exception_streamRead__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::ostream *arg1 = 0 ;
    gpstk::ExceptionLocation *arg2 = 0 ;
    std::ostream *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Exception_streamRead",&obj0,&obj1)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("std::ostream");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_gpstk__ExceptionLocation, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("gpstk::ExceptionLocation");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        std::ostream &_result_ref = operator <<(*arg1,(gpstk::ExceptionLocation const &)*arg2);
        result = (std::ostream *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject * ExceptionLocation_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_gpstk__ExceptionLocation, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_Exception__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::Exception *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_Exception")) goto fail;
    result = (gpstk::Exception *)new gpstk::Exception();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__Exception, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_Exception__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::string *arg1 = 0 ;
    unsigned long *arg2 = 0 ;
    gpstk::Exception::Severity *arg3 = 0 ;
    gpstk::Exception *result;
    int res1 = 0 ;
    unsigned long temp2 ;
    gpstk::Exception::Severity temp3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:new_Exception",&obj0,&obj1,&obj2)) goto fail;
    {
        std::string *ptr = (std::string *)0;
        res1 = SWIG_AsPtr_std_string(obj0, &ptr);
        if (!res1) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj0);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = ptr;
    }
    {
        temp2 = (unsigned long)(SWIG_As_unsigned_SS_long(obj1));
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = &temp2;
    }
    {
        temp3 = (gpstk::Exception::Severity)(SWIG_As_int(obj2));
        if (SWIG_arg_fail(3)) SWIG_fail;
        arg3 = &temp3;
    }
    result = (gpstk::Exception *)new gpstk::Exception((std::string const &)*arg1,(unsigned long const &)*arg2,(enum gpstk::Exception::Severity const &)*arg3);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__Exception, 1);
    if (res1 == SWIG_NEWOBJ) delete arg1;
    return resultobj;
    fail:
    if (res1 == SWIG_NEWOBJ) delete arg1;
    return NULL;
}


static PyObject *_wrap_new_Exception__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::string *arg1 = 0 ;
    unsigned long *arg2 = 0 ;
    gpstk::Exception *result;
    int res1 = 0 ;
    unsigned long temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:new_Exception",&obj0,&obj1)) goto fail;
    {
        std::string *ptr = (std::string *)0;
        res1 = SWIG_AsPtr_std_string(obj0, &ptr);
        if (!res1) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj0);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = ptr;
    }
    {
        temp2 = (unsigned long)(SWIG_As_unsigned_SS_long(obj1));
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = &temp2;
    }
    result = (gpstk::Exception *)new gpstk::Exception((std::string const &)*arg1,(unsigned long const &)*arg2);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__Exception, 1);
    if (res1 == SWIG_NEWOBJ) delete arg1;
    return resultobj;
    fail:
    if (res1 == SWIG_NEWOBJ) delete arg1;
    return NULL;
}


static PyObject *_wrap_new_Exception__SWIG_3(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::string *arg1 = 0 ;
    gpstk::Exception *result;
    int res1 = 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_Exception",&obj0)) goto fail;
    {
        std::string *ptr = (std::string *)0;
        res1 = SWIG_AsPtr_std_string(obj0, &ptr);
        if (!res1) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj0);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = ptr;
    }
    result = (gpstk::Exception *)new gpstk::Exception((std::string const &)*arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__Exception, 1);
    if (res1 == SWIG_NEWOBJ) delete arg1;
    return resultobj;
    fail:
    if (res1 == SWIG_NEWOBJ) delete arg1;
    return NULL;
}


static PyObject *_wrap_new_Exception__SWIG_4(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::Exception *arg1 = 0 ;
    gpstk::Exception *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_Exception",&obj0)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__Exception, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("gpstk::Exception");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    result = (gpstk::Exception *)new gpstk::Exception((gpstk::Exception const &)*arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__Exception, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_Exception(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[4];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_new_Exception__SWIG_0(self,args);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_gpstk__Exception, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            return _wrap_new_Exception__SWIG_4(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        _v = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
        if (_v) {
            return _wrap_new_Exception__SWIG_3(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        _v = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
        if (_v) {
            _v = SWIG_Check_unsigned_SS_long(argv[1]);
            if (_v) {
                return _wrap_new_Exception__SWIG_2(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        _v = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
        if (_v) {
            _v = SWIG_Check_unsigned_SS_long(argv[1]);
            if (_v) {
                _v = SWIG_Check_int(argv[2]);
                if (_v) {
                    return _wrap_new_Exception__SWIG_1(self,args);
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'new_Exception'");
    return NULL;
}


static PyObject *_wrap_delete_Exception(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::Exception *arg1 = (gpstk::Exception *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_Exception",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__Exception, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Exception_class_operator_assignment(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::Exception *arg1 = (gpstk::Exception *) 0 ;
    gpstk::Exception *arg2 = 0 ;
    gpstk::Exception *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Exception_class_operator_assignment",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__Exception, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_gpstk__Exception, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("gpstk::Exception");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        gpstk::Exception &_result_ref = (arg1)->operator =((gpstk::Exception const &)*arg2);
        result = (gpstk::Exception *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__Exception, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Exception_terminate(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::Exception *arg1 = (gpstk::Exception *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Exception_terminate",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__Exception, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    (arg1)->terminate();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Exception_getErrorId(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::Exception *arg1 = (gpstk::Exception *) 0 ;
    unsigned long result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Exception_getErrorId",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__Exception, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (unsigned long)((gpstk::Exception const *)arg1)->getErrorId();
    
    {
        resultobj = SWIG_From_unsigned_SS_long((unsigned long)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Exception_setErrorId(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::Exception *arg1 = (gpstk::Exception *) 0 ;
    unsigned long *arg2 = 0 ;
    gpstk::Exception *result;
    unsigned long temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Exception_setErrorId",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__Exception, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        temp2 = (unsigned long)(SWIG_As_unsigned_SS_long(obj1));
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = &temp2;
    }
    {
        gpstk::Exception &_result_ref = (arg1)->setErrorId((unsigned long const &)*arg2);
        result = (gpstk::Exception *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__Exception, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Exception_addLocation(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::Exception *arg1 = (gpstk::Exception *) 0 ;
    gpstk::ExceptionLocation *arg2 = 0 ;
    gpstk::Exception *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Exception_addLocation",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__Exception, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_gpstk__ExceptionLocation, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("gpstk::ExceptionLocation");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        gpstk::Exception &_result_ref = (arg1)->addLocation((gpstk::ExceptionLocation const &)*arg2);
        result = (gpstk::Exception *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__Exception, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Exception_getLocation__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::Exception *arg1 = (gpstk::Exception *) 0 ;
    size_t *arg2 = 0 ;
    gpstk::ExceptionLocation result;
    size_t temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Exception_getLocation",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__Exception, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        temp2 = (size_t)(SWIG_As_unsigned_SS_long(obj1));
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = &temp2;
    }
    result = ((gpstk::Exception const *)arg1)->getLocation((size_t const &)*arg2);
    
    {
        gpstk::ExceptionLocation * resultptr;
        resultptr = new gpstk::ExceptionLocation((gpstk::ExceptionLocation const &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_gpstk__ExceptionLocation, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Exception_getLocation__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::Exception *arg1 = (gpstk::Exception *) 0 ;
    gpstk::ExceptionLocation result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Exception_getLocation",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__Exception, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = ((gpstk::Exception const *)arg1)->getLocation();
    
    {
        gpstk::ExceptionLocation * resultptr;
        resultptr = new gpstk::ExceptionLocation((gpstk::ExceptionLocation const &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_gpstk__ExceptionLocation, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Exception_getLocation(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_gpstk__Exception, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_Exception_getLocation__SWIG_1(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_gpstk__Exception, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_unsigned_SS_long(argv[1]);
            if (_v) {
                return _wrap_Exception_getLocation__SWIG_0(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'Exception_getLocation'");
    return NULL;
}


static PyObject *_wrap_Exception_getLocationCount(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::Exception *arg1 = (gpstk::Exception *) 0 ;
    size_t result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Exception_getLocationCount",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__Exception, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = ((gpstk::Exception const *)arg1)->getLocationCount();
    
    {
        resultobj = SWIG_From_unsigned_SS_long((unsigned long)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Exception_isRecoverable(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::Exception *arg1 = (gpstk::Exception *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Exception_isRecoverable",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__Exception, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)((gpstk::Exception const *)arg1)->isRecoverable();
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Exception_setSeverity(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::Exception *arg1 = (gpstk::Exception *) 0 ;
    gpstk::Exception::Severity *arg2 = 0 ;
    gpstk::Exception *result;
    gpstk::Exception::Severity temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Exception_setSeverity",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__Exception, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        temp2 = (gpstk::Exception::Severity)(SWIG_As_int(obj1));
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = &temp2;
    }
    {
        gpstk::Exception &_result_ref = (arg1)->setSeverity((enum gpstk::Exception::Severity const &)*arg2);
        result = (gpstk::Exception *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__Exception, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Exception_addText(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::Exception *arg1 = (gpstk::Exception *) 0 ;
    std::string *arg2 = 0 ;
    gpstk::Exception *result;
    int res2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Exception_addText",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__Exception, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        std::string *ptr = (std::string *)0;
        res2 = SWIG_AsPtr_std_string(obj1, &ptr);
        if (!res2) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj1);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = ptr;
    }
    {
        gpstk::Exception &_result_ref = (arg1)->addText((std::string const &)*arg2);
        result = (gpstk::Exception *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__Exception, 0);
    if (res2 == SWIG_NEWOBJ) delete arg2;
    return resultobj;
    fail:
    if (res2 == SWIG_NEWOBJ) delete arg2;
    return NULL;
}


static PyObject *_wrap_Exception_getText__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::Exception *arg1 = (gpstk::Exception *) 0 ;
    size_t *arg2 = 0 ;
    std::string result;
    size_t temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Exception_getText",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__Exception, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        temp2 = (size_t)(SWIG_As_unsigned_SS_long(obj1));
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = &temp2;
    }
    result = ((gpstk::Exception const *)arg1)->getText((size_t const &)*arg2);
    
    {
        resultobj = SWIG_From_std_string((std::string)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Exception_getText__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::Exception *arg1 = (gpstk::Exception *) 0 ;
    std::string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Exception_getText",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__Exception, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = ((gpstk::Exception const *)arg1)->getText();
    
    {
        resultobj = SWIG_From_std_string((std::string)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Exception_getText(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_gpstk__Exception, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_Exception_getText__SWIG_1(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_gpstk__Exception, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_unsigned_SS_long(argv[1]);
            if (_v) {
                return _wrap_Exception_getText__SWIG_0(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'Exception_getText'");
    return NULL;
}


static PyObject *_wrap_Exception_getTextCount(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::Exception *arg1 = (gpstk::Exception *) 0 ;
    size_t result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Exception_getTextCount",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__Exception, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = ((gpstk::Exception const *)arg1)->getTextCount();
    
    {
        resultobj = SWIG_From_unsigned_SS_long((unsigned long)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Exception_getName(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::Exception *arg1 = (gpstk::Exception *) 0 ;
    std::string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Exception_getName",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__Exception, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = ((gpstk::Exception const *)arg1)->getName();
    
    {
        resultobj = SWIG_From_std_string((std::string)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Exception_dump(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::Exception *arg1 = (gpstk::Exception *) 0 ;
    std::ostream *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Exception_dump",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__Exception, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("std::ostream");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    ((gpstk::Exception const *)arg1)->dump(*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Exception_streamRead__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::ostream *arg1 = 0 ;
    gpstk::Exception *arg2 = 0 ;
    std::ostream *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Exception_streamRead",&obj0,&obj1)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("std::ostream");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_gpstk__Exception, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("gpstk::Exception");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        std::ostream &_result_ref = operator <<(*arg1,(gpstk::Exception const &)*arg2);
        result = (std::ostream *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject * Exception_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_gpstk__Exception, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_InvalidParameter__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::InvalidParameter *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_InvalidParameter")) goto fail;
    result = (gpstk::InvalidParameter *)new gpstk::InvalidParameter();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__InvalidParameter, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_InvalidParameter__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::InvalidParameter *arg1 = 0 ;
    gpstk::InvalidParameter *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_InvalidParameter",&obj0)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__InvalidParameter, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("gpstk::InvalidParameter");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    result = (gpstk::InvalidParameter *)new gpstk::InvalidParameter((gpstk::InvalidParameter const &)*arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__InvalidParameter, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_InvalidParameter__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::Exception *arg1 = 0 ;
    gpstk::InvalidParameter *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_InvalidParameter",&obj0)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__Exception, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("gpstk::Exception");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    result = (gpstk::InvalidParameter *)new gpstk::InvalidParameter((gpstk::Exception const &)*arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__InvalidParameter, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_InvalidParameter__SWIG_3(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::string arg1 ;
    unsigned long arg2 ;
    gpstk::Exception::Severity arg3 ;
    gpstk::InvalidParameter *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:new_InvalidParameter",&obj0,&obj1,&obj2)) goto fail;
    {
        std::string *ptr = (std::string *)0;
        int res = SWIG_AsPtr_std_string(obj0, &ptr);
        if (!res) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj0);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    {
        arg2 = (unsigned long)(SWIG_As_unsigned_SS_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (gpstk::Exception::Severity)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    result = (gpstk::InvalidParameter *)new gpstk::InvalidParameter(arg1,arg2,arg3);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__InvalidParameter, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_InvalidParameter__SWIG_4(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::string arg1 ;
    unsigned long arg2 ;
    gpstk::InvalidParameter *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:new_InvalidParameter",&obj0,&obj1)) goto fail;
    {
        std::string *ptr = (std::string *)0;
        int res = SWIG_AsPtr_std_string(obj0, &ptr);
        if (!res) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj0);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    {
        arg2 = (unsigned long)(SWIG_As_unsigned_SS_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (gpstk::InvalidParameter *)new gpstk::InvalidParameter(arg1,arg2);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__InvalidParameter, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_InvalidParameter__SWIG_5(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::string arg1 ;
    gpstk::InvalidParameter *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_InvalidParameter",&obj0)) goto fail;
    {
        std::string *ptr = (std::string *)0;
        int res = SWIG_AsPtr_std_string(obj0, &ptr);
        if (!res) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj0);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    result = (gpstk::InvalidParameter *)new gpstk::InvalidParameter(arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__InvalidParameter, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_InvalidParameter(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[4];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_new_InvalidParameter__SWIG_0(self,args);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_gpstk__InvalidParameter, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            return _wrap_new_InvalidParameter__SWIG_1(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_gpstk__Exception, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            return _wrap_new_InvalidParameter__SWIG_2(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        _v = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
        if (_v) {
            return _wrap_new_InvalidParameter__SWIG_5(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        _v = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
        if (_v) {
            _v = SWIG_Check_unsigned_SS_long(argv[1]);
            if (_v) {
                return _wrap_new_InvalidParameter__SWIG_4(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        _v = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
        if (_v) {
            _v = SWIG_Check_unsigned_SS_long(argv[1]);
            if (_v) {
                _v = SWIG_Check_int(argv[2]);
                if (_v) {
                    return _wrap_new_InvalidParameter__SWIG_3(self,args);
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'new_InvalidParameter'");
    return NULL;
}


static PyObject *_wrap_delete_InvalidParameter(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::InvalidParameter *arg1 = (gpstk::InvalidParameter *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_InvalidParameter",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__InvalidParameter, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_InvalidParameter_getName(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::InvalidParameter *arg1 = (gpstk::InvalidParameter *) 0 ;
    std::string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:InvalidParameter_getName",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__InvalidParameter, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = ((gpstk::InvalidParameter const *)arg1)->getName();
    
    {
        resultobj = SWIG_From_std_string((std::string)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_InvalidParameter_class_operator_assignment(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::InvalidParameter *arg1 = (gpstk::InvalidParameter *) 0 ;
    gpstk::InvalidParameter *arg2 = 0 ;
    gpstk::InvalidParameter *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:InvalidParameter_class_operator_assignment",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__InvalidParameter, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_gpstk__InvalidParameter, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("gpstk::InvalidParameter");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        gpstk::InvalidParameter &_result_ref = (arg1)->operator =((gpstk::InvalidParameter const &)*arg2);
        result = (gpstk::InvalidParameter *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__InvalidParameter, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Exception_streamRead__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::ostream *arg1 = 0 ;
    gpstk::InvalidParameter *arg2 = 0 ;
    std::ostream *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Exception_streamRead",&obj0,&obj1)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("std::ostream");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_gpstk__InvalidParameter, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("gpstk::InvalidParameter");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        std::ostream &_result_ref = operator <<(*arg1,(gpstk::InvalidParameter const &)*arg2);
        result = (std::ostream *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject * InvalidParameter_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_gpstk__InvalidParameter, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_InvalidRequest__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::InvalidRequest *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_InvalidRequest")) goto fail;
    result = (gpstk::InvalidRequest *)new gpstk::InvalidRequest();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__InvalidRequest, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_InvalidRequest__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::InvalidRequest *arg1 = 0 ;
    gpstk::InvalidRequest *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_InvalidRequest",&obj0)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__InvalidRequest, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("gpstk::InvalidRequest");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    result = (gpstk::InvalidRequest *)new gpstk::InvalidRequest((gpstk::InvalidRequest const &)*arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__InvalidRequest, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_InvalidRequest__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::Exception *arg1 = 0 ;
    gpstk::InvalidRequest *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_InvalidRequest",&obj0)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__Exception, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("gpstk::Exception");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    result = (gpstk::InvalidRequest *)new gpstk::InvalidRequest((gpstk::Exception const &)*arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__InvalidRequest, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_InvalidRequest__SWIG_3(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::string arg1 ;
    unsigned long arg2 ;
    gpstk::Exception::Severity arg3 ;
    gpstk::InvalidRequest *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:new_InvalidRequest",&obj0,&obj1,&obj2)) goto fail;
    {
        std::string *ptr = (std::string *)0;
        int res = SWIG_AsPtr_std_string(obj0, &ptr);
        if (!res) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj0);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    {
        arg2 = (unsigned long)(SWIG_As_unsigned_SS_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (gpstk::Exception::Severity)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    result = (gpstk::InvalidRequest *)new gpstk::InvalidRequest(arg1,arg2,arg3);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__InvalidRequest, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_InvalidRequest__SWIG_4(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::string arg1 ;
    unsigned long arg2 ;
    gpstk::InvalidRequest *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:new_InvalidRequest",&obj0,&obj1)) goto fail;
    {
        std::string *ptr = (std::string *)0;
        int res = SWIG_AsPtr_std_string(obj0, &ptr);
        if (!res) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj0);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    {
        arg2 = (unsigned long)(SWIG_As_unsigned_SS_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (gpstk::InvalidRequest *)new gpstk::InvalidRequest(arg1,arg2);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__InvalidRequest, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_InvalidRequest__SWIG_5(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::string arg1 ;
    gpstk::InvalidRequest *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_InvalidRequest",&obj0)) goto fail;
    {
        std::string *ptr = (std::string *)0;
        int res = SWIG_AsPtr_std_string(obj0, &ptr);
        if (!res) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj0);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    result = (gpstk::InvalidRequest *)new gpstk::InvalidRequest(arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__InvalidRequest, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_InvalidRequest(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[4];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_new_InvalidRequest__SWIG_0(self,args);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_gpstk__InvalidRequest, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            return _wrap_new_InvalidRequest__SWIG_1(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_gpstk__Exception, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            return _wrap_new_InvalidRequest__SWIG_2(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        _v = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
        if (_v) {
            return _wrap_new_InvalidRequest__SWIG_5(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        _v = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
        if (_v) {
            _v = SWIG_Check_unsigned_SS_long(argv[1]);
            if (_v) {
                return _wrap_new_InvalidRequest__SWIG_4(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        _v = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
        if (_v) {
            _v = SWIG_Check_unsigned_SS_long(argv[1]);
            if (_v) {
                _v = SWIG_Check_int(argv[2]);
                if (_v) {
                    return _wrap_new_InvalidRequest__SWIG_3(self,args);
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'new_InvalidRequest'");
    return NULL;
}


static PyObject *_wrap_delete_InvalidRequest(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::InvalidRequest *arg1 = (gpstk::InvalidRequest *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_InvalidRequest",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__InvalidRequest, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_InvalidRequest_getName(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::InvalidRequest *arg1 = (gpstk::InvalidRequest *) 0 ;
    std::string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:InvalidRequest_getName",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__InvalidRequest, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = ((gpstk::InvalidRequest const *)arg1)->getName();
    
    {
        resultobj = SWIG_From_std_string((std::string)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_InvalidRequest_class_operator_assignment(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::InvalidRequest *arg1 = (gpstk::InvalidRequest *) 0 ;
    gpstk::InvalidRequest *arg2 = 0 ;
    gpstk::InvalidRequest *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:InvalidRequest_class_operator_assignment",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__InvalidRequest, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_gpstk__InvalidRequest, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("gpstk::InvalidRequest");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        gpstk::InvalidRequest &_result_ref = (arg1)->operator =((gpstk::InvalidRequest const &)*arg2);
        result = (gpstk::InvalidRequest *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__InvalidRequest, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Exception_streamRead__SWIG_3(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::ostream *arg1 = 0 ;
    gpstk::InvalidRequest *arg2 = 0 ;
    std::ostream *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Exception_streamRead",&obj0,&obj1)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("std::ostream");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_gpstk__InvalidRequest, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("gpstk::InvalidRequest");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        std::ostream &_result_ref = operator <<(*arg1,(gpstk::InvalidRequest const &)*arg2);
        result = (std::ostream *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject * InvalidRequest_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_gpstk__InvalidRequest, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_AssertionFailure__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::AssertionFailure *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_AssertionFailure")) goto fail;
    result = (gpstk::AssertionFailure *)new gpstk::AssertionFailure();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__AssertionFailure, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_AssertionFailure__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::AssertionFailure *arg1 = 0 ;
    gpstk::AssertionFailure *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_AssertionFailure",&obj0)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__AssertionFailure, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("gpstk::AssertionFailure");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    result = (gpstk::AssertionFailure *)new gpstk::AssertionFailure((gpstk::AssertionFailure const &)*arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__AssertionFailure, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_AssertionFailure__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::Exception *arg1 = 0 ;
    gpstk::AssertionFailure *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_AssertionFailure",&obj0)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__Exception, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("gpstk::Exception");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    result = (gpstk::AssertionFailure *)new gpstk::AssertionFailure((gpstk::Exception const &)*arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__AssertionFailure, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_AssertionFailure__SWIG_3(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::string arg1 ;
    unsigned long arg2 ;
    gpstk::Exception::Severity arg3 ;
    gpstk::AssertionFailure *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:new_AssertionFailure",&obj0,&obj1,&obj2)) goto fail;
    {
        std::string *ptr = (std::string *)0;
        int res = SWIG_AsPtr_std_string(obj0, &ptr);
        if (!res) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj0);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    {
        arg2 = (unsigned long)(SWIG_As_unsigned_SS_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (gpstk::Exception::Severity)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    result = (gpstk::AssertionFailure *)new gpstk::AssertionFailure(arg1,arg2,arg3);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__AssertionFailure, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_AssertionFailure__SWIG_4(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::string arg1 ;
    unsigned long arg2 ;
    gpstk::AssertionFailure *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:new_AssertionFailure",&obj0,&obj1)) goto fail;
    {
        std::string *ptr = (std::string *)0;
        int res = SWIG_AsPtr_std_string(obj0, &ptr);
        if (!res) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj0);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    {
        arg2 = (unsigned long)(SWIG_As_unsigned_SS_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (gpstk::AssertionFailure *)new gpstk::AssertionFailure(arg1,arg2);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__AssertionFailure, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_AssertionFailure__SWIG_5(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::string arg1 ;
    gpstk::AssertionFailure *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_AssertionFailure",&obj0)) goto fail;
    {
        std::string *ptr = (std::string *)0;
        int res = SWIG_AsPtr_std_string(obj0, &ptr);
        if (!res) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj0);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    result = (gpstk::AssertionFailure *)new gpstk::AssertionFailure(arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__AssertionFailure, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_AssertionFailure(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[4];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_new_AssertionFailure__SWIG_0(self,args);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_gpstk__AssertionFailure, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            return _wrap_new_AssertionFailure__SWIG_1(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_gpstk__Exception, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            return _wrap_new_AssertionFailure__SWIG_2(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        _v = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
        if (_v) {
            return _wrap_new_AssertionFailure__SWIG_5(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        _v = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
        if (_v) {
            _v = SWIG_Check_unsigned_SS_long(argv[1]);
            if (_v) {
                return _wrap_new_AssertionFailure__SWIG_4(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        _v = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
        if (_v) {
            _v = SWIG_Check_unsigned_SS_long(argv[1]);
            if (_v) {
                _v = SWIG_Check_int(argv[2]);
                if (_v) {
                    return _wrap_new_AssertionFailure__SWIG_3(self,args);
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'new_AssertionFailure'");
    return NULL;
}


static PyObject *_wrap_delete_AssertionFailure(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::AssertionFailure *arg1 = (gpstk::AssertionFailure *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_AssertionFailure",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__AssertionFailure, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_AssertionFailure_getName(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::AssertionFailure *arg1 = (gpstk::AssertionFailure *) 0 ;
    std::string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:AssertionFailure_getName",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__AssertionFailure, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = ((gpstk::AssertionFailure const *)arg1)->getName();
    
    {
        resultobj = SWIG_From_std_string((std::string)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_AssertionFailure_class_operator_assignment(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::AssertionFailure *arg1 = (gpstk::AssertionFailure *) 0 ;
    gpstk::AssertionFailure *arg2 = 0 ;
    gpstk::AssertionFailure *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:AssertionFailure_class_operator_assignment",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__AssertionFailure, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_gpstk__AssertionFailure, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("gpstk::AssertionFailure");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        gpstk::AssertionFailure &_result_ref = (arg1)->operator =((gpstk::AssertionFailure const &)*arg2);
        result = (gpstk::AssertionFailure *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__AssertionFailure, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Exception_streamRead__SWIG_4(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::ostream *arg1 = 0 ;
    gpstk::AssertionFailure *arg2 = 0 ;
    std::ostream *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Exception_streamRead",&obj0,&obj1)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("std::ostream");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_gpstk__AssertionFailure, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("gpstk::AssertionFailure");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        std::ostream &_result_ref = operator <<(*arg1,(gpstk::AssertionFailure const &)*arg2);
        result = (std::ostream *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject * AssertionFailure_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_gpstk__AssertionFailure, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_AccessError__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::AccessError *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_AccessError")) goto fail;
    result = (gpstk::AccessError *)new gpstk::AccessError();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__AccessError, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_AccessError__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::AccessError *arg1 = 0 ;
    gpstk::AccessError *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_AccessError",&obj0)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__AccessError, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("gpstk::AccessError");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    result = (gpstk::AccessError *)new gpstk::AccessError((gpstk::AccessError const &)*arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__AccessError, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_AccessError__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::Exception *arg1 = 0 ;
    gpstk::AccessError *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_AccessError",&obj0)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__Exception, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("gpstk::Exception");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    result = (gpstk::AccessError *)new gpstk::AccessError((gpstk::Exception const &)*arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__AccessError, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_AccessError__SWIG_3(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::string arg1 ;
    unsigned long arg2 ;
    gpstk::Exception::Severity arg3 ;
    gpstk::AccessError *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:new_AccessError",&obj0,&obj1,&obj2)) goto fail;
    {
        std::string *ptr = (std::string *)0;
        int res = SWIG_AsPtr_std_string(obj0, &ptr);
        if (!res) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj0);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    {
        arg2 = (unsigned long)(SWIG_As_unsigned_SS_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (gpstk::Exception::Severity)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    result = (gpstk::AccessError *)new gpstk::AccessError(arg1,arg2,arg3);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__AccessError, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_AccessError__SWIG_4(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::string arg1 ;
    unsigned long arg2 ;
    gpstk::AccessError *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:new_AccessError",&obj0,&obj1)) goto fail;
    {
        std::string *ptr = (std::string *)0;
        int res = SWIG_AsPtr_std_string(obj0, &ptr);
        if (!res) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj0);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    {
        arg2 = (unsigned long)(SWIG_As_unsigned_SS_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (gpstk::AccessError *)new gpstk::AccessError(arg1,arg2);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__AccessError, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_AccessError__SWIG_5(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::string arg1 ;
    gpstk::AccessError *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_AccessError",&obj0)) goto fail;
    {
        std::string *ptr = (std::string *)0;
        int res = SWIG_AsPtr_std_string(obj0, &ptr);
        if (!res) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj0);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    result = (gpstk::AccessError *)new gpstk::AccessError(arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__AccessError, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_AccessError(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[4];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_new_AccessError__SWIG_0(self,args);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_gpstk__AccessError, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            return _wrap_new_AccessError__SWIG_1(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_gpstk__Exception, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            return _wrap_new_AccessError__SWIG_2(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        _v = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
        if (_v) {
            return _wrap_new_AccessError__SWIG_5(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        _v = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
        if (_v) {
            _v = SWIG_Check_unsigned_SS_long(argv[1]);
            if (_v) {
                return _wrap_new_AccessError__SWIG_4(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        _v = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
        if (_v) {
            _v = SWIG_Check_unsigned_SS_long(argv[1]);
            if (_v) {
                _v = SWIG_Check_int(argv[2]);
                if (_v) {
                    return _wrap_new_AccessError__SWIG_3(self,args);
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'new_AccessError'");
    return NULL;
}


static PyObject *_wrap_delete_AccessError(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::AccessError *arg1 = (gpstk::AccessError *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_AccessError",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__AccessError, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_AccessError_getName(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::AccessError *arg1 = (gpstk::AccessError *) 0 ;
    std::string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:AccessError_getName",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__AccessError, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = ((gpstk::AccessError const *)arg1)->getName();
    
    {
        resultobj = SWIG_From_std_string((std::string)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_AccessError_class_operator_assignment(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::AccessError *arg1 = (gpstk::AccessError *) 0 ;
    gpstk::AccessError *arg2 = 0 ;
    gpstk::AccessError *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:AccessError_class_operator_assignment",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__AccessError, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_gpstk__AccessError, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("gpstk::AccessError");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        gpstk::AccessError &_result_ref = (arg1)->operator =((gpstk::AccessError const &)*arg2);
        result = (gpstk::AccessError *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__AccessError, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Exception_streamRead__SWIG_5(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::ostream *arg1 = 0 ;
    gpstk::AccessError *arg2 = 0 ;
    std::ostream *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Exception_streamRead",&obj0,&obj1)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("std::ostream");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_gpstk__AccessError, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("gpstk::AccessError");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        std::ostream &_result_ref = operator <<(*arg1,(gpstk::AccessError const &)*arg2);
        result = (std::ostream *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject * AccessError_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_gpstk__AccessError, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_IndexOutOfBoundsException__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::IndexOutOfBoundsException *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_IndexOutOfBoundsException")) goto fail;
    result = (gpstk::IndexOutOfBoundsException *)new gpstk::IndexOutOfBoundsException();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__IndexOutOfBoundsException, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_IndexOutOfBoundsException__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::IndexOutOfBoundsException *arg1 = 0 ;
    gpstk::IndexOutOfBoundsException *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_IndexOutOfBoundsException",&obj0)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__IndexOutOfBoundsException, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("gpstk::IndexOutOfBoundsException");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    result = (gpstk::IndexOutOfBoundsException *)new gpstk::IndexOutOfBoundsException((gpstk::IndexOutOfBoundsException const &)*arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__IndexOutOfBoundsException, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_IndexOutOfBoundsException__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::Exception *arg1 = 0 ;
    gpstk::IndexOutOfBoundsException *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_IndexOutOfBoundsException",&obj0)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__Exception, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("gpstk::Exception");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    result = (gpstk::IndexOutOfBoundsException *)new gpstk::IndexOutOfBoundsException((gpstk::Exception const &)*arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__IndexOutOfBoundsException, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_IndexOutOfBoundsException__SWIG_3(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::string arg1 ;
    unsigned long arg2 ;
    gpstk::Exception::Severity arg3 ;
    gpstk::IndexOutOfBoundsException *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:new_IndexOutOfBoundsException",&obj0,&obj1,&obj2)) goto fail;
    {
        std::string *ptr = (std::string *)0;
        int res = SWIG_AsPtr_std_string(obj0, &ptr);
        if (!res) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj0);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    {
        arg2 = (unsigned long)(SWIG_As_unsigned_SS_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (gpstk::Exception::Severity)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    result = (gpstk::IndexOutOfBoundsException *)new gpstk::IndexOutOfBoundsException(arg1,arg2,arg3);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__IndexOutOfBoundsException, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_IndexOutOfBoundsException__SWIG_4(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::string arg1 ;
    unsigned long arg2 ;
    gpstk::IndexOutOfBoundsException *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:new_IndexOutOfBoundsException",&obj0,&obj1)) goto fail;
    {
        std::string *ptr = (std::string *)0;
        int res = SWIG_AsPtr_std_string(obj0, &ptr);
        if (!res) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj0);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    {
        arg2 = (unsigned long)(SWIG_As_unsigned_SS_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (gpstk::IndexOutOfBoundsException *)new gpstk::IndexOutOfBoundsException(arg1,arg2);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__IndexOutOfBoundsException, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_IndexOutOfBoundsException__SWIG_5(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::string arg1 ;
    gpstk::IndexOutOfBoundsException *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_IndexOutOfBoundsException",&obj0)) goto fail;
    {
        std::string *ptr = (std::string *)0;
        int res = SWIG_AsPtr_std_string(obj0, &ptr);
        if (!res) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj0);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    result = (gpstk::IndexOutOfBoundsException *)new gpstk::IndexOutOfBoundsException(arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__IndexOutOfBoundsException, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_IndexOutOfBoundsException(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[4];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_new_IndexOutOfBoundsException__SWIG_0(self,args);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_gpstk__IndexOutOfBoundsException, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            return _wrap_new_IndexOutOfBoundsException__SWIG_1(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_gpstk__Exception, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            return _wrap_new_IndexOutOfBoundsException__SWIG_2(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        _v = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
        if (_v) {
            return _wrap_new_IndexOutOfBoundsException__SWIG_5(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        _v = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
        if (_v) {
            _v = SWIG_Check_unsigned_SS_long(argv[1]);
            if (_v) {
                return _wrap_new_IndexOutOfBoundsException__SWIG_4(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        _v = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
        if (_v) {
            _v = SWIG_Check_unsigned_SS_long(argv[1]);
            if (_v) {
                _v = SWIG_Check_int(argv[2]);
                if (_v) {
                    return _wrap_new_IndexOutOfBoundsException__SWIG_3(self,args);
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'new_IndexOutOfBoundsException'");
    return NULL;
}


static PyObject *_wrap_delete_IndexOutOfBoundsException(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::IndexOutOfBoundsException *arg1 = (gpstk::IndexOutOfBoundsException *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_IndexOutOfBoundsException",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__IndexOutOfBoundsException, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IndexOutOfBoundsException_getName(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::IndexOutOfBoundsException *arg1 = (gpstk::IndexOutOfBoundsException *) 0 ;
    std::string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:IndexOutOfBoundsException_getName",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__IndexOutOfBoundsException, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = ((gpstk::IndexOutOfBoundsException const *)arg1)->getName();
    
    {
        resultobj = SWIG_From_std_string((std::string)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IndexOutOfBoundsException_class_operator_assignment(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::IndexOutOfBoundsException *arg1 = (gpstk::IndexOutOfBoundsException *) 0 ;
    gpstk::IndexOutOfBoundsException *arg2 = 0 ;
    gpstk::IndexOutOfBoundsException *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:IndexOutOfBoundsException_class_operator_assignment",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__IndexOutOfBoundsException, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_gpstk__IndexOutOfBoundsException, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("gpstk::IndexOutOfBoundsException");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        gpstk::IndexOutOfBoundsException &_result_ref = (arg1)->operator =((gpstk::IndexOutOfBoundsException const &)*arg2);
        result = (gpstk::IndexOutOfBoundsException *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__IndexOutOfBoundsException, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Exception_streamRead__SWIG_6(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::ostream *arg1 = 0 ;
    gpstk::IndexOutOfBoundsException *arg2 = 0 ;
    std::ostream *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Exception_streamRead",&obj0,&obj1)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("std::ostream");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_gpstk__IndexOutOfBoundsException, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("gpstk::IndexOutOfBoundsException");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        std::ostream &_result_ref = operator <<(*arg1,(gpstk::IndexOutOfBoundsException const &)*arg2);
        result = (std::ostream *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject * IndexOutOfBoundsException_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_gpstk__IndexOutOfBoundsException, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_InvalidArgumentException__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::InvalidArgumentException *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_InvalidArgumentException")) goto fail;
    result = (gpstk::InvalidArgumentException *)new gpstk::InvalidArgumentException();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__InvalidArgumentException, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_InvalidArgumentException__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::InvalidArgumentException *arg1 = 0 ;
    gpstk::InvalidArgumentException *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_InvalidArgumentException",&obj0)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__InvalidArgumentException, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("gpstk::InvalidArgumentException");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    result = (gpstk::InvalidArgumentException *)new gpstk::InvalidArgumentException((gpstk::InvalidArgumentException const &)*arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__InvalidArgumentException, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_InvalidArgumentException__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::Exception *arg1 = 0 ;
    gpstk::InvalidArgumentException *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_InvalidArgumentException",&obj0)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__Exception, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("gpstk::Exception");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    result = (gpstk::InvalidArgumentException *)new gpstk::InvalidArgumentException((gpstk::Exception const &)*arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__InvalidArgumentException, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_InvalidArgumentException__SWIG_3(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::string arg1 ;
    unsigned long arg2 ;
    gpstk::Exception::Severity arg3 ;
    gpstk::InvalidArgumentException *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:new_InvalidArgumentException",&obj0,&obj1,&obj2)) goto fail;
    {
        std::string *ptr = (std::string *)0;
        int res = SWIG_AsPtr_std_string(obj0, &ptr);
        if (!res) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj0);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    {
        arg2 = (unsigned long)(SWIG_As_unsigned_SS_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (gpstk::Exception::Severity)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    result = (gpstk::InvalidArgumentException *)new gpstk::InvalidArgumentException(arg1,arg2,arg3);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__InvalidArgumentException, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_InvalidArgumentException__SWIG_4(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::string arg1 ;
    unsigned long arg2 ;
    gpstk::InvalidArgumentException *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:new_InvalidArgumentException",&obj0,&obj1)) goto fail;
    {
        std::string *ptr = (std::string *)0;
        int res = SWIG_AsPtr_std_string(obj0, &ptr);
        if (!res) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj0);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    {
        arg2 = (unsigned long)(SWIG_As_unsigned_SS_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (gpstk::InvalidArgumentException *)new gpstk::InvalidArgumentException(arg1,arg2);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__InvalidArgumentException, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_InvalidArgumentException__SWIG_5(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::string arg1 ;
    gpstk::InvalidArgumentException *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_InvalidArgumentException",&obj0)) goto fail;
    {
        std::string *ptr = (std::string *)0;
        int res = SWIG_AsPtr_std_string(obj0, &ptr);
        if (!res) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj0);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    result = (gpstk::InvalidArgumentException *)new gpstk::InvalidArgumentException(arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__InvalidArgumentException, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_InvalidArgumentException(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[4];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_new_InvalidArgumentException__SWIG_0(self,args);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_gpstk__InvalidArgumentException, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            return _wrap_new_InvalidArgumentException__SWIG_1(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_gpstk__Exception, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            return _wrap_new_InvalidArgumentException__SWIG_2(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        _v = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
        if (_v) {
            return _wrap_new_InvalidArgumentException__SWIG_5(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        _v = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
        if (_v) {
            _v = SWIG_Check_unsigned_SS_long(argv[1]);
            if (_v) {
                return _wrap_new_InvalidArgumentException__SWIG_4(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        _v = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
        if (_v) {
            _v = SWIG_Check_unsigned_SS_long(argv[1]);
            if (_v) {
                _v = SWIG_Check_int(argv[2]);
                if (_v) {
                    return _wrap_new_InvalidArgumentException__SWIG_3(self,args);
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'new_InvalidArgumentException'");
    return NULL;
}


static PyObject *_wrap_delete_InvalidArgumentException(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::InvalidArgumentException *arg1 = (gpstk::InvalidArgumentException *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_InvalidArgumentException",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__InvalidArgumentException, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_InvalidArgumentException_getName(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::InvalidArgumentException *arg1 = (gpstk::InvalidArgumentException *) 0 ;
    std::string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:InvalidArgumentException_getName",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__InvalidArgumentException, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = ((gpstk::InvalidArgumentException const *)arg1)->getName();
    
    {
        resultobj = SWIG_From_std_string((std::string)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_InvalidArgumentException_class_operator_assignment(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::InvalidArgumentException *arg1 = (gpstk::InvalidArgumentException *) 0 ;
    gpstk::InvalidArgumentException *arg2 = 0 ;
    gpstk::InvalidArgumentException *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:InvalidArgumentException_class_operator_assignment",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__InvalidArgumentException, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_gpstk__InvalidArgumentException, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("gpstk::InvalidArgumentException");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        gpstk::InvalidArgumentException &_result_ref = (arg1)->operator =((gpstk::InvalidArgumentException const &)*arg2);
        result = (gpstk::InvalidArgumentException *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__InvalidArgumentException, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Exception_streamRead__SWIG_7(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::ostream *arg1 = 0 ;
    gpstk::InvalidArgumentException *arg2 = 0 ;
    std::ostream *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Exception_streamRead",&obj0,&obj1)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("std::ostream");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_gpstk__InvalidArgumentException, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("gpstk::InvalidArgumentException");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        std::ostream &_result_ref = operator <<(*arg1,(gpstk::InvalidArgumentException const &)*arg2);
        result = (std::ostream *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject * InvalidArgumentException_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_gpstk__InvalidArgumentException, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_ConfigurationException__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::ConfigurationException *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_ConfigurationException")) goto fail;
    result = (gpstk::ConfigurationException *)new gpstk::ConfigurationException();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__ConfigurationException, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_ConfigurationException__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::ConfigurationException *arg1 = 0 ;
    gpstk::ConfigurationException *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_ConfigurationException",&obj0)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__ConfigurationException, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("gpstk::ConfigurationException");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    result = (gpstk::ConfigurationException *)new gpstk::ConfigurationException((gpstk::ConfigurationException const &)*arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__ConfigurationException, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_ConfigurationException__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::Exception *arg1 = 0 ;
    gpstk::ConfigurationException *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_ConfigurationException",&obj0)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__Exception, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("gpstk::Exception");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    result = (gpstk::ConfigurationException *)new gpstk::ConfigurationException((gpstk::Exception const &)*arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__ConfigurationException, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_ConfigurationException__SWIG_3(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::string arg1 ;
    unsigned long arg2 ;
    gpstk::Exception::Severity arg3 ;
    gpstk::ConfigurationException *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:new_ConfigurationException",&obj0,&obj1,&obj2)) goto fail;
    {
        std::string *ptr = (std::string *)0;
        int res = SWIG_AsPtr_std_string(obj0, &ptr);
        if (!res) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj0);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    {
        arg2 = (unsigned long)(SWIG_As_unsigned_SS_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (gpstk::Exception::Severity)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    result = (gpstk::ConfigurationException *)new gpstk::ConfigurationException(arg1,arg2,arg3);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__ConfigurationException, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_ConfigurationException__SWIG_4(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::string arg1 ;
    unsigned long arg2 ;
    gpstk::ConfigurationException *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:new_ConfigurationException",&obj0,&obj1)) goto fail;
    {
        std::string *ptr = (std::string *)0;
        int res = SWIG_AsPtr_std_string(obj0, &ptr);
        if (!res) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj0);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    {
        arg2 = (unsigned long)(SWIG_As_unsigned_SS_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (gpstk::ConfigurationException *)new gpstk::ConfigurationException(arg1,arg2);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__ConfigurationException, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_ConfigurationException__SWIG_5(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::string arg1 ;
    gpstk::ConfigurationException *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_ConfigurationException",&obj0)) goto fail;
    {
        std::string *ptr = (std::string *)0;
        int res = SWIG_AsPtr_std_string(obj0, &ptr);
        if (!res) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj0);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    result = (gpstk::ConfigurationException *)new gpstk::ConfigurationException(arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__ConfigurationException, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_ConfigurationException(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[4];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_new_ConfigurationException__SWIG_0(self,args);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_gpstk__ConfigurationException, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            return _wrap_new_ConfigurationException__SWIG_1(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_gpstk__Exception, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            return _wrap_new_ConfigurationException__SWIG_2(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        _v = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
        if (_v) {
            return _wrap_new_ConfigurationException__SWIG_5(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        _v = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
        if (_v) {
            _v = SWIG_Check_unsigned_SS_long(argv[1]);
            if (_v) {
                return _wrap_new_ConfigurationException__SWIG_4(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        _v = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
        if (_v) {
            _v = SWIG_Check_unsigned_SS_long(argv[1]);
            if (_v) {
                _v = SWIG_Check_int(argv[2]);
                if (_v) {
                    return _wrap_new_ConfigurationException__SWIG_3(self,args);
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'new_ConfigurationException'");
    return NULL;
}


static PyObject *_wrap_delete_ConfigurationException(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::ConfigurationException *arg1 = (gpstk::ConfigurationException *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_ConfigurationException",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__ConfigurationException, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ConfigurationException_getName(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::ConfigurationException *arg1 = (gpstk::ConfigurationException *) 0 ;
    std::string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ConfigurationException_getName",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__ConfigurationException, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = ((gpstk::ConfigurationException const *)arg1)->getName();
    
    {
        resultobj = SWIG_From_std_string((std::string)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ConfigurationException_class_operator_assignment(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::ConfigurationException *arg1 = (gpstk::ConfigurationException *) 0 ;
    gpstk::ConfigurationException *arg2 = 0 ;
    gpstk::ConfigurationException *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ConfigurationException_class_operator_assignment",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__ConfigurationException, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_gpstk__ConfigurationException, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("gpstk::ConfigurationException");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        gpstk::ConfigurationException &_result_ref = (arg1)->operator =((gpstk::ConfigurationException const &)*arg2);
        result = (gpstk::ConfigurationException *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__ConfigurationException, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Exception_streamRead__SWIG_8(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::ostream *arg1 = 0 ;
    gpstk::ConfigurationException *arg2 = 0 ;
    std::ostream *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Exception_streamRead",&obj0,&obj1)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("std::ostream");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_gpstk__ConfigurationException, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("gpstk::ConfigurationException");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        std::ostream &_result_ref = operator <<(*arg1,(gpstk::ConfigurationException const &)*arg2);
        result = (std::ostream *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject * ConfigurationException_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_gpstk__ConfigurationException, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_FileMissingException__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::FileMissingException *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_FileMissingException")) goto fail;
    result = (gpstk::FileMissingException *)new gpstk::FileMissingException();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__FileMissingException, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_FileMissingException__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::FileMissingException *arg1 = 0 ;
    gpstk::FileMissingException *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_FileMissingException",&obj0)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__FileMissingException, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("gpstk::FileMissingException");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    result = (gpstk::FileMissingException *)new gpstk::FileMissingException((gpstk::FileMissingException const &)*arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__FileMissingException, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_FileMissingException__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::Exception *arg1 = 0 ;
    gpstk::FileMissingException *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_FileMissingException",&obj0)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__Exception, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("gpstk::Exception");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    result = (gpstk::FileMissingException *)new gpstk::FileMissingException((gpstk::Exception const &)*arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__FileMissingException, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_FileMissingException__SWIG_3(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::string arg1 ;
    unsigned long arg2 ;
    gpstk::Exception::Severity arg3 ;
    gpstk::FileMissingException *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:new_FileMissingException",&obj0,&obj1,&obj2)) goto fail;
    {
        std::string *ptr = (std::string *)0;
        int res = SWIG_AsPtr_std_string(obj0, &ptr);
        if (!res) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj0);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    {
        arg2 = (unsigned long)(SWIG_As_unsigned_SS_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (gpstk::Exception::Severity)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    result = (gpstk::FileMissingException *)new gpstk::FileMissingException(arg1,arg2,arg3);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__FileMissingException, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_FileMissingException__SWIG_4(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::string arg1 ;
    unsigned long arg2 ;
    gpstk::FileMissingException *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:new_FileMissingException",&obj0,&obj1)) goto fail;
    {
        std::string *ptr = (std::string *)0;
        int res = SWIG_AsPtr_std_string(obj0, &ptr);
        if (!res) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj0);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    {
        arg2 = (unsigned long)(SWIG_As_unsigned_SS_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (gpstk::FileMissingException *)new gpstk::FileMissingException(arg1,arg2);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__FileMissingException, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_FileMissingException__SWIG_5(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::string arg1 ;
    gpstk::FileMissingException *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_FileMissingException",&obj0)) goto fail;
    {
        std::string *ptr = (std::string *)0;
        int res = SWIG_AsPtr_std_string(obj0, &ptr);
        if (!res) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj0);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    result = (gpstk::FileMissingException *)new gpstk::FileMissingException(arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__FileMissingException, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_FileMissingException(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[4];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_new_FileMissingException__SWIG_0(self,args);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_gpstk__FileMissingException, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            return _wrap_new_FileMissingException__SWIG_1(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_gpstk__Exception, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            return _wrap_new_FileMissingException__SWIG_2(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        _v = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
        if (_v) {
            return _wrap_new_FileMissingException__SWIG_5(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        _v = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
        if (_v) {
            _v = SWIG_Check_unsigned_SS_long(argv[1]);
            if (_v) {
                return _wrap_new_FileMissingException__SWIG_4(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        _v = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
        if (_v) {
            _v = SWIG_Check_unsigned_SS_long(argv[1]);
            if (_v) {
                _v = SWIG_Check_int(argv[2]);
                if (_v) {
                    return _wrap_new_FileMissingException__SWIG_3(self,args);
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'new_FileMissingException'");
    return NULL;
}


static PyObject *_wrap_delete_FileMissingException(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::FileMissingException *arg1 = (gpstk::FileMissingException *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_FileMissingException",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__FileMissingException, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FileMissingException_getName(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::FileMissingException *arg1 = (gpstk::FileMissingException *) 0 ;
    std::string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:FileMissingException_getName",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__FileMissingException, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = ((gpstk::FileMissingException const *)arg1)->getName();
    
    {
        resultobj = SWIG_From_std_string((std::string)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FileMissingException_class_operator_assignment(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::FileMissingException *arg1 = (gpstk::FileMissingException *) 0 ;
    gpstk::FileMissingException *arg2 = 0 ;
    gpstk::FileMissingException *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:FileMissingException_class_operator_assignment",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__FileMissingException, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_gpstk__FileMissingException, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("gpstk::FileMissingException");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        gpstk::FileMissingException &_result_ref = (arg1)->operator =((gpstk::FileMissingException const &)*arg2);
        result = (gpstk::FileMissingException *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__FileMissingException, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Exception_streamRead__SWIG_9(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::ostream *arg1 = 0 ;
    gpstk::FileMissingException *arg2 = 0 ;
    std::ostream *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Exception_streamRead",&obj0,&obj1)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("std::ostream");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_gpstk__FileMissingException, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("gpstk::FileMissingException");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        std::ostream &_result_ref = operator <<(*arg1,(gpstk::FileMissingException const &)*arg2);
        result = (std::ostream *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject * FileMissingException_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_gpstk__FileMissingException, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_SystemSemaphoreException__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::SystemSemaphoreException *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_SystemSemaphoreException")) goto fail;
    result = (gpstk::SystemSemaphoreException *)new gpstk::SystemSemaphoreException();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__SystemSemaphoreException, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_SystemSemaphoreException__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::SystemSemaphoreException *arg1 = 0 ;
    gpstk::SystemSemaphoreException *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_SystemSemaphoreException",&obj0)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__SystemSemaphoreException, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("gpstk::SystemSemaphoreException");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    result = (gpstk::SystemSemaphoreException *)new gpstk::SystemSemaphoreException((gpstk::SystemSemaphoreException const &)*arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__SystemSemaphoreException, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_SystemSemaphoreException__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::Exception *arg1 = 0 ;
    gpstk::SystemSemaphoreException *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_SystemSemaphoreException",&obj0)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__Exception, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("gpstk::Exception");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    result = (gpstk::SystemSemaphoreException *)new gpstk::SystemSemaphoreException((gpstk::Exception const &)*arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__SystemSemaphoreException, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_SystemSemaphoreException__SWIG_3(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::string arg1 ;
    unsigned long arg2 ;
    gpstk::Exception::Severity arg3 ;
    gpstk::SystemSemaphoreException *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:new_SystemSemaphoreException",&obj0,&obj1,&obj2)) goto fail;
    {
        std::string *ptr = (std::string *)0;
        int res = SWIG_AsPtr_std_string(obj0, &ptr);
        if (!res) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj0);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    {
        arg2 = (unsigned long)(SWIG_As_unsigned_SS_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (gpstk::Exception::Severity)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    result = (gpstk::SystemSemaphoreException *)new gpstk::SystemSemaphoreException(arg1,arg2,arg3);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__SystemSemaphoreException, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_SystemSemaphoreException__SWIG_4(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::string arg1 ;
    unsigned long arg2 ;
    gpstk::SystemSemaphoreException *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:new_SystemSemaphoreException",&obj0,&obj1)) goto fail;
    {
        std::string *ptr = (std::string *)0;
        int res = SWIG_AsPtr_std_string(obj0, &ptr);
        if (!res) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj0);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    {
        arg2 = (unsigned long)(SWIG_As_unsigned_SS_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (gpstk::SystemSemaphoreException *)new gpstk::SystemSemaphoreException(arg1,arg2);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__SystemSemaphoreException, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_SystemSemaphoreException__SWIG_5(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::string arg1 ;
    gpstk::SystemSemaphoreException *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_SystemSemaphoreException",&obj0)) goto fail;
    {
        std::string *ptr = (std::string *)0;
        int res = SWIG_AsPtr_std_string(obj0, &ptr);
        if (!res) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj0);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    result = (gpstk::SystemSemaphoreException *)new gpstk::SystemSemaphoreException(arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__SystemSemaphoreException, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_SystemSemaphoreException(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[4];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_new_SystemSemaphoreException__SWIG_0(self,args);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_gpstk__SystemSemaphoreException, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            return _wrap_new_SystemSemaphoreException__SWIG_1(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_gpstk__Exception, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            return _wrap_new_SystemSemaphoreException__SWIG_2(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        _v = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
        if (_v) {
            return _wrap_new_SystemSemaphoreException__SWIG_5(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        _v = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
        if (_v) {
            _v = SWIG_Check_unsigned_SS_long(argv[1]);
            if (_v) {
                return _wrap_new_SystemSemaphoreException__SWIG_4(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        _v = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
        if (_v) {
            _v = SWIG_Check_unsigned_SS_long(argv[1]);
            if (_v) {
                _v = SWIG_Check_int(argv[2]);
                if (_v) {
                    return _wrap_new_SystemSemaphoreException__SWIG_3(self,args);
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'new_SystemSemaphoreException'");
    return NULL;
}


static PyObject *_wrap_delete_SystemSemaphoreException(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::SystemSemaphoreException *arg1 = (gpstk::SystemSemaphoreException *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_SystemSemaphoreException",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__SystemSemaphoreException, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SystemSemaphoreException_getName(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::SystemSemaphoreException *arg1 = (gpstk::SystemSemaphoreException *) 0 ;
    std::string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:SystemSemaphoreException_getName",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__SystemSemaphoreException, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = ((gpstk::SystemSemaphoreException const *)arg1)->getName();
    
    {
        resultobj = SWIG_From_std_string((std::string)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SystemSemaphoreException_class_operator_assignment(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::SystemSemaphoreException *arg1 = (gpstk::SystemSemaphoreException *) 0 ;
    gpstk::SystemSemaphoreException *arg2 = 0 ;
    gpstk::SystemSemaphoreException *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:SystemSemaphoreException_class_operator_assignment",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__SystemSemaphoreException, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_gpstk__SystemSemaphoreException, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("gpstk::SystemSemaphoreException");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        gpstk::SystemSemaphoreException &_result_ref = (arg1)->operator =((gpstk::SystemSemaphoreException const &)*arg2);
        result = (gpstk::SystemSemaphoreException *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__SystemSemaphoreException, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Exception_streamRead__SWIG_10(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::ostream *arg1 = 0 ;
    gpstk::SystemSemaphoreException *arg2 = 0 ;
    std::ostream *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Exception_streamRead",&obj0,&obj1)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("std::ostream");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_gpstk__SystemSemaphoreException, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("gpstk::SystemSemaphoreException");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        std::ostream &_result_ref = operator <<(*arg1,(gpstk::SystemSemaphoreException const &)*arg2);
        result = (std::ostream *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject * SystemSemaphoreException_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_gpstk__SystemSemaphoreException, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_SystemPipeException__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::SystemPipeException *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_SystemPipeException")) goto fail;
    result = (gpstk::SystemPipeException *)new gpstk::SystemPipeException();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__SystemPipeException, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_SystemPipeException__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::SystemPipeException *arg1 = 0 ;
    gpstk::SystemPipeException *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_SystemPipeException",&obj0)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__SystemPipeException, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("gpstk::SystemPipeException");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    result = (gpstk::SystemPipeException *)new gpstk::SystemPipeException((gpstk::SystemPipeException const &)*arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__SystemPipeException, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_SystemPipeException__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::Exception *arg1 = 0 ;
    gpstk::SystemPipeException *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_SystemPipeException",&obj0)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__Exception, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("gpstk::Exception");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    result = (gpstk::SystemPipeException *)new gpstk::SystemPipeException((gpstk::Exception const &)*arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__SystemPipeException, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_SystemPipeException__SWIG_3(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::string arg1 ;
    unsigned long arg2 ;
    gpstk::Exception::Severity arg3 ;
    gpstk::SystemPipeException *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:new_SystemPipeException",&obj0,&obj1,&obj2)) goto fail;
    {
        std::string *ptr = (std::string *)0;
        int res = SWIG_AsPtr_std_string(obj0, &ptr);
        if (!res) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj0);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    {
        arg2 = (unsigned long)(SWIG_As_unsigned_SS_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (gpstk::Exception::Severity)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    result = (gpstk::SystemPipeException *)new gpstk::SystemPipeException(arg1,arg2,arg3);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__SystemPipeException, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_SystemPipeException__SWIG_4(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::string arg1 ;
    unsigned long arg2 ;
    gpstk::SystemPipeException *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:new_SystemPipeException",&obj0,&obj1)) goto fail;
    {
        std::string *ptr = (std::string *)0;
        int res = SWIG_AsPtr_std_string(obj0, &ptr);
        if (!res) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj0);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    {
        arg2 = (unsigned long)(SWIG_As_unsigned_SS_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (gpstk::SystemPipeException *)new gpstk::SystemPipeException(arg1,arg2);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__SystemPipeException, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_SystemPipeException__SWIG_5(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::string arg1 ;
    gpstk::SystemPipeException *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_SystemPipeException",&obj0)) goto fail;
    {
        std::string *ptr = (std::string *)0;
        int res = SWIG_AsPtr_std_string(obj0, &ptr);
        if (!res) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj0);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    result = (gpstk::SystemPipeException *)new gpstk::SystemPipeException(arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__SystemPipeException, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_SystemPipeException(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[4];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_new_SystemPipeException__SWIG_0(self,args);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_gpstk__SystemPipeException, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            return _wrap_new_SystemPipeException__SWIG_1(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_gpstk__Exception, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            return _wrap_new_SystemPipeException__SWIG_2(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        _v = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
        if (_v) {
            return _wrap_new_SystemPipeException__SWIG_5(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        _v = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
        if (_v) {
            _v = SWIG_Check_unsigned_SS_long(argv[1]);
            if (_v) {
                return _wrap_new_SystemPipeException__SWIG_4(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        _v = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
        if (_v) {
            _v = SWIG_Check_unsigned_SS_long(argv[1]);
            if (_v) {
                _v = SWIG_Check_int(argv[2]);
                if (_v) {
                    return _wrap_new_SystemPipeException__SWIG_3(self,args);
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'new_SystemPipeException'");
    return NULL;
}


static PyObject *_wrap_delete_SystemPipeException(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::SystemPipeException *arg1 = (gpstk::SystemPipeException *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_SystemPipeException",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__SystemPipeException, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SystemPipeException_getName(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::SystemPipeException *arg1 = (gpstk::SystemPipeException *) 0 ;
    std::string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:SystemPipeException_getName",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__SystemPipeException, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = ((gpstk::SystemPipeException const *)arg1)->getName();
    
    {
        resultobj = SWIG_From_std_string((std::string)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SystemPipeException_class_operator_assignment(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::SystemPipeException *arg1 = (gpstk::SystemPipeException *) 0 ;
    gpstk::SystemPipeException *arg2 = 0 ;
    gpstk::SystemPipeException *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:SystemPipeException_class_operator_assignment",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__SystemPipeException, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_gpstk__SystemPipeException, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("gpstk::SystemPipeException");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        gpstk::SystemPipeException &_result_ref = (arg1)->operator =((gpstk::SystemPipeException const &)*arg2);
        result = (gpstk::SystemPipeException *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__SystemPipeException, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Exception_streamRead__SWIG_11(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::ostream *arg1 = 0 ;
    gpstk::SystemPipeException *arg2 = 0 ;
    std::ostream *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Exception_streamRead",&obj0,&obj1)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("std::ostream");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_gpstk__SystemPipeException, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("gpstk::SystemPipeException");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        std::ostream &_result_ref = operator <<(*arg1,(gpstk::SystemPipeException const &)*arg2);
        result = (std::ostream *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject * SystemPipeException_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_gpstk__SystemPipeException, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_SystemQueueException__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::SystemQueueException *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_SystemQueueException")) goto fail;
    result = (gpstk::SystemQueueException *)new gpstk::SystemQueueException();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__SystemQueueException, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_SystemQueueException__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::SystemQueueException *arg1 = 0 ;
    gpstk::SystemQueueException *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_SystemQueueException",&obj0)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__SystemQueueException, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("gpstk::SystemQueueException");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    result = (gpstk::SystemQueueException *)new gpstk::SystemQueueException((gpstk::SystemQueueException const &)*arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__SystemQueueException, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_SystemQueueException__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::Exception *arg1 = 0 ;
    gpstk::SystemQueueException *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_SystemQueueException",&obj0)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__Exception, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("gpstk::Exception");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    result = (gpstk::SystemQueueException *)new gpstk::SystemQueueException((gpstk::Exception const &)*arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__SystemQueueException, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_SystemQueueException__SWIG_3(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::string arg1 ;
    unsigned long arg2 ;
    gpstk::Exception::Severity arg3 ;
    gpstk::SystemQueueException *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:new_SystemQueueException",&obj0,&obj1,&obj2)) goto fail;
    {
        std::string *ptr = (std::string *)0;
        int res = SWIG_AsPtr_std_string(obj0, &ptr);
        if (!res) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj0);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    {
        arg2 = (unsigned long)(SWIG_As_unsigned_SS_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (gpstk::Exception::Severity)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    result = (gpstk::SystemQueueException *)new gpstk::SystemQueueException(arg1,arg2,arg3);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__SystemQueueException, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_SystemQueueException__SWIG_4(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::string arg1 ;
    unsigned long arg2 ;
    gpstk::SystemQueueException *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:new_SystemQueueException",&obj0,&obj1)) goto fail;
    {
        std::string *ptr = (std::string *)0;
        int res = SWIG_AsPtr_std_string(obj0, &ptr);
        if (!res) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj0);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    {
        arg2 = (unsigned long)(SWIG_As_unsigned_SS_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (gpstk::SystemQueueException *)new gpstk::SystemQueueException(arg1,arg2);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__SystemQueueException, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_SystemQueueException__SWIG_5(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::string arg1 ;
    gpstk::SystemQueueException *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_SystemQueueException",&obj0)) goto fail;
    {
        std::string *ptr = (std::string *)0;
        int res = SWIG_AsPtr_std_string(obj0, &ptr);
        if (!res) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj0);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    result = (gpstk::SystemQueueException *)new gpstk::SystemQueueException(arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__SystemQueueException, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_SystemQueueException(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[4];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_new_SystemQueueException__SWIG_0(self,args);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_gpstk__SystemQueueException, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            return _wrap_new_SystemQueueException__SWIG_1(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_gpstk__Exception, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            return _wrap_new_SystemQueueException__SWIG_2(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        _v = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
        if (_v) {
            return _wrap_new_SystemQueueException__SWIG_5(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        _v = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
        if (_v) {
            _v = SWIG_Check_unsigned_SS_long(argv[1]);
            if (_v) {
                return _wrap_new_SystemQueueException__SWIG_4(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        _v = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
        if (_v) {
            _v = SWIG_Check_unsigned_SS_long(argv[1]);
            if (_v) {
                _v = SWIG_Check_int(argv[2]);
                if (_v) {
                    return _wrap_new_SystemQueueException__SWIG_3(self,args);
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'new_SystemQueueException'");
    return NULL;
}


static PyObject *_wrap_delete_SystemQueueException(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::SystemQueueException *arg1 = (gpstk::SystemQueueException *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_SystemQueueException",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__SystemQueueException, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SystemQueueException_getName(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::SystemQueueException *arg1 = (gpstk::SystemQueueException *) 0 ;
    std::string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:SystemQueueException_getName",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__SystemQueueException, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = ((gpstk::SystemQueueException const *)arg1)->getName();
    
    {
        resultobj = SWIG_From_std_string((std::string)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SystemQueueException_class_operator_assignment(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::SystemQueueException *arg1 = (gpstk::SystemQueueException *) 0 ;
    gpstk::SystemQueueException *arg2 = 0 ;
    gpstk::SystemQueueException *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:SystemQueueException_class_operator_assignment",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__SystemQueueException, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_gpstk__SystemQueueException, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("gpstk::SystemQueueException");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        gpstk::SystemQueueException &_result_ref = (arg1)->operator =((gpstk::SystemQueueException const &)*arg2);
        result = (gpstk::SystemQueueException *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__SystemQueueException, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Exception_streamRead__SWIG_12(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::ostream *arg1 = 0 ;
    gpstk::SystemQueueException *arg2 = 0 ;
    std::ostream *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Exception_streamRead",&obj0,&obj1)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("std::ostream");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_gpstk__SystemQueueException, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("gpstk::SystemQueueException");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        std::ostream &_result_ref = operator <<(*arg1,(gpstk::SystemQueueException const &)*arg2);
        result = (std::ostream *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject * SystemQueueException_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_gpstk__SystemQueueException, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_OutOfMemory__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::OutOfMemory *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_OutOfMemory")) goto fail;
    result = (gpstk::OutOfMemory *)new gpstk::OutOfMemory();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__OutOfMemory, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_OutOfMemory__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::OutOfMemory *arg1 = 0 ;
    gpstk::OutOfMemory *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_OutOfMemory",&obj0)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__OutOfMemory, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("gpstk::OutOfMemory");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    result = (gpstk::OutOfMemory *)new gpstk::OutOfMemory((gpstk::OutOfMemory const &)*arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__OutOfMemory, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_OutOfMemory__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::Exception *arg1 = 0 ;
    gpstk::OutOfMemory *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_OutOfMemory",&obj0)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__Exception, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("gpstk::Exception");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    result = (gpstk::OutOfMemory *)new gpstk::OutOfMemory((gpstk::Exception const &)*arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__OutOfMemory, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_OutOfMemory__SWIG_3(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::string arg1 ;
    unsigned long arg2 ;
    gpstk::Exception::Severity arg3 ;
    gpstk::OutOfMemory *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:new_OutOfMemory",&obj0,&obj1,&obj2)) goto fail;
    {
        std::string *ptr = (std::string *)0;
        int res = SWIG_AsPtr_std_string(obj0, &ptr);
        if (!res) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj0);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    {
        arg2 = (unsigned long)(SWIG_As_unsigned_SS_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (gpstk::Exception::Severity)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    result = (gpstk::OutOfMemory *)new gpstk::OutOfMemory(arg1,arg2,arg3);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__OutOfMemory, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_OutOfMemory__SWIG_4(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::string arg1 ;
    unsigned long arg2 ;
    gpstk::OutOfMemory *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:new_OutOfMemory",&obj0,&obj1)) goto fail;
    {
        std::string *ptr = (std::string *)0;
        int res = SWIG_AsPtr_std_string(obj0, &ptr);
        if (!res) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj0);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    {
        arg2 = (unsigned long)(SWIG_As_unsigned_SS_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (gpstk::OutOfMemory *)new gpstk::OutOfMemory(arg1,arg2);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__OutOfMemory, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_OutOfMemory__SWIG_5(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::string arg1 ;
    gpstk::OutOfMemory *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_OutOfMemory",&obj0)) goto fail;
    {
        std::string *ptr = (std::string *)0;
        int res = SWIG_AsPtr_std_string(obj0, &ptr);
        if (!res) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj0);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    result = (gpstk::OutOfMemory *)new gpstk::OutOfMemory(arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__OutOfMemory, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_OutOfMemory(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[4];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_new_OutOfMemory__SWIG_0(self,args);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_gpstk__OutOfMemory, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            return _wrap_new_OutOfMemory__SWIG_1(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_gpstk__Exception, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            return _wrap_new_OutOfMemory__SWIG_2(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        _v = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
        if (_v) {
            return _wrap_new_OutOfMemory__SWIG_5(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        _v = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
        if (_v) {
            _v = SWIG_Check_unsigned_SS_long(argv[1]);
            if (_v) {
                return _wrap_new_OutOfMemory__SWIG_4(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        _v = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
        if (_v) {
            _v = SWIG_Check_unsigned_SS_long(argv[1]);
            if (_v) {
                _v = SWIG_Check_int(argv[2]);
                if (_v) {
                    return _wrap_new_OutOfMemory__SWIG_3(self,args);
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'new_OutOfMemory'");
    return NULL;
}


static PyObject *_wrap_delete_OutOfMemory(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::OutOfMemory *arg1 = (gpstk::OutOfMemory *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_OutOfMemory",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__OutOfMemory, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OutOfMemory_getName(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::OutOfMemory *arg1 = (gpstk::OutOfMemory *) 0 ;
    std::string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OutOfMemory_getName",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__OutOfMemory, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = ((gpstk::OutOfMemory const *)arg1)->getName();
    
    {
        resultobj = SWIG_From_std_string((std::string)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OutOfMemory_class_operator_assignment(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::OutOfMemory *arg1 = (gpstk::OutOfMemory *) 0 ;
    gpstk::OutOfMemory *arg2 = 0 ;
    gpstk::OutOfMemory *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:OutOfMemory_class_operator_assignment",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__OutOfMemory, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_gpstk__OutOfMemory, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("gpstk::OutOfMemory");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        gpstk::OutOfMemory &_result_ref = (arg1)->operator =((gpstk::OutOfMemory const &)*arg2);
        result = (gpstk::OutOfMemory *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__OutOfMemory, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Exception_streamRead__SWIG_13(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::ostream *arg1 = 0 ;
    gpstk::OutOfMemory *arg2 = 0 ;
    std::ostream *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Exception_streamRead",&obj0,&obj1)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("std::ostream");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_gpstk__OutOfMemory, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("gpstk::OutOfMemory");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        std::ostream &_result_ref = operator <<(*arg1,(gpstk::OutOfMemory const &)*arg2);
        result = (std::ostream *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject * OutOfMemory_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_gpstk__OutOfMemory, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_ObjectNotFound__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::ObjectNotFound *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_ObjectNotFound")) goto fail;
    result = (gpstk::ObjectNotFound *)new gpstk::ObjectNotFound();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__ObjectNotFound, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_ObjectNotFound__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::ObjectNotFound *arg1 = 0 ;
    gpstk::ObjectNotFound *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_ObjectNotFound",&obj0)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__ObjectNotFound, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("gpstk::ObjectNotFound");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    result = (gpstk::ObjectNotFound *)new gpstk::ObjectNotFound((gpstk::ObjectNotFound const &)*arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__ObjectNotFound, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_ObjectNotFound__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::Exception *arg1 = 0 ;
    gpstk::ObjectNotFound *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_ObjectNotFound",&obj0)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__Exception, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("gpstk::Exception");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    result = (gpstk::ObjectNotFound *)new gpstk::ObjectNotFound((gpstk::Exception const &)*arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__ObjectNotFound, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_ObjectNotFound__SWIG_3(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::string arg1 ;
    unsigned long arg2 ;
    gpstk::Exception::Severity arg3 ;
    gpstk::ObjectNotFound *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:new_ObjectNotFound",&obj0,&obj1,&obj2)) goto fail;
    {
        std::string *ptr = (std::string *)0;
        int res = SWIG_AsPtr_std_string(obj0, &ptr);
        if (!res) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj0);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    {
        arg2 = (unsigned long)(SWIG_As_unsigned_SS_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (gpstk::Exception::Severity)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    result = (gpstk::ObjectNotFound *)new gpstk::ObjectNotFound(arg1,arg2,arg3);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__ObjectNotFound, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_ObjectNotFound__SWIG_4(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::string arg1 ;
    unsigned long arg2 ;
    gpstk::ObjectNotFound *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:new_ObjectNotFound",&obj0,&obj1)) goto fail;
    {
        std::string *ptr = (std::string *)0;
        int res = SWIG_AsPtr_std_string(obj0, &ptr);
        if (!res) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj0);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    {
        arg2 = (unsigned long)(SWIG_As_unsigned_SS_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (gpstk::ObjectNotFound *)new gpstk::ObjectNotFound(arg1,arg2);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__ObjectNotFound, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_ObjectNotFound__SWIG_5(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::string arg1 ;
    gpstk::ObjectNotFound *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_ObjectNotFound",&obj0)) goto fail;
    {
        std::string *ptr = (std::string *)0;
        int res = SWIG_AsPtr_std_string(obj0, &ptr);
        if (!res) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj0);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    result = (gpstk::ObjectNotFound *)new gpstk::ObjectNotFound(arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__ObjectNotFound, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_ObjectNotFound(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[4];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_new_ObjectNotFound__SWIG_0(self,args);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_gpstk__ObjectNotFound, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            return _wrap_new_ObjectNotFound__SWIG_1(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_gpstk__Exception, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            return _wrap_new_ObjectNotFound__SWIG_2(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        _v = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
        if (_v) {
            return _wrap_new_ObjectNotFound__SWIG_5(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        _v = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
        if (_v) {
            _v = SWIG_Check_unsigned_SS_long(argv[1]);
            if (_v) {
                return _wrap_new_ObjectNotFound__SWIG_4(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        _v = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
        if (_v) {
            _v = SWIG_Check_unsigned_SS_long(argv[1]);
            if (_v) {
                _v = SWIG_Check_int(argv[2]);
                if (_v) {
                    return _wrap_new_ObjectNotFound__SWIG_3(self,args);
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'new_ObjectNotFound'");
    return NULL;
}


static PyObject *_wrap_delete_ObjectNotFound(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::ObjectNotFound *arg1 = (gpstk::ObjectNotFound *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_ObjectNotFound",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__ObjectNotFound, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ObjectNotFound_getName(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::ObjectNotFound *arg1 = (gpstk::ObjectNotFound *) 0 ;
    std::string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ObjectNotFound_getName",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__ObjectNotFound, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = ((gpstk::ObjectNotFound const *)arg1)->getName();
    
    {
        resultobj = SWIG_From_std_string((std::string)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ObjectNotFound_class_operator_assignment(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::ObjectNotFound *arg1 = (gpstk::ObjectNotFound *) 0 ;
    gpstk::ObjectNotFound *arg2 = 0 ;
    gpstk::ObjectNotFound *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ObjectNotFound_class_operator_assignment",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__ObjectNotFound, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_gpstk__ObjectNotFound, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("gpstk::ObjectNotFound");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        gpstk::ObjectNotFound &_result_ref = (arg1)->operator =((gpstk::ObjectNotFound const &)*arg2);
        result = (gpstk::ObjectNotFound *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__ObjectNotFound, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Exception_streamRead__SWIG_14(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::ostream *arg1 = 0 ;
    gpstk::ObjectNotFound *arg2 = 0 ;
    std::ostream *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Exception_streamRead",&obj0,&obj1)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("std::ostream");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_gpstk__ObjectNotFound, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("gpstk::ObjectNotFound");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        std::ostream &_result_ref = operator <<(*arg1,(gpstk::ObjectNotFound const &)*arg2);
        result = (std::ostream *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Exception_streamRead(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_gpstk__ExceptionLocation, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_Exception_streamRead__SWIG_0(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_gpstk__InvalidParameter, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_Exception_streamRead__SWIG_2(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_gpstk__InvalidRequest, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_Exception_streamRead__SWIG_3(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_gpstk__AssertionFailure, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_Exception_streamRead__SWIG_4(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_gpstk__ObjectNotFound, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_Exception_streamRead__SWIG_14(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_gpstk__IndexOutOfBoundsException, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_Exception_streamRead__SWIG_6(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_gpstk__InvalidArgumentException, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_Exception_streamRead__SWIG_7(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_gpstk__ConfigurationException, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_Exception_streamRead__SWIG_8(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_gpstk__FileMissingException, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_Exception_streamRead__SWIG_9(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_gpstk__SystemSemaphoreException, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_Exception_streamRead__SWIG_10(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_gpstk__SystemPipeException, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_Exception_streamRead__SWIG_11(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_gpstk__SystemQueueException, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_Exception_streamRead__SWIG_12(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_gpstk__OutOfMemory, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_Exception_streamRead__SWIG_13(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_gpstk__AccessError, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_Exception_streamRead__SWIG_5(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_gpstk__Exception, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_Exception_streamRead__SWIG_1(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'Exception_streamRead'");
    return NULL;
}


static PyObject * ObjectNotFound_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_gpstk__ObjectNotFound, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_InvalidValue__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::InvalidValue *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_InvalidValue")) goto fail;
    result = (gpstk::InvalidValue *)new gpstk::InvalidValue();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__InvalidValue, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_InvalidValue__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::InvalidValue *arg1 = 0 ;
    gpstk::InvalidValue *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_InvalidValue",&obj0)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__InvalidValue, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("gpstk::InvalidValue");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    result = (gpstk::InvalidValue *)new gpstk::InvalidValue((gpstk::InvalidValue const &)*arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__InvalidValue, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_InvalidValue__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::Exception *arg1 = 0 ;
    gpstk::InvalidValue *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_InvalidValue",&obj0)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__Exception, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("gpstk::Exception");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    result = (gpstk::InvalidValue *)new gpstk::InvalidValue((gpstk::Exception const &)*arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__InvalidValue, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_InvalidValue__SWIG_3(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::string arg1 ;
    unsigned long arg2 ;
    gpstk::Exception::Severity arg3 ;
    gpstk::InvalidValue *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:new_InvalidValue",&obj0,&obj1,&obj2)) goto fail;
    {
        std::string *ptr = (std::string *)0;
        int res = SWIG_AsPtr_std_string(obj0, &ptr);
        if (!res) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj0);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    {
        arg2 = (unsigned long)(SWIG_As_unsigned_SS_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (gpstk::Exception::Severity)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    result = (gpstk::InvalidValue *)new gpstk::InvalidValue(arg1,arg2,arg3);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__InvalidValue, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_InvalidValue__SWIG_4(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::string arg1 ;
    unsigned long arg2 ;
    gpstk::InvalidValue *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:new_InvalidValue",&obj0,&obj1)) goto fail;
    {
        std::string *ptr = (std::string *)0;
        int res = SWIG_AsPtr_std_string(obj0, &ptr);
        if (!res) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj0);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    {
        arg2 = (unsigned long)(SWIG_As_unsigned_SS_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (gpstk::InvalidValue *)new gpstk::InvalidValue(arg1,arg2);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__InvalidValue, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_InvalidValue__SWIG_5(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::string arg1 ;
    gpstk::InvalidValue *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_InvalidValue",&obj0)) goto fail;
    {
        std::string *ptr = (std::string *)0;
        int res = SWIG_AsPtr_std_string(obj0, &ptr);
        if (!res) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj0);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    result = (gpstk::InvalidValue *)new gpstk::InvalidValue(arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__InvalidValue, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_InvalidValue(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[4];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_new_InvalidValue__SWIG_0(self,args);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_gpstk__InvalidValue, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            return _wrap_new_InvalidValue__SWIG_1(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_gpstk__Exception, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            return _wrap_new_InvalidValue__SWIG_2(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        _v = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
        if (_v) {
            return _wrap_new_InvalidValue__SWIG_5(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        _v = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
        if (_v) {
            _v = SWIG_Check_unsigned_SS_long(argv[1]);
            if (_v) {
                return _wrap_new_InvalidValue__SWIG_4(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        _v = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
        if (_v) {
            _v = SWIG_Check_unsigned_SS_long(argv[1]);
            if (_v) {
                _v = SWIG_Check_int(argv[2]);
                if (_v) {
                    return _wrap_new_InvalidValue__SWIG_3(self,args);
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'new_InvalidValue'");
    return NULL;
}


static PyObject *_wrap_delete_InvalidValue(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::InvalidValue *arg1 = (gpstk::InvalidValue *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_InvalidValue",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__InvalidValue, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_InvalidValue_getName(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::InvalidValue *arg1 = (gpstk::InvalidValue *) 0 ;
    std::string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:InvalidValue_getName",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__InvalidValue, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = ((gpstk::InvalidValue const *)arg1)->getName();
    
    {
        resultobj = SWIG_From_std_string((std::string)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_InvalidValue_class_operator_assignment(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::InvalidValue *arg1 = (gpstk::InvalidValue *) 0 ;
    gpstk::InvalidValue *arg2 = 0 ;
    gpstk::InvalidValue *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:InvalidValue_class_operator_assignment",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__InvalidValue, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_gpstk__InvalidValue, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("gpstk::InvalidValue");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        gpstk::InvalidValue &_result_ref = (arg1)->operator =((gpstk::InvalidValue const &)*arg2);
        result = (gpstk::InvalidValue *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__InvalidValue, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_streamRead__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::ostream *arg1 = 0 ;
    gpstk::InvalidValue *arg2 = 0 ;
    std::ostream *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:streamRead",&obj0,&obj1)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("std::ostream");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_gpstk__InvalidValue, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("gpstk::InvalidValue");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        std::ostream &_result_ref = operator <<(*arg1,(gpstk::InvalidValue const &)*arg2);
        result = (std::ostream *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject * InvalidValue_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_gpstk__InvalidValue, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_X1Sequence(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::X1Sequence *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_X1Sequence")) goto fail;
    result = (gpstk::X1Sequence *)new gpstk::X1Sequence();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__X1Sequence, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_X1Sequence(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::X1Sequence *arg1 = (gpstk::X1Sequence *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_X1Sequence",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__X1Sequence, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_X1Sequence_allocateMemory(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    
    if(!PyArg_ParseTuple(args,(char *)":X1Sequence_allocateMemory")) goto fail;
    gpstk::X1Sequence::allocateMemory();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_X1Sequence_deAllocateMemory(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    
    if(!PyArg_ParseTuple(args,(char *)":X1Sequence_deAllocateMemory")) goto fail;
    gpstk::X1Sequence::deAllocateMemory();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_X1Sequence_class_operator_bracket__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::X1Sequence *arg1 = (gpstk::X1Sequence *) 0 ;
    int arg2 ;
    unsigned long *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:X1Sequence_class_operator_bracket",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__X1Sequence, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        unsigned long &_result_ref = (arg1)->operator [](arg2);
        result = (unsigned long *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_unsigned_long, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_X1Sequence_class_operator_bracket__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::X1Sequence *arg1 = (gpstk::X1Sequence *) 0 ;
    int arg2 ;
    unsigned long *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:X1Sequence_class_operator_bracket",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__X1Sequence, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        unsigned long const &_result_ref = ((gpstk::X1Sequence const *)arg1)->operator [](arg2);
        result = (unsigned long *) &_result_ref;
    }
    
    {
        resultobj = SWIG_From_unsigned_SS_long((unsigned long)(*result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_X1Sequence_class_operator_bracket(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_gpstk__X1Sequence, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_int(argv[1]);
            if (_v) {
                return _wrap_X1Sequence_class_operator_bracket__SWIG_0(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_gpstk__X1Sequence, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_int(argv[1]);
            if (_v) {
                return _wrap_X1Sequence_class_operator_bracket__SWIG_1(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'X1Sequence_class_operator_bracket'");
    return NULL;
}


static PyObject * X1Sequence_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_gpstk__X1Sequence, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static int _wrap_LENGTH_OF_EOW_OVERLAP_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable LENGTH_OF_EOW_OVERLAP is read-only.");
    return 1;
}


static PyObject *_wrap_LENGTH_OF_EOW_OVERLAP_get(void) {
    PyObject *pyobj = NULL;
    
    {
        pyobj = SWIG_From_long((long)(gpstk::LENGTH_OF_EOW_OVERLAP)); 
    }
    return pyobj;
}


static int _wrap_OVERLAP_WORD_POSITION_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable OVERLAP_WORD_POSITION is read-only.");
    return 1;
}


static PyObject *_wrap_OVERLAP_WORD_POSITION_get(void) {
    PyObject *pyobj = NULL;
    
    {
        pyobj = SWIG_From_long((long)(gpstk::OVERLAP_WORD_POSITION)); 
    }
    return pyobj;
}


static int _wrap_MAX_X2_TEST_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable MAX_X2_TEST is read-only.");
    return 1;
}


static PyObject *_wrap_MAX_X2_TEST_get(void) {
    PyObject *pyobj = NULL;
    
    {
        pyobj = SWIG_From_long((long)(gpstk::MAX_X2_TEST)); 
    }
    return pyobj;
}


static int _wrap_MAX_X2_COUNT_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable MAX_X2_COUNT is read-only.");
    return 1;
}


static PyObject *_wrap_MAX_X2_COUNT_get(void) {
    PyObject *pyobj = NULL;
    
    {
        pyobj = SWIG_From_long((long)(gpstk::MAX_X2_COUNT)); 
    }
    return pyobj;
}


static PyObject *_wrap_new_X2Sequence(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::X2Sequence *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_X2Sequence")) goto fail;
    result = (gpstk::X2Sequence *)new gpstk::X2Sequence();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__X2Sequence, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_X2Sequence(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::X2Sequence *arg1 = (gpstk::X2Sequence *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_X2Sequence",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__X2Sequence, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_X2Sequence_allocateMemory(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    
    if(!PyArg_ParseTuple(args,(char *)":X2Sequence_allocateMemory")) goto fail;
    gpstk::X2Sequence::allocateMemory();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_X2Sequence_deAllocateMemory(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    
    if(!PyArg_ParseTuple(args,(char *)":X2Sequence_deAllocateMemory")) goto fail;
    gpstk::X2Sequence::deAllocateMemory();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_X2Sequence_class_operator_bracket(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::X2Sequence *arg1 = (gpstk::X2Sequence *) 0 ;
    long arg2 ;
    unsigned long result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:X2Sequence_class_operator_bracket",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__X2Sequence, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (long)(SWIG_As_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (unsigned long)(arg1)->operator [](arg2);
    
    {
        resultobj = SWIG_From_unsigned_SS_long((unsigned long)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_X2Sequence_setEOWX2Epoch(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::X2Sequence *arg1 = (gpstk::X2Sequence *) 0 ;
    bool arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:X2Sequence_setEOWX2Epoch",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__X2Sequence, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (bool const)(SWIG_As_bool(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    (arg1)->setEOWX2Epoch(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * X2Sequence_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_gpstk__X2Sequence, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_CodeBuffer(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    int arg1 ;
    gpstk::CodeBuffer *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_CodeBuffer",&obj0)) goto fail;
    {
        arg1 = (int const)(SWIG_As_int(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    result = (gpstk::CodeBuffer *)new gpstk::CodeBuffer(arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__CodeBuffer, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_CodeBuffer(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::CodeBuffer *arg1 = (gpstk::CodeBuffer *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_CodeBuffer",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__CodeBuffer, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CodeBuffer_class_operator_assignment(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::CodeBuffer *arg1 = (gpstk::CodeBuffer *) 0 ;
    gpstk::CodeBuffer *arg2 = 0 ;
    gpstk::CodeBuffer *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CodeBuffer_class_operator_assignment",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__CodeBuffer, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_gpstk__CodeBuffer, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("gpstk::CodeBuffer");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        gpstk::CodeBuffer &_result_ref = (arg1)->operator =((gpstk::CodeBuffer const &)*arg2);
        result = (gpstk::CodeBuffer *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__CodeBuffer, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CodeBuffer_updateBufferStatus__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::CodeBuffer *arg1 = (gpstk::CodeBuffer *) 0 ;
    gpstk::DayTime *arg2 = 0 ;
    codeType arg3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:CodeBuffer_updateBufferStatus",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__CodeBuffer, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_gpstk__DayTime, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("gpstk::DayTime");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        codeType * argp;
        SWIG_Python_ConvertPtr(obj2, (void **)&argp, SWIGTYPE_p_codeType, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("codeType");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
        arg3 = *argp;
    }
    (arg1)->updateBufferStatus((gpstk::DayTime const &)*arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CodeBuffer_updateBufferStatus__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::CodeBuffer *arg1 = (gpstk::CodeBuffer *) 0 ;
    codeType arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CodeBuffer_updateBufferStatus",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__CodeBuffer, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        codeType * argp;
        SWIG_Python_ConvertPtr(obj1, (void **)&argp, SWIGTYPE_p_codeType, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("codeType");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *argp;
    }
    (arg1)->updateBufferStatus(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CodeBuffer_updateBufferStatus(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[4];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_gpstk__CodeBuffer, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_codeType, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_CodeBuffer_updateBufferStatus__SWIG_1(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_gpstk__CodeBuffer, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_gpstk__DayTime, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                {
                    void *ptr = 0;
                    if (SWIG_ConvertPtr(argv[2], &ptr, SWIGTYPE_p_codeType, 0) == -1) {
                        _v = 0;
                        PyErr_Clear();
                    } else {
                        _v = (ptr != 0);
                    }
                }
                if (_v) {
                    return _wrap_CodeBuffer_updateBufferStatus__SWIG_0(self,args);
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'CodeBuffer_updateBufferStatus'");
    return NULL;
}


static PyObject *_wrap_CodeBuffer_getCurrentTime(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::CodeBuffer *arg1 = (gpstk::CodeBuffer *) 0 ;
    gpstk::DayTime *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CodeBuffer_getCurrentTime",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__CodeBuffer, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        gpstk::DayTime const &_result_ref = (arg1)->getCurrentTime();
        result = (gpstk::DayTime *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__DayTime, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CodeBuffer_getPYFlag(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::CodeBuffer *arg1 = (gpstk::CodeBuffer *) 0 ;
    codeType result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CodeBuffer_getPYFlag",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__CodeBuffer, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (arg1)->getPYFlag();
    
    {
        codeType * resultptr;
        resultptr = new codeType((codeType &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_codeType, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CodeBuffer_getPRNID(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::CodeBuffer *arg1 = (gpstk::CodeBuffer *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CodeBuffer_getPRNID",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__CodeBuffer, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int)(arg1)->getPRNID();
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CodeBuffer_class_operator_bracket(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::CodeBuffer *arg1 = (gpstk::CodeBuffer *) 0 ;
    int arg2 ;
    unsigned long *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CodeBuffer_class_operator_bracket",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__CodeBuffer, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        unsigned long &_result_ref = (arg1)->operator [](arg2);
        result = (unsigned long *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_unsigned_long, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CodeBuffer_operator_bracket_const(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::CodeBuffer *arg1 = (gpstk::CodeBuffer *) 0 ;
    int arg2 ;
    unsigned long *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CodeBuffer_operator_bracket_const",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__CodeBuffer, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int const)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        unsigned long const &_result_ref = ((gpstk::CodeBuffer const *)arg1)->operator [](arg2);
        result = (unsigned long *) &_result_ref;
    }
    
    {
        resultobj = SWIG_From_unsigned_SS_long((unsigned long)(*result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CodeBuffer_getBit(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::CodeBuffer *arg1 = (gpstk::CodeBuffer *) 0 ;
    long arg2 ;
    unsigned long result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CodeBuffer_getBit",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__CodeBuffer, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (long const)(SWIG_As_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (unsigned long)(arg1)->getBit(arg2);
    
    {
        resultobj = SWIG_From_unsigned_SS_long((unsigned long)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CodeBuffer___ixor__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::CodeBuffer *arg1 = (gpstk::CodeBuffer *) 0 ;
    gpstk::CodeBuffer *arg2 = 0 ;
    gpstk::CodeBuffer *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CodeBuffer___ixor__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__CodeBuffer, SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_gpstk__CodeBuffer, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("gpstk::CodeBuffer");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        gpstk::CodeBuffer &_result_ref = (arg1)->operator ^=((gpstk::CodeBuffer const &)*arg2);
        result = (gpstk::CodeBuffer *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__CodeBuffer, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject * CodeBuffer_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_gpstk__CodeBuffer, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_SatID__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::SatID *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_SatID")) goto fail;
    result = (gpstk::SatID *)new gpstk::SatID();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__SatID, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_SatID__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    int arg1 ;
    gpstk::SatID::System arg2 ;
    gpstk::SatID *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:new_SatID",&obj0,&obj1)) goto fail;
    {
        arg1 = (int)(SWIG_As_int(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        arg2 = (gpstk::SatID::System)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (gpstk::SatID *)new gpstk::SatID(arg1,arg2);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__SatID, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_SatID(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_new_SatID__SWIG_0(self,args);
    }
    if (argc == 2) {
        int _v;
        _v = SWIG_Check_int(argv[0]);
        if (_v) {
            _v = SWIG_Check_int(argv[1]);
            if (_v) {
                return _wrap_new_SatID__SWIG_1(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'new_SatID'");
    return NULL;
}


static PyObject *_wrap_SatID_setfill(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::SatID *arg1 = (gpstk::SatID *) 0 ;
    char arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:SatID_setfill",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__SatID, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (char)(SWIG_As_char(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    (arg1)->setfill(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SatID_getfill(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::SatID *arg1 = (gpstk::SatID *) 0 ;
    char result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:SatID_getfill",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__SatID, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (char)(arg1)->getfill();
    
    {
        resultobj = SWIG_From_char((char)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SatID_systemCode(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::SatID *arg1 = (gpstk::SatID *) 0 ;
    char result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:SatID_systemCode",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__SatID, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (char)((gpstk::SatID const *)arg1)->systemCode();
    
    {
        resultobj = SWIG_From_char((char)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SatID___eq__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::SatID *arg1 = (gpstk::SatID *) 0 ;
    gpstk::SatID *arg2 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:SatID___eq__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__SatID, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_gpstk__SatID, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("gpstk::SatID");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (bool)((gpstk::SatID const *)arg1)->operator ==((gpstk::SatID const &)*arg2);
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SatID___ne__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::SatID *arg1 = (gpstk::SatID *) 0 ;
    gpstk::SatID *arg2 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:SatID___ne__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__SatID, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_gpstk__SatID, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("gpstk::SatID");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (bool)((gpstk::SatID const *)arg1)->operator !=((gpstk::SatID const &)*arg2);
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SatID___lt__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::SatID *arg1 = (gpstk::SatID *) 0 ;
    gpstk::SatID *arg2 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:SatID___lt__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__SatID, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_gpstk__SatID, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("gpstk::SatID");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (bool)((gpstk::SatID const *)arg1)->operator <((gpstk::SatID const &)*arg2);
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SatID_id_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::SatID *arg1 = (gpstk::SatID *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:SatID_id_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__SatID, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->id = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SatID_id_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::SatID *arg1 = (gpstk::SatID *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:SatID_id_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__SatID, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int) ((arg1)->id);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SatID_system_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::SatID *arg1 = (gpstk::SatID *) 0 ;
    gpstk::SatID::System arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:SatID_system_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__SatID, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (gpstk::SatID::System)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->system = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SatID_system_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::SatID *arg1 = (gpstk::SatID *) 0 ;
    gpstk::SatID::System result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:SatID_system_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__SatID, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (gpstk::SatID::System) ((arg1)->system);
    
    resultobj = SWIG_From_int((result));
    return resultobj;
    fail:
    return NULL;
}


static int _wrap_SatID_fillchar_set(PyObject *_val) {
    {
        char temp = (char)(SWIG_As_char(_val));
        if (PyErr_Occurred()) {
            SWIG_append_errmsg("C/C++ variable 'gpstk::SatID::fillchar (char)'");
            return 1;
        }
        gpstk::SatID::fillchar = temp;
    }
    return 0;
}


static PyObject *_wrap_SatID_fillchar_get(void) {
    PyObject *pyobj = NULL;
    
    {
        pyobj = SWIG_From_char((char)(gpstk::SatID::fillchar)); 
    }
    return pyobj;
}


static PyObject *_wrap_delete_SatID(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::SatID *arg1 = (gpstk::SatID *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_SatID",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__SatID, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * SatID_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_gpstk__SatID, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap___lshift____SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::ostream *arg1 = 0 ;
    gpstk::SatID *arg2 = 0 ;
    std::ostream *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:__lshift__",&obj0,&obj1)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("std::ostream");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_gpstk__SatID, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("gpstk::SatID");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        std::ostream &_result_ref = gpstk::operator <<(*arg1,(gpstk::SatID const &)*arg2);
        result = (std::ostream *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap___rshift____SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::istream *arg1 = 0 ;
    gpstk::SatID *arg2 = 0 ;
    std::istream *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:__rshift__",&obj0,&obj1)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__basic_istreamTchar_std__char_traitsTchar_t_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("std::istream");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_gpstk__SatID, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("gpstk::SatID");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        std::istream &_result_ref = gpstk::operator >>(*arg1,*arg2);
        result = (std::istream *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__basic_istreamTchar_std__char_traitsTchar_t_t, 0);
    return resultobj;
    fail:
    return NULL;
}


static int _wrap_MAX_WORD_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable MAX_WORD is read-only.");
    return 1;
}


static PyObject *_wrap_MAX_WORD_get(void) {
    PyObject *pyobj = NULL;
    
    {
        pyobj = SWIG_From_int((int)(gpstk::MAX_WORD)); 
    }
    return pyobj;
}


static PyObject *_wrap_new_GenXSequence(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    unsigned int arg1 ;
    unsigned int arg2 ;
    int arg3 ;
    int arg4 ;
    gpstk::GenXSequence *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:new_GenXSequence",&obj0,&obj1,&obj2,&obj3)) goto fail;
    {
        arg1 = (unsigned int const)(SWIG_As_unsigned_SS_int(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        arg2 = (unsigned int const)(SWIG_As_unsigned_SS_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (int const)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = (int const)(SWIG_As_int(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    result = (gpstk::GenXSequence *)new gpstk::GenXSequence(arg1,arg2,arg3,arg4);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__GenXSequence, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_GenXSequence(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::GenXSequence *arg1 = (gpstk::GenXSequence *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_GenXSequence",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__GenXSequence, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_GenXSequence_class_operator_bracket(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::GenXSequence *arg1 = (gpstk::GenXSequence *) 0 ;
    int arg2 ;
    unsigned long result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:GenXSequence_class_operator_bracket",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__GenXSequence, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (unsigned long)(arg1)->operator [](arg2);
    
    {
        resultobj = SWIG_From_unsigned_SS_long((unsigned long)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_GenXSequence_setLengthOfSequence(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::GenXSequence *arg1 = (gpstk::GenXSequence *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:GenXSequence_setLengthOfSequence",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__GenXSequence, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    (arg1)->setLengthOfSequence(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * GenXSequence_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_gpstk__GenXSequence, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_SVPCodeGen(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    int arg1 ;
    gpstk::DayTime *arg2 = 0 ;
    gpstk::SVPCodeGen *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:new_SVPCodeGen",&obj0,&obj1)) goto fail;
    {
        arg1 = (int const)(SWIG_As_int(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_gpstk__DayTime, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("gpstk::DayTime");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (gpstk::SVPCodeGen *)new gpstk::SVPCodeGen(arg1,(gpstk::DayTime const &)*arg2);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__SVPCodeGen, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_SVPCodeGen(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::SVPCodeGen *arg1 = (gpstk::SVPCodeGen *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_SVPCodeGen",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__SVPCodeGen, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SVPCodeGen_getCurrentSixSeconds(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::SVPCodeGen *arg1 = (gpstk::SVPCodeGen *) 0 ;
    gpstk::CodeBuffer *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:SVPCodeGen_getCurrentSixSeconds",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__SVPCodeGen, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_gpstk__CodeBuffer, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("gpstk::CodeBuffer");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    (arg1)->getCurrentSixSeconds(*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SVPCodeGen_increment4ZCounts(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::SVPCodeGen *arg1 = (gpstk::SVPCodeGen *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:SVPCodeGen_increment4ZCounts",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__SVPCodeGen, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    (arg1)->increment4ZCounts();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SVPCodeGen_getCurrentZCount(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::SVPCodeGen *arg1 = (gpstk::SVPCodeGen *) 0 ;
    gpstk::DayTime *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:SVPCodeGen_getCurrentZCount",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__SVPCodeGen, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        gpstk::DayTime const &_result_ref = (arg1)->getCurrentZCount();
        result = (gpstk::DayTime *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__DayTime, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject * SVPCodeGen_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_gpstk__SVPCodeGen, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_Observation(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::Observation *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_Observation")) goto fail;
    result = (gpstk::Observation *)new gpstk::Observation();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__Observation, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Observation_range_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::Observation *arg1 = (gpstk::Observation *) 0 ;
    double arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Observation_range_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__Observation, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->range = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Observation_range_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::Observation *arg1 = (gpstk::Observation *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Observation_range_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__Observation, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double) ((arg1)->range);
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Observation_phase_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::Observation *arg1 = (gpstk::Observation *) 0 ;
    double arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Observation_phase_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__Observation, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->phase = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Observation_phase_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::Observation *arg1 = (gpstk::Observation *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Observation_phase_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__Observation, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double) ((arg1)->phase);
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Observation_doppler_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::Observation *arg1 = (gpstk::Observation *) 0 ;
    double arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Observation_doppler_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__Observation, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->doppler = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Observation_doppler_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::Observation *arg1 = (gpstk::Observation *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Observation_doppler_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__Observation, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double) ((arg1)->doppler);
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Observation_SNR_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::Observation *arg1 = (gpstk::Observation *) 0 ;
    float arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Observation_SNR_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__Observation, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (float)(SWIG_As_float(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->SNR = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Observation_SNR_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::Observation *arg1 = (gpstk::Observation *) 0 ;
    float result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Observation_SNR_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__Observation, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (float) ((arg1)->SNR);
    
    {
        resultobj = SWIG_From_float((float)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Observation_channel_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::Observation *arg1 = (gpstk::Observation *) 0 ;
    short arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Observation_channel_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__Observation, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (short)(SWIG_As_short(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->channel = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Observation_channel_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::Observation *arg1 = (gpstk::Observation *) 0 ;
    short result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Observation_channel_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__Observation, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (short) ((arg1)->channel);
    
    {
        resultobj = SWIG_From_short((short)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Observation_code_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::Observation *arg1 = (gpstk::Observation *) 0 ;
    gpstk::Observation::RangingCode arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Observation_code_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__Observation, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (gpstk::Observation::RangingCode)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->code = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Observation_code_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::Observation *arg1 = (gpstk::Observation *) 0 ;
    gpstk::Observation::RangingCode result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Observation_code_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__Observation, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (gpstk::Observation::RangingCode) ((arg1)->code);
    
    resultobj = SWIG_From_int((result));
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Observation_carrier_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::Observation *arg1 = (gpstk::Observation *) 0 ;
    gpstk::Observation::CarrierFrequency arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Observation_carrier_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__Observation, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (gpstk::Observation::CarrierFrequency)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->carrier = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Observation_carrier_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::Observation *arg1 = (gpstk::Observation *) 0 ;
    gpstk::Observation::CarrierFrequency result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Observation_carrier_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__Observation, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (gpstk::Observation::CarrierFrequency) ((arg1)->carrier);
    
    resultobj = SWIG_From_int((result));
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_streamRead__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::ostream *arg1 = 0 ;
    gpstk::Observation *arg2 = 0 ;
    std::ostream *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:streamRead",&obj0,&obj1)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("std::ostream");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_gpstk__Observation, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("gpstk::Observation");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        std::ostream &_result_ref = operator <<(*arg1,(gpstk::Observation const &)*arg2);
        result = (std::ostream *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_Observation(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::Observation *arg1 = (gpstk::Observation *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_Observation",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__Observation, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * Observation_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_gpstk__Observation, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_ObservationPlus_obs_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::ObservationPlus *arg1 = (gpstk::ObservationPlus *) 0 ;
    gpstk::Observation *arg2 = (gpstk::Observation *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ObservationPlus_obs_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__ObservationPlus, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_gpstk__Observation, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->obs = *arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ObservationPlus_obs_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::ObservationPlus *arg1 = (gpstk::ObservationPlus *) 0 ;
    gpstk::Observation *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ObservationPlus_obs_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__ObservationPlus, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (gpstk::Observation *)& ((arg1)->obs);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__Observation, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ObservationPlus_time_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::ObservationPlus *arg1 = (gpstk::ObservationPlus *) 0 ;
    DayTime *arg2 = (DayTime *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ObservationPlus_time_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__ObservationPlus, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_gpstk__DayTime, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->time = *arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ObservationPlus_time_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::ObservationPlus *arg1 = (gpstk::ObservationPlus *) 0 ;
    DayTime *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ObservationPlus_time_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__ObservationPlus, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (DayTime *)& ((arg1)->time);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__DayTime, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ObservationPlus_rxId_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::ObservationPlus *arg1 = (gpstk::ObservationPlus *) 0 ;
    unsigned int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ObservationPlus_rxId_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__ObservationPlus, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (unsigned int)(SWIG_As_unsigned_SS_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->rxId = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ObservationPlus_rxId_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::ObservationPlus *arg1 = (gpstk::ObservationPlus *) 0 ;
    unsigned int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ObservationPlus_rxId_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__ObservationPlus, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (unsigned int) ((arg1)->rxId);
    
    {
        resultobj = SWIG_From_unsigned_SS_int((unsigned int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ObservationPlus_svId_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::ObservationPlus *arg1 = (gpstk::ObservationPlus *) 0 ;
    short arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ObservationPlus_svId_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__ObservationPlus, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (short)(SWIG_As_short(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->svId = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ObservationPlus_svId_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::ObservationPlus *arg1 = (gpstk::ObservationPlus *) 0 ;
    short result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ObservationPlus_svId_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__ObservationPlus, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (short) ((arg1)->svId);
    
    {
        resultobj = SWIG_From_short((short)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_ObservationPlus(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::ObservationPlus *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_ObservationPlus")) goto fail;
    result = (gpstk::ObservationPlus *)new gpstk::ObservationPlus();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__ObservationPlus, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_ObservationPlus(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::ObservationPlus *arg1 = (gpstk::ObservationPlus *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_ObservationPlus",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__ObservationPlus, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * ObservationPlus_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_gpstk__ObservationPlus, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_ObsEpoch(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::ObsEpoch *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_ObsEpoch")) goto fail;
    result = (gpstk::ObsEpoch *)new gpstk::ObsEpoch();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__ObsEpoch, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ObsEpoch_insertObservation__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::ObsEpoch *arg1 = (gpstk::ObsEpoch *) 0 ;
    gpstk::ObservationPlus *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ObsEpoch_insertObservation",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__ObsEpoch, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_gpstk__ObservationPlus, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("gpstk::ObservationPlus");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    (arg1)->insertObservation((gpstk::ObservationPlus const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ObsEpoch_insertObservation__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::ObsEpoch *arg1 = (gpstk::ObsEpoch *) 0 ;
    gpstk::Observation *arg2 = 0 ;
    short arg3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:ObsEpoch_insertObservation",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__ObsEpoch, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_gpstk__Observation, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("gpstk::Observation");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (short const)(SWIG_As_short(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    (arg1)->insertObservation((gpstk::Observation const &)*arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ObsEpoch_insertObservation(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[4];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_gpstk__ObsEpoch, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_gpstk__ObservationPlus, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_ObsEpoch_insertObservation__SWIG_0(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_gpstk__ObsEpoch, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_gpstk__Observation, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                _v = SWIG_Check_short(argv[2]);
                if (_v) {
                    return _wrap_ObsEpoch_insertObservation__SWIG_1(self,args);
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'ObsEpoch_insertObservation'");
    return NULL;
}


static PyObject *_wrap_ObsEpoch_t_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::ObsEpoch *arg1 = (gpstk::ObsEpoch *) 0 ;
    DayTime *arg2 = (DayTime *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ObsEpoch_t_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__ObsEpoch, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_gpstk__DayTime, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->t = *arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ObsEpoch_t_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::ObsEpoch *arg1 = (gpstk::ObsEpoch *) 0 ;
    DayTime *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ObsEpoch_t_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__ObsEpoch, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (DayTime *)& ((arg1)->t);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__DayTime, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ObsEpoch_dt_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::ObsEpoch *arg1 = (gpstk::ObsEpoch *) 0 ;
    double arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ObsEpoch_dt_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__ObsEpoch, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->dt = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ObsEpoch_dt_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::ObsEpoch *arg1 = (gpstk::ObsEpoch *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ObsEpoch_dt_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__ObsEpoch, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double) ((arg1)->dt);
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ObsEpoch_obs_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::ObsEpoch *arg1 = (gpstk::ObsEpoch *) 0 ;
    gpstk::ObsMap *arg2 = (gpstk::ObsMap *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ObsEpoch_obs_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__ObsEpoch, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__mapTshort_gpstk__Observation_std__lessTshort_t_std__allocatorTstd__pairTshort_const_gpstk__Observation_t_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->obs = *arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ObsEpoch_obs_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::ObsEpoch *arg1 = (gpstk::ObsEpoch *) 0 ;
    gpstk::ObsMap *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ObsEpoch_obs_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__ObsEpoch, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (gpstk::ObsMap *)& ((arg1)->obs);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__mapTshort_gpstk__Observation_std__lessTshort_t_std__allocatorTstd__pairTshort_const_gpstk__Observation_t_t_t, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_streamRead__SWIG_3(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::ostream *arg1 = 0 ;
    gpstk::ObsEpoch *arg2 = 0 ;
    std::ostream *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:streamRead",&obj0,&obj1)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("std::ostream");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_gpstk__ObsEpoch, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("gpstk::ObsEpoch");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        std::ostream &_result_ref = operator <<(*arg1,(gpstk::ObsEpoch const &)*arg2);
        result = (std::ostream *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_ObsEpoch(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::ObsEpoch *arg1 = (gpstk::ObsEpoch *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_ObsEpoch",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__ObsEpoch, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * ObsEpoch_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_gpstk__ObsEpoch, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_RxObsData(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RxObsData *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_RxObsData")) goto fail;
    result = (gpstk::RxObsData *)new gpstk::RxObsData();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__RxObsData, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RxObsData_insertObservation__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RxObsData *arg1 = (gpstk::RxObsData *) 0 ;
    gpstk::ObservationPlus *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RxObsData_insertObservation",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RxObsData, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_gpstk__ObservationPlus, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("gpstk::ObservationPlus");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    (arg1)->insertObservation((gpstk::ObservationPlus const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RxObsData_insertObservation__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RxObsData *arg1 = (gpstk::RxObsData *) 0 ;
    gpstk::Observation *arg2 = 0 ;
    DayTime *arg3 = 0 ;
    short arg4 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:RxObsData_insertObservation",&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RxObsData, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_gpstk__Observation, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("gpstk::Observation");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_gpstk__DayTime, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (arg3 == NULL) {
            SWIG_null_ref("DayTime");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = (short const)(SWIG_As_short(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    (arg1)->insertObservation((gpstk::Observation const &)*arg2,(DayTime const &)*arg3,arg4);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RxObsData_insertObservation(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[5];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 4); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_gpstk__RxObsData, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_gpstk__ObservationPlus, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_RxObsData_insertObservation__SWIG_0(self,args);
            }
        }
    }
    if (argc == 4) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_gpstk__RxObsData, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_gpstk__Observation, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                {
                    void *ptr = 0;
                    if (SWIG_ConvertPtr(argv[2], &ptr, SWIGTYPE_p_gpstk__DayTime, 0) == -1) {
                        _v = 0;
                        PyErr_Clear();
                    } else {
                        _v = (ptr != 0);
                    }
                }
                if (_v) {
                    _v = SWIG_Check_short(argv[3]);
                    if (_v) {
                        return _wrap_RxObsData_insertObservation__SWIG_1(self,args);
                    }
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'RxObsData_insertObservation'");
    return NULL;
}


static PyObject *_wrap_RxObsData_insertEpoch(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RxObsData *arg1 = (gpstk::RxObsData *) 0 ;
    gpstk::ObsEpoch *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RxObsData_insertEpoch",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RxObsData, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_gpstk__ObsEpoch, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("gpstk::ObsEpoch");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    (arg1)->insertEpoch((gpstk::ObsEpoch const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RxObsData_firstTime_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RxObsData *arg1 = (gpstk::RxObsData *) 0 ;
    DayTime *arg2 = (DayTime *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RxObsData_firstTime_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RxObsData, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_gpstk__DayTime, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->firstTime = *arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RxObsData_firstTime_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RxObsData *arg1 = (gpstk::RxObsData *) 0 ;
    DayTime *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RxObsData_firstTime_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RxObsData, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (DayTime *)& ((arg1)->firstTime);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__DayTime, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RxObsData_lastTime_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RxObsData *arg1 = (gpstk::RxObsData *) 0 ;
    DayTime *arg2 = (DayTime *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RxObsData_lastTime_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RxObsData, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_gpstk__DayTime, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->lastTime = *arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RxObsData_lastTime_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RxObsData *arg1 = (gpstk::RxObsData *) 0 ;
    DayTime *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RxObsData_lastTime_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RxObsData, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (DayTime *)& ((arg1)->lastTime);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__DayTime, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RxObsData_rxId_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RxObsData *arg1 = (gpstk::RxObsData *) 0 ;
    unsigned int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RxObsData_rxId_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RxObsData, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (unsigned int)(SWIG_As_unsigned_SS_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->rxId = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RxObsData_rxId_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RxObsData *arg1 = (gpstk::RxObsData *) 0 ;
    unsigned int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RxObsData_rxId_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RxObsData, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (unsigned int) ((arg1)->rxId);
    
    {
        resultobj = SWIG_From_unsigned_SS_int((unsigned int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RxObsData_prnList_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RxObsData *arg1 = (gpstk::RxObsData *) 0 ;
    std::set<short > arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RxObsData_prnList_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RxObsData, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        std::set<short > * argp;
        SWIG_Python_ConvertPtr(obj1, (void **)&argp, SWIGTYPE_p_std__setTshort_t, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("std::set<short >");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *argp;
    }
    if (arg1) (arg1)->prnList = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RxObsData_prnList_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RxObsData *arg1 = (gpstk::RxObsData *) 0 ;
    std::set<short > result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RxObsData_prnList_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RxObsData, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result =  ((arg1)->prnList);
    
    {
        std::set<short > * resultptr;
        resultptr = new std::set<short >((std::set<short > &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_std__setTshort_t, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RxObsData_epochs_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RxObsData *arg1 = (gpstk::RxObsData *) 0 ;
    gpstk::ObsEpochMap *arg2 = (gpstk::ObsEpochMap *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RxObsData_epochs_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RxObsData, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__mapTgpstk__DayTime_gpstk__ObsEpoch_std__lessTgpstk__DayTime_t_std__allocatorTstd__pairTgpstk__DayTime_const_gpstk__ObsEpoch_t_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->epochs = *arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RxObsData_epochs_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RxObsData *arg1 = (gpstk::RxObsData *) 0 ;
    gpstk::ObsEpochMap *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RxObsData_epochs_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RxObsData, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (gpstk::ObsEpochMap *)& ((arg1)->epochs);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__mapTgpstk__DayTime_gpstk__ObsEpoch_std__lessTgpstk__DayTime_t_std__allocatorTstd__pairTgpstk__DayTime_const_gpstk__ObsEpoch_t_t_t, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_streamRead__SWIG_4(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::ostream *arg1 = 0 ;
    gpstk::RxObsData *arg2 = 0 ;
    std::ostream *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:streamRead",&obj0,&obj1)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("std::ostream");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_gpstk__RxObsData, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("gpstk::RxObsData");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        std::ostream &_result_ref = operator <<(*arg1,(gpstk::RxObsData const &)*arg2);
        result = (std::ostream *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_RxObsData(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RxObsData *arg1 = (gpstk::RxObsData *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_RxObsData",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RxObsData, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * RxObsData_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_gpstk__RxObsData, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_WxObservation__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::WxObservation *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_WxObservation")) goto fail;
    result = (gpstk::WxObservation *)new gpstk::WxObservation();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__WxObservation, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_WxObservation__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    DayTime *arg1 = 0 ;
    double arg2 ;
    double arg3 ;
    double arg4 ;
    gpstk::WxObservation *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:new_WxObservation",&obj0,&obj1,&obj2,&obj3)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__DayTime, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("DayTime");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (double)(SWIG_As_double(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = (double)(SWIG_As_double(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    result = (gpstk::WxObservation *)new gpstk::WxObservation((DayTime const &)*arg1,arg2,arg3,arg4);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__WxObservation, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_WxObservation(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[5];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 4); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_new_WxObservation__SWIG_0(self,args);
    }
    if (argc == 4) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_gpstk__DayTime, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            _v = SWIG_Check_double(argv[1]);
            if (_v) {
                _v = SWIG_Check_double(argv[2]);
                if (_v) {
                    _v = SWIG_Check_double(argv[3]);
                    if (_v) {
                        return _wrap_new_WxObservation__SWIG_1(self,args);
                    }
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'new_WxObservation'");
    return NULL;
}


static PyObject *_wrap_WxObservation_t_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::WxObservation *arg1 = (gpstk::WxObservation *) 0 ;
    DayTime *arg2 = (DayTime *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:WxObservation_t_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__WxObservation, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_gpstk__DayTime, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->t = *arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_WxObservation_t_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::WxObservation *arg1 = (gpstk::WxObservation *) 0 ;
    DayTime *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:WxObservation_t_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__WxObservation, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (DayTime *)& ((arg1)->t);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__DayTime, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_WxObservation_temperature_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::WxObservation *arg1 = (gpstk::WxObservation *) 0 ;
    float arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:WxObservation_temperature_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__WxObservation, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (float)(SWIG_As_float(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->temperature = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_WxObservation_temperature_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::WxObservation *arg1 = (gpstk::WxObservation *) 0 ;
    float result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:WxObservation_temperature_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__WxObservation, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (float) ((arg1)->temperature);
    
    {
        resultobj = SWIG_From_float((float)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_WxObservation_pressure_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::WxObservation *arg1 = (gpstk::WxObservation *) 0 ;
    float arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:WxObservation_pressure_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__WxObservation, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (float)(SWIG_As_float(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->pressure = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_WxObservation_pressure_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::WxObservation *arg1 = (gpstk::WxObservation *) 0 ;
    float result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:WxObservation_pressure_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__WxObservation, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (float) ((arg1)->pressure);
    
    {
        resultobj = SWIG_From_float((float)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_WxObservation_humidity_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::WxObservation *arg1 = (gpstk::WxObservation *) 0 ;
    float arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:WxObservation_humidity_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__WxObservation, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (float)(SWIG_As_float(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->humidity = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_WxObservation_humidity_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::WxObservation *arg1 = (gpstk::WxObservation *) 0 ;
    float result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:WxObservation_humidity_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__WxObservation, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (float) ((arg1)->humidity);
    
    {
        resultobj = SWIG_From_float((float)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_WxObservation_temperatureSource_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::WxObservation *arg1 = (gpstk::WxObservation *) 0 ;
    enum gpstk::WxObservation::EWxSrc arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:WxObservation_temperatureSource_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__WxObservation, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (enum gpstk::WxObservation::EWxSrc)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->temperatureSource = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_WxObservation_temperatureSource_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::WxObservation *arg1 = (gpstk::WxObservation *) 0 ;
    enum gpstk::WxObservation::EWxSrc result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:WxObservation_temperatureSource_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__WxObservation, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (enum gpstk::WxObservation::EWxSrc) ((arg1)->temperatureSource);
    
    resultobj = SWIG_From_int((result));
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_WxObservation_pressureSource_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::WxObservation *arg1 = (gpstk::WxObservation *) 0 ;
    enum gpstk::WxObservation::EWxSrc arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:WxObservation_pressureSource_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__WxObservation, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (enum gpstk::WxObservation::EWxSrc)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->pressureSource = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_WxObservation_pressureSource_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::WxObservation *arg1 = (gpstk::WxObservation *) 0 ;
    enum gpstk::WxObservation::EWxSrc result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:WxObservation_pressureSource_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__WxObservation, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (enum gpstk::WxObservation::EWxSrc) ((arg1)->pressureSource);
    
    resultobj = SWIG_From_int((result));
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_WxObservation_humiditySource_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::WxObservation *arg1 = (gpstk::WxObservation *) 0 ;
    enum gpstk::WxObservation::EWxSrc arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:WxObservation_humiditySource_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__WxObservation, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (enum gpstk::WxObservation::EWxSrc)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->humiditySource = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_WxObservation_humiditySource_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::WxObservation *arg1 = (gpstk::WxObservation *) 0 ;
    enum gpstk::WxObservation::EWxSrc result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:WxObservation_humiditySource_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__WxObservation, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (enum gpstk::WxObservation::EWxSrc) ((arg1)->humiditySource);
    
    resultobj = SWIG_From_int((result));
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_WxObservation_isAllValid(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::WxObservation *arg1 = (gpstk::WxObservation *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:WxObservation_isAllValid",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__WxObservation, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)((gpstk::WxObservation const *)arg1)->isAllValid();
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_streamRead__SWIG_5(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::ostream *arg1 = 0 ;
    gpstk::WxObservation *arg2 = 0 ;
    std::ostream *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:streamRead",&obj0,&obj1)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("std::ostream");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_gpstk__WxObservation, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("gpstk::WxObservation");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        std::ostream &_result_ref = operator <<(*arg1,(gpstk::WxObservation const &)*arg2);
        result = (std::ostream *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_WxObservation(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::WxObservation *arg1 = (gpstk::WxObservation *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_WxObservation",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__WxObservation, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * WxObservation_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_gpstk__WxObservation, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_WxObsData(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::WxObsData *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_WxObsData")) goto fail;
    result = (gpstk::WxObsData *)new gpstk::WxObsData();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__WxObsData, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_WxObsData_firstTime_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::WxObsData *arg1 = (gpstk::WxObsData *) 0 ;
    DayTime *arg2 = (DayTime *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:WxObsData_firstTime_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__WxObsData, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_gpstk__DayTime, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->firstTime = *arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_WxObsData_firstTime_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::WxObsData *arg1 = (gpstk::WxObsData *) 0 ;
    DayTime *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:WxObsData_firstTime_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__WxObsData, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (DayTime *)& ((arg1)->firstTime);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__DayTime, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_WxObsData_lastTime_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::WxObsData *arg1 = (gpstk::WxObsData *) 0 ;
    DayTime *arg2 = (DayTime *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:WxObsData_lastTime_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__WxObsData, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_gpstk__DayTime, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->lastTime = *arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_WxObsData_lastTime_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::WxObsData *arg1 = (gpstk::WxObsData *) 0 ;
    DayTime *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:WxObsData_lastTime_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__WxObsData, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (DayTime *)& ((arg1)->lastTime);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__DayTime, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_WxObsData_rxId_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::WxObsData *arg1 = (gpstk::WxObsData *) 0 ;
    unsigned int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:WxObsData_rxId_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__WxObsData, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (unsigned int)(SWIG_As_unsigned_SS_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->rxId = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_WxObsData_rxId_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::WxObsData *arg1 = (gpstk::WxObsData *) 0 ;
    unsigned int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:WxObsData_rxId_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__WxObsData, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (unsigned int) ((arg1)->rxId);
    
    {
        resultobj = SWIG_From_unsigned_SS_int((unsigned int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_WxObsData_obs_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::WxObsData *arg1 = (gpstk::WxObsData *) 0 ;
    gpstk::WxObsMap *arg2 = (gpstk::WxObsMap *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:WxObsData_obs_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__WxObsData, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__mapTgpstk__DayTime_gpstk__WxObservation_std__lessTgpstk__DayTime_t_std__allocatorTstd__pairTgpstk__DayTime_const_gpstk__WxObservation_t_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->obs = *arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_WxObsData_obs_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::WxObsData *arg1 = (gpstk::WxObsData *) 0 ;
    gpstk::WxObsMap *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:WxObsData_obs_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__WxObsData, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (gpstk::WxObsMap *)& ((arg1)->obs);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__mapTgpstk__DayTime_gpstk__WxObservation_std__lessTgpstk__DayTime_t_std__allocatorTstd__pairTgpstk__DayTime_const_gpstk__WxObservation_t_t_t, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_WxObsData_getMostRecent(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::WxObsData *arg1 = (gpstk::WxObsData *) 0 ;
    DayTime *arg2 = 0 ;
    gpstk::WxObservation result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:WxObsData_getMostRecent",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__WxObsData, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_gpstk__DayTime, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("DayTime");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = ((gpstk::WxObsData const *)arg1)->getMostRecent((DayTime const &)*arg2);
    
    {
        gpstk::WxObservation * resultptr;
        resultptr = new gpstk::WxObservation((gpstk::WxObservation &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_gpstk__WxObservation, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_WxObsData_insertObservation(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::WxObsData *arg1 = (gpstk::WxObsData *) 0 ;
    gpstk::WxObservation *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:WxObsData_insertObservation",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__WxObsData, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_gpstk__WxObservation, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("gpstk::WxObservation");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    (arg1)->insertObservation((gpstk::WxObservation const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_WxObsData_flush(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::WxObsData *arg1 = (gpstk::WxObsData *) 0 ;
    DayTime *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:WxObsData_flush",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__WxObsData, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_gpstk__DayTime, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("DayTime");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    (arg1)->flush((DayTime const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_WxObsData_getWxObservation__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::WxObsData *arg1 = (gpstk::WxObsData *) 0 ;
    DayTime *arg2 = 0 ;
    unsigned int arg3 ;
    bool arg4 ;
    gpstk::WxObservation result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:WxObsData_getWxObservation",&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__WxObsData, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_gpstk__DayTime, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("DayTime");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (unsigned int)(SWIG_As_unsigned_SS_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = (bool)(SWIG_As_bool(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    try {
        result = ((gpstk::WxObsData const *)arg1)->getWxObservation((DayTime const &)*arg2,arg3,arg4);
    }
    catch(gpstk::ObjectNotFound &_e) {
        {
            gpstk::ObjectNotFound * temp = new gpstk::ObjectNotFound(_e);
            if (SWIGTYPE_p_gpstk__ObjectNotFound->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_gpstk__ObjectNotFound->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__ObjectNotFound,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"gpstk::ObjectNotFound");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__ObjectNotFound,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    {
        gpstk::WxObservation * resultptr;
        resultptr = new gpstk::WxObservation((gpstk::WxObservation &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_gpstk__WxObservation, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_WxObsData_getWxObservation__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::WxObsData *arg1 = (gpstk::WxObsData *) 0 ;
    DayTime *arg2 = 0 ;
    unsigned int arg3 ;
    gpstk::WxObservation result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:WxObsData_getWxObservation",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__WxObsData, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_gpstk__DayTime, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("DayTime");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (unsigned int)(SWIG_As_unsigned_SS_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    try {
        result = ((gpstk::WxObsData const *)arg1)->getWxObservation((DayTime const &)*arg2,arg3);
    }
    catch(gpstk::ObjectNotFound &_e) {
        {
            gpstk::ObjectNotFound * temp = new gpstk::ObjectNotFound(_e);
            if (SWIGTYPE_p_gpstk__ObjectNotFound->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_gpstk__ObjectNotFound->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__ObjectNotFound,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"gpstk::ObjectNotFound");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__ObjectNotFound,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    {
        gpstk::WxObservation * resultptr;
        resultptr = new gpstk::WxObservation((gpstk::WxObservation &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_gpstk__WxObservation, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_WxObsData_getWxObservation__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::WxObsData *arg1 = (gpstk::WxObsData *) 0 ;
    DayTime *arg2 = 0 ;
    gpstk::WxObservation result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:WxObsData_getWxObservation",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__WxObsData, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_gpstk__DayTime, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("DayTime");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        result = ((gpstk::WxObsData const *)arg1)->getWxObservation((DayTime const &)*arg2);
    }
    catch(gpstk::ObjectNotFound &_e) {
        {
            gpstk::ObjectNotFound * temp = new gpstk::ObjectNotFound(_e);
            if (SWIGTYPE_p_gpstk__ObjectNotFound->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_gpstk__ObjectNotFound->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__ObjectNotFound,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"gpstk::ObjectNotFound");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__ObjectNotFound,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    {
        gpstk::WxObservation * resultptr;
        resultptr = new gpstk::WxObservation((gpstk::WxObservation &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_gpstk__WxObservation, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_WxObsData_getWxObservation(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[5];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 4); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_gpstk__WxObsData, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_gpstk__DayTime, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_WxObsData_getWxObservation__SWIG_2(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_gpstk__WxObsData, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_gpstk__DayTime, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                _v = SWIG_Check_unsigned_SS_int(argv[2]);
                if (_v) {
                    return _wrap_WxObsData_getWxObservation__SWIG_1(self,args);
                }
            }
        }
    }
    if (argc == 4) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_gpstk__WxObsData, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_gpstk__DayTime, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                _v = SWIG_Check_unsigned_SS_int(argv[2]);
                if (_v) {
                    _v = SWIG_Check_bool(argv[3]);
                    if (_v) {
                        return _wrap_WxObsData_getWxObservation__SWIG_0(self,args);
                    }
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'WxObsData_getWxObservation'");
    return NULL;
}


static PyObject *_wrap_delete_WxObsData(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::WxObsData *arg1 = (gpstk::WxObsData *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_WxObsData",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__WxObsData, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * WxObsData_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_gpstk__WxObsData, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_AlmanacStore_getPrnXvt(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::AlmanacStore *arg1 = (gpstk::AlmanacStore *) 0 ;
    short arg2 ;
    gpstk::DayTime *arg3 = 0 ;
    Xvt result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:AlmanacStore_getPrnXvt",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__AlmanacStore, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (short)(SWIG_As_short(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_gpstk__DayTime, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (arg3 == NULL) {
            SWIG_null_ref("gpstk::DayTime");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    try {
        result = ((gpstk::AlmanacStore const *)arg1)->getPrnXvt(arg2,(gpstk::DayTime const &)*arg3);
    }
    catch(NoAlmanacFound &_e) {
        {
            NoAlmanacFound * temp = new NoAlmanacFound(_e);
            if (SWIGTYPE_p_NoAlmanacFound->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_NoAlmanacFound->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_NoAlmanacFound,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"NoAlmanacFound");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_NoAlmanacFound,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    {
        Xvt * resultptr;
        resultptr = new Xvt((Xvt &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_gpstk__Xvt, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_AlmanacStore_getPrnHealth(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::AlmanacStore *arg1 = (gpstk::AlmanacStore *) 0 ;
    short arg2 ;
    gpstk::DayTime *arg3 = 0 ;
    short result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:AlmanacStore_getPrnHealth",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__AlmanacStore, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (short)(SWIG_As_short(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_gpstk__DayTime, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (arg3 == NULL) {
            SWIG_null_ref("gpstk::DayTime");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    try {
        result = (short)((gpstk::AlmanacStore const *)arg1)->getPrnHealth(arg2,(gpstk::DayTime const &)*arg3);
    }
    catch(NoAlmanacFound &_e) {
        {
            NoAlmanacFound * temp = new NoAlmanacFound(_e);
            if (SWIGTYPE_p_NoAlmanacFound->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_NoAlmanacFound->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_NoAlmanacFound,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"NoAlmanacFound");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_NoAlmanacFound,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    {
        resultobj = SWIG_From_short((short)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_AlmanacStore_addAlmanac__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::AlmanacStore *arg1 = (gpstk::AlmanacStore *) 0 ;
    AlmOrbit *arg2 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:AlmanacStore_addAlmanac",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__AlmanacStore, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_gpstk__AlmOrbit, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("AlmOrbit");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (bool)(arg1)->addAlmanac((AlmOrbit const &)*arg2);
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_AlmanacStore_addAlmanac__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::AlmanacStore *arg1 = (gpstk::AlmanacStore *) 0 ;
    EngAlmanac *arg2 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:AlmanacStore_addAlmanac",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__AlmanacStore, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_gpstk__EngAlmanac, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("EngAlmanac");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (bool)(arg1)->addAlmanac((EngAlmanac const &)*arg2);
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_AlmanacStore_addAlmanac(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_gpstk__AlmanacStore, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_gpstk__AlmOrbit, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_AlmanacStore_addAlmanac__SWIG_0(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_gpstk__AlmanacStore, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_gpstk__EngAlmanac, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_AlmanacStore_addAlmanac__SWIG_1(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'AlmanacStore_addAlmanac'");
    return NULL;
}


static PyObject *_wrap_AlmanacStore_findAlmanac(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::AlmanacStore *arg1 = (gpstk::AlmanacStore *) 0 ;
    short arg2 ;
    gpstk::DayTime *arg3 = 0 ;
    AlmOrbit result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:AlmanacStore_findAlmanac",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__AlmanacStore, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (short)(SWIG_As_short(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_gpstk__DayTime, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (arg3 == NULL) {
            SWIG_null_ref("gpstk::DayTime");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    try {
        result = ((gpstk::AlmanacStore const *)arg1)->findAlmanac(arg2,(gpstk::DayTime const &)*arg3);
    }
    catch(NoAlmanacFound &_e) {
        {
            NoAlmanacFound * temp = new NoAlmanacFound(_e);
            if (SWIGTYPE_p_NoAlmanacFound->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_NoAlmanacFound->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_NoAlmanacFound,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"NoAlmanacFound");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_NoAlmanacFound,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    {
        AlmOrbit * resultptr;
        resultptr = new AlmOrbit((AlmOrbit &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_gpstk__AlmOrbit, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_AlmanacStore_findAlmanacs(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::AlmanacStore *arg1 = (gpstk::AlmanacStore *) 0 ;
    gpstk::DayTime *arg2 = 0 ;
    SwigValueWrapper<std::map<short,gpstk::AlmOrbit,std::less<short >,std::allocator<std::pair<short const,gpstk::AlmOrbit > > > > result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:AlmanacStore_findAlmanacs",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__AlmanacStore, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_gpstk__DayTime, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("gpstk::DayTime");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = ((gpstk::AlmanacStore const *)arg1)->findAlmanacs((gpstk::DayTime const &)*arg2);
    
    {
        AlmOrbits * resultptr;
        resultptr = new AlmOrbits((AlmOrbits &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_std__mapTshort_gpstk__AlmOrbit_std__lessTshort_t_std__allocatorTstd__pairTshort_const_gpstk__AlmOrbit_t_t_t, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_AlmanacStore_size(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::AlmanacStore *arg1 = (gpstk::AlmanacStore *) 0 ;
    size_t result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:AlmanacStore_size",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__AlmanacStore, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = ((gpstk::AlmanacStore const *)arg1)->size();
    
    {
        resultobj = SWIG_From_unsigned_SS_long((unsigned long)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_AlmanacStore(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::AlmanacStore *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_AlmanacStore")) goto fail;
    result = (gpstk::AlmanacStore *)new gpstk::AlmanacStore();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__AlmanacStore, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_AlmanacStore(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::AlmanacStore *arg1 = (gpstk::AlmanacStore *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_AlmanacStore",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__AlmanacStore, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * AlmanacStore_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_gpstk__AlmanacStore, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_AlmOrbit__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::AlmOrbit *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_AlmOrbit")) goto fail;
    result = (gpstk::AlmOrbit *)new gpstk::AlmOrbit();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__AlmOrbit, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_AlmOrbit__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    short arg1 ;
    double arg2 ;
    double arg3 ;
    double arg4 ;
    double arg5 ;
    double arg6 ;
    double arg7 ;
    double arg8 ;
    double arg9 ;
    double arg10 ;
    long arg11 ;
    long arg12 ;
    short arg13 ;
    short arg14 ;
    gpstk::AlmOrbit *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    PyObject * obj5 = 0 ;
    PyObject * obj6 = 0 ;
    PyObject * obj7 = 0 ;
    PyObject * obj8 = 0 ;
    PyObject * obj9 = 0 ;
    PyObject * obj10 = 0 ;
    PyObject * obj11 = 0 ;
    PyObject * obj12 = 0 ;
    PyObject * obj13 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOOOOOOOOOOO:new_AlmOrbit",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8,&obj9,&obj10,&obj11,&obj12,&obj13)) goto fail;
    {
        arg1 = (short)(SWIG_As_short(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (double)(SWIG_As_double(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = (double)(SWIG_As_double(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    {
        arg5 = (double)(SWIG_As_double(obj4)); 
        if (SWIG_arg_fail(5)) SWIG_fail;
    }
    {
        arg6 = (double)(SWIG_As_double(obj5)); 
        if (SWIG_arg_fail(6)) SWIG_fail;
    }
    {
        arg7 = (double)(SWIG_As_double(obj6)); 
        if (SWIG_arg_fail(7)) SWIG_fail;
    }
    {
        arg8 = (double)(SWIG_As_double(obj7)); 
        if (SWIG_arg_fail(8)) SWIG_fail;
    }
    {
        arg9 = (double)(SWIG_As_double(obj8)); 
        if (SWIG_arg_fail(9)) SWIG_fail;
    }
    {
        arg10 = (double)(SWIG_As_double(obj9)); 
        if (SWIG_arg_fail(10)) SWIG_fail;
    }
    {
        arg11 = (long)(SWIG_As_long(obj10)); 
        if (SWIG_arg_fail(11)) SWIG_fail;
    }
    {
        arg12 = (long)(SWIG_As_long(obj11)); 
        if (SWIG_arg_fail(12)) SWIG_fail;
    }
    {
        arg13 = (short)(SWIG_As_short(obj12)); 
        if (SWIG_arg_fail(13)) SWIG_fail;
    }
    {
        arg14 = (short)(SWIG_As_short(obj13)); 
        if (SWIG_arg_fail(14)) SWIG_fail;
    }
    result = (gpstk::AlmOrbit *)new gpstk::AlmOrbit(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__AlmOrbit, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_AlmOrbit(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[15];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 14); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_new_AlmOrbit__SWIG_0(self,args);
    }
    if (argc == 14) {
        int _v;
        _v = SWIG_Check_short(argv[0]);
        if (_v) {
            _v = SWIG_Check_double(argv[1]);
            if (_v) {
                _v = SWIG_Check_double(argv[2]);
                if (_v) {
                    _v = SWIG_Check_double(argv[3]);
                    if (_v) {
                        _v = SWIG_Check_double(argv[4]);
                        if (_v) {
                            _v = SWIG_Check_double(argv[5]);
                            if (_v) {
                                _v = SWIG_Check_double(argv[6]);
                                if (_v) {
                                    _v = SWIG_Check_double(argv[7]);
                                    if (_v) {
                                        _v = SWIG_Check_double(argv[8]);
                                        if (_v) {
                                            _v = SWIG_Check_double(argv[9]);
                                            if (_v) {
                                                _v = SWIG_Check_long(argv[10]);
                                                if (_v) {
                                                    _v = SWIG_Check_long(argv[11]);
                                                    if (_v) {
                                                        _v = SWIG_Check_short(argv[12]);
                                                        if (_v) {
                                                            _v = SWIG_Check_short(argv[13]);
                                                            if (_v) {
                                                                return _wrap_new_AlmOrbit__SWIG_1(self,args);
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'new_AlmOrbit'");
    return NULL;
}


static PyObject *_wrap_AlmOrbit_svXvt(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::AlmOrbit *arg1 = (gpstk::AlmOrbit *) 0 ;
    DayTime *arg2 = 0 ;
    Xvt result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:AlmOrbit_svXvt",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__AlmOrbit, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_gpstk__DayTime, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("DayTime");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = ((gpstk::AlmOrbit const *)arg1)->svXvt((DayTime const &)*arg2);
    
    {
        Xvt * resultptr;
        resultptr = new Xvt((Xvt &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_gpstk__Xvt, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_AlmOrbit_getPRNID(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::AlmOrbit *arg1 = (gpstk::AlmOrbit *) 0 ;
    short result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:AlmOrbit_getPRNID",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__AlmOrbit, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (short)((gpstk::AlmOrbit const *)arg1)->getPRNID();
    
    {
        resultobj = SWIG_From_short((short)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_AlmOrbit_getFullWeek(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::AlmOrbit *arg1 = (gpstk::AlmOrbit *) 0 ;
    short result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:AlmOrbit_getFullWeek",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__AlmOrbit, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (short)((gpstk::AlmOrbit const *)arg1)->getFullWeek();
    
    {
        resultobj = SWIG_From_short((short)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_AlmOrbit_getTransmitTime(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::AlmOrbit *arg1 = (gpstk::AlmOrbit *) 0 ;
    DayTime result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:AlmOrbit_getTransmitTime",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__AlmOrbit, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = ((gpstk::AlmOrbit const *)arg1)->getTransmitTime();
    
    {
        DayTime * resultptr;
        resultptr = new DayTime((DayTime &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_gpstk__DayTime, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_AlmOrbit_getToaTime(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::AlmOrbit *arg1 = (gpstk::AlmOrbit *) 0 ;
    DayTime result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:AlmOrbit_getToaTime",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__AlmOrbit, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = ((gpstk::AlmOrbit const *)arg1)->getToaTime();
    
    {
        DayTime * resultptr;
        resultptr = new DayTime((DayTime &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_gpstk__DayTime, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_AlmOrbit_getTimestamp(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::AlmOrbit *arg1 = (gpstk::AlmOrbit *) 0 ;
    DayTime result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:AlmOrbit_getTimestamp",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__AlmOrbit, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = ((gpstk::AlmOrbit const *)arg1)->getTimestamp();
    
    {
        DayTime * resultptr;
        resultptr = new DayTime((DayTime &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_gpstk__DayTime, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_AlmOrbit_getSVHealth(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::AlmOrbit *arg1 = (gpstk::AlmOrbit *) 0 ;
    short result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:AlmOrbit_getSVHealth",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__AlmOrbit, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (short)((gpstk::AlmOrbit const *)arg1)->getSVHealth();
    
    {
        resultobj = SWIG_From_short((short)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_AlmOrbit(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::AlmOrbit *arg1 = (gpstk::AlmOrbit *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_AlmOrbit",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__AlmOrbit, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * AlmOrbit_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_gpstk__AlmOrbit, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_IonoModel__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::IonoModel *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_IonoModel")) goto fail;
    result = (gpstk::IonoModel *)new gpstk::IonoModel();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__IonoModel, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_IonoModel(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::IonoModel *arg1 = (gpstk::IonoModel *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_IonoModel",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__IonoModel, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_IonoModel__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    double *arg1 ;
    double *arg2 ;
    gpstk::IonoModel *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:new_IonoModel",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_double, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_double, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    result = (gpstk::IonoModel *)new gpstk::IonoModel((double const (*))arg1,(double const (*))arg2);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__IonoModel, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_IonoModel__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    EngAlmanac *arg1 = 0 ;
    gpstk::IonoModel *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_IonoModel",&obj0)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__EngAlmanac, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("EngAlmanac");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    result = (gpstk::IonoModel *)new gpstk::IonoModel((EngAlmanac const &)*arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__IonoModel, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_IonoModel(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_new_IonoModel__SWIG_0(self,args);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_gpstk__EngAlmanac, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            return _wrap_new_IonoModel__SWIG_2(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_double, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_double, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                return _wrap_new_IonoModel__SWIG_1(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'new_IonoModel'");
    return NULL;
}


static PyObject *_wrap_IonoModel_isValid(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::IonoModel *arg1 = (gpstk::IonoModel *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:IonoModel_isValid",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__IonoModel, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)((gpstk::IonoModel const *)arg1)->isValid();
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IonoModel_getCorrection__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::IonoModel *arg1 = (gpstk::IonoModel *) 0 ;
    DayTime *arg2 = 0 ;
    Geodetic *arg3 = 0 ;
    double arg4 ;
    double arg5 ;
    gpstk::IonoModel::Frequency arg6 ;
    double result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    PyObject * obj5 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOOO:IonoModel_getCorrection",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__IonoModel, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_gpstk__DayTime, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("DayTime");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_gpstk__Geodetic, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (arg3 == NULL) {
            SWIG_null_ref("Geodetic");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = (double)(SWIG_As_double(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    {
        arg5 = (double)(SWIG_As_double(obj4)); 
        if (SWIG_arg_fail(5)) SWIG_fail;
    }
    {
        arg6 = (gpstk::IonoModel::Frequency)(SWIG_As_int(obj5)); 
        if (SWIG_arg_fail(6)) SWIG_fail;
    }
    try {
        result = (double)((gpstk::IonoModel const *)arg1)->getCorrection((DayTime const &)*arg2,(Geodetic const &)*arg3,arg4,arg5,arg6);
    }
    catch(InvalidIonoModel &_e) {
        {
            InvalidIonoModel * temp = new InvalidIonoModel(_e);
            if (SWIGTYPE_p_InvalidIonoModel->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_InvalidIonoModel->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_InvalidIonoModel,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"InvalidIonoModel");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_InvalidIonoModel,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IonoModel_getCorrection__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::IonoModel *arg1 = (gpstk::IonoModel *) 0 ;
    DayTime *arg2 = 0 ;
    Geodetic *arg3 = 0 ;
    double arg4 ;
    double arg5 ;
    double result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOO:IonoModel_getCorrection",&obj0,&obj1,&obj2,&obj3,&obj4)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__IonoModel, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_gpstk__DayTime, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("DayTime");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_gpstk__Geodetic, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (arg3 == NULL) {
            SWIG_null_ref("Geodetic");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = (double)(SWIG_As_double(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    {
        arg5 = (double)(SWIG_As_double(obj4)); 
        if (SWIG_arg_fail(5)) SWIG_fail;
    }
    try {
        result = (double)((gpstk::IonoModel const *)arg1)->getCorrection((DayTime const &)*arg2,(Geodetic const &)*arg3,arg4,arg5);
    }
    catch(InvalidIonoModel &_e) {
        {
            InvalidIonoModel * temp = new InvalidIonoModel(_e);
            if (SWIGTYPE_p_InvalidIonoModel->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_InvalidIonoModel->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_InvalidIonoModel,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"InvalidIonoModel");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_InvalidIonoModel,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IonoModel_getCorrection(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[7];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 6); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 5) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_gpstk__IonoModel, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_gpstk__DayTime, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                {
                    void *ptr = 0;
                    if (SWIG_ConvertPtr(argv[2], &ptr, SWIGTYPE_p_gpstk__Geodetic, 0) == -1) {
                        _v = 0;
                        PyErr_Clear();
                    } else {
                        _v = (ptr != 0);
                    }
                }
                if (_v) {
                    _v = SWIG_Check_double(argv[3]);
                    if (_v) {
                        _v = SWIG_Check_double(argv[4]);
                        if (_v) {
                            return _wrap_IonoModel_getCorrection__SWIG_1(self,args);
                        }
                    }
                }
            }
        }
    }
    if (argc == 6) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_gpstk__IonoModel, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_gpstk__DayTime, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                {
                    void *ptr = 0;
                    if (SWIG_ConvertPtr(argv[2], &ptr, SWIGTYPE_p_gpstk__Geodetic, 0) == -1) {
                        _v = 0;
                        PyErr_Clear();
                    } else {
                        _v = (ptr != 0);
                    }
                }
                if (_v) {
                    _v = SWIG_Check_double(argv[3]);
                    if (_v) {
                        _v = SWIG_Check_double(argv[4]);
                        if (_v) {
                            _v = SWIG_Check_int(argv[5]);
                            if (_v) {
                                return _wrap_IonoModel_getCorrection__SWIG_0(self,args);
                            }
                        }
                    }
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'IonoModel_getCorrection'");
    return NULL;
}


static PyObject *_wrap_IonoModel___eq__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::IonoModel *arg1 = (gpstk::IonoModel *) 0 ;
    gpstk::IonoModel *arg2 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:IonoModel___eq__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__IonoModel, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_gpstk__IonoModel, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("gpstk::IonoModel");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (bool)((gpstk::IonoModel const *)arg1)->operator ==((gpstk::IonoModel const &)*arg2);
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IonoModel___ne__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::IonoModel *arg1 = (gpstk::IonoModel *) 0 ;
    gpstk::IonoModel *arg2 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:IonoModel___ne__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__IonoModel, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_gpstk__IonoModel, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("gpstk::IonoModel");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (bool)((gpstk::IonoModel const *)arg1)->operator !=((gpstk::IonoModel const &)*arg2);
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject * IonoModel_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_gpstk__IonoModel, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_IonoModelStore(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::IonoModelStore *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_IonoModelStore")) goto fail;
    result = (gpstk::IonoModelStore *)new gpstk::IonoModelStore();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__IonoModelStore, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_IonoModelStore(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::IonoModelStore *arg1 = (gpstk::IonoModelStore *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_IonoModelStore",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__IonoModelStore, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IonoModelStore_getCorrection__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::IonoModelStore *arg1 = (gpstk::IonoModelStore *) 0 ;
    DayTime *arg2 = 0 ;
    Geodetic *arg3 = 0 ;
    double arg4 ;
    double arg5 ;
    gpstk::IonoModel::Frequency arg6 ;
    double result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    PyObject * obj5 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOOO:IonoModelStore_getCorrection",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__IonoModelStore, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_gpstk__DayTime, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("DayTime");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_gpstk__Geodetic, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (arg3 == NULL) {
            SWIG_null_ref("Geodetic");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = (double)(SWIG_As_double(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    {
        arg5 = (double)(SWIG_As_double(obj4)); 
        if (SWIG_arg_fail(5)) SWIG_fail;
    }
    {
        arg6 = (gpstk::IonoModel::Frequency)(SWIG_As_int(obj5)); 
        if (SWIG_arg_fail(6)) SWIG_fail;
    }
    try {
        result = (double)((gpstk::IonoModelStore const *)arg1)->getCorrection((DayTime const &)*arg2,(Geodetic const &)*arg3,arg4,arg5,arg6);
    }
    catch(NoIonoModelFound &_e) {
        {
            NoIonoModelFound * temp = new NoIonoModelFound(_e);
            if (SWIGTYPE_p_NoIonoModelFound->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_NoIonoModelFound->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_NoIonoModelFound,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"NoIonoModelFound");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_NoIonoModelFound,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IonoModelStore_getCorrection__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::IonoModelStore *arg1 = (gpstk::IonoModelStore *) 0 ;
    DayTime *arg2 = 0 ;
    Geodetic *arg3 = 0 ;
    double arg4 ;
    double arg5 ;
    double result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOO:IonoModelStore_getCorrection",&obj0,&obj1,&obj2,&obj3,&obj4)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__IonoModelStore, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_gpstk__DayTime, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("DayTime");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_gpstk__Geodetic, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (arg3 == NULL) {
            SWIG_null_ref("Geodetic");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = (double)(SWIG_As_double(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    {
        arg5 = (double)(SWIG_As_double(obj4)); 
        if (SWIG_arg_fail(5)) SWIG_fail;
    }
    try {
        result = (double)((gpstk::IonoModelStore const *)arg1)->getCorrection((DayTime const &)*arg2,(Geodetic const &)*arg3,arg4,arg5);
    }
    catch(NoIonoModelFound &_e) {
        {
            NoIonoModelFound * temp = new NoIonoModelFound(_e);
            if (SWIGTYPE_p_NoIonoModelFound->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_NoIonoModelFound->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_NoIonoModelFound,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"NoIonoModelFound");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_NoIonoModelFound,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IonoModelStore_getCorrection(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[7];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 6); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 5) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_gpstk__IonoModelStore, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_gpstk__DayTime, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                {
                    void *ptr = 0;
                    if (SWIG_ConvertPtr(argv[2], &ptr, SWIGTYPE_p_gpstk__Geodetic, 0) == -1) {
                        _v = 0;
                        PyErr_Clear();
                    } else {
                        _v = (ptr != 0);
                    }
                }
                if (_v) {
                    _v = SWIG_Check_double(argv[3]);
                    if (_v) {
                        _v = SWIG_Check_double(argv[4]);
                        if (_v) {
                            return _wrap_IonoModelStore_getCorrection__SWIG_1(self,args);
                        }
                    }
                }
            }
        }
    }
    if (argc == 6) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_gpstk__IonoModelStore, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_gpstk__DayTime, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                {
                    void *ptr = 0;
                    if (SWIG_ConvertPtr(argv[2], &ptr, SWIGTYPE_p_gpstk__Geodetic, 0) == -1) {
                        _v = 0;
                        PyErr_Clear();
                    } else {
                        _v = (ptr != 0);
                    }
                }
                if (_v) {
                    _v = SWIG_Check_double(argv[3]);
                    if (_v) {
                        _v = SWIG_Check_double(argv[4]);
                        if (_v) {
                            _v = SWIG_Check_int(argv[5]);
                            if (_v) {
                                return _wrap_IonoModelStore_getCorrection__SWIG_0(self,args);
                            }
                        }
                    }
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'IonoModelStore_getCorrection'");
    return NULL;
}


static PyObject *_wrap_IonoModelStore_addIonoModel(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::IonoModelStore *arg1 = (gpstk::IonoModelStore *) 0 ;
    DayTime *arg2 = 0 ;
    gpstk::IonoModel *arg3 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:IonoModelStore_addIonoModel",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__IonoModelStore, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_gpstk__DayTime, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("DayTime");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_gpstk__IonoModel, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (arg3 == NULL) {
            SWIG_null_ref("gpstk::IonoModel");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    result = (bool)(arg1)->addIonoModel((DayTime const &)*arg2,(gpstk::IonoModel const &)*arg3);
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject * IonoModelStore_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_gpstk__IonoModelStore, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_delete_TropModel(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::TropModel *arg1 = (gpstk::TropModel *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_TropModel",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__TropModel, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_TropModel_isValid(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::TropModel *arg1 = (gpstk::TropModel *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:TropModel_isValid",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__TropModel, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)(arg1)->isValid();
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_TropModel_correction__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::TropModel *arg1 = (gpstk::TropModel *) 0 ;
    double arg2 ;
    double result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:TropModel_correction",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__TropModel, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        result = (double)((gpstk::TropModel const *)arg1)->correction(arg2);
    }
    catch(InvalidTropModel &_e) {
        {
            InvalidTropModel * temp = new InvalidTropModel(_e);
            if (SWIGTYPE_p_InvalidTropModel->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_InvalidTropModel->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_InvalidTropModel,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"InvalidTropModel");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_InvalidTropModel,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_TropModel_correction__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::TropModel *arg1 = (gpstk::TropModel *) 0 ;
    Position *arg2 = 0 ;
    Position *arg3 = 0 ;
    DayTime *arg4 = 0 ;
    double result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:TropModel_correction",&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__TropModel, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_gpstk__Position, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("Position");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_gpstk__Position, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (arg3 == NULL) {
            SWIG_null_ref("Position");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj3, (void **)&arg4, SWIGTYPE_p_gpstk__DayTime, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(4)) SWIG_fail;
        if (arg4 == NULL) {
            SWIG_null_ref("DayTime");
        }
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    try {
        result = (double)(arg1)->correction((Position const &)*arg2,(Position const &)*arg3,(DayTime const &)*arg4);
    }
    catch(InvalidTropModel &_e) {
        {
            InvalidTropModel * temp = new InvalidTropModel(_e);
            if (SWIGTYPE_p_InvalidTropModel->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_InvalidTropModel->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_InvalidTropModel,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"InvalidTropModel");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_InvalidTropModel,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_TropModel_correction__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::TropModel *arg1 = (gpstk::TropModel *) 0 ;
    Xvt *arg2 = 0 ;
    Xvt *arg3 = 0 ;
    DayTime *arg4 = 0 ;
    double result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:TropModel_correction",&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__TropModel, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_gpstk__Xvt, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("Xvt");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_gpstk__Xvt, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (arg3 == NULL) {
            SWIG_null_ref("Xvt");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj3, (void **)&arg4, SWIGTYPE_p_gpstk__DayTime, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(4)) SWIG_fail;
        if (arg4 == NULL) {
            SWIG_null_ref("DayTime");
        }
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    try {
        result = (double)(arg1)->correction((Xvt const &)*arg2,(Xvt const &)*arg3,(DayTime const &)*arg4);
    }
    catch(InvalidTropModel &_e) {
        {
            InvalidTropModel * temp = new InvalidTropModel(_e);
            if (SWIGTYPE_p_InvalidTropModel->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_InvalidTropModel->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_InvalidTropModel,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"InvalidTropModel");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_InvalidTropModel,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_TropModel_correction(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[5];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 4); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_gpstk__TropModel, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_double(argv[1]);
            if (_v) {
                return _wrap_TropModel_correction__SWIG_0(self,args);
            }
        }
    }
    if (argc == 4) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_gpstk__TropModel, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_gpstk__Position, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                {
                    void *ptr = 0;
                    if (SWIG_ConvertPtr(argv[2], &ptr, SWIGTYPE_p_gpstk__Position, 0) == -1) {
                        _v = 0;
                        PyErr_Clear();
                    } else {
                        _v = (ptr != 0);
                    }
                }
                if (_v) {
                    {
                        void *ptr = 0;
                        if (SWIG_ConvertPtr(argv[3], &ptr, SWIGTYPE_p_gpstk__DayTime, 0) == -1) {
                            _v = 0;
                            PyErr_Clear();
                        } else {
                            _v = (ptr != 0);
                        }
                    }
                    if (_v) {
                        return _wrap_TropModel_correction__SWIG_1(self,args);
                    }
                }
            }
        }
    }
    if (argc == 4) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_gpstk__TropModel, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_gpstk__Xvt, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                {
                    void *ptr = 0;
                    if (SWIG_ConvertPtr(argv[2], &ptr, SWIGTYPE_p_gpstk__Xvt, 0) == -1) {
                        _v = 0;
                        PyErr_Clear();
                    } else {
                        _v = (ptr != 0);
                    }
                }
                if (_v) {
                    {
                        void *ptr = 0;
                        if (SWIG_ConvertPtr(argv[3], &ptr, SWIGTYPE_p_gpstk__DayTime, 0) == -1) {
                            _v = 0;
                            PyErr_Clear();
                        } else {
                            _v = (ptr != 0);
                        }
                    }
                    if (_v) {
                        return _wrap_TropModel_correction__SWIG_2(self,args);
                    }
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'TropModel_correction'");
    return NULL;
}


static PyObject *_wrap_TropModel_dry_zenith_delay(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::TropModel *arg1 = (gpstk::TropModel *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:TropModel_dry_zenith_delay",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__TropModel, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        result = (double)((gpstk::TropModel const *)arg1)->dry_zenith_delay();
    }
    catch(InvalidTropModel &_e) {
        {
            InvalidTropModel * temp = new InvalidTropModel(_e);
            if (SWIGTYPE_p_InvalidTropModel->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_InvalidTropModel->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_InvalidTropModel,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"InvalidTropModel");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_InvalidTropModel,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_TropModel_wet_zenith_delay(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::TropModel *arg1 = (gpstk::TropModel *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:TropModel_wet_zenith_delay",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__TropModel, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        result = (double)((gpstk::TropModel const *)arg1)->wet_zenith_delay();
    }
    catch(InvalidTropModel &_e) {
        {
            InvalidTropModel * temp = new InvalidTropModel(_e);
            if (SWIGTYPE_p_InvalidTropModel->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_InvalidTropModel->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_InvalidTropModel,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"InvalidTropModel");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_InvalidTropModel,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_TropModel_dry_mapping_function(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::TropModel *arg1 = (gpstk::TropModel *) 0 ;
    double arg2 ;
    double result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:TropModel_dry_mapping_function",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__TropModel, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        result = (double)((gpstk::TropModel const *)arg1)->dry_mapping_function(arg2);
    }
    catch(InvalidTropModel &_e) {
        {
            InvalidTropModel * temp = new InvalidTropModel(_e);
            if (SWIGTYPE_p_InvalidTropModel->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_InvalidTropModel->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_InvalidTropModel,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"InvalidTropModel");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_InvalidTropModel,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_TropModel_wet_mapping_function(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::TropModel *arg1 = (gpstk::TropModel *) 0 ;
    double arg2 ;
    double result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:TropModel_wet_mapping_function",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__TropModel, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        result = (double)((gpstk::TropModel const *)arg1)->wet_mapping_function(arg2);
    }
    catch(InvalidTropModel &_e) {
        {
            InvalidTropModel * temp = new InvalidTropModel(_e);
            if (SWIGTYPE_p_InvalidTropModel->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_InvalidTropModel->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_InvalidTropModel,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"InvalidTropModel");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_InvalidTropModel,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_TropModel_setWeather__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::TropModel *arg1 = (gpstk::TropModel *) 0 ;
    double *arg2 = 0 ;
    double *arg3 = 0 ;
    double *arg4 = 0 ;
    double temp2 ;
    double temp3 ;
    double temp4 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:TropModel_setWeather",&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__TropModel, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        temp2 = (double)(SWIG_As_double(obj1));
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = &temp2;
    }
    {
        temp3 = (double)(SWIG_As_double(obj2));
        if (SWIG_arg_fail(3)) SWIG_fail;
        arg3 = &temp3;
    }
    {
        temp4 = (double)(SWIG_As_double(obj3));
        if (SWIG_arg_fail(4)) SWIG_fail;
        arg4 = &temp4;
    }
    try {
        (arg1)->setWeather((double const &)*arg2,(double const &)*arg3,(double const &)*arg4);
    }
    catch(gpstk::InvalidParameter &_e) {
        {
            gpstk::InvalidParameter * temp = new gpstk::InvalidParameter(_e);
            if (SWIGTYPE_p_gpstk__InvalidParameter->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_gpstk__InvalidParameter->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__InvalidParameter,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"gpstk::InvalidParameter");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__InvalidParameter,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_TropModel_setWeather__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::TropModel *arg1 = (gpstk::TropModel *) 0 ;
    gpstk::WxObservation *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:TropModel_setWeather",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__TropModel, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_gpstk__WxObservation, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("gpstk::WxObservation");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        (arg1)->setWeather((gpstk::WxObservation const &)*arg2);
    }
    catch(gpstk::InvalidParameter &_e) {
        {
            gpstk::InvalidParameter * temp = new gpstk::InvalidParameter(_e);
            if (SWIGTYPE_p_gpstk__InvalidParameter->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_gpstk__InvalidParameter->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__InvalidParameter,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"gpstk::InvalidParameter");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__InvalidParameter,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_TropModel_setWeather(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[5];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 4); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_gpstk__TropModel, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_gpstk__WxObservation, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_TropModel_setWeather__SWIG_1(self,args);
            }
        }
    }
    if (argc == 4) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_gpstk__TropModel, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_double(argv[1]);
            if (_v) {
                _v = SWIG_Check_double(argv[2]);
                if (_v) {
                    _v = SWIG_Check_double(argv[3]);
                    if (_v) {
                        return _wrap_TropModel_setWeather__SWIG_0(self,args);
                    }
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'TropModel_setWeather'");
    return NULL;
}


static PyObject * TropModel_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_gpstk__TropModel, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_ZeroTropModel_correction__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::ZeroTropModel *arg1 = (gpstk::ZeroTropModel *) 0 ;
    double arg2 ;
    double result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ZeroTropModel_correction",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__ZeroTropModel, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        result = (double)((gpstk::ZeroTropModel const *)arg1)->correction(arg2);
    }
    catch(InvalidTropModel &_e) {
        {
            InvalidTropModel * temp = new InvalidTropModel(_e);
            if (SWIGTYPE_p_InvalidTropModel->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_InvalidTropModel->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_InvalidTropModel,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"InvalidTropModel");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_InvalidTropModel,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ZeroTropModel_correction__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::ZeroTropModel *arg1 = (gpstk::ZeroTropModel *) 0 ;
    Position *arg2 = 0 ;
    Position *arg3 = 0 ;
    DayTime *arg4 = 0 ;
    double result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:ZeroTropModel_correction",&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__ZeroTropModel, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_gpstk__Position, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("Position");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_gpstk__Position, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (arg3 == NULL) {
            SWIG_null_ref("Position");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj3, (void **)&arg4, SWIGTYPE_p_gpstk__DayTime, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(4)) SWIG_fail;
        if (arg4 == NULL) {
            SWIG_null_ref("DayTime");
        }
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    try {
        result = (double)(arg1)->correction((Position const &)*arg2,(Position const &)*arg3,(DayTime const &)*arg4);
    }
    catch(InvalidTropModel &_e) {
        {
            InvalidTropModel * temp = new InvalidTropModel(_e);
            if (SWIGTYPE_p_InvalidTropModel->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_InvalidTropModel->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_InvalidTropModel,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"InvalidTropModel");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_InvalidTropModel,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ZeroTropModel_correction__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::ZeroTropModel *arg1 = (gpstk::ZeroTropModel *) 0 ;
    Xvt *arg2 = 0 ;
    Xvt *arg3 = 0 ;
    DayTime *arg4 = 0 ;
    double result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:ZeroTropModel_correction",&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__ZeroTropModel, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_gpstk__Xvt, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("Xvt");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_gpstk__Xvt, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (arg3 == NULL) {
            SWIG_null_ref("Xvt");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj3, (void **)&arg4, SWIGTYPE_p_gpstk__DayTime, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(4)) SWIG_fail;
        if (arg4 == NULL) {
            SWIG_null_ref("DayTime");
        }
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    try {
        result = (double)(arg1)->correction((Xvt const &)*arg2,(Xvt const &)*arg3,(DayTime const &)*arg4);
    }
    catch(InvalidTropModel &_e) {
        {
            InvalidTropModel * temp = new InvalidTropModel(_e);
            if (SWIGTYPE_p_InvalidTropModel->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_InvalidTropModel->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_InvalidTropModel,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"InvalidTropModel");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_InvalidTropModel,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ZeroTropModel_correction(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[5];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 4); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_gpstk__ZeroTropModel, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_double(argv[1]);
            if (_v) {
                return _wrap_ZeroTropModel_correction__SWIG_0(self,args);
            }
        }
    }
    if (argc == 4) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_gpstk__ZeroTropModel, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_gpstk__Position, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                {
                    void *ptr = 0;
                    if (SWIG_ConvertPtr(argv[2], &ptr, SWIGTYPE_p_gpstk__Position, 0) == -1) {
                        _v = 0;
                        PyErr_Clear();
                    } else {
                        _v = (ptr != 0);
                    }
                }
                if (_v) {
                    {
                        void *ptr = 0;
                        if (SWIG_ConvertPtr(argv[3], &ptr, SWIGTYPE_p_gpstk__DayTime, 0) == -1) {
                            _v = 0;
                            PyErr_Clear();
                        } else {
                            _v = (ptr != 0);
                        }
                    }
                    if (_v) {
                        return _wrap_ZeroTropModel_correction__SWIG_1(self,args);
                    }
                }
            }
        }
    }
    if (argc == 4) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_gpstk__ZeroTropModel, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_gpstk__Xvt, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                {
                    void *ptr = 0;
                    if (SWIG_ConvertPtr(argv[2], &ptr, SWIGTYPE_p_gpstk__Xvt, 0) == -1) {
                        _v = 0;
                        PyErr_Clear();
                    } else {
                        _v = (ptr != 0);
                    }
                }
                if (_v) {
                    {
                        void *ptr = 0;
                        if (SWIG_ConvertPtr(argv[3], &ptr, SWIGTYPE_p_gpstk__DayTime, 0) == -1) {
                            _v = 0;
                            PyErr_Clear();
                        } else {
                            _v = (ptr != 0);
                        }
                    }
                    if (_v) {
                        return _wrap_ZeroTropModel_correction__SWIG_2(self,args);
                    }
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'ZeroTropModel_correction'");
    return NULL;
}


static PyObject *_wrap_ZeroTropModel_dry_zenith_delay(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::ZeroTropModel *arg1 = (gpstk::ZeroTropModel *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ZeroTropModel_dry_zenith_delay",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__ZeroTropModel, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        result = (double)((gpstk::ZeroTropModel const *)arg1)->dry_zenith_delay();
    }
    catch(InvalidTropModel &_e) {
        {
            InvalidTropModel * temp = new InvalidTropModel(_e);
            if (SWIGTYPE_p_InvalidTropModel->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_InvalidTropModel->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_InvalidTropModel,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"InvalidTropModel");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_InvalidTropModel,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ZeroTropModel_wet_zenith_delay(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::ZeroTropModel *arg1 = (gpstk::ZeroTropModel *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ZeroTropModel_wet_zenith_delay",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__ZeroTropModel, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        result = (double)((gpstk::ZeroTropModel const *)arg1)->wet_zenith_delay();
    }
    catch(InvalidTropModel &_e) {
        {
            InvalidTropModel * temp = new InvalidTropModel(_e);
            if (SWIGTYPE_p_InvalidTropModel->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_InvalidTropModel->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_InvalidTropModel,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"InvalidTropModel");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_InvalidTropModel,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ZeroTropModel_dry_mapping_function(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::ZeroTropModel *arg1 = (gpstk::ZeroTropModel *) 0 ;
    double arg2 ;
    double result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ZeroTropModel_dry_mapping_function",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__ZeroTropModel, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        result = (double)((gpstk::ZeroTropModel const *)arg1)->dry_mapping_function(arg2);
    }
    catch(InvalidTropModel &_e) {
        {
            InvalidTropModel * temp = new InvalidTropModel(_e);
            if (SWIGTYPE_p_InvalidTropModel->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_InvalidTropModel->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_InvalidTropModel,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"InvalidTropModel");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_InvalidTropModel,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ZeroTropModel_wet_mapping_function(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::ZeroTropModel *arg1 = (gpstk::ZeroTropModel *) 0 ;
    double arg2 ;
    double result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ZeroTropModel_wet_mapping_function",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__ZeroTropModel, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        result = (double)((gpstk::ZeroTropModel const *)arg1)->wet_mapping_function(arg2);
    }
    catch(InvalidTropModel &_e) {
        {
            InvalidTropModel * temp = new InvalidTropModel(_e);
            if (SWIGTYPE_p_InvalidTropModel->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_InvalidTropModel->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_InvalidTropModel,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"InvalidTropModel");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_InvalidTropModel,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_ZeroTropModel(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::ZeroTropModel *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_ZeroTropModel")) goto fail;
    result = (gpstk::ZeroTropModel *)new gpstk::ZeroTropModel();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__ZeroTropModel, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_ZeroTropModel(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::ZeroTropModel *arg1 = (gpstk::ZeroTropModel *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_ZeroTropModel",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__ZeroTropModel, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * ZeroTropModel_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_gpstk__ZeroTropModel, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_SimpleTropModel__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::SimpleTropModel *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_SimpleTropModel")) goto fail;
    result = (gpstk::SimpleTropModel *)new gpstk::SimpleTropModel();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__SimpleTropModel, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_SimpleTropModel__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::WxObservation *arg1 = 0 ;
    gpstk::SimpleTropModel *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_SimpleTropModel",&obj0)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__WxObservation, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("gpstk::WxObservation");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    try {
        result = (gpstk::SimpleTropModel *)new gpstk::SimpleTropModel((gpstk::WxObservation const &)*arg1);
    }
    catch(gpstk::InvalidParameter &_e) {
        {
            gpstk::InvalidParameter * temp = new gpstk::InvalidParameter(_e);
            if (SWIGTYPE_p_gpstk__InvalidParameter->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_gpstk__InvalidParameter->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__InvalidParameter,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"gpstk::InvalidParameter");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__InvalidParameter,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__SimpleTropModel, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_SimpleTropModel__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    double *arg1 = 0 ;
    double *arg2 = 0 ;
    double *arg3 = 0 ;
    gpstk::SimpleTropModel *result;
    double temp1 ;
    double temp2 ;
    double temp3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:new_SimpleTropModel",&obj0,&obj1,&obj2)) goto fail;
    {
        temp1 = (double)(SWIG_As_double(obj0));
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = &temp1;
    }
    {
        temp2 = (double)(SWIG_As_double(obj1));
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = &temp2;
    }
    {
        temp3 = (double)(SWIG_As_double(obj2));
        if (SWIG_arg_fail(3)) SWIG_fail;
        arg3 = &temp3;
    }
    try {
        result = (gpstk::SimpleTropModel *)new gpstk::SimpleTropModel((double const &)*arg1,(double const &)*arg2,(double const &)*arg3);
    }
    catch(gpstk::InvalidParameter &_e) {
        {
            gpstk::InvalidParameter * temp = new gpstk::InvalidParameter(_e);
            if (SWIGTYPE_p_gpstk__InvalidParameter->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_gpstk__InvalidParameter->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__InvalidParameter,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"gpstk::InvalidParameter");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__InvalidParameter,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__SimpleTropModel, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_SimpleTropModel(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[4];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_new_SimpleTropModel__SWIG_0(self,args);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_gpstk__WxObservation, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            return _wrap_new_SimpleTropModel__SWIG_1(self,args);
        }
    }
    if (argc == 3) {
        int _v;
        _v = SWIG_Check_double(argv[0]);
        if (_v) {
            _v = SWIG_Check_double(argv[1]);
            if (_v) {
                _v = SWIG_Check_double(argv[2]);
                if (_v) {
                    return _wrap_new_SimpleTropModel__SWIG_2(self,args);
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'new_SimpleTropModel'");
    return NULL;
}


static PyObject *_wrap_SimpleTropModel_dry_zenith_delay(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::SimpleTropModel *arg1 = (gpstk::SimpleTropModel *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:SimpleTropModel_dry_zenith_delay",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__SimpleTropModel, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        result = (double)((gpstk::SimpleTropModel const *)arg1)->dry_zenith_delay();
    }
    catch(InvalidTropModel &_e) {
        {
            InvalidTropModel * temp = new InvalidTropModel(_e);
            if (SWIGTYPE_p_InvalidTropModel->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_InvalidTropModel->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_InvalidTropModel,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"InvalidTropModel");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_InvalidTropModel,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SimpleTropModel_wet_zenith_delay(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::SimpleTropModel *arg1 = (gpstk::SimpleTropModel *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:SimpleTropModel_wet_zenith_delay",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__SimpleTropModel, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        result = (double)((gpstk::SimpleTropModel const *)arg1)->wet_zenith_delay();
    }
    catch(InvalidTropModel &_e) {
        {
            InvalidTropModel * temp = new InvalidTropModel(_e);
            if (SWIGTYPE_p_InvalidTropModel->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_InvalidTropModel->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_InvalidTropModel,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"InvalidTropModel");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_InvalidTropModel,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SimpleTropModel_dry_mapping_function(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::SimpleTropModel *arg1 = (gpstk::SimpleTropModel *) 0 ;
    double arg2 ;
    double result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:SimpleTropModel_dry_mapping_function",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__SimpleTropModel, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        result = (double)((gpstk::SimpleTropModel const *)arg1)->dry_mapping_function(arg2);
    }
    catch(InvalidTropModel &_e) {
        {
            InvalidTropModel * temp = new InvalidTropModel(_e);
            if (SWIGTYPE_p_InvalidTropModel->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_InvalidTropModel->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_InvalidTropModel,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"InvalidTropModel");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_InvalidTropModel,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SimpleTropModel_wet_mapping_function(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::SimpleTropModel *arg1 = (gpstk::SimpleTropModel *) 0 ;
    double arg2 ;
    double result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:SimpleTropModel_wet_mapping_function",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__SimpleTropModel, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        result = (double)((gpstk::SimpleTropModel const *)arg1)->wet_mapping_function(arg2);
    }
    catch(InvalidTropModel &_e) {
        {
            InvalidTropModel * temp = new InvalidTropModel(_e);
            if (SWIGTYPE_p_InvalidTropModel->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_InvalidTropModel->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_InvalidTropModel,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"InvalidTropModel");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_InvalidTropModel,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SimpleTropModel_setWeather__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::SimpleTropModel *arg1 = (gpstk::SimpleTropModel *) 0 ;
    double *arg2 = 0 ;
    double *arg3 = 0 ;
    double *arg4 = 0 ;
    double temp2 ;
    double temp3 ;
    double temp4 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:SimpleTropModel_setWeather",&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__SimpleTropModel, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        temp2 = (double)(SWIG_As_double(obj1));
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = &temp2;
    }
    {
        temp3 = (double)(SWIG_As_double(obj2));
        if (SWIG_arg_fail(3)) SWIG_fail;
        arg3 = &temp3;
    }
    {
        temp4 = (double)(SWIG_As_double(obj3));
        if (SWIG_arg_fail(4)) SWIG_fail;
        arg4 = &temp4;
    }
    try {
        (arg1)->setWeather((double const &)*arg2,(double const &)*arg3,(double const &)*arg4);
    }
    catch(gpstk::InvalidParameter &_e) {
        {
            gpstk::InvalidParameter * temp = new gpstk::InvalidParameter(_e);
            if (SWIGTYPE_p_gpstk__InvalidParameter->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_gpstk__InvalidParameter->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__InvalidParameter,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"gpstk::InvalidParameter");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__InvalidParameter,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SimpleTropModel_setWeather__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::SimpleTropModel *arg1 = (gpstk::SimpleTropModel *) 0 ;
    gpstk::WxObservation *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:SimpleTropModel_setWeather",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__SimpleTropModel, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_gpstk__WxObservation, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("gpstk::WxObservation");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        (arg1)->setWeather((gpstk::WxObservation const &)*arg2);
    }
    catch(gpstk::InvalidParameter &_e) {
        {
            gpstk::InvalidParameter * temp = new gpstk::InvalidParameter(_e);
            if (SWIGTYPE_p_gpstk__InvalidParameter->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_gpstk__InvalidParameter->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__InvalidParameter,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"gpstk::InvalidParameter");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__InvalidParameter,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SimpleTropModel_setWeather(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[5];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 4); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_gpstk__SimpleTropModel, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_gpstk__WxObservation, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_SimpleTropModel_setWeather__SWIG_1(self,args);
            }
        }
    }
    if (argc == 4) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_gpstk__SimpleTropModel, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_double(argv[1]);
            if (_v) {
                _v = SWIG_Check_double(argv[2]);
                if (_v) {
                    _v = SWIG_Check_double(argv[3]);
                    if (_v) {
                        return _wrap_SimpleTropModel_setWeather__SWIG_0(self,args);
                    }
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'SimpleTropModel_setWeather'");
    return NULL;
}


static PyObject *_wrap_delete_SimpleTropModel(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::SimpleTropModel *arg1 = (gpstk::SimpleTropModel *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_SimpleTropModel",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__SimpleTropModel, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * SimpleTropModel_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_gpstk__SimpleTropModel, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_GGTropModel__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::GGTropModel *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_GGTropModel")) goto fail;
    result = (gpstk::GGTropModel *)new gpstk::GGTropModel();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__GGTropModel, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_GGTropModel__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::WxObservation *arg1 = 0 ;
    gpstk::GGTropModel *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_GGTropModel",&obj0)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__WxObservation, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("gpstk::WxObservation");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    try {
        result = (gpstk::GGTropModel *)new gpstk::GGTropModel((gpstk::WxObservation const &)*arg1);
    }
    catch(gpstk::InvalidParameter &_e) {
        {
            gpstk::InvalidParameter * temp = new gpstk::InvalidParameter(_e);
            if (SWIGTYPE_p_gpstk__InvalidParameter->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_gpstk__InvalidParameter->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__InvalidParameter,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"gpstk::InvalidParameter");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__InvalidParameter,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__GGTropModel, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_GGTropModel__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    double *arg1 = 0 ;
    double *arg2 = 0 ;
    double *arg3 = 0 ;
    gpstk::GGTropModel *result;
    double temp1 ;
    double temp2 ;
    double temp3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:new_GGTropModel",&obj0,&obj1,&obj2)) goto fail;
    {
        temp1 = (double)(SWIG_As_double(obj0));
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = &temp1;
    }
    {
        temp2 = (double)(SWIG_As_double(obj1));
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = &temp2;
    }
    {
        temp3 = (double)(SWIG_As_double(obj2));
        if (SWIG_arg_fail(3)) SWIG_fail;
        arg3 = &temp3;
    }
    try {
        result = (gpstk::GGTropModel *)new gpstk::GGTropModel((double const &)*arg1,(double const &)*arg2,(double const &)*arg3);
    }
    catch(gpstk::InvalidParameter &_e) {
        {
            gpstk::InvalidParameter * temp = new gpstk::InvalidParameter(_e);
            if (SWIGTYPE_p_gpstk__InvalidParameter->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_gpstk__InvalidParameter->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__InvalidParameter,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"gpstk::InvalidParameter");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__InvalidParameter,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__GGTropModel, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_GGTropModel(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[4];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_new_GGTropModel__SWIG_0(self,args);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_gpstk__WxObservation, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            return _wrap_new_GGTropModel__SWIG_1(self,args);
        }
    }
    if (argc == 3) {
        int _v;
        _v = SWIG_Check_double(argv[0]);
        if (_v) {
            _v = SWIG_Check_double(argv[1]);
            if (_v) {
                _v = SWIG_Check_double(argv[2]);
                if (_v) {
                    return _wrap_new_GGTropModel__SWIG_2(self,args);
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'new_GGTropModel'");
    return NULL;
}


static PyObject *_wrap_GGTropModel_dry_zenith_delay(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::GGTropModel *arg1 = (gpstk::GGTropModel *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:GGTropModel_dry_zenith_delay",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__GGTropModel, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        result = (double)((gpstk::GGTropModel const *)arg1)->dry_zenith_delay();
    }
    catch(InvalidTropModel &_e) {
        {
            InvalidTropModel * temp = new InvalidTropModel(_e);
            if (SWIGTYPE_p_InvalidTropModel->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_InvalidTropModel->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_InvalidTropModel,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"InvalidTropModel");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_InvalidTropModel,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_GGTropModel_wet_zenith_delay(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::GGTropModel *arg1 = (gpstk::GGTropModel *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:GGTropModel_wet_zenith_delay",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__GGTropModel, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        result = (double)((gpstk::GGTropModel const *)arg1)->wet_zenith_delay();
    }
    catch(InvalidTropModel &_e) {
        {
            InvalidTropModel * temp = new InvalidTropModel(_e);
            if (SWIGTYPE_p_InvalidTropModel->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_InvalidTropModel->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_InvalidTropModel,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"InvalidTropModel");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_InvalidTropModel,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_GGTropModel_dry_mapping_function(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::GGTropModel *arg1 = (gpstk::GGTropModel *) 0 ;
    double arg2 ;
    double result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:GGTropModel_dry_mapping_function",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__GGTropModel, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        result = (double)((gpstk::GGTropModel const *)arg1)->dry_mapping_function(arg2);
    }
    catch(InvalidTropModel &_e) {
        {
            InvalidTropModel * temp = new InvalidTropModel(_e);
            if (SWIGTYPE_p_InvalidTropModel->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_InvalidTropModel->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_InvalidTropModel,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"InvalidTropModel");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_InvalidTropModel,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_GGTropModel_wet_mapping_function(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::GGTropModel *arg1 = (gpstk::GGTropModel *) 0 ;
    double arg2 ;
    double result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:GGTropModel_wet_mapping_function",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__GGTropModel, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        result = (double)((gpstk::GGTropModel const *)arg1)->wet_mapping_function(arg2);
    }
    catch(InvalidTropModel &_e) {
        {
            InvalidTropModel * temp = new InvalidTropModel(_e);
            if (SWIGTYPE_p_InvalidTropModel->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_InvalidTropModel->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_InvalidTropModel,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"InvalidTropModel");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_InvalidTropModel,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_GGTropModel_setWeather__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::GGTropModel *arg1 = (gpstk::GGTropModel *) 0 ;
    double *arg2 = 0 ;
    double *arg3 = 0 ;
    double *arg4 = 0 ;
    double temp2 ;
    double temp3 ;
    double temp4 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:GGTropModel_setWeather",&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__GGTropModel, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        temp2 = (double)(SWIG_As_double(obj1));
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = &temp2;
    }
    {
        temp3 = (double)(SWIG_As_double(obj2));
        if (SWIG_arg_fail(3)) SWIG_fail;
        arg3 = &temp3;
    }
    {
        temp4 = (double)(SWIG_As_double(obj3));
        if (SWIG_arg_fail(4)) SWIG_fail;
        arg4 = &temp4;
    }
    try {
        (arg1)->setWeather((double const &)*arg2,(double const &)*arg3,(double const &)*arg4);
    }
    catch(gpstk::InvalidParameter &_e) {
        {
            gpstk::InvalidParameter * temp = new gpstk::InvalidParameter(_e);
            if (SWIGTYPE_p_gpstk__InvalidParameter->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_gpstk__InvalidParameter->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__InvalidParameter,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"gpstk::InvalidParameter");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__InvalidParameter,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_GGTropModel_setWeather__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::GGTropModel *arg1 = (gpstk::GGTropModel *) 0 ;
    gpstk::WxObservation *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:GGTropModel_setWeather",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__GGTropModel, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_gpstk__WxObservation, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("gpstk::WxObservation");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        (arg1)->setWeather((gpstk::WxObservation const &)*arg2);
    }
    catch(gpstk::InvalidParameter &_e) {
        {
            gpstk::InvalidParameter * temp = new gpstk::InvalidParameter(_e);
            if (SWIGTYPE_p_gpstk__InvalidParameter->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_gpstk__InvalidParameter->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__InvalidParameter,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"gpstk::InvalidParameter");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__InvalidParameter,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_GGTropModel_setWeather(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[5];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 4); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_gpstk__GGTropModel, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_gpstk__WxObservation, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_GGTropModel_setWeather__SWIG_1(self,args);
            }
        }
    }
    if (argc == 4) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_gpstk__GGTropModel, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_double(argv[1]);
            if (_v) {
                _v = SWIG_Check_double(argv[2]);
                if (_v) {
                    _v = SWIG_Check_double(argv[3]);
                    if (_v) {
                        return _wrap_GGTropModel_setWeather__SWIG_0(self,args);
                    }
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'GGTropModel_setWeather'");
    return NULL;
}


static PyObject *_wrap_delete_GGTropModel(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::GGTropModel *arg1 = (gpstk::GGTropModel *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_GGTropModel",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__GGTropModel, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * GGTropModel_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_gpstk__GGTropModel, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_GGHeightTropModel__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::GGHeightTropModel *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_GGHeightTropModel")) goto fail;
    result = (gpstk::GGHeightTropModel *)new gpstk::GGHeightTropModel();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__GGHeightTropModel, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_GGHeightTropModel__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::WxObservation *arg1 = 0 ;
    gpstk::GGHeightTropModel *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_GGHeightTropModel",&obj0)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__WxObservation, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("gpstk::WxObservation");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    try {
        result = (gpstk::GGHeightTropModel *)new gpstk::GGHeightTropModel((gpstk::WxObservation const &)*arg1);
    }
    catch(gpstk::InvalidParameter &_e) {
        {
            gpstk::InvalidParameter * temp = new gpstk::InvalidParameter(_e);
            if (SWIGTYPE_p_gpstk__InvalidParameter->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_gpstk__InvalidParameter->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__InvalidParameter,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"gpstk::InvalidParameter");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__InvalidParameter,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__GGHeightTropModel, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_GGHeightTropModel__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    double *arg1 = 0 ;
    double *arg2 = 0 ;
    double *arg3 = 0 ;
    gpstk::GGHeightTropModel *result;
    double temp1 ;
    double temp2 ;
    double temp3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:new_GGHeightTropModel",&obj0,&obj1,&obj2)) goto fail;
    {
        temp1 = (double)(SWIG_As_double(obj0));
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = &temp1;
    }
    {
        temp2 = (double)(SWIG_As_double(obj1));
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = &temp2;
    }
    {
        temp3 = (double)(SWIG_As_double(obj2));
        if (SWIG_arg_fail(3)) SWIG_fail;
        arg3 = &temp3;
    }
    try {
        result = (gpstk::GGHeightTropModel *)new gpstk::GGHeightTropModel((double const &)*arg1,(double const &)*arg2,(double const &)*arg3);
    }
    catch(gpstk::InvalidParameter &_e) {
        {
            gpstk::InvalidParameter * temp = new gpstk::InvalidParameter(_e);
            if (SWIGTYPE_p_gpstk__InvalidParameter->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_gpstk__InvalidParameter->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__InvalidParameter,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"gpstk::InvalidParameter");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__InvalidParameter,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__GGHeightTropModel, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_GGHeightTropModel__SWIG_3(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    double *arg1 = 0 ;
    double *arg2 = 0 ;
    double *arg3 = 0 ;
    double arg4 ;
    double arg5 ;
    double arg6 ;
    gpstk::GGHeightTropModel *result;
    double temp1 ;
    double temp2 ;
    double temp3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    PyObject * obj5 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOOO:new_GGHeightTropModel",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) goto fail;
    {
        temp1 = (double)(SWIG_As_double(obj0));
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = &temp1;
    }
    {
        temp2 = (double)(SWIG_As_double(obj1));
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = &temp2;
    }
    {
        temp3 = (double)(SWIG_As_double(obj2));
        if (SWIG_arg_fail(3)) SWIG_fail;
        arg3 = &temp3;
    }
    {
        arg4 = (double const)(SWIG_As_double(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    {
        arg5 = (double const)(SWIG_As_double(obj4)); 
        if (SWIG_arg_fail(5)) SWIG_fail;
    }
    {
        arg6 = (double const)(SWIG_As_double(obj5)); 
        if (SWIG_arg_fail(6)) SWIG_fail;
    }
    try {
        result = (gpstk::GGHeightTropModel *)new gpstk::GGHeightTropModel((double const &)*arg1,(double const &)*arg2,(double const &)*arg3,arg4,arg5,arg6);
    }
    catch(gpstk::InvalidParameter &_e) {
        {
            gpstk::InvalidParameter * temp = new gpstk::InvalidParameter(_e);
            if (SWIGTYPE_p_gpstk__InvalidParameter->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_gpstk__InvalidParameter->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__InvalidParameter,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"gpstk::InvalidParameter");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__InvalidParameter,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__GGHeightTropModel, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_GGHeightTropModel(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[7];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 6); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_new_GGHeightTropModel__SWIG_0(self,args);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_gpstk__WxObservation, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            return _wrap_new_GGHeightTropModel__SWIG_1(self,args);
        }
    }
    if (argc == 3) {
        int _v;
        _v = SWIG_Check_double(argv[0]);
        if (_v) {
            _v = SWIG_Check_double(argv[1]);
            if (_v) {
                _v = SWIG_Check_double(argv[2]);
                if (_v) {
                    return _wrap_new_GGHeightTropModel__SWIG_2(self,args);
                }
            }
        }
    }
    if (argc == 6) {
        int _v;
        _v = SWIG_Check_double(argv[0]);
        if (_v) {
            _v = SWIG_Check_double(argv[1]);
            if (_v) {
                _v = SWIG_Check_double(argv[2]);
                if (_v) {
                    _v = SWIG_Check_double(argv[3]);
                    if (_v) {
                        _v = SWIG_Check_double(argv[4]);
                        if (_v) {
                            _v = SWIG_Check_double(argv[5]);
                            if (_v) {
                                return _wrap_new_GGHeightTropModel__SWIG_3(self,args);
                            }
                        }
                    }
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'new_GGHeightTropModel'");
    return NULL;
}


static PyObject *_wrap_GGHeightTropModel_correction__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::GGHeightTropModel *arg1 = (gpstk::GGHeightTropModel *) 0 ;
    double arg2 ;
    double result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:GGHeightTropModel_correction",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__GGHeightTropModel, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        result = (double)((gpstk::GGHeightTropModel const *)arg1)->correction(arg2);
    }
    catch(InvalidTropModel &_e) {
        {
            InvalidTropModel * temp = new InvalidTropModel(_e);
            if (SWIGTYPE_p_InvalidTropModel->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_InvalidTropModel->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_InvalidTropModel,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"InvalidTropModel");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_InvalidTropModel,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_GGHeightTropModel_correction__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::GGHeightTropModel *arg1 = (gpstk::GGHeightTropModel *) 0 ;
    Position *arg2 = 0 ;
    Position *arg3 = 0 ;
    DayTime *arg4 = 0 ;
    double result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:GGHeightTropModel_correction",&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__GGHeightTropModel, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_gpstk__Position, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("Position");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_gpstk__Position, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (arg3 == NULL) {
            SWIG_null_ref("Position");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj3, (void **)&arg4, SWIGTYPE_p_gpstk__DayTime, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(4)) SWIG_fail;
        if (arg4 == NULL) {
            SWIG_null_ref("DayTime");
        }
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    try {
        result = (double)(arg1)->correction((Position const &)*arg2,(Position const &)*arg3,(DayTime const &)*arg4);
    }
    catch(InvalidTropModel &_e) {
        {
            InvalidTropModel * temp = new InvalidTropModel(_e);
            if (SWIGTYPE_p_InvalidTropModel->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_InvalidTropModel->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_InvalidTropModel,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"InvalidTropModel");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_InvalidTropModel,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_GGHeightTropModel_correction__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::GGHeightTropModel *arg1 = (gpstk::GGHeightTropModel *) 0 ;
    Xvt *arg2 = 0 ;
    Xvt *arg3 = 0 ;
    DayTime *arg4 = 0 ;
    double result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:GGHeightTropModel_correction",&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__GGHeightTropModel, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_gpstk__Xvt, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("Xvt");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_gpstk__Xvt, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (arg3 == NULL) {
            SWIG_null_ref("Xvt");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj3, (void **)&arg4, SWIGTYPE_p_gpstk__DayTime, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(4)) SWIG_fail;
        if (arg4 == NULL) {
            SWIG_null_ref("DayTime");
        }
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    try {
        result = (double)(arg1)->correction((Xvt const &)*arg2,(Xvt const &)*arg3,(DayTime const &)*arg4);
    }
    catch(InvalidTropModel &_e) {
        {
            InvalidTropModel * temp = new InvalidTropModel(_e);
            if (SWIGTYPE_p_InvalidTropModel->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_InvalidTropModel->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_InvalidTropModel,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"InvalidTropModel");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_InvalidTropModel,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_GGHeightTropModel_correction(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[5];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 4); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_gpstk__GGHeightTropModel, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_double(argv[1]);
            if (_v) {
                return _wrap_GGHeightTropModel_correction__SWIG_0(self,args);
            }
        }
    }
    if (argc == 4) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_gpstk__GGHeightTropModel, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_gpstk__Position, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                {
                    void *ptr = 0;
                    if (SWIG_ConvertPtr(argv[2], &ptr, SWIGTYPE_p_gpstk__Position, 0) == -1) {
                        _v = 0;
                        PyErr_Clear();
                    } else {
                        _v = (ptr != 0);
                    }
                }
                if (_v) {
                    {
                        void *ptr = 0;
                        if (SWIG_ConvertPtr(argv[3], &ptr, SWIGTYPE_p_gpstk__DayTime, 0) == -1) {
                            _v = 0;
                            PyErr_Clear();
                        } else {
                            _v = (ptr != 0);
                        }
                    }
                    if (_v) {
                        return _wrap_GGHeightTropModel_correction__SWIG_1(self,args);
                    }
                }
            }
        }
    }
    if (argc == 4) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_gpstk__GGHeightTropModel, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_gpstk__Xvt, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                {
                    void *ptr = 0;
                    if (SWIG_ConvertPtr(argv[2], &ptr, SWIGTYPE_p_gpstk__Xvt, 0) == -1) {
                        _v = 0;
                        PyErr_Clear();
                    } else {
                        _v = (ptr != 0);
                    }
                }
                if (_v) {
                    {
                        void *ptr = 0;
                        if (SWIG_ConvertPtr(argv[3], &ptr, SWIGTYPE_p_gpstk__DayTime, 0) == -1) {
                            _v = 0;
                            PyErr_Clear();
                        } else {
                            _v = (ptr != 0);
                        }
                    }
                    if (_v) {
                        return _wrap_GGHeightTropModel_correction__SWIG_2(self,args);
                    }
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'GGHeightTropModel_correction'");
    return NULL;
}


static PyObject *_wrap_GGHeightTropModel_dry_zenith_delay(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::GGHeightTropModel *arg1 = (gpstk::GGHeightTropModel *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:GGHeightTropModel_dry_zenith_delay",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__GGHeightTropModel, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        result = (double)((gpstk::GGHeightTropModel const *)arg1)->dry_zenith_delay();
    }
    catch(InvalidTropModel &_e) {
        {
            InvalidTropModel * temp = new InvalidTropModel(_e);
            if (SWIGTYPE_p_InvalidTropModel->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_InvalidTropModel->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_InvalidTropModel,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"InvalidTropModel");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_InvalidTropModel,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_GGHeightTropModel_wet_zenith_delay(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::GGHeightTropModel *arg1 = (gpstk::GGHeightTropModel *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:GGHeightTropModel_wet_zenith_delay",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__GGHeightTropModel, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        result = (double)((gpstk::GGHeightTropModel const *)arg1)->wet_zenith_delay();
    }
    catch(InvalidTropModel &_e) {
        {
            InvalidTropModel * temp = new InvalidTropModel(_e);
            if (SWIGTYPE_p_InvalidTropModel->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_InvalidTropModel->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_InvalidTropModel,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"InvalidTropModel");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_InvalidTropModel,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_GGHeightTropModel_dry_mapping_function(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::GGHeightTropModel *arg1 = (gpstk::GGHeightTropModel *) 0 ;
    double arg2 ;
    double result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:GGHeightTropModel_dry_mapping_function",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__GGHeightTropModel, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        result = (double)((gpstk::GGHeightTropModel const *)arg1)->dry_mapping_function(arg2);
    }
    catch(InvalidTropModel &_e) {
        {
            InvalidTropModel * temp = new InvalidTropModel(_e);
            if (SWIGTYPE_p_InvalidTropModel->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_InvalidTropModel->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_InvalidTropModel,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"InvalidTropModel");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_InvalidTropModel,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_GGHeightTropModel_wet_mapping_function(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::GGHeightTropModel *arg1 = (gpstk::GGHeightTropModel *) 0 ;
    double arg2 ;
    double result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:GGHeightTropModel_wet_mapping_function",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__GGHeightTropModel, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        result = (double)((gpstk::GGHeightTropModel const *)arg1)->wet_mapping_function(arg2);
    }
    catch(InvalidTropModel &_e) {
        {
            InvalidTropModel * temp = new InvalidTropModel(_e);
            if (SWIGTYPE_p_InvalidTropModel->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_InvalidTropModel->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_InvalidTropModel,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"InvalidTropModel");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_InvalidTropModel,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_GGHeightTropModel_setWeather__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::GGHeightTropModel *arg1 = (gpstk::GGHeightTropModel *) 0 ;
    double *arg2 = 0 ;
    double *arg3 = 0 ;
    double *arg4 = 0 ;
    double temp2 ;
    double temp3 ;
    double temp4 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:GGHeightTropModel_setWeather",&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__GGHeightTropModel, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        temp2 = (double)(SWIG_As_double(obj1));
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = &temp2;
    }
    {
        temp3 = (double)(SWIG_As_double(obj2));
        if (SWIG_arg_fail(3)) SWIG_fail;
        arg3 = &temp3;
    }
    {
        temp4 = (double)(SWIG_As_double(obj3));
        if (SWIG_arg_fail(4)) SWIG_fail;
        arg4 = &temp4;
    }
    try {
        (arg1)->setWeather((double const &)*arg2,(double const &)*arg3,(double const &)*arg4);
    }
    catch(gpstk::InvalidParameter &_e) {
        {
            gpstk::InvalidParameter * temp = new gpstk::InvalidParameter(_e);
            if (SWIGTYPE_p_gpstk__InvalidParameter->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_gpstk__InvalidParameter->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__InvalidParameter,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"gpstk::InvalidParameter");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__InvalidParameter,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_GGHeightTropModel_setWeather__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::GGHeightTropModel *arg1 = (gpstk::GGHeightTropModel *) 0 ;
    gpstk::WxObservation *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:GGHeightTropModel_setWeather",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__GGHeightTropModel, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_gpstk__WxObservation, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("gpstk::WxObservation");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        (arg1)->setWeather((gpstk::WxObservation const &)*arg2);
    }
    catch(gpstk::InvalidParameter &_e) {
        {
            gpstk::InvalidParameter * temp = new gpstk::InvalidParameter(_e);
            if (SWIGTYPE_p_gpstk__InvalidParameter->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_gpstk__InvalidParameter->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__InvalidParameter,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"gpstk::InvalidParameter");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__InvalidParameter,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_GGHeightTropModel_setWeather(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[5];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 4); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_gpstk__GGHeightTropModel, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_gpstk__WxObservation, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_GGHeightTropModel_setWeather__SWIG_1(self,args);
            }
        }
    }
    if (argc == 4) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_gpstk__GGHeightTropModel, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_double(argv[1]);
            if (_v) {
                _v = SWIG_Check_double(argv[2]);
                if (_v) {
                    _v = SWIG_Check_double(argv[3]);
                    if (_v) {
                        return _wrap_GGHeightTropModel_setWeather__SWIG_0(self,args);
                    }
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'GGHeightTropModel_setWeather'");
    return NULL;
}


static PyObject *_wrap_GGHeightTropModel_setHeights(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::GGHeightTropModel *arg1 = (gpstk::GGHeightTropModel *) 0 ;
    double *arg2 = 0 ;
    double *arg3 = 0 ;
    double *arg4 = 0 ;
    double temp2 ;
    double temp3 ;
    double temp4 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:GGHeightTropModel_setHeights",&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__GGHeightTropModel, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        temp2 = (double)(SWIG_As_double(obj1));
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = &temp2;
    }
    {
        temp3 = (double)(SWIG_As_double(obj2));
        if (SWIG_arg_fail(3)) SWIG_fail;
        arg3 = &temp3;
    }
    {
        temp4 = (double)(SWIG_As_double(obj3));
        if (SWIG_arg_fail(4)) SWIG_fail;
        arg4 = &temp4;
    }
    (arg1)->setHeights((double const &)*arg2,(double const &)*arg3,(double const &)*arg4);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_GGHeightTropModel_setReceiverHeight(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::GGHeightTropModel *arg1 = (gpstk::GGHeightTropModel *) 0 ;
    double *arg2 = 0 ;
    double temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:GGHeightTropModel_setReceiverHeight",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__GGHeightTropModel, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        temp2 = (double)(SWIG_As_double(obj1));
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = &temp2;
    }
    (arg1)->setReceiverHeight((double const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_GGHeightTropModel(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::GGHeightTropModel *arg1 = (gpstk::GGHeightTropModel *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_GGHeightTropModel",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__GGHeightTropModel, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * GGHeightTropModel_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_gpstk__GGHeightTropModel, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_NBTropModel__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::NBTropModel *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_NBTropModel")) goto fail;
    result = (gpstk::NBTropModel *)new gpstk::NBTropModel();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__NBTropModel, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_NBTropModel__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    double *arg1 = 0 ;
    int *arg2 = 0 ;
    gpstk::NBTropModel *result;
    double temp1 ;
    int temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:new_NBTropModel",&obj0,&obj1)) goto fail;
    {
        temp1 = (double)(SWIG_As_double(obj0));
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = &temp1;
    }
    {
        temp2 = (int)(SWIG_As_int(obj1));
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = &temp2;
    }
    result = (gpstk::NBTropModel *)new gpstk::NBTropModel((double const &)*arg1,(int const &)*arg2);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__NBTropModel, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_NBTropModel__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    double *arg1 = 0 ;
    int *arg2 = 0 ;
    gpstk::WxObservation *arg3 = 0 ;
    gpstk::NBTropModel *result;
    double temp1 ;
    int temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:new_NBTropModel",&obj0,&obj1,&obj2)) goto fail;
    {
        temp1 = (double)(SWIG_As_double(obj0));
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = &temp1;
    }
    {
        temp2 = (int)(SWIG_As_int(obj1));
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = &temp2;
    }
    {
        SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_gpstk__WxObservation, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (arg3 == NULL) {
            SWIG_null_ref("gpstk::WxObservation");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    try {
        result = (gpstk::NBTropModel *)new gpstk::NBTropModel((double const &)*arg1,(int const &)*arg2,(gpstk::WxObservation const &)*arg3);
    }
    catch(gpstk::InvalidParameter &_e) {
        {
            gpstk::InvalidParameter * temp = new gpstk::InvalidParameter(_e);
            if (SWIGTYPE_p_gpstk__InvalidParameter->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_gpstk__InvalidParameter->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__InvalidParameter,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"gpstk::InvalidParameter");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__InvalidParameter,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__NBTropModel, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_NBTropModel__SWIG_3(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    double *arg1 = 0 ;
    int *arg2 = 0 ;
    double *arg3 = 0 ;
    double *arg4 = 0 ;
    double *arg5 = 0 ;
    gpstk::NBTropModel *result;
    double temp1 ;
    int temp2 ;
    double temp3 ;
    double temp4 ;
    double temp5 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOO:new_NBTropModel",&obj0,&obj1,&obj2,&obj3,&obj4)) goto fail;
    {
        temp1 = (double)(SWIG_As_double(obj0));
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = &temp1;
    }
    {
        temp2 = (int)(SWIG_As_int(obj1));
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = &temp2;
    }
    {
        temp3 = (double)(SWIG_As_double(obj2));
        if (SWIG_arg_fail(3)) SWIG_fail;
        arg3 = &temp3;
    }
    {
        temp4 = (double)(SWIG_As_double(obj3));
        if (SWIG_arg_fail(4)) SWIG_fail;
        arg4 = &temp4;
    }
    {
        temp5 = (double)(SWIG_As_double(obj4));
        if (SWIG_arg_fail(5)) SWIG_fail;
        arg5 = &temp5;
    }
    try {
        result = (gpstk::NBTropModel *)new gpstk::NBTropModel((double const &)*arg1,(int const &)*arg2,(double const &)*arg3,(double const &)*arg4,(double const &)*arg5);
    }
    catch(gpstk::InvalidParameter &_e) {
        {
            gpstk::InvalidParameter * temp = new gpstk::InvalidParameter(_e);
            if (SWIGTYPE_p_gpstk__InvalidParameter->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_gpstk__InvalidParameter->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__InvalidParameter,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"gpstk::InvalidParameter");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__InvalidParameter,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__NBTropModel, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_NBTropModel__SWIG_4(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    double *arg1 = 0 ;
    double *arg2 = 0 ;
    int *arg3 = 0 ;
    gpstk::NBTropModel *result;
    double temp1 ;
    double temp2 ;
    int temp3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:new_NBTropModel",&obj0,&obj1,&obj2)) goto fail;
    {
        temp1 = (double)(SWIG_As_double(obj0));
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = &temp1;
    }
    {
        temp2 = (double)(SWIG_As_double(obj1));
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = &temp2;
    }
    {
        temp3 = (int)(SWIG_As_int(obj2));
        if (SWIG_arg_fail(3)) SWIG_fail;
        arg3 = &temp3;
    }
    result = (gpstk::NBTropModel *)new gpstk::NBTropModel((double const &)*arg1,(double const &)*arg2,(int const &)*arg3);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__NBTropModel, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_NBTropModel(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[6];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 5); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_new_NBTropModel__SWIG_0(self,args);
    }
    if (argc == 2) {
        int _v;
        _v = SWIG_Check_double(argv[0]);
        if (_v) {
            _v = SWIG_Check_int(argv[1]);
            if (_v) {
                return _wrap_new_NBTropModel__SWIG_1(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        _v = SWIG_Check_double(argv[0]);
        if (_v) {
            _v = SWIG_Check_int(argv[1]);
            if (_v) {
                {
                    void *ptr = 0;
                    if (SWIG_ConvertPtr(argv[2], &ptr, SWIGTYPE_p_gpstk__WxObservation, 0) == -1) {
                        _v = 0;
                        PyErr_Clear();
                    } else {
                        _v = (ptr != 0);
                    }
                }
                if (_v) {
                    return _wrap_new_NBTropModel__SWIG_2(self,args);
                }
            }
        }
    }
    if (argc == 3) {
        int _v;
        _v = SWIG_Check_double(argv[0]);
        if (_v) {
            _v = SWIG_Check_double(argv[1]);
            if (_v) {
                _v = SWIG_Check_int(argv[2]);
                if (_v) {
                    return _wrap_new_NBTropModel__SWIG_4(self,args);
                }
            }
        }
    }
    if (argc == 5) {
        int _v;
        _v = SWIG_Check_double(argv[0]);
        if (_v) {
            _v = SWIG_Check_int(argv[1]);
            if (_v) {
                _v = SWIG_Check_double(argv[2]);
                if (_v) {
                    _v = SWIG_Check_double(argv[3]);
                    if (_v) {
                        _v = SWIG_Check_double(argv[4]);
                        if (_v) {
                            return _wrap_new_NBTropModel__SWIG_3(self,args);
                        }
                    }
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'new_NBTropModel'");
    return NULL;
}


static PyObject *_wrap_NBTropModel_correction__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::NBTropModel *arg1 = (gpstk::NBTropModel *) 0 ;
    double arg2 ;
    double result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:NBTropModel_correction",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__NBTropModel, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        result = (double)((gpstk::NBTropModel const *)arg1)->correction(arg2);
    }
    catch(InvalidTropModel &_e) {
        {
            InvalidTropModel * temp = new InvalidTropModel(_e);
            if (SWIGTYPE_p_InvalidTropModel->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_InvalidTropModel->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_InvalidTropModel,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"InvalidTropModel");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_InvalidTropModel,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_NBTropModel_correction__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::NBTropModel *arg1 = (gpstk::NBTropModel *) 0 ;
    Position *arg2 = 0 ;
    Position *arg3 = 0 ;
    DayTime *arg4 = 0 ;
    double result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:NBTropModel_correction",&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__NBTropModel, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_gpstk__Position, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("Position");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_gpstk__Position, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (arg3 == NULL) {
            SWIG_null_ref("Position");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj3, (void **)&arg4, SWIGTYPE_p_gpstk__DayTime, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(4)) SWIG_fail;
        if (arg4 == NULL) {
            SWIG_null_ref("DayTime");
        }
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    try {
        result = (double)(arg1)->correction((Position const &)*arg2,(Position const &)*arg3,(DayTime const &)*arg4);
    }
    catch(InvalidTropModel &_e) {
        {
            InvalidTropModel * temp = new InvalidTropModel(_e);
            if (SWIGTYPE_p_InvalidTropModel->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_InvalidTropModel->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_InvalidTropModel,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"InvalidTropModel");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_InvalidTropModel,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_NBTropModel_correction__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::NBTropModel *arg1 = (gpstk::NBTropModel *) 0 ;
    Xvt *arg2 = 0 ;
    Xvt *arg3 = 0 ;
    DayTime *arg4 = 0 ;
    double result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:NBTropModel_correction",&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__NBTropModel, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_gpstk__Xvt, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("Xvt");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_gpstk__Xvt, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (arg3 == NULL) {
            SWIG_null_ref("Xvt");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj3, (void **)&arg4, SWIGTYPE_p_gpstk__DayTime, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(4)) SWIG_fail;
        if (arg4 == NULL) {
            SWIG_null_ref("DayTime");
        }
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    try {
        result = (double)(arg1)->correction((Xvt const &)*arg2,(Xvt const &)*arg3,(DayTime const &)*arg4);
    }
    catch(InvalidTropModel &_e) {
        {
            InvalidTropModel * temp = new InvalidTropModel(_e);
            if (SWIGTYPE_p_InvalidTropModel->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_InvalidTropModel->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_InvalidTropModel,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"InvalidTropModel");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_InvalidTropModel,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_NBTropModel_correction(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[5];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 4); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_gpstk__NBTropModel, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_double(argv[1]);
            if (_v) {
                return _wrap_NBTropModel_correction__SWIG_0(self,args);
            }
        }
    }
    if (argc == 4) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_gpstk__NBTropModel, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_gpstk__Position, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                {
                    void *ptr = 0;
                    if (SWIG_ConvertPtr(argv[2], &ptr, SWIGTYPE_p_gpstk__Position, 0) == -1) {
                        _v = 0;
                        PyErr_Clear();
                    } else {
                        _v = (ptr != 0);
                    }
                }
                if (_v) {
                    {
                        void *ptr = 0;
                        if (SWIG_ConvertPtr(argv[3], &ptr, SWIGTYPE_p_gpstk__DayTime, 0) == -1) {
                            _v = 0;
                            PyErr_Clear();
                        } else {
                            _v = (ptr != 0);
                        }
                    }
                    if (_v) {
                        return _wrap_NBTropModel_correction__SWIG_1(self,args);
                    }
                }
            }
        }
    }
    if (argc == 4) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_gpstk__NBTropModel, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_gpstk__Xvt, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                {
                    void *ptr = 0;
                    if (SWIG_ConvertPtr(argv[2], &ptr, SWIGTYPE_p_gpstk__Xvt, 0) == -1) {
                        _v = 0;
                        PyErr_Clear();
                    } else {
                        _v = (ptr != 0);
                    }
                }
                if (_v) {
                    {
                        void *ptr = 0;
                        if (SWIG_ConvertPtr(argv[3], &ptr, SWIGTYPE_p_gpstk__DayTime, 0) == -1) {
                            _v = 0;
                            PyErr_Clear();
                        } else {
                            _v = (ptr != 0);
                        }
                    }
                    if (_v) {
                        return _wrap_NBTropModel_correction__SWIG_2(self,args);
                    }
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'NBTropModel_correction'");
    return NULL;
}


static PyObject *_wrap_NBTropModel_dry_zenith_delay(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::NBTropModel *arg1 = (gpstk::NBTropModel *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:NBTropModel_dry_zenith_delay",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__NBTropModel, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        result = (double)((gpstk::NBTropModel const *)arg1)->dry_zenith_delay();
    }
    catch(InvalidTropModel &_e) {
        {
            InvalidTropModel * temp = new InvalidTropModel(_e);
            if (SWIGTYPE_p_InvalidTropModel->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_InvalidTropModel->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_InvalidTropModel,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"InvalidTropModel");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_InvalidTropModel,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_NBTropModel_wet_zenith_delay(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::NBTropModel *arg1 = (gpstk::NBTropModel *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:NBTropModel_wet_zenith_delay",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__NBTropModel, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        result = (double)((gpstk::NBTropModel const *)arg1)->wet_zenith_delay();
    }
    catch(InvalidTropModel &_e) {
        {
            InvalidTropModel * temp = new InvalidTropModel(_e);
            if (SWIGTYPE_p_InvalidTropModel->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_InvalidTropModel->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_InvalidTropModel,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"InvalidTropModel");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_InvalidTropModel,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_NBTropModel_dry_mapping_function(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::NBTropModel *arg1 = (gpstk::NBTropModel *) 0 ;
    double arg2 ;
    double result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:NBTropModel_dry_mapping_function",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__NBTropModel, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        result = (double)((gpstk::NBTropModel const *)arg1)->dry_mapping_function(arg2);
    }
    catch(InvalidTropModel &_e) {
        {
            InvalidTropModel * temp = new InvalidTropModel(_e);
            if (SWIGTYPE_p_InvalidTropModel->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_InvalidTropModel->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_InvalidTropModel,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"InvalidTropModel");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_InvalidTropModel,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_NBTropModel_wet_mapping_function(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::NBTropModel *arg1 = (gpstk::NBTropModel *) 0 ;
    double arg2 ;
    double result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:NBTropModel_wet_mapping_function",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__NBTropModel, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        result = (double)((gpstk::NBTropModel const *)arg1)->wet_mapping_function(arg2);
    }
    catch(InvalidTropModel &_e) {
        {
            InvalidTropModel * temp = new InvalidTropModel(_e);
            if (SWIGTYPE_p_InvalidTropModel->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_InvalidTropModel->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_InvalidTropModel,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"InvalidTropModel");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_InvalidTropModel,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_NBTropModel_setWeather__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::NBTropModel *arg1 = (gpstk::NBTropModel *) 0 ;
    gpstk::WxObservation *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:NBTropModel_setWeather",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__NBTropModel, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_gpstk__WxObservation, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("gpstk::WxObservation");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        (arg1)->setWeather((gpstk::WxObservation const &)*arg2);
    }
    catch(gpstk::InvalidParameter &_e) {
        {
            gpstk::InvalidParameter * temp = new gpstk::InvalidParameter(_e);
            if (SWIGTYPE_p_gpstk__InvalidParameter->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_gpstk__InvalidParameter->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__InvalidParameter,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"gpstk::InvalidParameter");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__InvalidParameter,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_NBTropModel_setWeather__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::NBTropModel *arg1 = (gpstk::NBTropModel *) 0 ;
    double *arg2 = 0 ;
    double *arg3 = 0 ;
    double *arg4 = 0 ;
    double temp2 ;
    double temp3 ;
    double temp4 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:NBTropModel_setWeather",&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__NBTropModel, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        temp2 = (double)(SWIG_As_double(obj1));
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = &temp2;
    }
    {
        temp3 = (double)(SWIG_As_double(obj2));
        if (SWIG_arg_fail(3)) SWIG_fail;
        arg3 = &temp3;
    }
    {
        temp4 = (double)(SWIG_As_double(obj3));
        if (SWIG_arg_fail(4)) SWIG_fail;
        arg4 = &temp4;
    }
    try {
        (arg1)->setWeather((double const &)*arg2,(double const &)*arg3,(double const &)*arg4);
    }
    catch(gpstk::InvalidParameter &_e) {
        {
            gpstk::InvalidParameter * temp = new gpstk::InvalidParameter(_e);
            if (SWIGTYPE_p_gpstk__InvalidParameter->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_gpstk__InvalidParameter->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__InvalidParameter,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"gpstk::InvalidParameter");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__InvalidParameter,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_NBTropModel_setWeather__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::NBTropModel *arg1 = (gpstk::NBTropModel *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:NBTropModel_setWeather",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__NBTropModel, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        (arg1)->setWeather();
    }
    catch(InvalidTropModel &_e) {
        {
            InvalidTropModel * temp = new InvalidTropModel(_e);
            if (SWIGTYPE_p_InvalidTropModel->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_InvalidTropModel->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_InvalidTropModel,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"InvalidTropModel");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_InvalidTropModel,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_NBTropModel_setWeather(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[5];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 4); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_gpstk__NBTropModel, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_NBTropModel_setWeather__SWIG_2(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_gpstk__NBTropModel, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_gpstk__WxObservation, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_NBTropModel_setWeather__SWIG_0(self,args);
            }
        }
    }
    if (argc == 4) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_gpstk__NBTropModel, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_double(argv[1]);
            if (_v) {
                _v = SWIG_Check_double(argv[2]);
                if (_v) {
                    _v = SWIG_Check_double(argv[3]);
                    if (_v) {
                        return _wrap_NBTropModel_setWeather__SWIG_1(self,args);
                    }
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'NBTropModel_setWeather'");
    return NULL;
}


static PyObject *_wrap_NBTropModel_setReceiverHeight(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::NBTropModel *arg1 = (gpstk::NBTropModel *) 0 ;
    double *arg2 = 0 ;
    double temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:NBTropModel_setReceiverHeight",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__NBTropModel, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        temp2 = (double)(SWIG_As_double(obj1));
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = &temp2;
    }
    (arg1)->setReceiverHeight((double const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_NBTropModel_setReceiverLatitude(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::NBTropModel *arg1 = (gpstk::NBTropModel *) 0 ;
    double *arg2 = 0 ;
    double temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:NBTropModel_setReceiverLatitude",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__NBTropModel, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        temp2 = (double)(SWIG_As_double(obj1));
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = &temp2;
    }
    (arg1)->setReceiverLatitude((double const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_NBTropModel_setDayOfYear(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::NBTropModel *arg1 = (gpstk::NBTropModel *) 0 ;
    int *arg2 = 0 ;
    int temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:NBTropModel_setDayOfYear",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__NBTropModel, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        temp2 = (int)(SWIG_As_int(obj1));
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = &temp2;
    }
    (arg1)->setDayOfYear((int const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_NBTropModel(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::NBTropModel *arg1 = (gpstk::NBTropModel *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_NBTropModel",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__NBTropModel, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * NBTropModel_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_gpstk__NBTropModel, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_ClockModel_getOffset(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::ClockModel *arg1 = (gpstk::ClockModel *) 0 ;
    gpstk::DayTime *arg2 = 0 ;
    double result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ClockModel_getOffset",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__ClockModel, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_gpstk__DayTime, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("gpstk::DayTime");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (double)((gpstk::ClockModel const *)arg1)->getOffset((gpstk::DayTime const &)*arg2);
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ClockModel_isOffsetValid(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::ClockModel *arg1 = (gpstk::ClockModel *) 0 ;
    gpstk::DayTime *arg2 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ClockModel_isOffsetValid",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__ClockModel, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_gpstk__DayTime, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("gpstk::DayTime");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (bool)((gpstk::ClockModel const *)arg1)->isOffsetValid((gpstk::DayTime const &)*arg2);
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_ClockModel(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::ClockModel *arg1 = (gpstk::ClockModel *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_ClockModel",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__ClockModel, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * ClockModel_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_gpstk__ClockModel, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_ObsClockModel_addEpoch(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::ObsClockModel *arg1 = (gpstk::ObsClockModel *) 0 ;
    ORDEpoch *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ObsClockModel_addEpoch",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__ObsClockModel, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_gpstk__ORDEpoch, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("ORDEpoch");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        (arg1)->addEpoch((ORDEpoch const &)*arg2);
    }
    catch(gpstk::InvalidValue &_e) {
        {
            gpstk::InvalidValue * temp = new gpstk::InvalidValue(_e);
            if (SWIGTYPE_p_gpstk__InvalidValue->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_gpstk__InvalidValue->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__InvalidValue,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"gpstk::InvalidValue");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__InvalidValue,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ObsClockModel_setPRNModeMap(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::ObsClockModel *arg1 = (gpstk::ObsClockModel *) 0 ;
    gpstk::ObsClockModel::PRNModeMap *arg2 = 0 ;
    gpstk::ObsClockModel *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ObsClockModel_setPRNModeMap",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__ObsClockModel, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__mapTshort_gpstk__ObsClockModel__PRNMode_std__lessTshort_t_std__allocatorTstd__pairTshort_const_gpstk__ObsClockModel__PRNMode_t_t_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("gpstk::ObsClockModel::PRNModeMap");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        gpstk::ObsClockModel &_result_ref = (arg1)->setPRNModeMap((std::map<short,gpstk::ObsClockModel::PRNMode,std::less<short >,std::allocator<std::pair<short const,gpstk::ObsClockModel::PRNMode > > > const &)*arg2);
        result = (gpstk::ObsClockModel *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__ObsClockModel, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ObsClockModel_setPRNMode__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::ObsClockModel *arg1 = (gpstk::ObsClockModel *) 0 ;
    short arg2 ;
    gpstk::ObsClockModel::PRNMode arg3 ;
    gpstk::ObsClockModel *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:ObsClockModel_setPRNMode",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__ObsClockModel, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (short)(SWIG_As_short(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (gpstk::ObsClockModel::PRNMode)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        gpstk::ObsClockModel &_result_ref = (arg1)->setPRNMode(arg2,arg3);
        result = (gpstk::ObsClockModel *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__ObsClockModel, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ObsClockModel_setPRNMode__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::ObsClockModel *arg1 = (gpstk::ObsClockModel *) 0 ;
    gpstk::ObsClockModel::PRNMode arg2 ;
    gpstk::ObsClockModel *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ObsClockModel_setPRNMode",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__ObsClockModel, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (gpstk::ObsClockModel::PRNMode)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        gpstk::ObsClockModel &_result_ref = (arg1)->setPRNMode(arg2);
        result = (gpstk::ObsClockModel *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__ObsClockModel, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ObsClockModel_setPRNMode(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[4];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_gpstk__ObsClockModel, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_int(argv[1]);
            if (_v) {
                return _wrap_ObsClockModel_setPRNMode__SWIG_1(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_gpstk__ObsClockModel, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_short(argv[1]);
            if (_v) {
                _v = SWIG_Check_int(argv[2]);
                if (_v) {
                    return _wrap_ObsClockModel_setPRNMode__SWIG_0(self,args);
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'ObsClockModel_setPRNMode'");
    return NULL;
}


static PyObject *_wrap_ObsClockModel_setSigmaMultiplier(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::ObsClockModel *arg1 = (gpstk::ObsClockModel *) 0 ;
    double arg2 ;
    gpstk::ObsClockModel *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ObsClockModel_setSigmaMultiplier",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__ObsClockModel, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        gpstk::ObsClockModel &_result_ref = (arg1)->setSigmaMultiplier(arg2);
        result = (gpstk::ObsClockModel *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__ObsClockModel, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ObsClockModel_setElevationMask(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::ObsClockModel *arg1 = (gpstk::ObsClockModel *) 0 ;
    double arg2 ;
    gpstk::ObsClockModel *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ObsClockModel_setElevationMask",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__ObsClockModel, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        gpstk::ObsClockModel &_result_ref = (arg1)->setElevationMask(arg2);
        result = (gpstk::ObsClockModel *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__ObsClockModel, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ObsClockModel_getPRNStatusMap(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::ObsClockModel *arg1 = (gpstk::ObsClockModel *) 0 ;
    gpstk::ObsClockModel::PRNStatusMap *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ObsClockModel_getPRNStatusMap",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__ObsClockModel, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        gpstk::ObsClockModel::PRNStatusMap const &_result_ref = ((gpstk::ObsClockModel const *)arg1)->getPRNStatusMap();
        result = (gpstk::ObsClockModel::PRNStatusMap *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__mapTshort_gpstk__ObsClockModel__PRNStatus_std__lessTshort_t_std__allocatorTstd__pairTshort_const_gpstk__ObsClockModel__PRNStatus_t_t_t, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ObsClockModel_getPRNStatus(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::ObsClockModel *arg1 = (gpstk::ObsClockModel *) 0 ;
    short arg2 ;
    gpstk::ObsClockModel::PRNStatus result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ObsClockModel_getPRNStatus",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__ObsClockModel, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (short)(SWIG_As_short(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        result = (gpstk::ObsClockModel::PRNStatus)((gpstk::ObsClockModel const *)arg1)->getPRNStatus(arg2);
    }
    catch(gpstk::ObjectNotFound &_e) {
        {
            gpstk::ObjectNotFound * temp = new gpstk::ObjectNotFound(_e);
            if (SWIGTYPE_p_gpstk__ObjectNotFound->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_gpstk__ObjectNotFound->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__ObjectNotFound,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"gpstk::ObjectNotFound");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__ObjectNotFound,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    resultobj = SWIG_From_int((result));
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ObsClockModel_getPRNModeMap(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::ObsClockModel *arg1 = (gpstk::ObsClockModel *) 0 ;
    gpstk::ObsClockModel::PRNModeMap *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ObsClockModel_getPRNModeMap",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__ObsClockModel, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        gpstk::ObsClockModel::PRNModeMap const &_result_ref = ((gpstk::ObsClockModel const *)arg1)->getPRNModeMap();
        result = (gpstk::ObsClockModel::PRNModeMap *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__mapTshort_gpstk__ObsClockModel__PRNMode_std__lessTshort_t_std__allocatorTstd__pairTshort_const_gpstk__ObsClockModel__PRNMode_t_t_t, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ObsClockModel_getPRNMode(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::ObsClockModel *arg1 = (gpstk::ObsClockModel *) 0 ;
    short arg2 ;
    gpstk::ObsClockModel::PRNMode result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ObsClockModel_getPRNMode",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__ObsClockModel, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (short)(SWIG_As_short(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        result = (gpstk::ObsClockModel::PRNMode)((gpstk::ObsClockModel const *)arg1)->getPRNMode(arg2);
    }
    catch(gpstk::ObjectNotFound &_e) {
        {
            gpstk::ObjectNotFound * temp = new gpstk::ObjectNotFound(_e);
            if (SWIGTYPE_p_gpstk__ObjectNotFound->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_gpstk__ObjectNotFound->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__ObjectNotFound,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"gpstk::ObjectNotFound");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__ObjectNotFound,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    resultobj = SWIG_From_int((result));
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ObsClockModel_getSigmaMultiplier(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::ObsClockModel *arg1 = (gpstk::ObsClockModel *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ObsClockModel_getSigmaMultiplier",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__ObsClockModel, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double)((gpstk::ObsClockModel const *)arg1)->getSigmaMultiplier();
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ObsClockModel_getElevationMask(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::ObsClockModel *arg1 = (gpstk::ObsClockModel *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ObsClockModel_getElevationMask",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__ObsClockModel, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double)((gpstk::ObsClockModel const *)arg1)->getElevationMask();
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ObsClockModel_simpleOrdClock(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::ObsClockModel *arg1 = (gpstk::ObsClockModel *) 0 ;
    ORDEpoch *arg2 = 0 ;
    Stats<double > result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ObsClockModel_simpleOrdClock",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__ObsClockModel, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_gpstk__ORDEpoch, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("ORDEpoch");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        result = (arg1)->simpleOrdClock((ORDEpoch const &)*arg2);
    }
    catch(gpstk::InvalidValue &_e) {
        {
            gpstk::InvalidValue * temp = new gpstk::InvalidValue(_e);
            if (SWIGTYPE_p_gpstk__InvalidValue->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_gpstk__InvalidValue->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__InvalidValue,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"gpstk::InvalidValue");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__InvalidValue,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    {
        Stats<double > * resultptr;
        resultptr = new Stats<double >((Stats<double > &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_StatsTdouble_t, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ObsClockModel_dump__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::ObsClockModel *arg1 = (gpstk::ObsClockModel *) 0 ;
    std::ostream *arg2 = 0 ;
    short arg3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:ObsClockModel_dump",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__ObsClockModel, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("std::ostream");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (short)(SWIG_As_short(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    ((gpstk::ObsClockModel const *)arg1)->dump(*arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ObsClockModel_dump__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::ObsClockModel *arg1 = (gpstk::ObsClockModel *) 0 ;
    std::ostream *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ObsClockModel_dump",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__ObsClockModel, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("std::ostream");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    ((gpstk::ObsClockModel const *)arg1)->dump(*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ObsClockModel_dump(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[4];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_gpstk__ObsClockModel, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_ObsClockModel_dump__SWIG_1(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_gpstk__ObsClockModel, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                _v = SWIG_Check_short(argv[2]);
                if (_v) {
                    return _wrap_ObsClockModel_dump__SWIG_0(self,args);
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'ObsClockModel_dump'");
    return NULL;
}


static PyObject *_wrap_streamRead__SWIG_6(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::ostream *arg1 = 0 ;
    gpstk::ObsClockModel *arg2 = 0 ;
    std::ostream *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:streamRead",&obj0,&obj1)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("std::ostream");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_gpstk__ObsClockModel, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("gpstk::ObsClockModel");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        std::ostream &_result_ref = operator <<(*arg1,(gpstk::ObsClockModel const &)*arg2);
        result = (std::ostream *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_ObsClockModel(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::ObsClockModel *arg1 = (gpstk::ObsClockModel *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_ObsClockModel",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__ObsClockModel, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * ObsClockModel_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_gpstk__ObsClockModel, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_EpochClockModel_isOffsetValid__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::EpochClockModel *arg1 = (gpstk::EpochClockModel *) 0 ;
    gpstk::DayTime *arg2 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:EpochClockModel_isOffsetValid",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__EpochClockModel, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_gpstk__DayTime, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("gpstk::DayTime");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        result = (bool)((gpstk::EpochClockModel const *)arg1)->isOffsetValid((gpstk::DayTime const &)*arg2);
    }
    catch(gpstk::InvalidArgumentException &_e) {
        {
            gpstk::InvalidArgumentException * temp = new gpstk::InvalidArgumentException(_e);
            if (SWIGTYPE_p_gpstk__InvalidArgumentException->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_gpstk__InvalidArgumentException->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__InvalidArgumentException,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"gpstk::InvalidArgumentException");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__InvalidArgumentException,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_EpochClockModel_isOffsetValid__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::EpochClockModel *arg1 = (gpstk::EpochClockModel *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:EpochClockModel_isOffsetValid",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__EpochClockModel, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)((gpstk::EpochClockModel const *)arg1)->isOffsetValid();
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_EpochClockModel_isOffsetValid(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_gpstk__EpochClockModel, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_EpochClockModel_isOffsetValid__SWIG_1(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_gpstk__EpochClockModel, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_gpstk__DayTime, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_EpochClockModel_isOffsetValid__SWIG_0(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'EpochClockModel_isOffsetValid'");
    return NULL;
}


static PyObject *_wrap_EpochClockModel_addEpoch(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::EpochClockModel *arg1 = (gpstk::EpochClockModel *) 0 ;
    ORDEpoch *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:EpochClockModel_addEpoch",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__EpochClockModel, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_gpstk__ORDEpoch, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("ORDEpoch");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        (arg1)->addEpoch((ORDEpoch const &)*arg2);
    }
    catch(gpstk::InvalidValue &_e) {
        {
            gpstk::InvalidValue * temp = new gpstk::InvalidValue(_e);
            if (SWIGTYPE_p_gpstk__InvalidValue->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_gpstk__InvalidValue->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__InvalidValue,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"gpstk::InvalidValue");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__InvalidValue,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_EpochClockModel(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::EpochClockModel *arg1 = (gpstk::EpochClockModel *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_EpochClockModel",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__EpochClockModel, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * EpochClockModel_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_gpstk__EpochClockModel, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_LinearClockModel__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    double arg1 ;
    double arg2 ;
    gpstk::ObsClockModel::PRNMode arg3 ;
    gpstk::LinearClockModel *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:new_LinearClockModel",&obj0,&obj1,&obj2)) goto fail;
    {
        arg1 = (double)(SWIG_As_double(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (gpstk::ObsClockModel::PRNMode)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    result = (gpstk::LinearClockModel *)new gpstk::LinearClockModel(arg1,arg2,arg3);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__LinearClockModel, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_LinearClockModel__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    double arg1 ;
    double arg2 ;
    gpstk::LinearClockModel *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:new_LinearClockModel",&obj0,&obj1)) goto fail;
    {
        arg1 = (double)(SWIG_As_double(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (gpstk::LinearClockModel *)new gpstk::LinearClockModel(arg1,arg2);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__LinearClockModel, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_LinearClockModel__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    double arg1 ;
    gpstk::LinearClockModel *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_LinearClockModel",&obj0)) goto fail;
    {
        arg1 = (double)(SWIG_As_double(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    result = (gpstk::LinearClockModel *)new gpstk::LinearClockModel(arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__LinearClockModel, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_LinearClockModel__SWIG_3(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::LinearClockModel *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_LinearClockModel")) goto fail;
    result = (gpstk::LinearClockModel *)new gpstk::LinearClockModel();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__LinearClockModel, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_LinearClockModel(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[4];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_new_LinearClockModel__SWIG_3(self,args);
    }
    if (argc == 1) {
        int _v;
        _v = SWIG_Check_double(argv[0]);
        if (_v) {
            return _wrap_new_LinearClockModel__SWIG_2(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        _v = SWIG_Check_double(argv[0]);
        if (_v) {
            _v = SWIG_Check_double(argv[1]);
            if (_v) {
                return _wrap_new_LinearClockModel__SWIG_1(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        _v = SWIG_Check_double(argv[0]);
        if (_v) {
            _v = SWIG_Check_double(argv[1]);
            if (_v) {
                _v = SWIG_Check_int(argv[2]);
                if (_v) {
                    return _wrap_new_LinearClockModel__SWIG_0(self,args);
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'new_LinearClockModel'");
    return NULL;
}


static PyObject *_wrap_LinearClockModel_getOffset(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::LinearClockModel *arg1 = (gpstk::LinearClockModel *) 0 ;
    gpstk::DayTime *arg2 = 0 ;
    double result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:LinearClockModel_getOffset",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__LinearClockModel, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_gpstk__DayTime, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("gpstk::DayTime");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (double)((gpstk::LinearClockModel const *)arg1)->getOffset((gpstk::DayTime const &)*arg2);
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_LinearClockModel_isOffsetValid(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::LinearClockModel *arg1 = (gpstk::LinearClockModel *) 0 ;
    gpstk::DayTime *arg2 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:LinearClockModel_isOffsetValid",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__LinearClockModel, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_gpstk__DayTime, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("gpstk::DayTime");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (bool)((gpstk::LinearClockModel const *)arg1)->isOffsetValid((gpstk::DayTime const &)*arg2);
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_LinearClockModel_addEpoch(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::LinearClockModel *arg1 = (gpstk::LinearClockModel *) 0 ;
    ORDEpoch *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:LinearClockModel_addEpoch",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__LinearClockModel, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_gpstk__ORDEpoch, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("ORDEpoch");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        (arg1)->addEpoch((ORDEpoch const &)*arg2);
    }
    catch(gpstk::InvalidValue &_e) {
        {
            gpstk::InvalidValue * temp = new gpstk::InvalidValue(_e);
            if (SWIGTYPE_p_gpstk__InvalidValue->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_gpstk__InvalidValue->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__InvalidValue,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"gpstk::InvalidValue");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__InvalidValue,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_LinearClockModel_reset(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::LinearClockModel *arg1 = (gpstk::LinearClockModel *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:LinearClockModel_reset",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__LinearClockModel, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    (arg1)->reset();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_LinearClockModel_dump__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::LinearClockModel *arg1 = (gpstk::LinearClockModel *) 0 ;
    std::ostream *arg2 = 0 ;
    short arg3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:LinearClockModel_dump",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__LinearClockModel, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("std::ostream");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (short)(SWIG_As_short(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    ((gpstk::LinearClockModel const *)arg1)->dump(*arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_LinearClockModel_dump__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::LinearClockModel *arg1 = (gpstk::LinearClockModel *) 0 ;
    std::ostream *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:LinearClockModel_dump",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__LinearClockModel, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("std::ostream");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    ((gpstk::LinearClockModel const *)arg1)->dump(*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_LinearClockModel_dump(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[4];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_gpstk__LinearClockModel, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_LinearClockModel_dump__SWIG_1(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_gpstk__LinearClockModel, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                _v = SWIG_Check_short(argv[2]);
                if (_v) {
                    return _wrap_LinearClockModel_dump__SWIG_0(self,args);
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'LinearClockModel_dump'");
    return NULL;
}


static PyObject *_wrap_streamRead__SWIG_7(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::ostream *arg1 = 0 ;
    gpstk::LinearClockModel *arg2 = 0 ;
    std::ostream *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:streamRead",&obj0,&obj1)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("std::ostream");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_gpstk__LinearClockModel, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("gpstk::LinearClockModel");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        std::ostream &_result_ref = operator <<(*arg1,(gpstk::LinearClockModel const &)*arg2);
        result = (std::ostream *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_LinearClockModel(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::LinearClockModel *arg1 = (gpstk::LinearClockModel *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_LinearClockModel",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__LinearClockModel, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * LinearClockModel_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_gpstk__LinearClockModel, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_BCEphemerisStore(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::BCEphemerisStore *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_BCEphemerisStore")) goto fail;
    result = (gpstk::BCEphemerisStore *)new gpstk::BCEphemerisStore();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__BCEphemerisStore, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_BCEphemerisStore(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::BCEphemerisStore *arg1 = (gpstk::BCEphemerisStore *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_BCEphemerisStore",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__BCEphemerisStore, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_BCEphemerisStore_getPrnXvt__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::BCEphemerisStore *arg1 = (gpstk::BCEphemerisStore *) 0 ;
    short arg2 ;
    gpstk::DayTime *arg3 = 0 ;
    Xvt result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:BCEphemerisStore_getPrnXvt",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__BCEphemerisStore, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (short)(SWIG_As_short(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_gpstk__DayTime, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (arg3 == NULL) {
            SWIG_null_ref("gpstk::DayTime");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    try {
        result = ((gpstk::BCEphemerisStore const *)arg1)->getPrnXvt(arg2,(gpstk::DayTime const &)*arg3);
    }
    catch(NoEphemerisFound &_e) {
        {
            NoEphemerisFound * temp = new NoEphemerisFound(_e);
            if (SWIGTYPE_p_NoEphemerisFound->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_NoEphemerisFound->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_NoEphemerisFound,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"NoEphemerisFound");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_NoEphemerisFound,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    {
        Xvt * resultptr;
        resultptr = new Xvt((Xvt &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_gpstk__Xvt, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_BCEphemerisStore_getPrnHealth(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::BCEphemerisStore *arg1 = (gpstk::BCEphemerisStore *) 0 ;
    short arg2 ;
    gpstk::DayTime *arg3 = 0 ;
    short result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:BCEphemerisStore_getPrnHealth",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__BCEphemerisStore, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (short)(SWIG_As_short(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_gpstk__DayTime, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (arg3 == NULL) {
            SWIG_null_ref("gpstk::DayTime");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    try {
        result = (short)((gpstk::BCEphemerisStore const *)arg1)->getPrnHealth(arg2,(gpstk::DayTime const &)*arg3);
    }
    catch(NoEphemerisFound &_e) {
        {
            NoEphemerisFound * temp = new NoEphemerisFound(_e);
            if (SWIGTYPE_p_NoEphemerisFound->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_NoEphemerisFound->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_NoEphemerisFound,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"NoEphemerisFound");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_NoEphemerisFound,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    {
        resultobj = SWIG_From_short((short)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_BCEphemerisStore_dump__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::BCEphemerisStore *arg1 = (gpstk::BCEphemerisStore *) 0 ;
    short arg2 ;
    std::ostream *arg3 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:BCEphemerisStore_dump",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__BCEphemerisStore, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (short)(SWIG_As_short(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (arg3 == NULL) {
            SWIG_null_ref("std::ostream");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    ((gpstk::BCEphemerisStore const *)arg1)->dump(arg2,*arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_BCEphemerisStore_dump__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::BCEphemerisStore *arg1 = (gpstk::BCEphemerisStore *) 0 ;
    short arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:BCEphemerisStore_dump",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__BCEphemerisStore, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (short)(SWIG_As_short(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    ((gpstk::BCEphemerisStore const *)arg1)->dump(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_BCEphemerisStore_dump__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::BCEphemerisStore *arg1 = (gpstk::BCEphemerisStore *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:BCEphemerisStore_dump",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__BCEphemerisStore, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    ((gpstk::BCEphemerisStore const *)arg1)->dump();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_BCEphemerisStore_dump(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[4];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_gpstk__BCEphemerisStore, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_BCEphemerisStore_dump__SWIG_2(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_gpstk__BCEphemerisStore, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_short(argv[1]);
            if (_v) {
                return _wrap_BCEphemerisStore_dump__SWIG_1(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_gpstk__BCEphemerisStore, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_short(argv[1]);
            if (_v) {
                {
                    void *ptr = 0;
                    if (SWIG_ConvertPtr(argv[2], &ptr, SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0) == -1) {
                        _v = 0;
                        PyErr_Clear();
                    } else {
                        _v = (ptr != 0);
                    }
                }
                if (_v) {
                    return _wrap_BCEphemerisStore_dump__SWIG_0(self,args);
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'BCEphemerisStore_dump'");
    return NULL;
}


static PyObject *_wrap_BCEphemerisStore_getInitialTime(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::BCEphemerisStore *arg1 = (gpstk::BCEphemerisStore *) 0 ;
    gpstk::DayTime result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:BCEphemerisStore_getInitialTime",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__BCEphemerisStore, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = ((gpstk::BCEphemerisStore const *)arg1)->getInitialTime();
    
    {
        gpstk::DayTime * resultptr;
        resultptr = new gpstk::DayTime((gpstk::DayTime &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_gpstk__DayTime, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_BCEphemerisStore_getFinalTime(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::BCEphemerisStore *arg1 = (gpstk::BCEphemerisStore *) 0 ;
    gpstk::DayTime result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:BCEphemerisStore_getFinalTime",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__BCEphemerisStore, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = ((gpstk::BCEphemerisStore const *)arg1)->getFinalTime();
    
    {
        gpstk::DayTime * resultptr;
        resultptr = new gpstk::DayTime((gpstk::DayTime &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_gpstk__DayTime, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_BCEphemerisStore_addEphemeris(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::BCEphemerisStore *arg1 = (gpstk::BCEphemerisStore *) 0 ;
    EngEphemeris *arg2 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:BCEphemerisStore_addEphemeris",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__BCEphemerisStore, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_gpstk__EngEphemeris, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("EngEphemeris");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        result = (bool)(arg1)->addEphemeris((EngEphemeris const &)*arg2);
    }
    catch(gpstk::InvalidRequest &_e) {
        {
            gpstk::InvalidRequest * temp = new gpstk::InvalidRequest(_e);
            if (SWIGTYPE_p_gpstk__InvalidRequest->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_gpstk__InvalidRequest->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__InvalidRequest,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"gpstk::InvalidRequest");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__InvalidRequest,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_BCEphemerisStore_wiper(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::BCEphemerisStore *arg1 = (gpstk::BCEphemerisStore *) 0 ;
    DayTime *arg2 = 0 ;
    unsigned int result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:BCEphemerisStore_wiper",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__BCEphemerisStore, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_gpstk__DayTime, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("DayTime");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        result = (unsigned int)(arg1)->wiper((DayTime const &)*arg2);
    }
    catch(gpstk::InvalidRequest &_e) {
        {
            gpstk::InvalidRequest * temp = new gpstk::InvalidRequest(_e);
            if (SWIGTYPE_p_gpstk__InvalidRequest->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_gpstk__InvalidRequest->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__InvalidRequest,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"gpstk::InvalidRequest");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__InvalidRequest,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    {
        resultobj = SWIG_From_unsigned_SS_int((unsigned int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_BCEphemerisStore_edit(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::BCEphemerisStore *arg1 = (gpstk::BCEphemerisStore *) 0 ;
    DayTime *arg2 = 0 ;
    DayTime *arg3 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:BCEphemerisStore_edit",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__BCEphemerisStore, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_gpstk__DayTime, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("DayTime");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_gpstk__DayTime, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (arg3 == NULL) {
            SWIG_null_ref("DayTime");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    (arg1)->edit((DayTime const &)*arg2,(DayTime const &)*arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_BCEphemerisStore_clear(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::BCEphemerisStore *arg1 = (gpstk::BCEphemerisStore *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:BCEphemerisStore_clear",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__BCEphemerisStore, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    (arg1)->clear();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_BCEphemerisStore_getPrnXvt__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::BCEphemerisStore *arg1 = (gpstk::BCEphemerisStore *) 0 ;
    short arg2 ;
    gpstk::DayTime *arg3 = 0 ;
    short *arg4 = 0 ;
    Xvt result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:BCEphemerisStore_getPrnXvt",&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__BCEphemerisStore, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (short)(SWIG_As_short(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_gpstk__DayTime, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (arg3 == NULL) {
            SWIG_null_ref("gpstk::DayTime");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj3, (void **)&arg4, SWIGTYPE_p_short, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(4)) SWIG_fail;
        if (arg4 == NULL) {
            SWIG_null_ref("short");
        }
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    try {
        result = ((gpstk::BCEphemerisStore const *)arg1)->getPrnXvt(arg2,(gpstk::DayTime const &)*arg3,*arg4);
    }
    catch(NoEphemerisFound &_e) {
        {
            NoEphemerisFound * temp = new NoEphemerisFound(_e);
            if (SWIGTYPE_p_NoEphemerisFound->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_NoEphemerisFound->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_NoEphemerisFound,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"NoEphemerisFound");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_NoEphemerisFound,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    {
        Xvt * resultptr;
        resultptr = new Xvt((Xvt &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_gpstk__Xvt, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_BCEphemerisStore_getPrnXvt(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[5];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 4); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_gpstk__BCEphemerisStore, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_short(argv[1]);
            if (_v) {
                {
                    void *ptr = 0;
                    if (SWIG_ConvertPtr(argv[2], &ptr, SWIGTYPE_p_gpstk__DayTime, 0) == -1) {
                        _v = 0;
                        PyErr_Clear();
                    } else {
                        _v = (ptr != 0);
                    }
                }
                if (_v) {
                    return _wrap_BCEphemerisStore_getPrnXvt__SWIG_0(self,args);
                }
            }
        }
    }
    if (argc == 4) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_gpstk__BCEphemerisStore, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_short(argv[1]);
            if (_v) {
                {
                    void *ptr = 0;
                    if (SWIG_ConvertPtr(argv[2], &ptr, SWIGTYPE_p_gpstk__DayTime, 0) == -1) {
                        _v = 0;
                        PyErr_Clear();
                    } else {
                        _v = (ptr != 0);
                    }
                }
                if (_v) {
                    {
                        void *ptr = 0;
                        if (SWIG_ConvertPtr(argv[3], &ptr, SWIGTYPE_p_short, 0) == -1) {
                            _v = 0;
                            PyErr_Clear();
                        } else {
                            _v = (ptr != 0);
                        }
                    }
                    if (_v) {
                        return _wrap_BCEphemerisStore_getPrnXvt__SWIG_1(self,args);
                    }
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'BCEphemerisStore_getPrnXvt'");
    return NULL;
}


static PyObject *_wrap_BCEphemerisStore_ubeSize(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::BCEphemerisStore *arg1 = (gpstk::BCEphemerisStore *) 0 ;
    unsigned int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:BCEphemerisStore_ubeSize",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__BCEphemerisStore, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (unsigned int)((gpstk::BCEphemerisStore const *)arg1)->ubeSize();
    
    {
        resultobj = SWIG_From_unsigned_SS_int((unsigned int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_BCEphemerisStore_size(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::BCEphemerisStore *arg1 = (gpstk::BCEphemerisStore *) 0 ;
    unsigned int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:BCEphemerisStore_size",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__BCEphemerisStore, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (unsigned int)((gpstk::BCEphemerisStore const *)arg1)->size();
    
    {
        resultobj = SWIG_From_unsigned_SS_int((unsigned int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_BCEphemerisStore_findEphemeris(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::BCEphemerisStore *arg1 = (gpstk::BCEphemerisStore *) 0 ;
    short arg2 ;
    gpstk::DayTime *arg3 = 0 ;
    EngEphemeris *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:BCEphemerisStore_findEphemeris",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__BCEphemerisStore, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (short)(SWIG_As_short(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_gpstk__DayTime, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (arg3 == NULL) {
            SWIG_null_ref("gpstk::DayTime");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    try {
        {
            EngEphemeris const &_result_ref = ((gpstk::BCEphemerisStore const *)arg1)->findEphemeris(arg2,(gpstk::DayTime const &)*arg3);
            result = (EngEphemeris *) &_result_ref;
        }
    }
    catch(NoEphemerisFound &_e) {
        {
            NoEphemerisFound * temp = new NoEphemerisFound(_e);
            if (SWIGTYPE_p_NoEphemerisFound->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_NoEphemerisFound->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_NoEphemerisFound,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"NoEphemerisFound");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_NoEphemerisFound,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__EngEphemeris, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_BCEphemerisStore_findUserEphemeris(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::BCEphemerisStore *arg1 = (gpstk::BCEphemerisStore *) 0 ;
    short arg2 ;
    gpstk::DayTime *arg3 = 0 ;
    EngEphemeris *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:BCEphemerisStore_findUserEphemeris",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__BCEphemerisStore, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (short)(SWIG_As_short(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_gpstk__DayTime, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (arg3 == NULL) {
            SWIG_null_ref("gpstk::DayTime");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    try {
        {
            EngEphemeris const &_result_ref = ((gpstk::BCEphemerisStore const *)arg1)->findUserEphemeris(arg2,(gpstk::DayTime const &)*arg3);
            result = (EngEphemeris *) &_result_ref;
        }
    }
    catch(NoEphemerisFound &_e) {
        {
            NoEphemerisFound * temp = new NoEphemerisFound(_e);
            if (SWIGTYPE_p_NoEphemerisFound->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_NoEphemerisFound->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_NoEphemerisFound,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"NoEphemerisFound");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_NoEphemerisFound,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__EngEphemeris, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_BCEphemerisStore_findNearEphemeris(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::BCEphemerisStore *arg1 = (gpstk::BCEphemerisStore *) 0 ;
    short arg2 ;
    gpstk::DayTime *arg3 = 0 ;
    EngEphemeris *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:BCEphemerisStore_findNearEphemeris",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__BCEphemerisStore, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (short)(SWIG_As_short(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_gpstk__DayTime, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (arg3 == NULL) {
            SWIG_null_ref("gpstk::DayTime");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    try {
        {
            EngEphemeris const &_result_ref = ((gpstk::BCEphemerisStore const *)arg1)->findNearEphemeris(arg2,(gpstk::DayTime const &)*arg3);
            result = (EngEphemeris *) &_result_ref;
        }
    }
    catch(NoEphemerisFound &_e) {
        {
            NoEphemerisFound * temp = new NoEphemerisFound(_e);
            if (SWIGTYPE_p_NoEphemerisFound->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_NoEphemerisFound->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_NoEphemerisFound,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"NoEphemerisFound");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_NoEphemerisFound,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__EngEphemeris, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_BCEphemerisStore_addToList(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::BCEphemerisStore *arg1 = (gpstk::BCEphemerisStore *) 0 ;
    std::list<EngEphemeris > *arg2 = 0 ;
    int result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:BCEphemerisStore_addToList",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__BCEphemerisStore, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__listTgpstk__EngEphemeris_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("std::list<EngEphemeris >");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (int)((gpstk::BCEphemerisStore const *)arg1)->addToList(*arg2);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_BCEphemerisStore_SearchNear(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::BCEphemerisStore *arg1 = (gpstk::BCEphemerisStore *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:BCEphemerisStore_SearchNear",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__BCEphemerisStore, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    (arg1)->SearchNear();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_BCEphemerisStore_SearchPast(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::BCEphemerisStore *arg1 = (gpstk::BCEphemerisStore *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:BCEphemerisStore_SearchPast",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__BCEphemerisStore, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    (arg1)->SearchPast();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * BCEphemerisStore_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_gpstk__BCEphemerisStore, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_delete_FileStore_RinexNavHeader(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::FileStore<RinexNavHeader > *arg1 = (gpstk::FileStore<RinexNavHeader > *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_FileStore_RinexNavHeader",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__FileStoreTgpstk__RinexNavHeader_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FileStore_RinexNavHeader_getFileNames(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::FileStore<RinexNavHeader > *arg1 = (gpstk::FileStore<RinexNavHeader > *) 0 ;
    SwigValueWrapper<std::vector<std::string,std::allocator<std::string > > > result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:FileStore_RinexNavHeader_getFileNames",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__FileStoreTgpstk__RinexNavHeader_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = ((gpstk::FileStore<RinexNavHeader > const *)arg1)->getFileNames();
    
    {
        std::vector<std::string,std::allocator<std::string > > * resultptr;
        resultptr = new std::vector<std::string,std::allocator<std::string > >((std::vector<std::string,std::allocator<std::string > > &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_std__vectorTstd__string_std__allocatorTstd__string_t_t, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FileStore_RinexNavHeader_addFile(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::FileStore<RinexNavHeader > *arg1 = (gpstk::FileStore<RinexNavHeader > *) 0 ;
    std::string *arg2 = 0 ;
    RinexNavHeader *arg3 = 0 ;
    int res2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:FileStore_RinexNavHeader_addFile",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__FileStoreTgpstk__RinexNavHeader_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        std::string *ptr = (std::string *)0;
        res2 = SWIG_AsPtr_std_string(obj1, &ptr);
        if (!res2) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj1);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = ptr;
    }
    {
        SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_gpstk__RinexNavHeader, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (arg3 == NULL) {
            SWIG_null_ref("RinexNavHeader");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    (arg1)->addFile((std::string const &)*arg2,(RinexNavHeader const &)*arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    if (res2 == SWIG_NEWOBJ) delete arg2;
    return resultobj;
    fail:
    if (res2 == SWIG_NEWOBJ) delete arg2;
    return NULL;
}


static PyObject *_wrap_FileStore_RinexNavHeader_getHeader(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::FileStore<RinexNavHeader > *arg1 = (gpstk::FileStore<RinexNavHeader > *) 0 ;
    std::string *arg2 = 0 ;
    RinexNavHeader *result;
    int res2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:FileStore_RinexNavHeader_getHeader",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__FileStoreTgpstk__RinexNavHeader_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        std::string *ptr = (std::string *)0;
        res2 = SWIG_AsPtr_std_string(obj1, &ptr);
        if (!res2) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj1);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = ptr;
    }
    {
        RinexNavHeader const &_result_ref = (arg1)->getHeader((std::string const &)*arg2);
        result = (RinexNavHeader *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__RinexNavHeader, 0);
    if (res2 == SWIG_NEWOBJ) delete arg2;
    return resultobj;
    fail:
    if (res2 == SWIG_NEWOBJ) delete arg2;
    return NULL;
}


static PyObject *_wrap_FileStore_RinexNavHeader_loadFile(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::FileStore<RinexNavHeader > *arg1 = (gpstk::FileStore<RinexNavHeader > *) 0 ;
    std::string *arg2 = 0 ;
    int res2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:FileStore_RinexNavHeader_loadFile",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__FileStoreTgpstk__RinexNavHeader_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        std::string *ptr = (std::string *)0;
        res2 = SWIG_AsPtr_std_string(obj1, &ptr);
        if (!res2) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj1);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = ptr;
    }
    try {
        (arg1)->loadFile((std::string const &)*arg2);
    }
    catch(gpstk::FileMissingException &_e) {
        {
            gpstk::FileMissingException * temp = new gpstk::FileMissingException(_e);
            if (SWIGTYPE_p_gpstk__FileMissingException->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_gpstk__FileMissingException->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__FileMissingException,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"gpstk::FileMissingException");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__FileMissingException,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    Py_INCREF(Py_None); resultobj = Py_None;
    if (res2 == SWIG_NEWOBJ) delete arg2;
    return resultobj;
    fail:
    if (res2 == SWIG_NEWOBJ) delete arg2;
    return NULL;
}


static PyObject *_wrap_FileStore_RinexNavHeader_loadFiles(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::FileStore<RinexNavHeader > *arg1 = (gpstk::FileStore<RinexNavHeader > *) 0 ;
    std::vector<std::string,std::allocator<std::string > > *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:FileStore_RinexNavHeader_loadFiles",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__FileStoreTgpstk__RinexNavHeader_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__vectorTstd__string_std__allocatorTstd__string_t_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("std::vector<std::string,std::allocator<std::string > >");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    (arg1)->loadFiles((std::vector<std::string,std::allocator<std::string > > const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FileStore_RinexNavHeader_size(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::FileStore<RinexNavHeader > *arg1 = (gpstk::FileStore<RinexNavHeader > *) 0 ;
    unsigned int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:FileStore_RinexNavHeader_size",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__FileStoreTgpstk__RinexNavHeader_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (unsigned int)((gpstk::FileStore<RinexNavHeader > const *)arg1)->size();
    
    {
        resultobj = SWIG_From_unsigned_SS_int((unsigned int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject * FileStore_RinexNavHeader_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_gpstk__FileStoreTgpstk__RinexNavHeader_t, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_delete_FileStore_SP3Header(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::FileStore<SP3Header > *arg1 = (gpstk::FileStore<SP3Header > *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_FileStore_SP3Header",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__FileStoreTgpstk__SP3Header_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FileStore_SP3Header_getFileNames(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::FileStore<SP3Header > *arg1 = (gpstk::FileStore<SP3Header > *) 0 ;
    SwigValueWrapper<std::vector<std::string,std::allocator<std::string > > > result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:FileStore_SP3Header_getFileNames",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__FileStoreTgpstk__SP3Header_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = ((gpstk::FileStore<SP3Header > const *)arg1)->getFileNames();
    
    {
        std::vector<std::string,std::allocator<std::string > > * resultptr;
        resultptr = new std::vector<std::string,std::allocator<std::string > >((std::vector<std::string,std::allocator<std::string > > &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_std__vectorTstd__string_std__allocatorTstd__string_t_t, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FileStore_SP3Header_addFile(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::FileStore<SP3Header > *arg1 = (gpstk::FileStore<SP3Header > *) 0 ;
    std::string *arg2 = 0 ;
    SP3Header *arg3 = 0 ;
    int res2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:FileStore_SP3Header_addFile",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__FileStoreTgpstk__SP3Header_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        std::string *ptr = (std::string *)0;
        res2 = SWIG_AsPtr_std_string(obj1, &ptr);
        if (!res2) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj1);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = ptr;
    }
    {
        SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_gpstk__SP3Header, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (arg3 == NULL) {
            SWIG_null_ref("SP3Header");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    (arg1)->addFile((std::string const &)*arg2,(SP3Header const &)*arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    if (res2 == SWIG_NEWOBJ) delete arg2;
    return resultobj;
    fail:
    if (res2 == SWIG_NEWOBJ) delete arg2;
    return NULL;
}


static PyObject *_wrap_FileStore_SP3Header_getHeader(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::FileStore<SP3Header > *arg1 = (gpstk::FileStore<SP3Header > *) 0 ;
    std::string *arg2 = 0 ;
    SP3Header *result;
    int res2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:FileStore_SP3Header_getHeader",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__FileStoreTgpstk__SP3Header_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        std::string *ptr = (std::string *)0;
        res2 = SWIG_AsPtr_std_string(obj1, &ptr);
        if (!res2) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj1);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = ptr;
    }
    {
        SP3Header const &_result_ref = (arg1)->getHeader((std::string const &)*arg2);
        result = (SP3Header *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__SP3Header, 0);
    if (res2 == SWIG_NEWOBJ) delete arg2;
    return resultobj;
    fail:
    if (res2 == SWIG_NEWOBJ) delete arg2;
    return NULL;
}


static PyObject *_wrap_FileStore_SP3Header_loadFile(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::FileStore<SP3Header > *arg1 = (gpstk::FileStore<SP3Header > *) 0 ;
    std::string *arg2 = 0 ;
    int res2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:FileStore_SP3Header_loadFile",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__FileStoreTgpstk__SP3Header_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        std::string *ptr = (std::string *)0;
        res2 = SWIG_AsPtr_std_string(obj1, &ptr);
        if (!res2) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj1);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = ptr;
    }
    try {
        (arg1)->loadFile((std::string const &)*arg2);
    }
    catch(gpstk::FileMissingException &_e) {
        {
            gpstk::FileMissingException * temp = new gpstk::FileMissingException(_e);
            if (SWIGTYPE_p_gpstk__FileMissingException->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_gpstk__FileMissingException->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__FileMissingException,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"gpstk::FileMissingException");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__FileMissingException,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    Py_INCREF(Py_None); resultobj = Py_None;
    if (res2 == SWIG_NEWOBJ) delete arg2;
    return resultobj;
    fail:
    if (res2 == SWIG_NEWOBJ) delete arg2;
    return NULL;
}


static PyObject *_wrap_FileStore_SP3Header_loadFiles(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::FileStore<SP3Header > *arg1 = (gpstk::FileStore<SP3Header > *) 0 ;
    std::vector<std::string,std::allocator<std::string > > *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:FileStore_SP3Header_loadFiles",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__FileStoreTgpstk__SP3Header_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__vectorTstd__string_std__allocatorTstd__string_t_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("std::vector<std::string,std::allocator<std::string > >");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    (arg1)->loadFiles((std::vector<std::string,std::allocator<std::string > > const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FileStore_SP3Header_size(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::FileStore<SP3Header > *arg1 = (gpstk::FileStore<SP3Header > *) 0 ;
    unsigned int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:FileStore_SP3Header_size",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__FileStoreTgpstk__SP3Header_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (unsigned int)((gpstk::FileStore<SP3Header > const *)arg1)->size();
    
    {
        resultobj = SWIG_From_unsigned_SS_int((unsigned int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject * FileStore_SP3Header_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_gpstk__FileStoreTgpstk__SP3Header_t, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_RinexEphemerisStore(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexEphemerisStore *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_RinexEphemerisStore")) goto fail;
    result = (gpstk::RinexEphemerisStore *)new gpstk::RinexEphemerisStore();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__RinexEphemerisStore, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_RinexEphemerisStore(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexEphemerisStore *arg1 = (gpstk::RinexEphemerisStore *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_RinexEphemerisStore",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexEphemerisStore, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexEphemerisStore_dump__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexEphemerisStore *arg1 = (gpstk::RinexEphemerisStore *) 0 ;
    short arg2 ;
    std::ostream *arg3 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:RinexEphemerisStore_dump",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexEphemerisStore, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (short)(SWIG_As_short(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (arg3 == NULL) {
            SWIG_null_ref("std::ostream");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    ((gpstk::RinexEphemerisStore const *)arg1)->dump(arg2,*arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexEphemerisStore_dump__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexEphemerisStore *arg1 = (gpstk::RinexEphemerisStore *) 0 ;
    short arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RinexEphemerisStore_dump",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexEphemerisStore, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (short)(SWIG_As_short(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    ((gpstk::RinexEphemerisStore const *)arg1)->dump(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexEphemerisStore_dump__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexEphemerisStore *arg1 = (gpstk::RinexEphemerisStore *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RinexEphemerisStore_dump",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexEphemerisStore, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    ((gpstk::RinexEphemerisStore const *)arg1)->dump();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexEphemerisStore_dump(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[4];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_gpstk__RinexEphemerisStore, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_RinexEphemerisStore_dump__SWIG_2(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_gpstk__RinexEphemerisStore, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_short(argv[1]);
            if (_v) {
                return _wrap_RinexEphemerisStore_dump__SWIG_1(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_gpstk__RinexEphemerisStore, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_short(argv[1]);
            if (_v) {
                {
                    void *ptr = 0;
                    if (SWIG_ConvertPtr(argv[2], &ptr, SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0) == -1) {
                        _v = 0;
                        PyErr_Clear();
                    } else {
                        _v = (ptr != 0);
                    }
                }
                if (_v) {
                    return _wrap_RinexEphemerisStore_dump__SWIG_0(self,args);
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'RinexEphemerisStore_dump'");
    return NULL;
}


static PyObject *_wrap_RinexEphemerisStore_loadFile(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexEphemerisStore *arg1 = (gpstk::RinexEphemerisStore *) 0 ;
    std::string *arg2 = 0 ;
    int res2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RinexEphemerisStore_loadFile",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexEphemerisStore, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        std::string *ptr = (std::string *)0;
        res2 = SWIG_AsPtr_std_string(obj1, &ptr);
        if (!res2) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj1);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = ptr;
    }
    try {
        (arg1)->loadFile((std::string const &)*arg2);
    }
    catch(gpstk::FileMissingException &_e) {
        {
            gpstk::FileMissingException * temp = new gpstk::FileMissingException(_e);
            if (SWIGTYPE_p_gpstk__FileMissingException->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_gpstk__FileMissingException->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__FileMissingException,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"gpstk::FileMissingException");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__FileMissingException,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    Py_INCREF(Py_None); resultobj = Py_None;
    if (res2 == SWIG_NEWOBJ) delete arg2;
    return resultobj;
    fail:
    if (res2 == SWIG_NEWOBJ) delete arg2;
    return NULL;
}


static PyObject * RinexEphemerisStore_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_gpstk__RinexEphemerisStore, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_SP3EphemerisStore(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::SP3EphemerisStore *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_SP3EphemerisStore")) goto fail;
    result = (gpstk::SP3EphemerisStore *)new gpstk::SP3EphemerisStore();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__SP3EphemerisStore, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_SP3EphemerisStore(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::SP3EphemerisStore *arg1 = (gpstk::SP3EphemerisStore *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_SP3EphemerisStore",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__SP3EphemerisStore, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SP3EphemerisStore_dump__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::SP3EphemerisStore *arg1 = (gpstk::SP3EphemerisStore *) 0 ;
    short arg2 ;
    std::ostream *arg3 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:SP3EphemerisStore_dump",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__SP3EphemerisStore, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (short)(SWIG_As_short(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (arg3 == NULL) {
            SWIG_null_ref("std::ostream");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    ((gpstk::SP3EphemerisStore const *)arg1)->dump(arg2,*arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SP3EphemerisStore_dump__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::SP3EphemerisStore *arg1 = (gpstk::SP3EphemerisStore *) 0 ;
    short arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:SP3EphemerisStore_dump",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__SP3EphemerisStore, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (short)(SWIG_As_short(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    ((gpstk::SP3EphemerisStore const *)arg1)->dump(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SP3EphemerisStore_dump__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::SP3EphemerisStore *arg1 = (gpstk::SP3EphemerisStore *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:SP3EphemerisStore_dump",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__SP3EphemerisStore, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    ((gpstk::SP3EphemerisStore const *)arg1)->dump();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SP3EphemerisStore_dump(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[4];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_gpstk__SP3EphemerisStore, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_SP3EphemerisStore_dump__SWIG_2(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_gpstk__SP3EphemerisStore, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_short(argv[1]);
            if (_v) {
                return _wrap_SP3EphemerisStore_dump__SWIG_1(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_gpstk__SP3EphemerisStore, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_short(argv[1]);
            if (_v) {
                {
                    void *ptr = 0;
                    if (SWIG_ConvertPtr(argv[2], &ptr, SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0) == -1) {
                        _v = 0;
                        PyErr_Clear();
                    } else {
                        _v = (ptr != 0);
                    }
                }
                if (_v) {
                    return _wrap_SP3EphemerisStore_dump__SWIG_0(self,args);
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'SP3EphemerisStore_dump'");
    return NULL;
}


static PyObject *_wrap_SP3EphemerisStore_loadFile(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::SP3EphemerisStore *arg1 = (gpstk::SP3EphemerisStore *) 0 ;
    std::string *arg2 = 0 ;
    int res2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:SP3EphemerisStore_loadFile",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__SP3EphemerisStore, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        std::string *ptr = (std::string *)0;
        res2 = SWIG_AsPtr_std_string(obj1, &ptr);
        if (!res2) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj1);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = ptr;
    }
    try {
        (arg1)->loadFile((std::string const &)*arg2);
    }
    catch(gpstk::FileMissingException &_e) {
        {
            gpstk::FileMissingException * temp = new gpstk::FileMissingException(_e);
            if (SWIGTYPE_p_gpstk__FileMissingException->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_gpstk__FileMissingException->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__FileMissingException,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"gpstk::FileMissingException");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__FileMissingException,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    Py_INCREF(Py_None); resultobj = Py_None;
    if (res2 == SWIG_NEWOBJ) delete arg2;
    return resultobj;
    fail:
    if (res2 == SWIG_NEWOBJ) delete arg2;
    return NULL;
}


static PyObject * SP3EphemerisStore_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_gpstk__SP3EphemerisStore, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_FileHunterException__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::FileHunterException *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_FileHunterException")) goto fail;
    result = (gpstk::FileHunterException *)new gpstk::FileHunterException();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__FileHunterException, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_FileHunterException__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::FileHunterException *arg1 = 0 ;
    gpstk::FileHunterException *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_FileHunterException",&obj0)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__FileHunterException, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("gpstk::FileHunterException");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    result = (gpstk::FileHunterException *)new gpstk::FileHunterException((gpstk::FileHunterException const &)*arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__FileHunterException, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_FileHunterException__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::Exception *arg1 = 0 ;
    gpstk::FileHunterException *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_FileHunterException",&obj0)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__Exception, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("gpstk::Exception");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    result = (gpstk::FileHunterException *)new gpstk::FileHunterException((gpstk::Exception const &)*arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__FileHunterException, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_FileHunterException__SWIG_3(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::string arg1 ;
    unsigned long arg2 ;
    gpstk::Exception::Severity arg3 ;
    gpstk::FileHunterException *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:new_FileHunterException",&obj0,&obj1,&obj2)) goto fail;
    {
        std::string *ptr = (std::string *)0;
        int res = SWIG_AsPtr_std_string(obj0, &ptr);
        if (!res) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj0);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    {
        arg2 = (unsigned long)(SWIG_As_unsigned_SS_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (gpstk::Exception::Severity)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    result = (gpstk::FileHunterException *)new gpstk::FileHunterException(arg1,arg2,arg3);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__FileHunterException, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_FileHunterException__SWIG_4(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::string arg1 ;
    unsigned long arg2 ;
    gpstk::FileHunterException *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:new_FileHunterException",&obj0,&obj1)) goto fail;
    {
        std::string *ptr = (std::string *)0;
        int res = SWIG_AsPtr_std_string(obj0, &ptr);
        if (!res) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj0);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    {
        arg2 = (unsigned long)(SWIG_As_unsigned_SS_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (gpstk::FileHunterException *)new gpstk::FileHunterException(arg1,arg2);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__FileHunterException, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_FileHunterException__SWIG_5(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::string arg1 ;
    gpstk::FileHunterException *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_FileHunterException",&obj0)) goto fail;
    {
        std::string *ptr = (std::string *)0;
        int res = SWIG_AsPtr_std_string(obj0, &ptr);
        if (!res) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj0);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    result = (gpstk::FileHunterException *)new gpstk::FileHunterException(arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__FileHunterException, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_FileHunterException(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[4];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_new_FileHunterException__SWIG_0(self,args);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_gpstk__FileHunterException, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            return _wrap_new_FileHunterException__SWIG_1(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_gpstk__Exception, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            return _wrap_new_FileHunterException__SWIG_2(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        _v = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
        if (_v) {
            return _wrap_new_FileHunterException__SWIG_5(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        _v = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
        if (_v) {
            _v = SWIG_Check_unsigned_SS_long(argv[1]);
            if (_v) {
                return _wrap_new_FileHunterException__SWIG_4(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        _v = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
        if (_v) {
            _v = SWIG_Check_unsigned_SS_long(argv[1]);
            if (_v) {
                _v = SWIG_Check_int(argv[2]);
                if (_v) {
                    return _wrap_new_FileHunterException__SWIG_3(self,args);
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'new_FileHunterException'");
    return NULL;
}


static PyObject *_wrap_delete_FileHunterException(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::FileHunterException *arg1 = (gpstk::FileHunterException *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_FileHunterException",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__FileHunterException, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FileHunterException_getName(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::FileHunterException *arg1 = (gpstk::FileHunterException *) 0 ;
    std::string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:FileHunterException_getName",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__FileHunterException, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = ((gpstk::FileHunterException const *)arg1)->getName();
    
    {
        resultobj = SWIG_From_std_string((std::string)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FileHunterException_class_operator_assignment(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::FileHunterException *arg1 = (gpstk::FileHunterException *) 0 ;
    gpstk::FileHunterException *arg2 = 0 ;
    gpstk::FileHunterException *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:FileHunterException_class_operator_assignment",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__FileHunterException, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_gpstk__FileHunterException, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("gpstk::FileHunterException");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        gpstk::FileHunterException &_result_ref = (arg1)->operator =((gpstk::FileHunterException const &)*arg2);
        result = (gpstk::FileHunterException *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__FileHunterException, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_streamRead__SWIG_8(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::ostream *arg1 = 0 ;
    gpstk::FileHunterException *arg2 = 0 ;
    std::ostream *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:streamRead",&obj0,&obj1)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("std::ostream");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_gpstk__FileHunterException, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("gpstk::FileHunterException");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        std::ostream &_result_ref = operator <<(*arg1,(gpstk::FileHunterException const &)*arg2);
        result = (std::ostream *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject * FileHunterException_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_gpstk__FileHunterException, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_FileHunter__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::string *arg1 = 0 ;
    gpstk::FileHunter *result;
    int res1 = 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_FileHunter",&obj0)) goto fail;
    {
        std::string *ptr = (std::string *)0;
        res1 = SWIG_AsPtr_std_string(obj0, &ptr);
        if (!res1) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj0);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = ptr;
    }
    try {
        result = (gpstk::FileHunter *)new gpstk::FileHunter((std::string const &)*arg1);
    }
    catch(gpstk::FileHunterException &_e) {
        {
            gpstk::FileHunterException * temp = new gpstk::FileHunterException(_e);
            if (SWIGTYPE_p_gpstk__FileHunterException->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_gpstk__FileHunterException->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__FileHunterException,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"gpstk::FileHunterException");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__FileHunterException,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__FileHunter, 1);
    if (res1 == SWIG_NEWOBJ) delete arg1;
    return resultobj;
    fail:
    if (res1 == SWIG_NEWOBJ) delete arg1;
    return NULL;
}


static PyObject *_wrap_new_FileHunter__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    FileSpec *arg1 = 0 ;
    gpstk::FileHunter *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_FileHunter",&obj0)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_FileSpec, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("FileSpec");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    try {
        result = (gpstk::FileHunter *)new gpstk::FileHunter((FileSpec const &)*arg1);
    }
    catch(gpstk::FileHunterException &_e) {
        {
            gpstk::FileHunterException * temp = new gpstk::FileHunterException(_e);
            if (SWIGTYPE_p_gpstk__FileHunterException->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_gpstk__FileHunterException->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__FileHunterException,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"gpstk::FileHunterException");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__FileHunterException,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__FileHunter, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_FileHunter(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[2];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 1); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_FileSpec, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            return _wrap_new_FileHunter__SWIG_1(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        _v = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
        if (_v) {
            return _wrap_new_FileHunter__SWIG_0(self,args);
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'new_FileHunter'");
    return NULL;
}


static PyObject *_wrap_FileHunter_newHunt__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::FileHunter *arg1 = (gpstk::FileHunter *) 0 ;
    std::string *arg2 = 0 ;
    gpstk::FileHunter *result;
    int res2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:FileHunter_newHunt",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__FileHunter, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        std::string *ptr = (std::string *)0;
        res2 = SWIG_AsPtr_std_string(obj1, &ptr);
        if (!res2) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj1);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = ptr;
    }
    try {
        {
            gpstk::FileHunter &_result_ref = (arg1)->newHunt((std::string const &)*arg2);
            result = (gpstk::FileHunter *) &_result_ref;
        }
    }
    catch(gpstk::FileHunterException &_e) {
        {
            gpstk::FileHunterException * temp = new gpstk::FileHunterException(_e);
            if (SWIGTYPE_p_gpstk__FileHunterException->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_gpstk__FileHunterException->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__FileHunterException,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"gpstk::FileHunterException");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__FileHunterException,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__FileHunter, 0);
    if (res2 == SWIG_NEWOBJ) delete arg2;
    return resultobj;
    fail:
    if (res2 == SWIG_NEWOBJ) delete arg2;
    return NULL;
}


static PyObject *_wrap_FileHunter_newHunt__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::FileHunter *arg1 = (gpstk::FileHunter *) 0 ;
    FileSpec *arg2 = 0 ;
    gpstk::FileHunter *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:FileHunter_newHunt",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__FileHunter, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_FileSpec, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("FileSpec");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        {
            gpstk::FileHunter &_result_ref = (arg1)->newHunt((FileSpec const &)*arg2);
            result = (gpstk::FileHunter *) &_result_ref;
        }
    }
    catch(gpstk::FileHunterException &_e) {
        {
            gpstk::FileHunterException * temp = new gpstk::FileHunterException(_e);
            if (SWIGTYPE_p_gpstk__FileHunterException->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_gpstk__FileHunterException->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__FileHunterException,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"gpstk::FileHunterException");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__FileHunterException,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__FileHunter, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FileHunter_newHunt(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_gpstk__FileHunter, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_FileSpec, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_FileHunter_newHunt__SWIG_1(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_gpstk__FileHunter, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
            if (_v) {
                return _wrap_FileHunter_newHunt__SWIG_0(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'FileHunter_newHunt'");
    return NULL;
}


static PyObject *_wrap_FileHunter_setFilter(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::FileHunter *arg1 = (gpstk::FileHunter *) 0 ;
    FileSpec::FileSpecType arg2 ;
    std::vector<std::string,std::allocator<std::string > > *arg3 = 0 ;
    gpstk::FileHunter *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:FileHunter_setFilter",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__FileHunter, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        FileSpec::FileSpecType * argp;
        SWIG_Python_ConvertPtr(obj1, (void **)&argp, SWIGTYPE_p_FileSpec__FileSpecType, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("FileSpec::FileSpecType");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *argp;
    }
    {
        SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_std__vectorTstd__string_std__allocatorTstd__string_t_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (arg3 == NULL) {
            SWIG_null_ref("std::vector<std::string,std::allocator<std::string > >");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    try {
        {
            gpstk::FileHunter &_result_ref = (arg1)->setFilter(arg2,(std::vector<std::string,std::allocator<std::string > > const &)*arg3);
            result = (gpstk::FileHunter *) &_result_ref;
        }
    }
    catch(gpstk::FileHunterException &_e) {
        {
            gpstk::FileHunterException * temp = new gpstk::FileHunterException(_e);
            if (SWIGTYPE_p_gpstk__FileHunterException->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_gpstk__FileHunterException->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__FileHunterException,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"gpstk::FileHunterException");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__FileHunterException,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__FileHunter, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FileHunter_find__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::FileHunter *arg1 = (gpstk::FileHunter *) 0 ;
    gpstk::DayTime *arg2 = 0 ;
    gpstk::DayTime *arg3 = 0 ;
    FileSpec::FileSpecSortType arg4 ;
    enum gpstk::FileHunter::FileChunking arg5 ;
    SwigValueWrapper<std::vector<std::string,std::allocator<std::string > > > result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOO:FileHunter_find",&obj0,&obj1,&obj2,&obj3,&obj4)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__FileHunter, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_gpstk__DayTime, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("gpstk::DayTime");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_gpstk__DayTime, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (arg3 == NULL) {
            SWIG_null_ref("gpstk::DayTime");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        FileSpec::FileSpecSortType * argp;
        SWIG_Python_ConvertPtr(obj3, (void **)&argp, SWIGTYPE_p_FileSpec__FileSpecSortType, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(4)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("FileSpec::FileSpecSortType");
        }
        if (SWIG_arg_fail(4)) SWIG_fail;
        arg4 = *argp;
    }
    {
        arg5 = (enum gpstk::FileHunter::FileChunking)(SWIG_As_int(obj4)); 
        if (SWIG_arg_fail(5)) SWIG_fail;
    }
    try {
        result = ((gpstk::FileHunter const *)arg1)->find((gpstk::DayTime const &)*arg2,(gpstk::DayTime const &)*arg3,arg4,arg5);
    }
    catch(gpstk::FileHunterException &_e) {
        {
            gpstk::FileHunterException * temp = new gpstk::FileHunterException(_e);
            if (SWIGTYPE_p_gpstk__FileHunterException->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_gpstk__FileHunterException->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__FileHunterException,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"gpstk::FileHunterException");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__FileHunterException,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    {
        std::vector<std::string,std::allocator<std::string > > * resultptr;
        resultptr = new std::vector<std::string,std::allocator<std::string > >((std::vector<std::string,std::allocator<std::string > > &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_std__vectorTstd__string_std__allocatorTstd__string_t_t, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FileHunter_find__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::FileHunter *arg1 = (gpstk::FileHunter *) 0 ;
    gpstk::DayTime *arg2 = 0 ;
    gpstk::DayTime *arg3 = 0 ;
    FileSpec::FileSpecSortType arg4 ;
    SwigValueWrapper<std::vector<std::string,std::allocator<std::string > > > result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:FileHunter_find",&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__FileHunter, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_gpstk__DayTime, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("gpstk::DayTime");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_gpstk__DayTime, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (arg3 == NULL) {
            SWIG_null_ref("gpstk::DayTime");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        FileSpec::FileSpecSortType * argp;
        SWIG_Python_ConvertPtr(obj3, (void **)&argp, SWIGTYPE_p_FileSpec__FileSpecSortType, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(4)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("FileSpec::FileSpecSortType");
        }
        if (SWIG_arg_fail(4)) SWIG_fail;
        arg4 = *argp;
    }
    try {
        result = ((gpstk::FileHunter const *)arg1)->find((gpstk::DayTime const &)*arg2,(gpstk::DayTime const &)*arg3,arg4);
    }
    catch(gpstk::FileHunterException &_e) {
        {
            gpstk::FileHunterException * temp = new gpstk::FileHunterException(_e);
            if (SWIGTYPE_p_gpstk__FileHunterException->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_gpstk__FileHunterException->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__FileHunterException,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"gpstk::FileHunterException");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__FileHunterException,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    {
        std::vector<std::string,std::allocator<std::string > > * resultptr;
        resultptr = new std::vector<std::string,std::allocator<std::string > >((std::vector<std::string,std::allocator<std::string > > &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_std__vectorTstd__string_std__allocatorTstd__string_t_t, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FileHunter_find__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::FileHunter *arg1 = (gpstk::FileHunter *) 0 ;
    gpstk::DayTime *arg2 = 0 ;
    gpstk::DayTime *arg3 = 0 ;
    SwigValueWrapper<std::vector<std::string,std::allocator<std::string > > > result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:FileHunter_find",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__FileHunter, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_gpstk__DayTime, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("gpstk::DayTime");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_gpstk__DayTime, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (arg3 == NULL) {
            SWIG_null_ref("gpstk::DayTime");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    try {
        result = ((gpstk::FileHunter const *)arg1)->find((gpstk::DayTime const &)*arg2,(gpstk::DayTime const &)*arg3);
    }
    catch(gpstk::FileHunterException &_e) {
        {
            gpstk::FileHunterException * temp = new gpstk::FileHunterException(_e);
            if (SWIGTYPE_p_gpstk__FileHunterException->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_gpstk__FileHunterException->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__FileHunterException,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"gpstk::FileHunterException");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__FileHunterException,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    {
        std::vector<std::string,std::allocator<std::string > > * resultptr;
        resultptr = new std::vector<std::string,std::allocator<std::string > >((std::vector<std::string,std::allocator<std::string > > &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_std__vectorTstd__string_std__allocatorTstd__string_t_t, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FileHunter_find__SWIG_3(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::FileHunter *arg1 = (gpstk::FileHunter *) 0 ;
    gpstk::DayTime *arg2 = 0 ;
    SwigValueWrapper<std::vector<std::string,std::allocator<std::string > > > result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:FileHunter_find",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__FileHunter, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_gpstk__DayTime, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("gpstk::DayTime");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        result = ((gpstk::FileHunter const *)arg1)->find((gpstk::DayTime const &)*arg2);
    }
    catch(gpstk::FileHunterException &_e) {
        {
            gpstk::FileHunterException * temp = new gpstk::FileHunterException(_e);
            if (SWIGTYPE_p_gpstk__FileHunterException->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_gpstk__FileHunterException->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__FileHunterException,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"gpstk::FileHunterException");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__FileHunterException,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    {
        std::vector<std::string,std::allocator<std::string > > * resultptr;
        resultptr = new std::vector<std::string,std::allocator<std::string > >((std::vector<std::string,std::allocator<std::string > > &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_std__vectorTstd__string_std__allocatorTstd__string_t_t, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FileHunter_find__SWIG_4(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::FileHunter *arg1 = (gpstk::FileHunter *) 0 ;
    SwigValueWrapper<std::vector<std::string,std::allocator<std::string > > > result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:FileHunter_find",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__FileHunter, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        result = ((gpstk::FileHunter const *)arg1)->find();
    }
    catch(gpstk::FileHunterException &_e) {
        {
            gpstk::FileHunterException * temp = new gpstk::FileHunterException(_e);
            if (SWIGTYPE_p_gpstk__FileHunterException->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_gpstk__FileHunterException->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__FileHunterException,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"gpstk::FileHunterException");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__FileHunterException,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    {
        std::vector<std::string,std::allocator<std::string > > * resultptr;
        resultptr = new std::vector<std::string,std::allocator<std::string > >((std::vector<std::string,std::allocator<std::string > > &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_std__vectorTstd__string_std__allocatorTstd__string_t_t, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FileHunter_find(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[6];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 5); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_gpstk__FileHunter, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_FileHunter_find__SWIG_4(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_gpstk__FileHunter, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_gpstk__DayTime, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_FileHunter_find__SWIG_3(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_gpstk__FileHunter, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_gpstk__DayTime, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                {
                    void *ptr = 0;
                    if (SWIG_ConvertPtr(argv[2], &ptr, SWIGTYPE_p_gpstk__DayTime, 0) == -1) {
                        _v = 0;
                        PyErr_Clear();
                    } else {
                        _v = (ptr != 0);
                    }
                }
                if (_v) {
                    return _wrap_FileHunter_find__SWIG_2(self,args);
                }
            }
        }
    }
    if (argc == 4) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_gpstk__FileHunter, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_gpstk__DayTime, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                {
                    void *ptr = 0;
                    if (SWIG_ConvertPtr(argv[2], &ptr, SWIGTYPE_p_gpstk__DayTime, 0) == -1) {
                        _v = 0;
                        PyErr_Clear();
                    } else {
                        _v = (ptr != 0);
                    }
                }
                if (_v) {
                    {
                        void *ptr = 0;
                        if (SWIG_ConvertPtr(argv[3], &ptr, SWIGTYPE_p_FileSpec__FileSpecSortType, 0) == -1) {
                            _v = 0;
                            PyErr_Clear();
                        } else {
                            _v = (ptr != 0);
                        }
                    }
                    if (_v) {
                        return _wrap_FileHunter_find__SWIG_1(self,args);
                    }
                }
            }
        }
    }
    if (argc == 5) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_gpstk__FileHunter, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_gpstk__DayTime, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                {
                    void *ptr = 0;
                    if (SWIG_ConvertPtr(argv[2], &ptr, SWIGTYPE_p_gpstk__DayTime, 0) == -1) {
                        _v = 0;
                        PyErr_Clear();
                    } else {
                        _v = (ptr != 0);
                    }
                }
                if (_v) {
                    {
                        void *ptr = 0;
                        if (SWIG_ConvertPtr(argv[3], &ptr, SWIGTYPE_p_FileSpec__FileSpecSortType, 0) == -1) {
                            _v = 0;
                            PyErr_Clear();
                        } else {
                            _v = (ptr != 0);
                        }
                    }
                    if (_v) {
                        _v = SWIG_Check_int(argv[4]);
                        if (_v) {
                            return _wrap_FileHunter_find__SWIG_0(self,args);
                        }
                    }
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'FileHunter_find'");
    return NULL;
}


static PyObject *_wrap_FileHunter_dump(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::FileHunter *arg1 = (gpstk::FileHunter *) 0 ;
    std::ostream *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:FileHunter_dump",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__FileHunter, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("std::ostream");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    ((gpstk::FileHunter const *)arg1)->dump(*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_FileHunter(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::FileHunter *arg1 = (gpstk::FileHunter *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_FileHunter",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__FileHunter, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * FileHunter_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_gpstk__FileHunter, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_FICStream__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::FICStream *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_FICStream")) goto fail;
    result = (gpstk::FICStream *)new gpstk::FICStream();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__FICStream, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_FICStream__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    char *arg1 = (char *) 0 ;
    std::ios::openmode arg2 ;
    gpstk::FICStream *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:new_FICStream",&obj0,&obj1)) goto fail;
    if (!SWIG_AsCharPtr(obj0, (char**)&arg1)) {
        SWIG_arg_fail(1);SWIG_fail;
    }
    {
        std::ios::openmode * argp;
        SWIG_Python_ConvertPtr(obj1, (void **)&argp, SWIGTYPE_p_std__ios__openmode, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("std::ios::openmode");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *argp;
    }
    result = (gpstk::FICStream *)new gpstk::FICStream((char const *)arg1,arg2);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__FICStream, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_FICStream__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    char *arg1 = (char *) 0 ;
    gpstk::FICStream *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_FICStream",&obj0)) goto fail;
    if (!SWIG_AsCharPtr(obj0, (char**)&arg1)) {
        SWIG_arg_fail(1);SWIG_fail;
    }
    result = (gpstk::FICStream *)new gpstk::FICStream((char const *)arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__FICStream, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_FICStream(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_new_FICStream__SWIG_0(self,args);
    }
    if (argc == 1) {
        int _v;
        _v = SWIG_AsCharPtr(argv[0], (char **)(0));
        if (_v) {
            return _wrap_new_FICStream__SWIG_2(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        _v = SWIG_AsCharPtr(argv[0], (char **)(0));
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_std__ios__openmode, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_new_FICStream__SWIG_1(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'new_FICStream'");
    return NULL;
}


static PyObject *_wrap_delete_FICStream(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::FICStream *arg1 = (gpstk::FICStream *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_FICStream",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__FICStream, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FICStream_open(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::FICStream *arg1 = (gpstk::FICStream *) 0 ;
    char *arg2 = (char *) 0 ;
    std::ios::openmode arg3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:FICStream_open",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__FICStream, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    if (!SWIG_AsCharPtr(obj1, (char**)&arg2)) {
        SWIG_arg_fail(2);SWIG_fail;
    }
    {
        std::ios::openmode * argp;
        SWIG_Python_ConvertPtr(obj2, (void **)&argp, SWIGTYPE_p_std__ios__openmode, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("std::ios::openmode");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
        arg3 = *argp;
    }
    (arg1)->open((char const *)arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * FICStream_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_gpstk__FICStream, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_FICAStream__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::FICAStream *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_FICAStream")) goto fail;
    result = (gpstk::FICAStream *)new gpstk::FICAStream();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__FICAStream, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_FICAStream__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    char *arg1 = (char *) 0 ;
    std::ios::openmode arg2 ;
    gpstk::FICAStream *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:new_FICAStream",&obj0,&obj1)) goto fail;
    if (!SWIG_AsCharPtr(obj0, (char**)&arg1)) {
        SWIG_arg_fail(1);SWIG_fail;
    }
    {
        std::ios::openmode * argp;
        SWIG_Python_ConvertPtr(obj1, (void **)&argp, SWIGTYPE_p_std__ios__openmode, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("std::ios::openmode");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *argp;
    }
    result = (gpstk::FICAStream *)new gpstk::FICAStream((char const *)arg1,arg2);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__FICAStream, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_FICAStream__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    char *arg1 = (char *) 0 ;
    gpstk::FICAStream *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_FICAStream",&obj0)) goto fail;
    if (!SWIG_AsCharPtr(obj0, (char**)&arg1)) {
        SWIG_arg_fail(1);SWIG_fail;
    }
    result = (gpstk::FICAStream *)new gpstk::FICAStream((char const *)arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__FICAStream, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_FICAStream(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_new_FICAStream__SWIG_0(self,args);
    }
    if (argc == 1) {
        int _v;
        _v = SWIG_AsCharPtr(argv[0], (char **)(0));
        if (_v) {
            return _wrap_new_FICAStream__SWIG_2(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        _v = SWIG_AsCharPtr(argv[0], (char **)(0));
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_std__ios__openmode, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_new_FICAStream__SWIG_1(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'new_FICAStream'");
    return NULL;
}


static PyObject *_wrap_delete_FICAStream(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::FICAStream *arg1 = (gpstk::FICAStream *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_FICAStream",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__FICAStream, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FICAStream_open(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::FICAStream *arg1 = (gpstk::FICAStream *) 0 ;
    char *arg2 = (char *) 0 ;
    std::ios::openmode arg3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:FICAStream_open",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__FICAStream, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    if (!SWIG_AsCharPtr(obj1, (char**)&arg2)) {
        SWIG_arg_fail(2);SWIG_fail;
    }
    {
        std::ios::openmode * argp;
        SWIG_Python_ConvertPtr(obj2, (void **)&argp, SWIGTYPE_p_std__ios__openmode, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("std::ios::openmode");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
        arg3 = *argp;
    }
    (arg1)->open((char const *)arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * FICAStream_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_gpstk__FICAStream, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_MSCStream__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::MSCStream *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_MSCStream")) goto fail;
    result = (gpstk::MSCStream *)new gpstk::MSCStream();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__MSCStream, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_MSCStream__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    char *arg1 = (char *) 0 ;
    std::ios::openmode arg2 ;
    gpstk::MSCStream *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:new_MSCStream",&obj0,&obj1)) goto fail;
    if (!SWIG_AsCharPtr(obj0, (char**)&arg1)) {
        SWIG_arg_fail(1);SWIG_fail;
    }
    {
        std::ios::openmode * argp;
        SWIG_Python_ConvertPtr(obj1, (void **)&argp, SWIGTYPE_p_std__ios__openmode, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("std::ios::openmode");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *argp;
    }
    result = (gpstk::MSCStream *)new gpstk::MSCStream((char const *)arg1,arg2);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__MSCStream, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_MSCStream__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    char *arg1 = (char *) 0 ;
    gpstk::MSCStream *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_MSCStream",&obj0)) goto fail;
    if (!SWIG_AsCharPtr(obj0, (char**)&arg1)) {
        SWIG_arg_fail(1);SWIG_fail;
    }
    result = (gpstk::MSCStream *)new gpstk::MSCStream((char const *)arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__MSCStream, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_MSCStream(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_new_MSCStream__SWIG_0(self,args);
    }
    if (argc == 1) {
        int _v;
        _v = SWIG_AsCharPtr(argv[0], (char **)(0));
        if (_v) {
            return _wrap_new_MSCStream__SWIG_2(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        _v = SWIG_AsCharPtr(argv[0], (char **)(0));
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_std__ios__openmode, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_new_MSCStream__SWIG_1(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'new_MSCStream'");
    return NULL;
}


static PyObject *_wrap_delete_MSCStream(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::MSCStream *arg1 = (gpstk::MSCStream *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_MSCStream",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__MSCStream, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * MSCStream_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_gpstk__MSCStream, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_RinexMetStream__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexMetStream *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_RinexMetStream")) goto fail;
    result = (gpstk::RinexMetStream *)new gpstk::RinexMetStream();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__RinexMetStream, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_RinexMetStream__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    char *arg1 = (char *) 0 ;
    std::ios::openmode arg2 ;
    gpstk::RinexMetStream *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:new_RinexMetStream",&obj0,&obj1)) goto fail;
    if (!SWIG_AsCharPtr(obj0, (char**)&arg1)) {
        SWIG_arg_fail(1);SWIG_fail;
    }
    {
        std::ios::openmode * argp;
        SWIG_Python_ConvertPtr(obj1, (void **)&argp, SWIGTYPE_p_std__ios__openmode, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("std::ios::openmode");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *argp;
    }
    result = (gpstk::RinexMetStream *)new gpstk::RinexMetStream((char const *)arg1,arg2);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__RinexMetStream, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_RinexMetStream__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    char *arg1 = (char *) 0 ;
    gpstk::RinexMetStream *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_RinexMetStream",&obj0)) goto fail;
    if (!SWIG_AsCharPtr(obj0, (char**)&arg1)) {
        SWIG_arg_fail(1);SWIG_fail;
    }
    result = (gpstk::RinexMetStream *)new gpstk::RinexMetStream((char const *)arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__RinexMetStream, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_RinexMetStream(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_new_RinexMetStream__SWIG_0(self,args);
    }
    if (argc == 1) {
        int _v;
        _v = SWIG_AsCharPtr(argv[0], (char **)(0));
        if (_v) {
            return _wrap_new_RinexMetStream__SWIG_2(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        _v = SWIG_AsCharPtr(argv[0], (char **)(0));
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_std__ios__openmode, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_new_RinexMetStream__SWIG_1(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'new_RinexMetStream'");
    return NULL;
}


static PyObject *_wrap_delete_RinexMetStream(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexMetStream *arg1 = (gpstk::RinexMetStream *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_RinexMetStream",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexMetStream, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexMetStream_open(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexMetStream *arg1 = (gpstk::RinexMetStream *) 0 ;
    char *arg2 = (char *) 0 ;
    std::ios::openmode arg3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:RinexMetStream_open",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexMetStream, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    if (!SWIG_AsCharPtr(obj1, (char**)&arg2)) {
        SWIG_arg_fail(2);SWIG_fail;
    }
    {
        std::ios::openmode * argp;
        SWIG_Python_ConvertPtr(obj2, (void **)&argp, SWIGTYPE_p_std__ios__openmode, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("std::ios::openmode");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
        arg3 = *argp;
    }
    (arg1)->open((char const *)arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexMetStream_header_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexMetStream *arg1 = (gpstk::RinexMetStream *) 0 ;
    RinexMetHeader *arg2 = (RinexMetHeader *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RinexMetStream_header_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexMetStream, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_gpstk__RinexMetHeader, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->header = *arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexMetStream_header_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexMetStream *arg1 = (gpstk::RinexMetStream *) 0 ;
    RinexMetHeader *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RinexMetStream_header_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexMetStream, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (RinexMetHeader *)& ((arg1)->header);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__RinexMetHeader, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexMetStream_headerRead_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexMetStream *arg1 = (gpstk::RinexMetStream *) 0 ;
    bool arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RinexMetStream_headerRead_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexMetStream, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (bool)(SWIG_As_bool(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->headerRead = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexMetStream_headerRead_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexMetStream *arg1 = (gpstk::RinexMetStream *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RinexMetStream_headerRead_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexMetStream, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool) ((arg1)->headerRead);
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject * RinexMetStream_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_gpstk__RinexMetStream, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_RinexNavStream__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexNavStream *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_RinexNavStream")) goto fail;
    result = (gpstk::RinexNavStream *)new gpstk::RinexNavStream();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__RinexNavStream, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_RinexNavStream__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    char *arg1 = (char *) 0 ;
    std::ios::openmode arg2 ;
    gpstk::RinexNavStream *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:new_RinexNavStream",&obj0,&obj1)) goto fail;
    if (!SWIG_AsCharPtr(obj0, (char**)&arg1)) {
        SWIG_arg_fail(1);SWIG_fail;
    }
    {
        std::ios::openmode * argp;
        SWIG_Python_ConvertPtr(obj1, (void **)&argp, SWIGTYPE_p_std__ios__openmode, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("std::ios::openmode");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *argp;
    }
    result = (gpstk::RinexNavStream *)new gpstk::RinexNavStream((char const *)arg1,arg2);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__RinexNavStream, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_RinexNavStream__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    char *arg1 = (char *) 0 ;
    gpstk::RinexNavStream *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_RinexNavStream",&obj0)) goto fail;
    if (!SWIG_AsCharPtr(obj0, (char**)&arg1)) {
        SWIG_arg_fail(1);SWIG_fail;
    }
    result = (gpstk::RinexNavStream *)new gpstk::RinexNavStream((char const *)arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__RinexNavStream, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_RinexNavStream(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_new_RinexNavStream__SWIG_0(self,args);
    }
    if (argc == 1) {
        int _v;
        _v = SWIG_AsCharPtr(argv[0], (char **)(0));
        if (_v) {
            return _wrap_new_RinexNavStream__SWIG_2(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        _v = SWIG_AsCharPtr(argv[0], (char **)(0));
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_std__ios__openmode, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_new_RinexNavStream__SWIG_1(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'new_RinexNavStream'");
    return NULL;
}


static PyObject *_wrap_delete_RinexNavStream(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexNavStream *arg1 = (gpstk::RinexNavStream *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_RinexNavStream",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexNavStream, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexNavStream_open(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexNavStream *arg1 = (gpstk::RinexNavStream *) 0 ;
    char *arg2 = (char *) 0 ;
    std::ios::openmode arg3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:RinexNavStream_open",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexNavStream, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    if (!SWIG_AsCharPtr(obj1, (char**)&arg2)) {
        SWIG_arg_fail(2);SWIG_fail;
    }
    {
        std::ios::openmode * argp;
        SWIG_Python_ConvertPtr(obj2, (void **)&argp, SWIGTYPE_p_std__ios__openmode, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("std::ios::openmode");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
        arg3 = *argp;
    }
    (arg1)->open((char const *)arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexNavStream_header_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexNavStream *arg1 = (gpstk::RinexNavStream *) 0 ;
    RinexNavHeader *arg2 = (RinexNavHeader *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RinexNavStream_header_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexNavStream, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_gpstk__RinexNavHeader, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->header = *arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexNavStream_header_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexNavStream *arg1 = (gpstk::RinexNavStream *) 0 ;
    RinexNavHeader *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RinexNavStream_header_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexNavStream, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (RinexNavHeader *)& ((arg1)->header);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__RinexNavHeader, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexNavStream_headerRead_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexNavStream *arg1 = (gpstk::RinexNavStream *) 0 ;
    bool arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RinexNavStream_headerRead_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexNavStream, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (bool)(SWIG_As_bool(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->headerRead = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexNavStream_headerRead_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexNavStream *arg1 = (gpstk::RinexNavStream *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RinexNavStream_headerRead_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexNavStream, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool) ((arg1)->headerRead);
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject * RinexNavStream_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_gpstk__RinexNavStream, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_SMODFStream__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::SMODFStream *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_SMODFStream")) goto fail;
    result = (gpstk::SMODFStream *)new gpstk::SMODFStream();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__SMODFStream, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_SMODFStream__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    char *arg1 = (char *) 0 ;
    std::ios::openmode arg2 ;
    gpstk::SMODFStream *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:new_SMODFStream",&obj0,&obj1)) goto fail;
    if (!SWIG_AsCharPtr(obj0, (char**)&arg1)) {
        SWIG_arg_fail(1);SWIG_fail;
    }
    {
        std::ios::openmode * argp;
        SWIG_Python_ConvertPtr(obj1, (void **)&argp, SWIGTYPE_p_std__ios__openmode, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("std::ios::openmode");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *argp;
    }
    result = (gpstk::SMODFStream *)new gpstk::SMODFStream((char const *)arg1,arg2);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__SMODFStream, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_SMODFStream__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    char *arg1 = (char *) 0 ;
    gpstk::SMODFStream *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_SMODFStream",&obj0)) goto fail;
    if (!SWIG_AsCharPtr(obj0, (char**)&arg1)) {
        SWIG_arg_fail(1);SWIG_fail;
    }
    result = (gpstk::SMODFStream *)new gpstk::SMODFStream((char const *)arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__SMODFStream, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_SMODFStream(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_new_SMODFStream__SWIG_0(self,args);
    }
    if (argc == 1) {
        int _v;
        _v = SWIG_AsCharPtr(argv[0], (char **)(0));
        if (_v) {
            return _wrap_new_SMODFStream__SWIG_2(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        _v = SWIG_AsCharPtr(argv[0], (char **)(0));
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_std__ios__openmode, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_new_SMODFStream__SWIG_1(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'new_SMODFStream'");
    return NULL;
}


static PyObject *_wrap_delete_SMODFStream(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::SMODFStream *arg1 = (gpstk::SMODFStream *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_SMODFStream",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__SMODFStream, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SMODFStream_open(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::SMODFStream *arg1 = (gpstk::SMODFStream *) 0 ;
    char *arg2 = (char *) 0 ;
    std::ios::openmode arg3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:SMODFStream_open",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__SMODFStream, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    if (!SWIG_AsCharPtr(obj1, (char**)&arg2)) {
        SWIG_arg_fail(2);SWIG_fail;
    }
    {
        std::ios::openmode * argp;
        SWIG_Python_ConvertPtr(obj2, (void **)&argp, SWIGTYPE_p_std__ios__openmode, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("std::ios::openmode");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
        arg3 = *argp;
    }
    (arg1)->open((char const *)arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SMODFStream_format_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::SMODFStream *arg1 = (gpstk::SMODFStream *) 0 ;
    gpstk::SMODFStream::FileFormat arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:SMODFStream_format_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__SMODFStream, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (gpstk::SMODFStream::FileFormat)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->format = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SMODFStream_format_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::SMODFStream *arg1 = (gpstk::SMODFStream *) 0 ;
    gpstk::SMODFStream::FileFormat result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:SMODFStream_format_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__SMODFStream, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (gpstk::SMODFStream::FileFormat) ((arg1)->format);
    
    resultobj = SWIG_From_int((result));
    return resultobj;
    fail:
    return NULL;
}


static PyObject * SMODFStream_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_gpstk__SMODFStream, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_SP3Stream__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::SP3Stream *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_SP3Stream")) goto fail;
    result = (gpstk::SP3Stream *)new gpstk::SP3Stream();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__SP3Stream, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_SP3Stream__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    char *arg1 = (char *) 0 ;
    std::ios::openmode arg2 ;
    gpstk::SP3Stream *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:new_SP3Stream",&obj0,&obj1)) goto fail;
    if (!SWIG_AsCharPtr(obj0, (char**)&arg1)) {
        SWIG_arg_fail(1);SWIG_fail;
    }
    {
        std::ios::openmode * argp;
        SWIG_Python_ConvertPtr(obj1, (void **)&argp, SWIGTYPE_p_std__ios__openmode, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("std::ios::openmode");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *argp;
    }
    result = (gpstk::SP3Stream *)new gpstk::SP3Stream((char const *)arg1,arg2);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__SP3Stream, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_SP3Stream__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    char *arg1 = (char *) 0 ;
    gpstk::SP3Stream *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_SP3Stream",&obj0)) goto fail;
    if (!SWIG_AsCharPtr(obj0, (char**)&arg1)) {
        SWIG_arg_fail(1);SWIG_fail;
    }
    result = (gpstk::SP3Stream *)new gpstk::SP3Stream((char const *)arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__SP3Stream, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_SP3Stream(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_new_SP3Stream__SWIG_0(self,args);
    }
    if (argc == 1) {
        int _v;
        _v = SWIG_AsCharPtr(argv[0], (char **)(0));
        if (_v) {
            return _wrap_new_SP3Stream__SWIG_2(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        _v = SWIG_AsCharPtr(argv[0], (char **)(0));
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_std__ios__openmode, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_new_SP3Stream__SWIG_1(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'new_SP3Stream'");
    return NULL;
}


static PyObject *_wrap_delete_SP3Stream(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::SP3Stream *arg1 = (gpstk::SP3Stream *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_SP3Stream",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__SP3Stream, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SP3Stream_currentEpoch_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::SP3Stream *arg1 = (gpstk::SP3Stream *) 0 ;
    DayTime *arg2 = (DayTime *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:SP3Stream_currentEpoch_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__SP3Stream, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_gpstk__DayTime, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->currentEpoch = *arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SP3Stream_currentEpoch_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::SP3Stream *arg1 = (gpstk::SP3Stream *) 0 ;
    DayTime *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:SP3Stream_currentEpoch_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__SP3Stream, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (DayTime *)& ((arg1)->currentEpoch);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__DayTime, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject * SP3Stream_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_gpstk__SP3Stream, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_RinexObsStream__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexObsStream *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_RinexObsStream")) goto fail;
    result = (gpstk::RinexObsStream *)new gpstk::RinexObsStream();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__RinexObsStream, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_RinexObsStream__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    char *arg1 = (char *) 0 ;
    std::ios::openmode arg2 ;
    gpstk::RinexObsStream *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:new_RinexObsStream",&obj0,&obj1)) goto fail;
    if (!SWIG_AsCharPtr(obj0, (char**)&arg1)) {
        SWIG_arg_fail(1);SWIG_fail;
    }
    {
        std::ios::openmode * argp;
        SWIG_Python_ConvertPtr(obj1, (void **)&argp, SWIGTYPE_p_std__ios__openmode, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("std::ios::openmode");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *argp;
    }
    result = (gpstk::RinexObsStream *)new gpstk::RinexObsStream((char const *)arg1,arg2);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__RinexObsStream, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_RinexObsStream__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    char *arg1 = (char *) 0 ;
    gpstk::RinexObsStream *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_RinexObsStream",&obj0)) goto fail;
    if (!SWIG_AsCharPtr(obj0, (char**)&arg1)) {
        SWIG_arg_fail(1);SWIG_fail;
    }
    result = (gpstk::RinexObsStream *)new gpstk::RinexObsStream((char const *)arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__RinexObsStream, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_RinexObsStream(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_new_RinexObsStream__SWIG_0(self,args);
    }
    if (argc == 1) {
        int _v;
        _v = SWIG_AsCharPtr(argv[0], (char **)(0));
        if (_v) {
            return _wrap_new_RinexObsStream__SWIG_2(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        _v = SWIG_AsCharPtr(argv[0], (char **)(0));
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_std__ios__openmode, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_new_RinexObsStream__SWIG_1(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'new_RinexObsStream'");
    return NULL;
}


static PyObject *_wrap_delete_RinexObsStream(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexObsStream *arg1 = (gpstk::RinexObsStream *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_RinexObsStream",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexObsStream, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexObsStream_open(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexObsStream *arg1 = (gpstk::RinexObsStream *) 0 ;
    char *arg2 = (char *) 0 ;
    std::ios::openmode arg3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:RinexObsStream_open",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexObsStream, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    if (!SWIG_AsCharPtr(obj1, (char**)&arg2)) {
        SWIG_arg_fail(2);SWIG_fail;
    }
    {
        std::ios::openmode * argp;
        SWIG_Python_ConvertPtr(obj2, (void **)&argp, SWIGTYPE_p_std__ios__openmode, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("std::ios::openmode");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
        arg3 = *argp;
    }
    (arg1)->open((char const *)arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexObsStream_headerRead_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexObsStream *arg1 = (gpstk::RinexObsStream *) 0 ;
    bool arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RinexObsStream_headerRead_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexObsStream, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (bool)(SWIG_As_bool(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->headerRead = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexObsStream_headerRead_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexObsStream *arg1 = (gpstk::RinexObsStream *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RinexObsStream_headerRead_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexObsStream, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool) ((arg1)->headerRead);
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexObsStream_header_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexObsStream *arg1 = (gpstk::RinexObsStream *) 0 ;
    RinexObsHeader *arg2 = (RinexObsHeader *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RinexObsStream_header_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexObsStream, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_gpstk__RinexObsHeader, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->header = *arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexObsStream_header_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexObsStream *arg1 = (gpstk::RinexObsStream *) 0 ;
    RinexObsHeader *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RinexObsStream_header_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexObsStream, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (RinexObsHeader *)& ((arg1)->header);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__RinexObsHeader, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject * RinexObsStream_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_gpstk__RinexObsStream, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_delete_RinexObsBase(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexObsBase *arg1 = (gpstk::RinexObsBase *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_RinexObsBase",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexObsBase, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * RinexObsBase_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_gpstk__RinexObsBase, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_RinexObsType_type_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RinexObsType *arg1 = (RinexObsType *) 0 ;
    std::string *arg2 = (std::string *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RinexObsType_type_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RinexObsType, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__string, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->type = *arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexObsType_type_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RinexObsType *arg1 = (RinexObsType *) 0 ;
    std::string *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RinexObsType_type_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RinexObsType, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (std::string *)& ((arg1)->type);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__string, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexObsType_description_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RinexObsType *arg1 = (RinexObsType *) 0 ;
    std::string *arg2 = (std::string *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RinexObsType_description_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RinexObsType, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__string, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->description = *arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexObsType_description_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RinexObsType *arg1 = (RinexObsType *) 0 ;
    std::string *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RinexObsType_description_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RinexObsType, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (std::string *)& ((arg1)->description);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__string, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexObsType_units_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RinexObsType *arg1 = (RinexObsType *) 0 ;
    std::string *arg2 = (std::string *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RinexObsType_units_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RinexObsType, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__string, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->units = *arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexObsType_units_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RinexObsType *arg1 = (RinexObsType *) 0 ;
    std::string *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RinexObsType_units_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RinexObsType, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (std::string *)& ((arg1)->units);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__string, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexObsType_depend_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RinexObsType *arg1 = (RinexObsType *) 0 ;
    unsigned int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RinexObsType_depend_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RinexObsType, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (unsigned int)(SWIG_As_unsigned_SS_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->depend = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexObsType_depend_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RinexObsType *arg1 = (RinexObsType *) 0 ;
    unsigned int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RinexObsType_depend_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RinexObsType, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (unsigned int) ((arg1)->depend);
    
    {
        resultobj = SWIG_From_unsigned_SS_int((unsigned int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_RinexObsType__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RinexObsType *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_RinexObsType")) goto fail;
    result = (RinexObsType *)new RinexObsType();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_RinexObsType, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_RinexObsType__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::string arg1 ;
    std::string arg2 ;
    std::string arg3 ;
    unsigned int arg4 ;
    RinexObsType *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:new_RinexObsType",&obj0,&obj1,&obj2,&obj3)) goto fail;
    {
        std::string *ptr = (std::string *)0;
        int res = SWIG_AsPtr_std_string(obj0, &ptr);
        if (!res) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj0);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    {
        std::string *ptr = (std::string *)0;
        int res = SWIG_AsPtr_std_string(obj1, &ptr);
        if (!res) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj1);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    {
        std::string *ptr = (std::string *)0;
        int res = SWIG_AsPtr_std_string(obj2, &ptr);
        if (!res) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj2);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
        arg3 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    {
        arg4 = (unsigned int)(SWIG_As_unsigned_SS_int(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    result = (RinexObsType *)new RinexObsType(arg1,arg2,arg3,arg4);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_RinexObsType, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_RinexObsType__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::string arg1 ;
    std::string arg2 ;
    std::string arg3 ;
    RinexObsType *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:new_RinexObsType",&obj0,&obj1,&obj2)) goto fail;
    {
        std::string *ptr = (std::string *)0;
        int res = SWIG_AsPtr_std_string(obj0, &ptr);
        if (!res) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj0);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    {
        std::string *ptr = (std::string *)0;
        int res = SWIG_AsPtr_std_string(obj1, &ptr);
        if (!res) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj1);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    {
        std::string *ptr = (std::string *)0;
        int res = SWIG_AsPtr_std_string(obj2, &ptr);
        if (!res) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj2);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
        arg3 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    result = (RinexObsType *)new RinexObsType(arg1,arg2,arg3);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_RinexObsType, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_RinexObsType(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[5];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 4); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_new_RinexObsType__SWIG_0(self,args);
    }
    if (argc == 3) {
        int _v;
        _v = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
        if (_v) {
            _v = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
            if (_v) {
                _v = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
                if (_v) {
                    return _wrap_new_RinexObsType__SWIG_2(self,args);
                }
            }
        }
    }
    if (argc == 4) {
        int _v;
        _v = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
        if (_v) {
            _v = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
            if (_v) {
                _v = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
                if (_v) {
                    _v = SWIG_Check_unsigned_SS_int(argv[3]);
                    if (_v) {
                        return _wrap_new_RinexObsType__SWIG_1(self,args);
                    }
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'new_RinexObsType'");
    return NULL;
}


static int _wrap_RinexObsType_C1depend_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable RinexObsType_C1depend is read-only.");
    return 1;
}


static PyObject *_wrap_RinexObsType_C1depend_get(void) {
    PyObject *pyobj = NULL;
    
    {
        pyobj = SWIG_From_unsigned_SS_int((unsigned int)(RinexObsType::C1depend)); 
    }
    return pyobj;
}


static int _wrap_RinexObsType_L1depend_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable RinexObsType_L1depend is read-only.");
    return 1;
}


static PyObject *_wrap_RinexObsType_L1depend_get(void) {
    PyObject *pyobj = NULL;
    
    {
        pyobj = SWIG_From_unsigned_SS_int((unsigned int)(RinexObsType::L1depend)); 
    }
    return pyobj;
}


static int _wrap_RinexObsType_L2depend_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable RinexObsType_L2depend is read-only.");
    return 1;
}


static PyObject *_wrap_RinexObsType_L2depend_get(void) {
    PyObject *pyobj = NULL;
    
    {
        pyobj = SWIG_From_unsigned_SS_int((unsigned int)(RinexObsType::L2depend)); 
    }
    return pyobj;
}


static int _wrap_RinexObsType_P1depend_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable RinexObsType_P1depend is read-only.");
    return 1;
}


static PyObject *_wrap_RinexObsType_P1depend_get(void) {
    PyObject *pyobj = NULL;
    
    {
        pyobj = SWIG_From_unsigned_SS_int((unsigned int)(RinexObsType::P1depend)); 
    }
    return pyobj;
}


static int _wrap_RinexObsType_P2depend_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable RinexObsType_P2depend is read-only.");
    return 1;
}


static PyObject *_wrap_RinexObsType_P2depend_get(void) {
    PyObject *pyobj = NULL;
    
    {
        pyobj = SWIG_From_unsigned_SS_int((unsigned int)(RinexObsType::P2depend)); 
    }
    return pyobj;
}


static int _wrap_RinexObsType_EPdepend_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable RinexObsType_EPdepend is read-only.");
    return 1;
}


static PyObject *_wrap_RinexObsType_EPdepend_get(void) {
    PyObject *pyobj = NULL;
    
    {
        pyobj = SWIG_From_unsigned_SS_int((unsigned int)(RinexObsType::EPdepend)); 
    }
    return pyobj;
}


static int _wrap_RinexObsType_PSdepend_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable RinexObsType_PSdepend is read-only.");
    return 1;
}


static PyObject *_wrap_RinexObsType_PSdepend_get(void) {
    PyObject *pyobj = NULL;
    
    {
        pyobj = SWIG_From_unsigned_SS_int((unsigned int)(RinexObsType::PSdepend)); 
    }
    return pyobj;
}


static PyObject *_wrap_delete_RinexObsType(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RinexObsType *arg1 = (RinexObsType *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_RinexObsType",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RinexObsType, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * RinexObsType_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_RinexObsType, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_ExtraWaveFact_prnList_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    ExtraWaveFact *arg1 = (ExtraWaveFact *) 0 ;
    std::vector<gpstk::RinexPrn,std::allocator<gpstk::RinexPrn > > *arg2 = (std::vector<gpstk::RinexPrn,std::allocator<gpstk::RinexPrn > > *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ExtraWaveFact_prnList_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_ExtraWaveFact, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__vectorTgpstk__RinexPrn_std__allocatorTgpstk__RinexPrn_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->prnList = *arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ExtraWaveFact_prnList_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    ExtraWaveFact *arg1 = (ExtraWaveFact *) 0 ;
    std::vector<gpstk::RinexPrn,std::allocator<gpstk::RinexPrn > > *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ExtraWaveFact_prnList_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_ExtraWaveFact, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (std::vector<gpstk::RinexPrn,std::allocator<gpstk::RinexPrn > > *)& ((arg1)->prnList);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__vectorTgpstk__RinexPrn_std__allocatorTgpstk__RinexPrn_t_t, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ExtraWaveFact_wavelengthFactor_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    ExtraWaveFact *arg1 = (ExtraWaveFact *) 0 ;
    short *arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ExtraWaveFact_wavelengthFactor_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_ExtraWaveFact, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_short, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    {
        short *inp = (short *)(arg2);
        if (inp) {
            short *dest = (short *)(arg1->wavelengthFactor);
            size_t ii = 0;
            for (; ii < 2; ++ii) dest[ii] = inp[ii];
        } else {
            SWIG_null_ref("short");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ExtraWaveFact_wavelengthFactor_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    ExtraWaveFact *arg1 = (ExtraWaveFact *) 0 ;
    short *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ExtraWaveFact_wavelengthFactor_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_ExtraWaveFact, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (short *)(short *) ((arg1)->wavelengthFactor);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_short, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_ExtraWaveFact(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    ExtraWaveFact *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_ExtraWaveFact")) goto fail;
    result = (ExtraWaveFact *)new ExtraWaveFact();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_ExtraWaveFact, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_ExtraWaveFact(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    ExtraWaveFact *arg1 = (ExtraWaveFact *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_ExtraWaveFact",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_ExtraWaveFact, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * ExtraWaveFact_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_ExtraWaveFact, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_RinexPrn_prn_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexPrn *arg1 = (gpstk::RinexPrn *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RinexPrn_prn_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexPrn, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->prn = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexPrn_prn_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexPrn *arg1 = (gpstk::RinexPrn *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RinexPrn_prn_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexPrn, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int) ((arg1)->prn);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexPrn_system_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexPrn *arg1 = (gpstk::RinexPrn *) 0 ;
    gpstk::RinexSystem arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RinexPrn_system_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexPrn, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (gpstk::RinexSystem)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->system = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexPrn_system_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexPrn *arg1 = (gpstk::RinexPrn *) 0 ;
    gpstk::RinexSystem result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RinexPrn_system_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexPrn, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (gpstk::RinexSystem) ((arg1)->system);
    
    resultobj = SWIG_From_int((result));
    return resultobj;
    fail:
    return NULL;
}


static int _wrap_RinexPrn_fillchar_set(PyObject *_val) {
    {
        char temp = (char)(SWIG_As_char(_val));
        if (PyErr_Occurred()) {
            SWIG_append_errmsg("C/C++ variable 'gpstk::RinexPrn::fillchar (char)'");
            return 1;
        }
        gpstk::RinexPrn::fillchar = temp;
    }
    return 0;
}


static PyObject *_wrap_RinexPrn_fillchar_get(void) {
    PyObject *pyobj = NULL;
    
    {
        pyobj = SWIG_From_char((char)(gpstk::RinexPrn::fillchar)); 
    }
    return pyobj;
}


static PyObject *_wrap_new_RinexPrn__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexPrn *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_RinexPrn")) goto fail;
    result = (gpstk::RinexPrn *)new gpstk::RinexPrn();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__RinexPrn, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_RinexPrn__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    int arg1 ;
    gpstk::RinexSystem arg2 ;
    gpstk::RinexPrn *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:new_RinexPrn",&obj0,&obj1)) goto fail;
    {
        arg1 = (int)(SWIG_As_int(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        arg2 = (gpstk::RinexSystem)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (gpstk::RinexPrn *)new gpstk::RinexPrn(arg1,arg2);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__RinexPrn, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_RinexPrn(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_new_RinexPrn__SWIG_0(self,args);
    }
    if (argc == 2) {
        int _v;
        _v = SWIG_Check_int(argv[0]);
        if (_v) {
            _v = SWIG_Check_int(argv[1]);
            if (_v) {
                return _wrap_new_RinexPrn__SWIG_1(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'new_RinexPrn'");
    return NULL;
}


static PyObject *_wrap_RinexPrn_setfill(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexPrn *arg1 = (gpstk::RinexPrn *) 0 ;
    char arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RinexPrn_setfill",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexPrn, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (char)(SWIG_As_char(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    (arg1)->setfill(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexPrn_getfill(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexPrn *arg1 = (gpstk::RinexPrn *) 0 ;
    char result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RinexPrn_getfill",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexPrn, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (char)(arg1)->getfill();
    
    {
        resultobj = SWIG_From_char((char)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexPrn_System(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexPrn *arg1 = (gpstk::RinexPrn *) 0 ;
    char result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RinexPrn_System",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexPrn, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (char)((gpstk::RinexPrn const *)arg1)->System();
    
    {
        resultobj = SWIG_From_char((char)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_RinexPrn(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexPrn *arg1 = (gpstk::RinexPrn *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_RinexPrn",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexPrn, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * RinexPrn_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_gpstk__RinexPrn, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_RinexObsHeader(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexObsHeader *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_RinexObsHeader")) goto fail;
    result = (gpstk::RinexObsHeader *)new gpstk::RinexObsHeader();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__RinexObsHeader, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexObsHeader_clear(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexObsHeader *arg1 = (gpstk::RinexObsHeader *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RinexObsHeader_clear",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexObsHeader, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    (arg1)->clear();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static int _wrap_RinexObsHeader_versionString_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable RinexObsHeader_versionString is read-only.");
    return 1;
}


static PyObject *_wrap_RinexObsHeader_versionString_get(void) {
    PyObject *pyobj = NULL;
    
    {
        pyobj = SWIG_From_std_string((std::string)(gpstk::RinexObsHeader::versionString)); 
    }
    return pyobj;
}


static int _wrap_RinexObsHeader_runByString_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable RinexObsHeader_runByString is read-only.");
    return 1;
}


static PyObject *_wrap_RinexObsHeader_runByString_get(void) {
    PyObject *pyobj = NULL;
    
    {
        pyobj = SWIG_From_std_string((std::string)(gpstk::RinexObsHeader::runByString)); 
    }
    return pyobj;
}


static int _wrap_RinexObsHeader_commentString_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable RinexObsHeader_commentString is read-only.");
    return 1;
}


static PyObject *_wrap_RinexObsHeader_commentString_get(void) {
    PyObject *pyobj = NULL;
    
    {
        pyobj = SWIG_From_std_string((std::string)(gpstk::RinexObsHeader::commentString)); 
    }
    return pyobj;
}


static int _wrap_RinexObsHeader_markerNameString_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable RinexObsHeader_markerNameString is read-only.");
    return 1;
}


static PyObject *_wrap_RinexObsHeader_markerNameString_get(void) {
    PyObject *pyobj = NULL;
    
    {
        pyobj = SWIG_From_std_string((std::string)(gpstk::RinexObsHeader::markerNameString)); 
    }
    return pyobj;
}


static int _wrap_RinexObsHeader_markerNumberString_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable RinexObsHeader_markerNumberString is read-only.");
    return 1;
}


static PyObject *_wrap_RinexObsHeader_markerNumberString_get(void) {
    PyObject *pyobj = NULL;
    
    {
        pyobj = SWIG_From_std_string((std::string)(gpstk::RinexObsHeader::markerNumberString)); 
    }
    return pyobj;
}


static int _wrap_RinexObsHeader_observerString_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable RinexObsHeader_observerString is read-only.");
    return 1;
}


static PyObject *_wrap_RinexObsHeader_observerString_get(void) {
    PyObject *pyobj = NULL;
    
    {
        pyobj = SWIG_From_std_string((std::string)(gpstk::RinexObsHeader::observerString)); 
    }
    return pyobj;
}


static int _wrap_RinexObsHeader_receiverString_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable RinexObsHeader_receiverString is read-only.");
    return 1;
}


static PyObject *_wrap_RinexObsHeader_receiverString_get(void) {
    PyObject *pyobj = NULL;
    
    {
        pyobj = SWIG_From_std_string((std::string)(gpstk::RinexObsHeader::receiverString)); 
    }
    return pyobj;
}


static int _wrap_RinexObsHeader_antennaTypeString_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable RinexObsHeader_antennaTypeString is read-only.");
    return 1;
}


static PyObject *_wrap_RinexObsHeader_antennaTypeString_get(void) {
    PyObject *pyobj = NULL;
    
    {
        pyobj = SWIG_From_std_string((std::string)(gpstk::RinexObsHeader::antennaTypeString)); 
    }
    return pyobj;
}


static int _wrap_RinexObsHeader_antennaPositionString_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable RinexObsHeader_antennaPositionString is read-only.");
    return 1;
}


static PyObject *_wrap_RinexObsHeader_antennaPositionString_get(void) {
    PyObject *pyobj = NULL;
    
    {
        pyobj = SWIG_From_std_string((std::string)(gpstk::RinexObsHeader::antennaPositionString)); 
    }
    return pyobj;
}


static int _wrap_RinexObsHeader_antennaOffsetString_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable RinexObsHeader_antennaOffsetString is read-only.");
    return 1;
}


static PyObject *_wrap_RinexObsHeader_antennaOffsetString_get(void) {
    PyObject *pyobj = NULL;
    
    {
        pyobj = SWIG_From_std_string((std::string)(gpstk::RinexObsHeader::antennaOffsetString)); 
    }
    return pyobj;
}


static int _wrap_RinexObsHeader_waveFactString_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable RinexObsHeader_waveFactString is read-only.");
    return 1;
}


static PyObject *_wrap_RinexObsHeader_waveFactString_get(void) {
    PyObject *pyobj = NULL;
    
    {
        pyobj = SWIG_From_std_string((std::string)(gpstk::RinexObsHeader::waveFactString)); 
    }
    return pyobj;
}


static int _wrap_RinexObsHeader_numObsString_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable RinexObsHeader_numObsString is read-only.");
    return 1;
}


static PyObject *_wrap_RinexObsHeader_numObsString_get(void) {
    PyObject *pyobj = NULL;
    
    {
        pyobj = SWIG_From_std_string((std::string)(gpstk::RinexObsHeader::numObsString)); 
    }
    return pyobj;
}


static int _wrap_RinexObsHeader_intervalString_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable RinexObsHeader_intervalString is read-only.");
    return 1;
}


static PyObject *_wrap_RinexObsHeader_intervalString_get(void) {
    PyObject *pyobj = NULL;
    
    {
        pyobj = SWIG_From_std_string((std::string)(gpstk::RinexObsHeader::intervalString)); 
    }
    return pyobj;
}


static int _wrap_RinexObsHeader_firstTimeString_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable RinexObsHeader_firstTimeString is read-only.");
    return 1;
}


static PyObject *_wrap_RinexObsHeader_firstTimeString_get(void) {
    PyObject *pyobj = NULL;
    
    {
        pyobj = SWIG_From_std_string((std::string)(gpstk::RinexObsHeader::firstTimeString)); 
    }
    return pyobj;
}


static int _wrap_RinexObsHeader_lastTimeString_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable RinexObsHeader_lastTimeString is read-only.");
    return 1;
}


static PyObject *_wrap_RinexObsHeader_lastTimeString_get(void) {
    PyObject *pyobj = NULL;
    
    {
        pyobj = SWIG_From_std_string((std::string)(gpstk::RinexObsHeader::lastTimeString)); 
    }
    return pyobj;
}


static int _wrap_RinexObsHeader_receiverOffsetString_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable RinexObsHeader_receiverOffsetString is read-only.");
    return 1;
}


static PyObject *_wrap_RinexObsHeader_receiverOffsetString_get(void) {
    PyObject *pyobj = NULL;
    
    {
        pyobj = SWIG_From_std_string((std::string)(gpstk::RinexObsHeader::receiverOffsetString)); 
    }
    return pyobj;
}


static int _wrap_RinexObsHeader_leapSecondsString_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable RinexObsHeader_leapSecondsString is read-only.");
    return 1;
}


static PyObject *_wrap_RinexObsHeader_leapSecondsString_get(void) {
    PyObject *pyobj = NULL;
    
    {
        pyobj = SWIG_From_std_string((std::string)(gpstk::RinexObsHeader::leapSecondsString)); 
    }
    return pyobj;
}


static int _wrap_RinexObsHeader_numSatsString_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable RinexObsHeader_numSatsString is read-only.");
    return 1;
}


static PyObject *_wrap_RinexObsHeader_numSatsString_get(void) {
    PyObject *pyobj = NULL;
    
    {
        pyobj = SWIG_From_std_string((std::string)(gpstk::RinexObsHeader::numSatsString)); 
    }
    return pyobj;
}


static int _wrap_RinexObsHeader_prnObsString_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable RinexObsHeader_prnObsString is read-only.");
    return 1;
}


static PyObject *_wrap_RinexObsHeader_prnObsString_get(void) {
    PyObject *pyobj = NULL;
    
    {
        pyobj = SWIG_From_std_string((std::string)(gpstk::RinexObsHeader::prnObsString)); 
    }
    return pyobj;
}


static int _wrap_RinexObsHeader_endOfHeader_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable RinexObsHeader_endOfHeader is read-only.");
    return 1;
}


static PyObject *_wrap_RinexObsHeader_endOfHeader_get(void) {
    PyObject *pyobj = NULL;
    
    {
        pyobj = SWIG_From_std_string((std::string)(gpstk::RinexObsHeader::endOfHeader)); 
    }
    return pyobj;
}


static int _wrap_RinexObsHeader_UN_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable RinexObsHeader_UN is read-only.");
    return 1;
}


static PyObject *_wrap_RinexObsHeader_UN_get(void) {
    PyObject *pyobj = NULL;
    
    pyobj = SWIG_NewPointerObj((void *)(&gpstk::RinexObsHeader::UN), SWIGTYPE_p_RinexObsType, 0);
    return pyobj;
}


static int _wrap_RinexObsHeader_L1_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable RinexObsHeader_L1 is read-only.");
    return 1;
}


static PyObject *_wrap_RinexObsHeader_L1_get(void) {
    PyObject *pyobj = NULL;
    
    pyobj = SWIG_NewPointerObj((void *)(&gpstk::RinexObsHeader::L1), SWIGTYPE_p_RinexObsType, 0);
    return pyobj;
}


static int _wrap_RinexObsHeader_L2_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable RinexObsHeader_L2 is read-only.");
    return 1;
}


static PyObject *_wrap_RinexObsHeader_L2_get(void) {
    PyObject *pyobj = NULL;
    
    pyobj = SWIG_NewPointerObj((void *)(&gpstk::RinexObsHeader::L2), SWIGTYPE_p_RinexObsType, 0);
    return pyobj;
}


static int _wrap_RinexObsHeader_C1_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable RinexObsHeader_C1 is read-only.");
    return 1;
}


static PyObject *_wrap_RinexObsHeader_C1_get(void) {
    PyObject *pyobj = NULL;
    
    pyobj = SWIG_NewPointerObj((void *)(&gpstk::RinexObsHeader::C1), SWIGTYPE_p_RinexObsType, 0);
    return pyobj;
}


static int _wrap_RinexObsHeader_P1_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable RinexObsHeader_P1 is read-only.");
    return 1;
}


static PyObject *_wrap_RinexObsHeader_P1_get(void) {
    PyObject *pyobj = NULL;
    
    pyobj = SWIG_NewPointerObj((void *)(&gpstk::RinexObsHeader::P1), SWIGTYPE_p_RinexObsType, 0);
    return pyobj;
}


static int _wrap_RinexObsHeader_P2_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable RinexObsHeader_P2 is read-only.");
    return 1;
}


static PyObject *_wrap_RinexObsHeader_P2_get(void) {
    PyObject *pyobj = NULL;
    
    pyobj = SWIG_NewPointerObj((void *)(&gpstk::RinexObsHeader::P2), SWIGTYPE_p_RinexObsType, 0);
    return pyobj;
}


static int _wrap_RinexObsHeader_D1_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable RinexObsHeader_D1 is read-only.");
    return 1;
}


static PyObject *_wrap_RinexObsHeader_D1_get(void) {
    PyObject *pyobj = NULL;
    
    pyobj = SWIG_NewPointerObj((void *)(&gpstk::RinexObsHeader::D1), SWIGTYPE_p_RinexObsType, 0);
    return pyobj;
}


static int _wrap_RinexObsHeader_D2_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable RinexObsHeader_D2 is read-only.");
    return 1;
}


static PyObject *_wrap_RinexObsHeader_D2_get(void) {
    PyObject *pyobj = NULL;
    
    pyobj = SWIG_NewPointerObj((void *)(&gpstk::RinexObsHeader::D2), SWIGTYPE_p_RinexObsType, 0);
    return pyobj;
}


static int _wrap_RinexObsHeader_S1_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable RinexObsHeader_S1 is read-only.");
    return 1;
}


static PyObject *_wrap_RinexObsHeader_S1_get(void) {
    PyObject *pyobj = NULL;
    
    pyobj = SWIG_NewPointerObj((void *)(&gpstk::RinexObsHeader::S1), SWIGTYPE_p_RinexObsType, 0);
    return pyobj;
}


static int _wrap_RinexObsHeader_S2_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable RinexObsHeader_S2 is read-only.");
    return 1;
}


static PyObject *_wrap_RinexObsHeader_S2_get(void) {
    PyObject *pyobj = NULL;
    
    pyobj = SWIG_NewPointerObj((void *)(&gpstk::RinexObsHeader::S2), SWIGTYPE_p_RinexObsType, 0);
    return pyobj;
}


static int _wrap_RinexObsHeader_T1_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable RinexObsHeader_T1 is read-only.");
    return 1;
}


static PyObject *_wrap_RinexObsHeader_T1_get(void) {
    PyObject *pyobj = NULL;
    
    pyobj = SWIG_NewPointerObj((void *)(&gpstk::RinexObsHeader::T1), SWIGTYPE_p_RinexObsType, 0);
    return pyobj;
}


static int _wrap_RinexObsHeader_T2_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable RinexObsHeader_T2 is read-only.");
    return 1;
}


static PyObject *_wrap_RinexObsHeader_T2_get(void) {
    PyObject *pyobj = NULL;
    
    pyobj = SWIG_NewPointerObj((void *)(&gpstk::RinexObsHeader::T2), SWIGTYPE_p_RinexObsType, 0);
    return pyobj;
}


static int _wrap_RinexObsHeader_StandardRinexObsTypes_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable RinexObsHeader_StandardRinexObsTypes is read-only.");
    return 1;
}


static PyObject *_wrap_RinexObsHeader_StandardRinexObsTypes_get(void) {
    PyObject *pyobj = NULL;
    
    pyobj = SWIG_NewPointerObj((void *)(&gpstk::RinexObsHeader::StandardRinexObsTypes), SWIGTYPE_p_std__vectorTRinexObsType_std__allocatorTRinexObsType_t_t, 0);
    return pyobj;
}


static int _wrap_RinexObsHeader_RegisteredRinexObsTypes_set(PyObject *_val) {
    {
        std::vector<RinexObsType,std::allocator<RinexObsType > > * temp;
        if ((SWIG_ConvertPtr(_val, (void **)(&temp), SWIGTYPE_p_std__vectorTRinexObsType_std__allocatorTRinexObsType_t_t, SWIG_POINTER_EXCEPTION)) == -1) {
            SWIG_append_errmsg("C/C++ variable 'gpstk::RinexObsHeader::RegisteredRinexObsTypes'");
            return 1;
        }
        gpstk::RinexObsHeader::RegisteredRinexObsTypes = *((std::vector<RinexObsType,std::allocator<RinexObsType > > *) temp);
    }
    return 0;
}


static PyObject *_wrap_RinexObsHeader_RegisteredRinexObsTypes_get(void) {
    PyObject *pyobj = NULL;
    
    pyobj = SWIG_NewPointerObj((void *)(&gpstk::RinexObsHeader::RegisteredRinexObsTypes), SWIGTYPE_p_std__vectorTRinexObsType_std__allocatorTRinexObsType_t_t, 0);
    return pyobj;
}


static PyObject *_wrap_RinexObsHeader_version_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexObsHeader *arg1 = (gpstk::RinexObsHeader *) 0 ;
    double arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RinexObsHeader_version_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexObsHeader, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->version = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexObsHeader_version_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexObsHeader *arg1 = (gpstk::RinexObsHeader *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RinexObsHeader_version_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexObsHeader, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double) ((arg1)->version);
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexObsHeader_fileType_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexObsHeader *arg1 = (gpstk::RinexObsHeader *) 0 ;
    std::string *arg2 = (std::string *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RinexObsHeader_fileType_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexObsHeader, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__string, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->fileType = *arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexObsHeader_fileType_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexObsHeader *arg1 = (gpstk::RinexObsHeader *) 0 ;
    std::string *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RinexObsHeader_fileType_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexObsHeader, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (std::string *)& ((arg1)->fileType);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__string, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexObsHeader_system_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexObsHeader *arg1 = (gpstk::RinexObsHeader *) 0 ;
    gpstk::RinexSystem arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RinexObsHeader_system_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexObsHeader, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (gpstk::RinexSystem)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->system = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexObsHeader_system_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexObsHeader *arg1 = (gpstk::RinexObsHeader *) 0 ;
    gpstk::RinexSystem result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RinexObsHeader_system_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexObsHeader, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (gpstk::RinexSystem) ((arg1)->system);
    
    resultobj = SWIG_From_int((result));
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexObsHeader_fileProgram_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexObsHeader *arg1 = (gpstk::RinexObsHeader *) 0 ;
    std::string *arg2 = (std::string *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RinexObsHeader_fileProgram_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexObsHeader, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__string, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->fileProgram = *arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexObsHeader_fileProgram_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexObsHeader *arg1 = (gpstk::RinexObsHeader *) 0 ;
    std::string *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RinexObsHeader_fileProgram_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexObsHeader, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (std::string *)& ((arg1)->fileProgram);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__string, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexObsHeader_fileAgency_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexObsHeader *arg1 = (gpstk::RinexObsHeader *) 0 ;
    std::string *arg2 = (std::string *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RinexObsHeader_fileAgency_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexObsHeader, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__string, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->fileAgency = *arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexObsHeader_fileAgency_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexObsHeader *arg1 = (gpstk::RinexObsHeader *) 0 ;
    std::string *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RinexObsHeader_fileAgency_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexObsHeader, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (std::string *)& ((arg1)->fileAgency);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__string, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexObsHeader_date_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexObsHeader *arg1 = (gpstk::RinexObsHeader *) 0 ;
    std::string *arg2 = (std::string *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RinexObsHeader_date_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexObsHeader, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__string, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->date = *arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexObsHeader_date_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexObsHeader *arg1 = (gpstk::RinexObsHeader *) 0 ;
    std::string *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RinexObsHeader_date_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexObsHeader, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (std::string *)& ((arg1)->date);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__string, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexObsHeader_commentList_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexObsHeader *arg1 = (gpstk::RinexObsHeader *) 0 ;
    std::vector<std::string,std::allocator<std::string > > *arg2 = (std::vector<std::string,std::allocator<std::string > > *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RinexObsHeader_commentList_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexObsHeader, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__vectorTstd__string_std__allocatorTstd__string_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->commentList = *arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexObsHeader_commentList_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexObsHeader *arg1 = (gpstk::RinexObsHeader *) 0 ;
    std::vector<std::string,std::allocator<std::string > > *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RinexObsHeader_commentList_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexObsHeader, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (std::vector<std::string,std::allocator<std::string > > *)& ((arg1)->commentList);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__vectorTstd__string_std__allocatorTstd__string_t_t, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexObsHeader_markerName_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexObsHeader *arg1 = (gpstk::RinexObsHeader *) 0 ;
    std::string *arg2 = (std::string *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RinexObsHeader_markerName_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexObsHeader, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__string, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->markerName = *arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexObsHeader_markerName_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexObsHeader *arg1 = (gpstk::RinexObsHeader *) 0 ;
    std::string *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RinexObsHeader_markerName_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexObsHeader, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (std::string *)& ((arg1)->markerName);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__string, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexObsHeader_markerNumber_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexObsHeader *arg1 = (gpstk::RinexObsHeader *) 0 ;
    std::string *arg2 = (std::string *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RinexObsHeader_markerNumber_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexObsHeader, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__string, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->markerNumber = *arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexObsHeader_markerNumber_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexObsHeader *arg1 = (gpstk::RinexObsHeader *) 0 ;
    std::string *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RinexObsHeader_markerNumber_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexObsHeader, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (std::string *)& ((arg1)->markerNumber);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__string, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexObsHeader_observer_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexObsHeader *arg1 = (gpstk::RinexObsHeader *) 0 ;
    std::string *arg2 = (std::string *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RinexObsHeader_observer_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexObsHeader, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__string, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->observer = *arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexObsHeader_observer_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexObsHeader *arg1 = (gpstk::RinexObsHeader *) 0 ;
    std::string *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RinexObsHeader_observer_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexObsHeader, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (std::string *)& ((arg1)->observer);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__string, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexObsHeader_agency_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexObsHeader *arg1 = (gpstk::RinexObsHeader *) 0 ;
    std::string *arg2 = (std::string *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RinexObsHeader_agency_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexObsHeader, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__string, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->agency = *arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexObsHeader_agency_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexObsHeader *arg1 = (gpstk::RinexObsHeader *) 0 ;
    std::string *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RinexObsHeader_agency_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexObsHeader, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (std::string *)& ((arg1)->agency);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__string, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexObsHeader_recNo_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexObsHeader *arg1 = (gpstk::RinexObsHeader *) 0 ;
    std::string *arg2 = (std::string *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RinexObsHeader_recNo_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexObsHeader, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__string, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->recNo = *arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexObsHeader_recNo_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexObsHeader *arg1 = (gpstk::RinexObsHeader *) 0 ;
    std::string *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RinexObsHeader_recNo_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexObsHeader, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (std::string *)& ((arg1)->recNo);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__string, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexObsHeader_recType_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexObsHeader *arg1 = (gpstk::RinexObsHeader *) 0 ;
    std::string *arg2 = (std::string *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RinexObsHeader_recType_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexObsHeader, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__string, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->recType = *arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexObsHeader_recType_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexObsHeader *arg1 = (gpstk::RinexObsHeader *) 0 ;
    std::string *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RinexObsHeader_recType_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexObsHeader, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (std::string *)& ((arg1)->recType);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__string, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexObsHeader_recVers_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexObsHeader *arg1 = (gpstk::RinexObsHeader *) 0 ;
    std::string *arg2 = (std::string *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RinexObsHeader_recVers_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexObsHeader, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__string, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->recVers = *arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexObsHeader_recVers_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexObsHeader *arg1 = (gpstk::RinexObsHeader *) 0 ;
    std::string *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RinexObsHeader_recVers_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexObsHeader, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (std::string *)& ((arg1)->recVers);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__string, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexObsHeader_antNo_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexObsHeader *arg1 = (gpstk::RinexObsHeader *) 0 ;
    std::string *arg2 = (std::string *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RinexObsHeader_antNo_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexObsHeader, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__string, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->antNo = *arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexObsHeader_antNo_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexObsHeader *arg1 = (gpstk::RinexObsHeader *) 0 ;
    std::string *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RinexObsHeader_antNo_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexObsHeader, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (std::string *)& ((arg1)->antNo);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__string, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexObsHeader_antType_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexObsHeader *arg1 = (gpstk::RinexObsHeader *) 0 ;
    std::string *arg2 = (std::string *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RinexObsHeader_antType_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexObsHeader, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__string, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->antType = *arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexObsHeader_antType_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexObsHeader *arg1 = (gpstk::RinexObsHeader *) 0 ;
    std::string *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RinexObsHeader_antType_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexObsHeader, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (std::string *)& ((arg1)->antType);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__string, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexObsHeader_antennaPosition_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexObsHeader *arg1 = (gpstk::RinexObsHeader *) 0 ;
    gpstk::Triple *arg2 = (gpstk::Triple *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RinexObsHeader_antennaPosition_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexObsHeader, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_gpstk__Triple, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->antennaPosition = *arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexObsHeader_antennaPosition_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexObsHeader *arg1 = (gpstk::RinexObsHeader *) 0 ;
    gpstk::Triple *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RinexObsHeader_antennaPosition_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexObsHeader, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (gpstk::Triple *)& ((arg1)->antennaPosition);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__Triple, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexObsHeader_antennaOffset_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexObsHeader *arg1 = (gpstk::RinexObsHeader *) 0 ;
    gpstk::Triple *arg2 = (gpstk::Triple *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RinexObsHeader_antennaOffset_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexObsHeader, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_gpstk__Triple, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->antennaOffset = *arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexObsHeader_antennaOffset_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexObsHeader *arg1 = (gpstk::RinexObsHeader *) 0 ;
    gpstk::Triple *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RinexObsHeader_antennaOffset_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexObsHeader, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (gpstk::Triple *)& ((arg1)->antennaOffset);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__Triple, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexObsHeader_wavelengthFactor_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexObsHeader *arg1 = (gpstk::RinexObsHeader *) 0 ;
    short *arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RinexObsHeader_wavelengthFactor_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexObsHeader, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_short, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    {
        short *inp = (short *)(arg2);
        if (inp) {
            short *dest = (short *)(arg1->wavelengthFactor);
            size_t ii = 0;
            for (; ii < 2; ++ii) dest[ii] = inp[ii];
        } else {
            SWIG_null_ref("short");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexObsHeader_wavelengthFactor_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexObsHeader *arg1 = (gpstk::RinexObsHeader *) 0 ;
    short *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RinexObsHeader_wavelengthFactor_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexObsHeader, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (short *)(short *) ((arg1)->wavelengthFactor);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_short, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexObsHeader_extraWaveFactList_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexObsHeader *arg1 = (gpstk::RinexObsHeader *) 0 ;
    std::vector<ExtraWaveFact,std::allocator<ExtraWaveFact > > *arg2 = (std::vector<ExtraWaveFact,std::allocator<ExtraWaveFact > > *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RinexObsHeader_extraWaveFactList_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexObsHeader, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__vectorTExtraWaveFact_std__allocatorTExtraWaveFact_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->extraWaveFactList = *arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexObsHeader_extraWaveFactList_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexObsHeader *arg1 = (gpstk::RinexObsHeader *) 0 ;
    std::vector<ExtraWaveFact,std::allocator<ExtraWaveFact > > *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RinexObsHeader_extraWaveFactList_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexObsHeader, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (std::vector<ExtraWaveFact,std::allocator<ExtraWaveFact > > *)& ((arg1)->extraWaveFactList);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__vectorTExtraWaveFact_std__allocatorTExtraWaveFact_t_t, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexObsHeader_obsTypeList_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexObsHeader *arg1 = (gpstk::RinexObsHeader *) 0 ;
    std::vector<RinexObsType,std::allocator<RinexObsType > > *arg2 = (std::vector<RinexObsType,std::allocator<RinexObsType > > *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RinexObsHeader_obsTypeList_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexObsHeader, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__vectorTRinexObsType_std__allocatorTRinexObsType_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->obsTypeList = *arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexObsHeader_obsTypeList_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexObsHeader *arg1 = (gpstk::RinexObsHeader *) 0 ;
    std::vector<RinexObsType,std::allocator<RinexObsType > > *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RinexObsHeader_obsTypeList_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexObsHeader, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (std::vector<RinexObsType,std::allocator<RinexObsType > > *)& ((arg1)->obsTypeList);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__vectorTRinexObsType_std__allocatorTRinexObsType_t_t, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexObsHeader_interval_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexObsHeader *arg1 = (gpstk::RinexObsHeader *) 0 ;
    double arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RinexObsHeader_interval_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexObsHeader, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->interval = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexObsHeader_interval_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexObsHeader *arg1 = (gpstk::RinexObsHeader *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RinexObsHeader_interval_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexObsHeader, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double) ((arg1)->interval);
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexObsHeader_firstObs_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexObsHeader *arg1 = (gpstk::RinexObsHeader *) 0 ;
    gpstk::DayTime *arg2 = (gpstk::DayTime *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RinexObsHeader_firstObs_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexObsHeader, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_gpstk__DayTime, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->firstObs = *arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexObsHeader_firstObs_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexObsHeader *arg1 = (gpstk::RinexObsHeader *) 0 ;
    gpstk::DayTime *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RinexObsHeader_firstObs_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexObsHeader, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (gpstk::DayTime *)& ((arg1)->firstObs);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__DayTime, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexObsHeader_firstSystem_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexObsHeader *arg1 = (gpstk::RinexObsHeader *) 0 ;
    gpstk::RinexSystem arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RinexObsHeader_firstSystem_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexObsHeader, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (gpstk::RinexSystem)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->firstSystem = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexObsHeader_firstSystem_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexObsHeader *arg1 = (gpstk::RinexObsHeader *) 0 ;
    gpstk::RinexSystem result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RinexObsHeader_firstSystem_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexObsHeader, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (gpstk::RinexSystem) ((arg1)->firstSystem);
    
    resultobj = SWIG_From_int((result));
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexObsHeader_lastObs_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexObsHeader *arg1 = (gpstk::RinexObsHeader *) 0 ;
    gpstk::DayTime *arg2 = (gpstk::DayTime *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RinexObsHeader_lastObs_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexObsHeader, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_gpstk__DayTime, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->lastObs = *arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexObsHeader_lastObs_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexObsHeader *arg1 = (gpstk::RinexObsHeader *) 0 ;
    gpstk::DayTime *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RinexObsHeader_lastObs_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexObsHeader, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (gpstk::DayTime *)& ((arg1)->lastObs);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__DayTime, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexObsHeader_lastSystem_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexObsHeader *arg1 = (gpstk::RinexObsHeader *) 0 ;
    gpstk::RinexSystem arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RinexObsHeader_lastSystem_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexObsHeader, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (gpstk::RinexSystem)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->lastSystem = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexObsHeader_lastSystem_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexObsHeader *arg1 = (gpstk::RinexObsHeader *) 0 ;
    gpstk::RinexSystem result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RinexObsHeader_lastSystem_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexObsHeader, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (gpstk::RinexSystem) ((arg1)->lastSystem);
    
    resultobj = SWIG_From_int((result));
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexObsHeader_receiverOffset_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexObsHeader *arg1 = (gpstk::RinexObsHeader *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RinexObsHeader_receiverOffset_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexObsHeader, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->receiverOffset = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexObsHeader_receiverOffset_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexObsHeader *arg1 = (gpstk::RinexObsHeader *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RinexObsHeader_receiverOffset_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexObsHeader, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int) ((arg1)->receiverOffset);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexObsHeader_leapSeconds_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexObsHeader *arg1 = (gpstk::RinexObsHeader *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RinexObsHeader_leapSeconds_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexObsHeader, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->leapSeconds = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexObsHeader_leapSeconds_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexObsHeader *arg1 = (gpstk::RinexObsHeader *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RinexObsHeader_leapSeconds_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexObsHeader, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int) ((arg1)->leapSeconds);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexObsHeader_numSVs_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexObsHeader *arg1 = (gpstk::RinexObsHeader *) 0 ;
    short arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RinexObsHeader_numSVs_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexObsHeader, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (short)(SWIG_As_short(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->numSVs = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexObsHeader_numSVs_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexObsHeader *arg1 = (gpstk::RinexObsHeader *) 0 ;
    short result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RinexObsHeader_numSVs_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexObsHeader, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (short) ((arg1)->numSVs);
    
    {
        resultobj = SWIG_From_short((short)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexObsHeader_numObsForPrn_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexObsHeader *arg1 = (gpstk::RinexObsHeader *) 0 ;
    std::map<gpstk::RinexPrn,std::vector<int,std::allocator<int > >,std::less<gpstk::RinexPrn >,std::allocator<std::pair<gpstk::RinexPrn const,std::vector<int,std::allocator<int > > > > > *arg2 = (std::map<gpstk::RinexPrn,std::vector<int,std::allocator<int > >,std::less<gpstk::RinexPrn >,std::allocator<std::pair<gpstk::RinexPrn const,std::vector<int,std::allocator<int > > > > > *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RinexObsHeader_numObsForPrn_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexObsHeader, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__mapTgpstk__RinexPrn_std__vectorTint_std__allocatorTint_t_t_std__lessTgpstk__RinexPrn_t_std__allocatorTstd__pairTgpstk__RinexPrn_const_std__vectorTint_std__allocatorTint_t_t_t_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->numObsForPrn = *arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexObsHeader_numObsForPrn_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexObsHeader *arg1 = (gpstk::RinexObsHeader *) 0 ;
    std::map<gpstk::RinexPrn,std::vector<int,std::allocator<int > >,std::less<gpstk::RinexPrn >,std::allocator<std::pair<gpstk::RinexPrn const,std::vector<int,std::allocator<int > > > > > *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RinexObsHeader_numObsForPrn_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexObsHeader, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (std::map<gpstk::RinexPrn,std::vector<int,std::allocator<int > >,std::less<gpstk::RinexPrn >,std::allocator<std::pair<gpstk::RinexPrn const,std::vector<int,std::allocator<int > > > > > *)& ((arg1)->numObsForPrn);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__mapTgpstk__RinexPrn_std__vectorTint_std__allocatorTint_t_t_std__lessTgpstk__RinexPrn_t_std__allocatorTstd__pairTgpstk__RinexPrn_const_std__vectorTint_std__allocatorTint_t_t_t_t_t, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexObsHeader_valid_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexObsHeader *arg1 = (gpstk::RinexObsHeader *) 0 ;
    unsigned long arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RinexObsHeader_valid_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexObsHeader, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (unsigned long)(SWIG_As_unsigned_SS_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->valid = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexObsHeader_valid_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexObsHeader *arg1 = (gpstk::RinexObsHeader *) 0 ;
    unsigned long result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RinexObsHeader_valid_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexObsHeader, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (unsigned long) ((arg1)->valid);
    
    {
        resultobj = SWIG_From_unsigned_SS_long((unsigned long)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexObsHeader_numObs_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexObsHeader *arg1 = (gpstk::RinexObsHeader *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RinexObsHeader_numObs_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexObsHeader, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->numObs = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexObsHeader_numObs_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexObsHeader *arg1 = (gpstk::RinexObsHeader *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RinexObsHeader_numObs_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexObsHeader, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int) ((arg1)->numObs);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexObsHeader_lastPRN_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexObsHeader *arg1 = (gpstk::RinexObsHeader *) 0 ;
    gpstk::RinexPrn *arg2 = (gpstk::RinexPrn *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RinexObsHeader_lastPRN_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexObsHeader, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_gpstk__RinexPrn, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->lastPRN = *arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexObsHeader_lastPRN_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexObsHeader *arg1 = (gpstk::RinexObsHeader *) 0 ;
    gpstk::RinexPrn *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RinexObsHeader_lastPRN_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexObsHeader, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (gpstk::RinexPrn *)& ((arg1)->lastPRN);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__RinexPrn, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_RinexObsHeader(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexObsHeader *arg1 = (gpstk::RinexObsHeader *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_RinexObsHeader",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexObsHeader, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexObsHeader_isHeader(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexObsHeader *arg1 = (gpstk::RinexObsHeader *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RinexObsHeader_isHeader",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexObsHeader, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)((gpstk::RinexObsHeader const *)arg1)->isHeader();
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexObsHeader_dump(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexObsHeader *arg1 = (gpstk::RinexObsHeader *) 0 ;
    std::ostream *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RinexObsHeader_dump",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexObsHeader, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("std::ostream");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    ((gpstk::RinexObsHeader const *)arg1)->dump(*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexObsHeader_convertObsType__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::string *arg1 = 0 ;
    RinexObsType result;
    int res1 = 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RinexObsHeader_convertObsType",&obj0)) goto fail;
    {
        std::string *ptr = (std::string *)0;
        res1 = SWIG_AsPtr_std_string(obj0, &ptr);
        if (!res1) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj0);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = ptr;
    }
    try {
        result = gpstk::RinexObsHeader::convertObsType((std::string const &)*arg1);
    }
    catch(FFStreamError &_e) {
        {
            FFStreamError * temp = new FFStreamError(_e);
            if (SWIGTYPE_p_FFStreamError->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_FFStreamError->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_FFStreamError,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"FFStreamError");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_FFStreamError,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    {
        RinexObsType * resultptr;
        resultptr = new RinexObsType((RinexObsType &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_RinexObsType, 1);
    }
    if (res1 == SWIG_NEWOBJ) delete arg1;
    return resultobj;
    fail:
    if (res1 == SWIG_NEWOBJ) delete arg1;
    return NULL;
}


static PyObject *_wrap_RinexObsHeader_convertObsType__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RinexObsType *arg1 = 0 ;
    std::string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RinexObsHeader_convertObsType",&obj0)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RinexObsType, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("RinexObsType");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    try {
        result = gpstk::RinexObsHeader::convertObsType((RinexObsType const &)*arg1);
    }
    catch(FFStreamError &_e) {
        {
            FFStreamError * temp = new FFStreamError(_e);
            if (SWIGTYPE_p_FFStreamError->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_FFStreamError->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_FFStreamError,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"FFStreamError");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_FFStreamError,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    {
        resultobj = SWIG_From_std_string((std::string)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexObsHeader_convertObsType(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[2];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 1); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_RinexObsType, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            return _wrap_RinexObsHeader_convertObsType__SWIG_1(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        _v = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
        if (_v) {
            return _wrap_RinexObsHeader_convertObsType__SWIG_0(self,args);
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'RinexObsHeader_convertObsType'");
    return NULL;
}


static PyObject *_wrap_RinexObsHeader_ParseHeaderRecord(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexObsHeader *arg1 = (gpstk::RinexObsHeader *) 0 ;
    std::string *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RinexObsHeader_ParseHeaderRecord",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexObsHeader, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__string, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        (arg1)->ParseHeaderRecord(*arg2);
    }
    catch(FFStreamError &_e) {
        {
            FFStreamError * temp = new FFStreamError(_e);
            if (SWIGTYPE_p_FFStreamError->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_FFStreamError->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_FFStreamError,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"FFStreamError");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_FFStreamError,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexObsHeader_NumberHeaderRecordsToBeWritten(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexObsHeader *arg1 = (gpstk::RinexObsHeader *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RinexObsHeader_NumberHeaderRecordsToBeWritten",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexObsHeader, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int)((gpstk::RinexObsHeader const *)arg1)->NumberHeaderRecordsToBeWritten();
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexObsHeader_WriteHeaderRecords(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexObsHeader *arg1 = (gpstk::RinexObsHeader *) 0 ;
    gpstk::FFStream *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RinexObsHeader_WriteHeaderRecords",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexObsHeader, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_gpstk__FFStream, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("gpstk::FFStream");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        ((gpstk::RinexObsHeader const *)arg1)->WriteHeaderRecords(*arg2);
    }
    catch(FFStreamError &_e) {
        {
            FFStreamError * temp = new FFStreamError(_e);
            if (SWIGTYPE_p_FFStreamError->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_FFStreamError->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_FFStreamError,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"FFStreamError");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_FFStreamError,1));
                    */
            }
            SWIG_fail;
        }
    }
    catch(gpstk::StringUtils::StringException &_e) {
        {
            gpstk::StringUtils::StringException * temp = new gpstk::StringUtils::StringException(_e);
            if (SWIGTYPE_p_gpstk__StringUtils__StringException->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_gpstk__StringUtils__StringException->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__StringUtils__StringException,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"gpstk::StringUtils::StringException");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__StringUtils__StringException,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexObsHeader_isValid(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexObsHeader *arg1 = (gpstk::RinexObsHeader *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RinexObsHeader_isValid",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexObsHeader, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)((gpstk::RinexObsHeader const *)arg1)->isValid();
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject * RinexObsHeader_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_gpstk__RinexObsHeader, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap___eq____SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexObsHeader::RinexObsType *arg1 = 0 ;
    gpstk::RinexObsHeader::RinexObsType *arg2 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:__eq__",&obj0,&obj1)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RinexObsType, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("gpstk::RinexObsHeader::RinexObsType");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_RinexObsType, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("gpstk::RinexObsHeader::RinexObsType");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (bool)gpstk::operator ==((RinexObsType const &)*arg1,(RinexObsType const &)*arg2);
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap___lt____SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexObsHeader::RinexObsType *arg1 = 0 ;
    gpstk::RinexObsHeader::RinexObsType *arg2 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:__lt__",&obj0,&obj1)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RinexObsType, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("gpstk::RinexObsHeader::RinexObsType");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_RinexObsType, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("gpstk::RinexObsHeader::RinexObsType");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (bool)gpstk::operator <((RinexObsType const &)*arg1,(RinexObsType const &)*arg2);
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap___lshift____SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::ostream *arg1 = 0 ;
    gpstk::RinexObsHeader::RinexObsType arg2 ;
    std::ostream *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:__lshift__",&obj0,&obj1)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("std::ostream");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        gpstk::RinexObsHeader::RinexObsType * argp;
        SWIG_Python_ConvertPtr(obj1, (void **)&argp, SWIGTYPE_p_RinexObsType, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("gpstk::RinexObsHeader::RinexObsType");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *argp;
    }
    {
        std::ostream &_result_ref = gpstk::operator <<(*arg1,arg2);
        result = (std::ostream *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RegisterExtendedRinexObsType__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::string arg1 ;
    std::string arg2 ;
    std::string arg3 ;
    unsigned int arg4 ;
    int result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:RegisterExtendedRinexObsType",&obj0,&obj1,&obj2,&obj3)) goto fail;
    {
        std::string *ptr = (std::string *)0;
        int res = SWIG_AsPtr_std_string(obj0, &ptr);
        if (!res) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj0);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    {
        std::string *ptr = (std::string *)0;
        int res = SWIG_AsPtr_std_string(obj1, &ptr);
        if (!res) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj1);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    {
        std::string *ptr = (std::string *)0;
        int res = SWIG_AsPtr_std_string(obj2, &ptr);
        if (!res) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj2);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
        arg3 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    {
        arg4 = (unsigned int)(SWIG_As_unsigned_SS_int(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    result = (int)gpstk::RegisterExtendedRinexObsType(arg1,arg2,arg3,arg4);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RegisterExtendedRinexObsType__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::string arg1 ;
    std::string arg2 ;
    std::string arg3 ;
    int result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:RegisterExtendedRinexObsType",&obj0,&obj1,&obj2)) goto fail;
    {
        std::string *ptr = (std::string *)0;
        int res = SWIG_AsPtr_std_string(obj0, &ptr);
        if (!res) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj0);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    {
        std::string *ptr = (std::string *)0;
        int res = SWIG_AsPtr_std_string(obj1, &ptr);
        if (!res) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj1);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    {
        std::string *ptr = (std::string *)0;
        int res = SWIG_AsPtr_std_string(obj2, &ptr);
        if (!res) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj2);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
        arg3 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    result = (int)gpstk::RegisterExtendedRinexObsType(arg1,arg2,arg3);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RegisterExtendedRinexObsType__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::string arg1 ;
    std::string arg2 ;
    int result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RegisterExtendedRinexObsType",&obj0,&obj1)) goto fail;
    {
        std::string *ptr = (std::string *)0;
        int res = SWIG_AsPtr_std_string(obj0, &ptr);
        if (!res) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj0);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    {
        std::string *ptr = (std::string *)0;
        int res = SWIG_AsPtr_std_string(obj1, &ptr);
        if (!res) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj1);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    result = (int)gpstk::RegisterExtendedRinexObsType(arg1,arg2);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RegisterExtendedRinexObsType__SWIG_3(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::string arg1 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RegisterExtendedRinexObsType",&obj0)) goto fail;
    {
        std::string *ptr = (std::string *)0;
        int res = SWIG_AsPtr_std_string(obj0, &ptr);
        if (!res) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj0);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    result = (int)gpstk::RegisterExtendedRinexObsType(arg1);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RegisterExtendedRinexObsType(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[5];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 4); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        _v = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
        if (_v) {
            return _wrap_RegisterExtendedRinexObsType__SWIG_3(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        _v = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
        if (_v) {
            _v = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
            if (_v) {
                return _wrap_RegisterExtendedRinexObsType__SWIG_2(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        _v = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
        if (_v) {
            _v = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
            if (_v) {
                _v = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
                if (_v) {
                    return _wrap_RegisterExtendedRinexObsType__SWIG_1(self,args);
                }
            }
        }
    }
    if (argc == 4) {
        int _v;
        _v = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
        if (_v) {
            _v = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
            if (_v) {
                _v = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
                if (_v) {
                    _v = SWIG_Check_unsigned_SS_int(argv[3]);
                    if (_v) {
                        return _wrap_RegisterExtendedRinexObsType__SWIG_0(self,args);
                    }
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'RegisterExtendedRinexObsType'");
    return NULL;
}


static PyObject *_wrap___eq____SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexPrn *arg1 = 0 ;
    gpstk::RinexPrn *arg2 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:__eq__",&obj0,&obj1)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexPrn, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("gpstk::RinexPrn");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_gpstk__RinexPrn, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("gpstk::RinexPrn");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (bool)gpstk::operator ==((gpstk::RinexPrn const &)*arg1,(gpstk::RinexPrn const &)*arg2);
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap___eq__(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_RinexObsType, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_RinexObsType, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap___eq____SWIG_0(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_gpstk__RinexPrn, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_gpstk__RinexPrn, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap___eq____SWIG_1(self,args);
            }
        }
    }
    
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


static PyObject *_wrap___ne__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexPrn *arg1 = 0 ;
    gpstk::RinexPrn *arg2 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:__ne__",&obj0,&obj1)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexPrn, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("gpstk::RinexPrn");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_gpstk__RinexPrn, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("gpstk::RinexPrn");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (bool)gpstk::operator !=((gpstk::RinexPrn const &)*arg1,(gpstk::RinexPrn const &)*arg2);
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap___lt____SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexPrn *arg1 = 0 ;
    gpstk::RinexPrn *arg2 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:__lt__",&obj0,&obj1)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexPrn, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("gpstk::RinexPrn");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_gpstk__RinexPrn, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("gpstk::RinexPrn");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (bool)gpstk::operator <((gpstk::RinexPrn const &)*arg1,(gpstk::RinexPrn const &)*arg2);
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap___lt__(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_RinexObsType, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_RinexObsType, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap___lt____SWIG_0(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_gpstk__RinexPrn, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_gpstk__RinexPrn, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap___lt____SWIG_1(self,args);
            }
        }
    }
    
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


static PyObject *_wrap___lshift____SWIG_3(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::ostream *arg1 = 0 ;
    gpstk::RinexPrn *arg2 = 0 ;
    std::ostream *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:__lshift__",&obj0,&obj1)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("std::ostream");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_gpstk__RinexPrn, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("gpstk::RinexPrn");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        std::ostream &_result_ref = gpstk::operator <<(*arg1,(gpstk::RinexPrn const &)*arg2);
        result = (std::ostream *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap___rshift____SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::istream *arg1 = 0 ;
    gpstk::RinexPrn *arg2 = 0 ;
    std::istream *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:__rshift__",&obj0,&obj1)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__basic_istreamTchar_std__char_traitsTchar_t_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("std::istream");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_gpstk__RinexPrn, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("gpstk::RinexPrn");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        std::istream &_result_ref = gpstk::operator >>(*arg1,*arg2);
        result = (std::istream *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__basic_istreamTchar_std__char_traitsTchar_t_t, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap___rshift__(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_std__basic_istreamTchar_std__char_traitsTchar_t_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_gpstk__SatID, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap___rshift____SWIG_0(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_std__basic_istreamTchar_std__char_traitsTchar_t_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_gpstk__RinexPrn, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap___rshift____SWIG_1(self,args);
            }
        }
    }
    
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


static PyObject *_wrap_DisplayExtendedRinexObsTypes(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::ostream *arg1 = 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DisplayExtendedRinexObsTypes",&obj0)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("std::ostream");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    gpstk::DisplayExtendedRinexObsTypes(*arg1);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_RinexDatum(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RinexDatum *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_RinexDatum")) goto fail;
    result = (RinexDatum *)new RinexDatum();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_RinexDatum, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexDatum_data_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RinexDatum *arg1 = (RinexDatum *) 0 ;
    double arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RinexDatum_data_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RinexDatum, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->data = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexDatum_data_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RinexDatum *arg1 = (RinexDatum *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RinexDatum_data_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RinexDatum, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double) ((arg1)->data);
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexDatum_lli_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RinexDatum *arg1 = (RinexDatum *) 0 ;
    short arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RinexDatum_lli_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RinexDatum, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (short)(SWIG_As_short(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->lli = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexDatum_lli_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RinexDatum *arg1 = (RinexDatum *) 0 ;
    short result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RinexDatum_lli_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RinexDatum, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (short) ((arg1)->lli);
    
    {
        resultobj = SWIG_From_short((short)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexDatum_ssi_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RinexDatum *arg1 = (RinexDatum *) 0 ;
    short arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RinexDatum_ssi_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RinexDatum, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (short)(SWIG_As_short(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->ssi = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexDatum_ssi_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RinexDatum *arg1 = (RinexDatum *) 0 ;
    short result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RinexDatum_ssi_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RinexDatum, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (short) ((arg1)->ssi);
    
    {
        resultobj = SWIG_From_short((short)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_RinexDatum(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    RinexDatum *arg1 = (RinexDatum *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_RinexDatum",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RinexDatum, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * RinexDatum_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_RinexDatum, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_RinexObsData_time_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexObsData *arg1 = (gpstk::RinexObsData *) 0 ;
    gpstk::DayTime *arg2 = (gpstk::DayTime *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RinexObsData_time_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexObsData, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_gpstk__DayTime, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->time = *arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexObsData_time_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexObsData *arg1 = (gpstk::RinexObsData *) 0 ;
    gpstk::DayTime *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RinexObsData_time_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexObsData, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (gpstk::DayTime *)& ((arg1)->time);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__DayTime, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexObsData_epochFlag_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexObsData *arg1 = (gpstk::RinexObsData *) 0 ;
    short arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RinexObsData_epochFlag_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexObsData, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (short)(SWIG_As_short(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->epochFlag = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexObsData_epochFlag_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexObsData *arg1 = (gpstk::RinexObsData *) 0 ;
    short result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RinexObsData_epochFlag_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexObsData, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (short) ((arg1)->epochFlag);
    
    {
        resultobj = SWIG_From_short((short)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexObsData_numSvs_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexObsData *arg1 = (gpstk::RinexObsData *) 0 ;
    short arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RinexObsData_numSvs_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexObsData, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (short)(SWIG_As_short(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->numSvs = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexObsData_numSvs_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexObsData *arg1 = (gpstk::RinexObsData *) 0 ;
    short result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RinexObsData_numSvs_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexObsData, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (short) ((arg1)->numSvs);
    
    {
        resultobj = SWIG_From_short((short)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexObsData_clockOffset_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexObsData *arg1 = (gpstk::RinexObsData *) 0 ;
    double arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RinexObsData_clockOffset_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexObsData, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->clockOffset = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexObsData_clockOffset_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexObsData *arg1 = (gpstk::RinexObsData *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RinexObsData_clockOffset_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexObsData, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double) ((arg1)->clockOffset);
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexObsData_obs_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexObsData *arg1 = (gpstk::RinexObsData *) 0 ;
    gpstk::RinexObsData::RinexPrnMap *arg2 = (gpstk::RinexObsData::RinexPrnMap *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RinexObsData_obs_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexObsData, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__mapTgpstk__RinexPrn_std__mapTRinexObsType_RinexDatum_std__lessTRinexObsType_t_std__allocatorTstd__pairTRinexObsType_const_RinexDatum_t_t_t_std__lessTgpstk__RinexPrn_t_std__allocatorTstd__pairTgpstk__RinexPrn_const_std__mapTRinexObsType_RinexDatum_std__lessTRinexObsType_t_std__allocatorTstd__pairTRinexObsType_const_RinexDatum_t_t_t_t_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->obs = *arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexObsData_obs_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexObsData *arg1 = (gpstk::RinexObsData *) 0 ;
    gpstk::RinexObsData::RinexPrnMap *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RinexObsData_obs_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexObsData, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (gpstk::RinexObsData::RinexPrnMap *)& ((arg1)->obs);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__mapTgpstk__RinexPrn_std__mapTRinexObsType_RinexDatum_std__lessTRinexObsType_t_std__allocatorTstd__pairTRinexObsType_const_RinexDatum_t_t_t_std__lessTgpstk__RinexPrn_t_std__allocatorTstd__pairTgpstk__RinexPrn_const_std__mapTRinexObsType_RinexDatum_std__lessTRinexObsType_t_std__allocatorTstd__pairTRinexObsType_const_RinexDatum_t_t_t_t_t_t, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexObsData_auxHeader_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexObsData *arg1 = (gpstk::RinexObsData *) 0 ;
    gpstk::RinexObsHeader *arg2 = (gpstk::RinexObsHeader *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RinexObsData_auxHeader_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexObsData, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_gpstk__RinexObsHeader, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->auxHeader = *arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexObsData_auxHeader_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexObsData *arg1 = (gpstk::RinexObsData *) 0 ;
    gpstk::RinexObsHeader *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RinexObsData_auxHeader_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexObsData, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (gpstk::RinexObsHeader *)& ((arg1)->auxHeader);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__RinexObsHeader, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_RinexObsData(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexObsData *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_RinexObsData")) goto fail;
    result = (gpstk::RinexObsData *)new gpstk::RinexObsData();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__RinexObsData, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_RinexObsData(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexObsData *arg1 = (gpstk::RinexObsData *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_RinexObsData",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexObsData, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexObsData_isData(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexObsData *arg1 = (gpstk::RinexObsData *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RinexObsData_isData",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexObsData, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)((gpstk::RinexObsData const *)arg1)->isData();
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexObsData_dump(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexObsData *arg1 = (gpstk::RinexObsData *) 0 ;
    std::ostream *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RinexObsData_dump",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexObsData, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("std::ostream");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    ((gpstk::RinexObsData const *)arg1)->dump(*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * RinexObsData_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_gpstk__RinexObsData, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_RinexObsTypeMap__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::map<RinexObsType,RinexDatum > *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_RinexObsTypeMap")) goto fail;
    result = (std::map<RinexObsType,RinexDatum > *)new std::map<RinexObsType,RinexDatum >();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__mapTRinexObsType_RinexDatum_std__lessTRinexObsType_t_std__allocatorTstd__pairTRinexObsType_const_RinexDatum_t_t_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_RinexObsTypeMap__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::map<RinexObsType,RinexDatum > *arg1 = 0 ;
    std::map<RinexObsType,RinexDatum > *result;
    int res1 = 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_RinexObsTypeMap",&obj0)) goto fail;
    {
        std::map<RinexObsType,RinexDatum,std::less<RinexObsType >,std::allocator<std::pair<RinexObsType const,RinexDatum > > > *ptr = (std::map<RinexObsType,RinexDatum,std::less<RinexObsType >,std::allocator<std::pair<RinexObsType const,RinexDatum > > > *)0;
        res1 = swig::asptr(obj0, &ptr);
        if (!res1) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::map<RinexObsType,RinexDatum >", obj0);
        } else if (!ptr) {
            SWIG_null_ref("std::map<RinexObsType,RinexDatum >");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = ptr;
    }
    result = (std::map<RinexObsType,RinexDatum > *)new std::map<RinexObsType,RinexDatum >((std::map<RinexObsType,RinexDatum > const &)*arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__mapTRinexObsType_RinexDatum_std__lessTRinexObsType_t_std__allocatorTstd__pairTRinexObsType_const_RinexDatum_t_t_t, 1);
    if (res1 == SWIG_NEWOBJ) delete arg1;
    return resultobj;
    fail:
    if (res1 == SWIG_NEWOBJ) delete arg1;
    return NULL;
}


static PyObject *_wrap_new_RinexObsTypeMap(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[2];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 1); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_new_RinexObsTypeMap__SWIG_0(self,args);
    }
    if (argc == 1) {
        int _v;
        _v = swig::asptr(argv[0], (std::map<RinexObsType,RinexDatum,std::less<RinexObsType >,std::allocator<std::pair<RinexObsType const,RinexDatum > > >**)(0));
        if (_v) {
            return _wrap_new_RinexObsTypeMap__SWIG_1(self,args);
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'new_RinexObsTypeMap'");
    return NULL;
}


static PyObject *_wrap_RinexObsTypeMap_empty(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::map<RinexObsType,RinexDatum > *arg1 = (std::map<RinexObsType,RinexDatum > *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RinexObsTypeMap_empty",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__mapTRinexObsType_RinexDatum_std__lessTRinexObsType_t_std__allocatorTstd__pairTRinexObsType_const_RinexDatum_t_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)((std::map<RinexObsType,RinexDatum > const *)arg1)->empty();
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexObsTypeMap_size(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::map<RinexObsType,RinexDatum > *arg1 = (std::map<RinexObsType,RinexDatum > *) 0 ;
    std::map<RinexObsType,RinexDatum >::size_type result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RinexObsTypeMap_size",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__mapTRinexObsType_RinexDatum_std__lessTRinexObsType_t_std__allocatorTstd__pairTRinexObsType_const_RinexDatum_t_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = ((std::map<RinexObsType,RinexDatum > const *)arg1)->size();
    
    {
        resultobj = SWIG_From_unsigned_SS_long((unsigned long)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexObsTypeMap_clear(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::map<RinexObsType,RinexDatum > *arg1 = (std::map<RinexObsType,RinexDatum > *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RinexObsTypeMap_clear",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__mapTRinexObsType_RinexDatum_std__lessTRinexObsType_t_std__allocatorTstd__pairTRinexObsType_const_RinexDatum_t_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    (arg1)->clear();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexObsTypeMap_swap(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::map<RinexObsType,RinexDatum > *arg1 = (std::map<RinexObsType,RinexDatum > *) 0 ;
    std::map<RinexObsType,RinexDatum > *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RinexObsTypeMap_swap",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__mapTRinexObsType_RinexDatum_std__lessTRinexObsType_t_std__allocatorTstd__pairTRinexObsType_const_RinexDatum_t_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__mapTRinexObsType_RinexDatum_std__lessTRinexObsType_t_std__allocatorTstd__pairTRinexObsType_const_RinexDatum_t_t_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("std::map<RinexObsType,RinexDatum >");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    (arg1)->swap(*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexObsTypeMap_get_allocator(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::map<RinexObsType,RinexDatum > *arg1 = (std::map<RinexObsType,RinexDatum > *) 0 ;
    SwigValueWrapper<std::allocator<std::pair<RinexObsType const,RinexDatum > > > result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RinexObsTypeMap_get_allocator",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__mapTRinexObsType_RinexDatum_std__lessTRinexObsType_t_std__allocatorTstd__pairTRinexObsType_const_RinexDatum_t_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = ((std::map<RinexObsType,RinexDatum > const *)arg1)->get_allocator();
    
    {
        std::map<RinexObsType,RinexDatum >::allocator_type * resultptr;
        resultptr = new std::map<RinexObsType,RinexDatum >::allocator_type((std::map<RinexObsType,RinexDatum >::allocator_type &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_std__mapTRinexObsType_RinexDatum_std__lessTRinexObsType_t_std__allocatorTstd__pairTRinexObsType_const_RinexDatum_t_t_t__allocator_type, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexObsTypeMap_erase(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::map<RinexObsType,RinexDatum > *arg1 = (std::map<RinexObsType,RinexDatum > *) 0 ;
    std::map<RinexObsType,RinexDatum >::key_type *arg2 = 0 ;
    std::map<RinexObsType,RinexDatum >::size_type result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RinexObsTypeMap_erase",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__mapTRinexObsType_RinexDatum_std__lessTRinexObsType_t_std__allocatorTstd__pairTRinexObsType_const_RinexDatum_t_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__mapTRinexObsType_RinexDatum_std__lessTRinexObsType_t_std__allocatorTstd__pairTRinexObsType_const_RinexDatum_t_t_t__key_type, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("std::map<RinexObsType,RinexDatum >::key_type");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (arg1)->erase((RinexObsType const &)*arg2);
    
    {
        resultobj = SWIG_From_unsigned_SS_long((unsigned long)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexObsTypeMap_count(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::map<RinexObsType,RinexDatum > *arg1 = (std::map<RinexObsType,RinexDatum > *) 0 ;
    std::map<RinexObsType,RinexDatum >::key_type *arg2 = 0 ;
    std::map<RinexObsType,RinexDatum >::size_type result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RinexObsTypeMap_count",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__mapTRinexObsType_RinexDatum_std__lessTRinexObsType_t_std__allocatorTstd__pairTRinexObsType_const_RinexDatum_t_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__mapTRinexObsType_RinexDatum_std__lessTRinexObsType_t_std__allocatorTstd__pairTRinexObsType_const_RinexDatum_t_t_t__key_type, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("std::map<RinexObsType,RinexDatum >::key_type");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = ((std::map<RinexObsType,RinexDatum > const *)arg1)->count((RinexObsType const &)*arg2);
    
    {
        resultobj = SWIG_From_unsigned_SS_long((unsigned long)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexObsTypeMap___nonzero__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::map<RinexObsType,RinexDatum > *arg1 = (std::map<RinexObsType,RinexDatum > *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RinexObsTypeMap___nonzero__",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__mapTRinexObsType_RinexDatum_std__lessTRinexObsType_t_std__allocatorTstd__pairTRinexObsType_const_RinexDatum_t_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)std_map_Sl_RinexObsType_Sc_RinexDatum_Sg____nonzero__((std::map<RinexObsType,RinexDatum > const *)arg1);
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexObsTypeMap___len__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::map<RinexObsType,RinexDatum > *arg1 = (std::map<RinexObsType,RinexDatum > *) 0 ;
    std::map<RinexObsType,RinexDatum >::size_type result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RinexObsTypeMap___len__",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__mapTRinexObsType_RinexDatum_std__lessTRinexObsType_t_std__allocatorTstd__pairTRinexObsType_const_RinexDatum_t_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = std_map_Sl_RinexObsType_Sc_RinexDatum_Sg____len__((std::map<RinexObsType,RinexDatum > const *)arg1);
    
    {
        resultobj = SWIG_From_unsigned_SS_long((unsigned long)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexObsTypeMap___getitem__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::map<RinexObsType,RinexDatum > *arg1 = (std::map<RinexObsType,RinexDatum > *) 0 ;
    std::map<RinexObsType,RinexDatum >::key_type *arg2 = 0 ;
    std::map<RinexObsType,RinexDatum >::mapped_type result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RinexObsTypeMap___getitem__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__mapTRinexObsType_RinexDatum_std__lessTRinexObsType_t_std__allocatorTstd__pairTRinexObsType_const_RinexDatum_t_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__mapTRinexObsType_RinexDatum_std__lessTRinexObsType_t_std__allocatorTstd__pairTRinexObsType_const_RinexDatum_t_t_t__key_type, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("std::map<RinexObsType,RinexDatum >::key_type");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        try {
            result = std_map_Sl_RinexObsType_Sc_RinexDatum_Sg____getitem__((std::map<RinexObsType,RinexDatum > const *)arg1,(RinexObsType const &)*arg2);
        }
        catch (std::out_of_range& e) {
            if (!PyErr_Occurred()) {
                SWIG_exception(SWIG_IndexError,const_cast<char*>(e.what()));
            } else {
                SWIG_fail;
            }
        }
        /*@/usr/local/share/swig/1.3.25/exception.i,341,SWIG_CATCH_UNKNOWN@*/  catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "unknown exception");
        }
        /*@@*/
    }
    {
        std::map<RinexObsType,RinexDatum >::mapped_type * resultptr;
        resultptr = new std::map<RinexObsType,RinexDatum >::mapped_type((std::map<RinexObsType,RinexDatum >::mapped_type &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_std__mapTRinexObsType_RinexDatum_std__lessTRinexObsType_t_std__allocatorTstd__pairTRinexObsType_const_RinexDatum_t_t_t__mapped_type, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexObsTypeMap___setitem__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::map<RinexObsType,RinexDatum > *arg1 = (std::map<RinexObsType,RinexDatum > *) 0 ;
    std::map<RinexObsType,RinexDatum >::key_type *arg2 = 0 ;
    std::map<RinexObsType,RinexDatum >::mapped_type *arg3 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:RinexObsTypeMap___setitem__",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__mapTRinexObsType_RinexDatum_std__lessTRinexObsType_t_std__allocatorTstd__pairTRinexObsType_const_RinexDatum_t_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__mapTRinexObsType_RinexDatum_std__lessTRinexObsType_t_std__allocatorTstd__pairTRinexObsType_const_RinexDatum_t_t_t__key_type, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("std::map<RinexObsType,RinexDatum >::key_type");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_std__mapTRinexObsType_RinexDatum_std__lessTRinexObsType_t_std__allocatorTstd__pairTRinexObsType_const_RinexDatum_t_t_t__mapped_type, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (arg3 == NULL) {
            SWIG_null_ref("std::map<RinexObsType,RinexDatum >::mapped_type");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        try {
            std_map_Sl_RinexObsType_Sc_RinexDatum_Sg____setitem__(arg1,(RinexObsType const &)*arg2,(RinexDatum const &)*arg3);
        }
        catch (std::out_of_range& e) {
            if (!PyErr_Occurred()) {
                SWIG_exception(SWIG_IndexError,const_cast<char*>(e.what()));
            } else {
                SWIG_fail;
            }
        }
        /*@/usr/local/share/swig/1.3.25/exception.i,341,SWIG_CATCH_UNKNOWN@*/  catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "unknown exception");
        }
        /*@@*/
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexObsTypeMap___delitem__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::map<RinexObsType,RinexDatum > *arg1 = (std::map<RinexObsType,RinexDatum > *) 0 ;
    std::map<RinexObsType,RinexDatum >::key_type *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RinexObsTypeMap___delitem__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__mapTRinexObsType_RinexDatum_std__lessTRinexObsType_t_std__allocatorTstd__pairTRinexObsType_const_RinexDatum_t_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__mapTRinexObsType_RinexDatum_std__lessTRinexObsType_t_std__allocatorTstd__pairTRinexObsType_const_RinexDatum_t_t_t__key_type, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("std::map<RinexObsType,RinexDatum >::key_type");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        try {
            std_map_Sl_RinexObsType_Sc_RinexDatum_Sg____delitem__(arg1,(RinexObsType const &)*arg2);
        }
        catch (std::out_of_range& e) {
            if (!PyErr_Occurred()) {
                SWIG_exception(SWIG_IndexError,const_cast<char*>(e.what()));
            } else {
                SWIG_fail;
            }
        }
        /*@/usr/local/share/swig/1.3.25/exception.i,341,SWIG_CATCH_UNKNOWN@*/  catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "unknown exception");
        }
        /*@@*/
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexObsTypeMap_has_key(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::map<RinexObsType,RinexDatum > *arg1 = (std::map<RinexObsType,RinexDatum > *) 0 ;
    std::map<RinexObsType,RinexDatum >::key_type *arg2 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RinexObsTypeMap_has_key",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__mapTRinexObsType_RinexDatum_std__lessTRinexObsType_t_std__allocatorTstd__pairTRinexObsType_const_RinexDatum_t_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__mapTRinexObsType_RinexDatum_std__lessTRinexObsType_t_std__allocatorTstd__pairTRinexObsType_const_RinexDatum_t_t_t__key_type, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("std::map<RinexObsType,RinexDatum >::key_type");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (bool)std_map_Sl_RinexObsType_Sc_RinexDatum_Sg__has_key((std::map<RinexObsType,RinexDatum > const *)arg1,(RinexObsType const &)*arg2);
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexObsTypeMap_keys(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::map<RinexObsType,RinexDatum > *arg1 = (std::map<RinexObsType,RinexDatum > *) 0 ;
    PyObject *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RinexObsTypeMap_keys",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__mapTRinexObsType_RinexDatum_std__lessTRinexObsType_t_std__allocatorTstd__pairTRinexObsType_const_RinexDatum_t_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (PyObject *)std_map_Sl_RinexObsType_Sc_RinexDatum_Sg__keys(arg1);
    
    resultobj = result;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexObsTypeMap_values(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::map<RinexObsType,RinexDatum > *arg1 = (std::map<RinexObsType,RinexDatum > *) 0 ;
    PyObject *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RinexObsTypeMap_values",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__mapTRinexObsType_RinexDatum_std__lessTRinexObsType_t_std__allocatorTstd__pairTRinexObsType_const_RinexDatum_t_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (PyObject *)std_map_Sl_RinexObsType_Sc_RinexDatum_Sg__values(arg1);
    
    resultobj = result;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexObsTypeMap_items(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::map<RinexObsType,RinexDatum > *arg1 = (std::map<RinexObsType,RinexDatum > *) 0 ;
    PyObject *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RinexObsTypeMap_items",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__mapTRinexObsType_RinexDatum_std__lessTRinexObsType_t_std__allocatorTstd__pairTRinexObsType_const_RinexDatum_t_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (PyObject *)std_map_Sl_RinexObsType_Sc_RinexDatum_Sg__items(arg1);
    
    resultobj = result;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexObsTypeMap___contains__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::map<RinexObsType,RinexDatum > *arg1 = (std::map<RinexObsType,RinexDatum > *) 0 ;
    std::map<RinexObsType,RinexDatum >::key_type *arg2 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RinexObsTypeMap___contains__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__mapTRinexObsType_RinexDatum_std__lessTRinexObsType_t_std__allocatorTstd__pairTRinexObsType_const_RinexDatum_t_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__mapTRinexObsType_RinexDatum_std__lessTRinexObsType_t_std__allocatorTstd__pairTRinexObsType_const_RinexDatum_t_t_t__key_type, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("std::map<RinexObsType,RinexDatum >::key_type");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (bool)std_map_Sl_RinexObsType_Sc_RinexDatum_Sg____contains__(arg1,(RinexObsType const &)*arg2);
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexObsTypeMap___iter__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::map<RinexObsType,RinexDatum > *arg1 = (std::map<RinexObsType,RinexDatum > *) 0 ;
    PyObject *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RinexObsTypeMap___iter__",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__mapTRinexObsType_RinexDatum_std__lessTRinexObsType_t_std__allocatorTstd__pairTRinexObsType_const_RinexDatum_t_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (PyObject *)std_map_Sl_RinexObsType_Sc_RinexDatum_Sg____iter__(arg1);
    
    resultobj = result;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_RinexObsTypeMap(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::map<RinexObsType,RinexDatum > *arg1 = (std::map<RinexObsType,RinexDatum > *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_RinexObsTypeMap",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__mapTRinexObsType_RinexDatum_std__lessTRinexObsType_t_std__allocatorTstd__pairTRinexObsType_const_RinexDatum_t_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * RinexObsTypeMap_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_std__mapTRinexObsType_RinexDatum_std__lessTRinexObsType_t_std__allocatorTstd__pairTRinexObsType_const_RinexDatum_t_t_t, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_RinexPrnMap__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::map<RinexPrn,RinexObsData::RinexObsTypeMap > *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_RinexPrnMap")) goto fail;
    result = (std::map<RinexPrn,RinexObsData::RinexObsTypeMap > *)new std::map<RinexPrn,RinexObsData::RinexObsTypeMap >();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__mapTgpstk__RinexPrn_std__mapTRinexObsType_RinexDatum_std__lessTRinexObsType_t_std__allocatorTstd__pairTRinexObsType_const_RinexDatum_t_t_t_std__lessTgpstk__RinexPrn_t_std__allocatorTstd__pairTgpstk__RinexPrn_const_std__mapTRinexObsType_RinexDatum_std__lessTRinexObsType_t_std__allocatorTstd__pairTRinexObsType_const_RinexDatum_t_t_t_t_t_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_RinexPrnMap__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::map<RinexPrn,RinexObsData::RinexObsTypeMap > *arg1 = 0 ;
    std::map<RinexPrn,RinexObsData::RinexObsTypeMap > *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_RinexPrnMap",&obj0)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__mapTgpstk__RinexPrn_std__mapTRinexObsType_RinexDatum_std__lessTRinexObsType_t_std__allocatorTstd__pairTRinexObsType_const_RinexDatum_t_t_t_std__lessTgpstk__RinexPrn_t_std__allocatorTstd__pairTgpstk__RinexPrn_const_std__mapTRinexObsType_RinexDatum_std__lessTRinexObsType_t_std__allocatorTstd__pairTRinexObsType_const_RinexDatum_t_t_t_t_t_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("std::map<RinexPrn,RinexObsData::RinexObsTypeMap >");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    result = (std::map<RinexPrn,RinexObsData::RinexObsTypeMap > *)new std::map<RinexPrn,RinexObsData::RinexObsTypeMap >((std::map<RinexPrn,RinexObsData::RinexObsTypeMap > const &)*arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__mapTgpstk__RinexPrn_std__mapTRinexObsType_RinexDatum_std__lessTRinexObsType_t_std__allocatorTstd__pairTRinexObsType_const_RinexDatum_t_t_t_std__lessTgpstk__RinexPrn_t_std__allocatorTstd__pairTgpstk__RinexPrn_const_std__mapTRinexObsType_RinexDatum_std__lessTRinexObsType_t_std__allocatorTstd__pairTRinexObsType_const_RinexDatum_t_t_t_t_t_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_RinexPrnMap(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[2];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 1); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_new_RinexPrnMap__SWIG_0(self,args);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_std__mapTgpstk__RinexPrn_std__mapTRinexObsType_RinexDatum_std__lessTRinexObsType_t_std__allocatorTstd__pairTRinexObsType_const_RinexDatum_t_t_t_std__lessTgpstk__RinexPrn_t_std__allocatorTstd__pairTgpstk__RinexPrn_const_std__mapTRinexObsType_RinexDatum_std__lessTRinexObsType_t_std__allocatorTstd__pairTRinexObsType_const_RinexDatum_t_t_t_t_t_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            return _wrap_new_RinexPrnMap__SWIG_1(self,args);
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'new_RinexPrnMap'");
    return NULL;
}


static PyObject *_wrap_RinexPrnMap_empty(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::map<RinexPrn,RinexObsData::RinexObsTypeMap > *arg1 = (std::map<RinexPrn,RinexObsData::RinexObsTypeMap > *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RinexPrnMap_empty",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__mapTgpstk__RinexPrn_std__mapTRinexObsType_RinexDatum_std__lessTRinexObsType_t_std__allocatorTstd__pairTRinexObsType_const_RinexDatum_t_t_t_std__lessTgpstk__RinexPrn_t_std__allocatorTstd__pairTgpstk__RinexPrn_const_std__mapTRinexObsType_RinexDatum_std__lessTRinexObsType_t_std__allocatorTstd__pairTRinexObsType_const_RinexDatum_t_t_t_t_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)((std::map<RinexPrn,RinexObsData::RinexObsTypeMap > const *)arg1)->empty();
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexPrnMap_size(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::map<RinexPrn,RinexObsData::RinexObsTypeMap > *arg1 = (std::map<RinexPrn,RinexObsData::RinexObsTypeMap > *) 0 ;
    std::map<RinexPrn,RinexObsData::RinexObsTypeMap >::size_type result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RinexPrnMap_size",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__mapTgpstk__RinexPrn_std__mapTRinexObsType_RinexDatum_std__lessTRinexObsType_t_std__allocatorTstd__pairTRinexObsType_const_RinexDatum_t_t_t_std__lessTgpstk__RinexPrn_t_std__allocatorTstd__pairTgpstk__RinexPrn_const_std__mapTRinexObsType_RinexDatum_std__lessTRinexObsType_t_std__allocatorTstd__pairTRinexObsType_const_RinexDatum_t_t_t_t_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = ((std::map<RinexPrn,RinexObsData::RinexObsTypeMap > const *)arg1)->size();
    
    {
        resultobj = SWIG_From_unsigned_SS_long((unsigned long)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexPrnMap_clear(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::map<RinexPrn,RinexObsData::RinexObsTypeMap > *arg1 = (std::map<RinexPrn,RinexObsData::RinexObsTypeMap > *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RinexPrnMap_clear",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__mapTgpstk__RinexPrn_std__mapTRinexObsType_RinexDatum_std__lessTRinexObsType_t_std__allocatorTstd__pairTRinexObsType_const_RinexDatum_t_t_t_std__lessTgpstk__RinexPrn_t_std__allocatorTstd__pairTgpstk__RinexPrn_const_std__mapTRinexObsType_RinexDatum_std__lessTRinexObsType_t_std__allocatorTstd__pairTRinexObsType_const_RinexDatum_t_t_t_t_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    (arg1)->clear();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexPrnMap_swap(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::map<RinexPrn,RinexObsData::RinexObsTypeMap > *arg1 = (std::map<RinexPrn,RinexObsData::RinexObsTypeMap > *) 0 ;
    std::map<RinexPrn,RinexObsData::RinexObsTypeMap > *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RinexPrnMap_swap",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__mapTgpstk__RinexPrn_std__mapTRinexObsType_RinexDatum_std__lessTRinexObsType_t_std__allocatorTstd__pairTRinexObsType_const_RinexDatum_t_t_t_std__lessTgpstk__RinexPrn_t_std__allocatorTstd__pairTgpstk__RinexPrn_const_std__mapTRinexObsType_RinexDatum_std__lessTRinexObsType_t_std__allocatorTstd__pairTRinexObsType_const_RinexDatum_t_t_t_t_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__mapTgpstk__RinexPrn_std__mapTRinexObsType_RinexDatum_std__lessTRinexObsType_t_std__allocatorTstd__pairTRinexObsType_const_RinexDatum_t_t_t_std__lessTgpstk__RinexPrn_t_std__allocatorTstd__pairTgpstk__RinexPrn_const_std__mapTRinexObsType_RinexDatum_std__lessTRinexObsType_t_std__allocatorTstd__pairTRinexObsType_const_RinexDatum_t_t_t_t_t_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("std::map<RinexPrn,RinexObsData::RinexObsTypeMap >");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    (arg1)->swap(*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexPrnMap_get_allocator(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::map<RinexPrn,RinexObsData::RinexObsTypeMap > *arg1 = (std::map<RinexPrn,RinexObsData::RinexObsTypeMap > *) 0 ;
    SwigValueWrapper<std::allocator<std::pair<gpstk::RinexPrn const,std::map<RinexObsType,RinexDatum,std::less<RinexObsType >,std::allocator<std::pair<RinexObsType const,RinexDatum > > > > > > result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RinexPrnMap_get_allocator",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__mapTgpstk__RinexPrn_std__mapTRinexObsType_RinexDatum_std__lessTRinexObsType_t_std__allocatorTstd__pairTRinexObsType_const_RinexDatum_t_t_t_std__lessTgpstk__RinexPrn_t_std__allocatorTstd__pairTgpstk__RinexPrn_const_std__mapTRinexObsType_RinexDatum_std__lessTRinexObsType_t_std__allocatorTstd__pairTRinexObsType_const_RinexDatum_t_t_t_t_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = ((std::map<RinexPrn,RinexObsData::RinexObsTypeMap > const *)arg1)->get_allocator();
    
    {
        std::map<RinexPrn,RinexObsData::RinexObsTypeMap >::allocator_type * resultptr;
        resultptr = new std::map<RinexPrn,RinexObsData::RinexObsTypeMap >::allocator_type((std::map<RinexPrn,RinexObsData::RinexObsTypeMap >::allocator_type &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_std__mapTgpstk__RinexPrn_gpstk__RinexObsData__RinexObsTypeMap_std__lessTgpstk__RinexPrn_t_std__allocatorTstd__pairTgpstk__RinexPrn_const_gpstk__RinexObsData__RinexObsTypeMap_t_t_t__allocator_type, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexPrnMap_erase(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::map<RinexPrn,RinexObsData::RinexObsTypeMap > *arg1 = (std::map<RinexPrn,RinexObsData::RinexObsTypeMap > *) 0 ;
    std::map<RinexPrn,RinexObsData::RinexObsTypeMap >::key_type *arg2 = 0 ;
    std::map<RinexPrn,RinexObsData::RinexObsTypeMap >::size_type result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RinexPrnMap_erase",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__mapTgpstk__RinexPrn_std__mapTRinexObsType_RinexDatum_std__lessTRinexObsType_t_std__allocatorTstd__pairTRinexObsType_const_RinexDatum_t_t_t_std__lessTgpstk__RinexPrn_t_std__allocatorTstd__pairTgpstk__RinexPrn_const_std__mapTRinexObsType_RinexDatum_std__lessTRinexObsType_t_std__allocatorTstd__pairTRinexObsType_const_RinexDatum_t_t_t_t_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__mapTgpstk__RinexPrn_gpstk__RinexObsData__RinexObsTypeMap_std__lessTgpstk__RinexPrn_t_std__allocatorTstd__pairTgpstk__RinexPrn_const_gpstk__RinexObsData__RinexObsTypeMap_t_t_t__key_type, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("std::map<RinexPrn,RinexObsData::RinexObsTypeMap >::key_type");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (arg1)->erase((gpstk::RinexPrn const &)*arg2);
    
    {
        resultobj = SWIG_From_unsigned_SS_long((unsigned long)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexPrnMap_count(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::map<RinexPrn,RinexObsData::RinexObsTypeMap > *arg1 = (std::map<RinexPrn,RinexObsData::RinexObsTypeMap > *) 0 ;
    std::map<RinexPrn,RinexObsData::RinexObsTypeMap >::key_type *arg2 = 0 ;
    std::map<RinexPrn,RinexObsData::RinexObsTypeMap >::size_type result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RinexPrnMap_count",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__mapTgpstk__RinexPrn_std__mapTRinexObsType_RinexDatum_std__lessTRinexObsType_t_std__allocatorTstd__pairTRinexObsType_const_RinexDatum_t_t_t_std__lessTgpstk__RinexPrn_t_std__allocatorTstd__pairTgpstk__RinexPrn_const_std__mapTRinexObsType_RinexDatum_std__lessTRinexObsType_t_std__allocatorTstd__pairTRinexObsType_const_RinexDatum_t_t_t_t_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__mapTgpstk__RinexPrn_gpstk__RinexObsData__RinexObsTypeMap_std__lessTgpstk__RinexPrn_t_std__allocatorTstd__pairTgpstk__RinexPrn_const_gpstk__RinexObsData__RinexObsTypeMap_t_t_t__key_type, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("std::map<RinexPrn,RinexObsData::RinexObsTypeMap >::key_type");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = ((std::map<RinexPrn,RinexObsData::RinexObsTypeMap > const *)arg1)->count((gpstk::RinexPrn const &)*arg2);
    
    {
        resultobj = SWIG_From_unsigned_SS_long((unsigned long)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexPrnMap___nonzero__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::map<RinexPrn,RinexObsData::RinexObsTypeMap > *arg1 = (std::map<RinexPrn,RinexObsData::RinexObsTypeMap > *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RinexPrnMap___nonzero__",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__mapTgpstk__RinexPrn_std__mapTRinexObsType_RinexDatum_std__lessTRinexObsType_t_std__allocatorTstd__pairTRinexObsType_const_RinexDatum_t_t_t_std__lessTgpstk__RinexPrn_t_std__allocatorTstd__pairTgpstk__RinexPrn_const_std__mapTRinexObsType_RinexDatum_std__lessTRinexObsType_t_std__allocatorTstd__pairTRinexObsType_const_RinexDatum_t_t_t_t_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)std_map_Sl_RinexPrn_Sc_RinexObsData_RinexObsTypeMap_Sg____nonzero__((std::map<RinexPrn,RinexObsData::RinexObsTypeMap > const *)arg1);
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexPrnMap___len__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::map<RinexPrn,RinexObsData::RinexObsTypeMap > *arg1 = (std::map<RinexPrn,RinexObsData::RinexObsTypeMap > *) 0 ;
    std::map<RinexPrn,RinexObsData::RinexObsTypeMap >::size_type result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RinexPrnMap___len__",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__mapTgpstk__RinexPrn_std__mapTRinexObsType_RinexDatum_std__lessTRinexObsType_t_std__allocatorTstd__pairTRinexObsType_const_RinexDatum_t_t_t_std__lessTgpstk__RinexPrn_t_std__allocatorTstd__pairTgpstk__RinexPrn_const_std__mapTRinexObsType_RinexDatum_std__lessTRinexObsType_t_std__allocatorTstd__pairTRinexObsType_const_RinexDatum_t_t_t_t_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = std_map_Sl_RinexPrn_Sc_RinexObsData_RinexObsTypeMap_Sg____len__((std::map<RinexPrn,RinexObsData::RinexObsTypeMap > const *)arg1);
    
    {
        resultobj = SWIG_From_unsigned_SS_long((unsigned long)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexPrnMap___getitem__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::map<RinexPrn,RinexObsData::RinexObsTypeMap > *arg1 = (std::map<RinexPrn,RinexObsData::RinexObsTypeMap > *) 0 ;
    std::map<RinexPrn,RinexObsData::RinexObsTypeMap >::key_type *arg2 = 0 ;
    std::map<RinexPrn,RinexObsData::RinexObsTypeMap >::mapped_type result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RinexPrnMap___getitem__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__mapTgpstk__RinexPrn_std__mapTRinexObsType_RinexDatum_std__lessTRinexObsType_t_std__allocatorTstd__pairTRinexObsType_const_RinexDatum_t_t_t_std__lessTgpstk__RinexPrn_t_std__allocatorTstd__pairTgpstk__RinexPrn_const_std__mapTRinexObsType_RinexDatum_std__lessTRinexObsType_t_std__allocatorTstd__pairTRinexObsType_const_RinexDatum_t_t_t_t_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__mapTgpstk__RinexPrn_gpstk__RinexObsData__RinexObsTypeMap_std__lessTgpstk__RinexPrn_t_std__allocatorTstd__pairTgpstk__RinexPrn_const_gpstk__RinexObsData__RinexObsTypeMap_t_t_t__key_type, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("std::map<RinexPrn,RinexObsData::RinexObsTypeMap >::key_type");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        try {
            result = std_map_Sl_RinexPrn_Sc_RinexObsData_RinexObsTypeMap_Sg____getitem__((std::map<RinexPrn,RinexObsData::RinexObsTypeMap > const *)arg1,(gpstk::RinexPrn const &)*arg2);
        }
        catch (std::out_of_range& e) {
            if (!PyErr_Occurred()) {
                SWIG_exception(SWIG_IndexError,const_cast<char*>(e.what()));
            } else {
                SWIG_fail;
            }
        }
        /*@/usr/local/share/swig/1.3.25/exception.i,341,SWIG_CATCH_UNKNOWN@*/  catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "unknown exception");
        }
        /*@@*/
    }
    {
        resultobj = swig::from((std::map<RinexObsType,RinexDatum,std::less<RinexObsType >,std::allocator<std::pair<RinexObsType const,RinexDatum > > >)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexPrnMap___setitem__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::map<RinexPrn,RinexObsData::RinexObsTypeMap > *arg1 = (std::map<RinexPrn,RinexObsData::RinexObsTypeMap > *) 0 ;
    std::map<RinexPrn,RinexObsData::RinexObsTypeMap >::key_type *arg2 = 0 ;
    std::map<RinexPrn,RinexObsData::RinexObsTypeMap >::mapped_type *arg3 = 0 ;
    int res3 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:RinexPrnMap___setitem__",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__mapTgpstk__RinexPrn_std__mapTRinexObsType_RinexDatum_std__lessTRinexObsType_t_std__allocatorTstd__pairTRinexObsType_const_RinexDatum_t_t_t_std__lessTgpstk__RinexPrn_t_std__allocatorTstd__pairTgpstk__RinexPrn_const_std__mapTRinexObsType_RinexDatum_std__lessTRinexObsType_t_std__allocatorTstd__pairTRinexObsType_const_RinexDatum_t_t_t_t_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__mapTgpstk__RinexPrn_gpstk__RinexObsData__RinexObsTypeMap_std__lessTgpstk__RinexPrn_t_std__allocatorTstd__pairTgpstk__RinexPrn_const_gpstk__RinexObsData__RinexObsTypeMap_t_t_t__key_type, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("std::map<RinexPrn,RinexObsData::RinexObsTypeMap >::key_type");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        std::map<RinexObsType,RinexDatum,std::less<RinexObsType >,std::allocator<std::pair<RinexObsType const,RinexDatum > > > *ptr = (std::map<RinexObsType,RinexDatum,std::less<RinexObsType >,std::allocator<std::pair<RinexObsType const,RinexDatum > > > *)0;
        res3 = swig::asptr(obj2, &ptr);
        if (!res3) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::map<RinexPrn,RinexObsData::RinexObsTypeMap >::mapped_type", obj2);
        } else if (!ptr) {
            SWIG_null_ref("std::map<RinexPrn,RinexObsData::RinexObsTypeMap >::mapped_type");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
        arg3 = ptr;
    }
    {
        try {
            std_map_Sl_RinexPrn_Sc_RinexObsData_RinexObsTypeMap_Sg____setitem__(arg1,(gpstk::RinexPrn const &)*arg2,(std::map<RinexObsType,RinexDatum,std::less<RinexObsType >,std::allocator<std::pair<RinexObsType const,RinexDatum > > > const &)*arg3);
        }
        catch (std::out_of_range& e) {
            if (!PyErr_Occurred()) {
                SWIG_exception(SWIG_IndexError,const_cast<char*>(e.what()));
            } else {
                SWIG_fail;
            }
        }
        /*@/usr/local/share/swig/1.3.25/exception.i,341,SWIG_CATCH_UNKNOWN@*/  catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "unknown exception");
        }
        /*@@*/
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    if (res3 == SWIG_NEWOBJ) delete arg3;
    return resultobj;
    fail:
    if (res3 == SWIG_NEWOBJ) delete arg3;
    return NULL;
}


static PyObject *_wrap_RinexPrnMap___delitem__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::map<RinexPrn,RinexObsData::RinexObsTypeMap > *arg1 = (std::map<RinexPrn,RinexObsData::RinexObsTypeMap > *) 0 ;
    std::map<RinexPrn,RinexObsData::RinexObsTypeMap >::key_type *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RinexPrnMap___delitem__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__mapTgpstk__RinexPrn_std__mapTRinexObsType_RinexDatum_std__lessTRinexObsType_t_std__allocatorTstd__pairTRinexObsType_const_RinexDatum_t_t_t_std__lessTgpstk__RinexPrn_t_std__allocatorTstd__pairTgpstk__RinexPrn_const_std__mapTRinexObsType_RinexDatum_std__lessTRinexObsType_t_std__allocatorTstd__pairTRinexObsType_const_RinexDatum_t_t_t_t_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__mapTgpstk__RinexPrn_gpstk__RinexObsData__RinexObsTypeMap_std__lessTgpstk__RinexPrn_t_std__allocatorTstd__pairTgpstk__RinexPrn_const_gpstk__RinexObsData__RinexObsTypeMap_t_t_t__key_type, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("std::map<RinexPrn,RinexObsData::RinexObsTypeMap >::key_type");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        try {
            std_map_Sl_RinexPrn_Sc_RinexObsData_RinexObsTypeMap_Sg____delitem__(arg1,(gpstk::RinexPrn const &)*arg2);
        }
        catch (std::out_of_range& e) {
            if (!PyErr_Occurred()) {
                SWIG_exception(SWIG_IndexError,const_cast<char*>(e.what()));
            } else {
                SWIG_fail;
            }
        }
        /*@/usr/local/share/swig/1.3.25/exception.i,341,SWIG_CATCH_UNKNOWN@*/  catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "unknown exception");
        }
        /*@@*/
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexPrnMap_has_key(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::map<RinexPrn,RinexObsData::RinexObsTypeMap > *arg1 = (std::map<RinexPrn,RinexObsData::RinexObsTypeMap > *) 0 ;
    std::map<RinexPrn,RinexObsData::RinexObsTypeMap >::key_type *arg2 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RinexPrnMap_has_key",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__mapTgpstk__RinexPrn_std__mapTRinexObsType_RinexDatum_std__lessTRinexObsType_t_std__allocatorTstd__pairTRinexObsType_const_RinexDatum_t_t_t_std__lessTgpstk__RinexPrn_t_std__allocatorTstd__pairTgpstk__RinexPrn_const_std__mapTRinexObsType_RinexDatum_std__lessTRinexObsType_t_std__allocatorTstd__pairTRinexObsType_const_RinexDatum_t_t_t_t_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__mapTgpstk__RinexPrn_gpstk__RinexObsData__RinexObsTypeMap_std__lessTgpstk__RinexPrn_t_std__allocatorTstd__pairTgpstk__RinexPrn_const_gpstk__RinexObsData__RinexObsTypeMap_t_t_t__key_type, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("std::map<RinexPrn,RinexObsData::RinexObsTypeMap >::key_type");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (bool)std_map_Sl_RinexPrn_Sc_RinexObsData_RinexObsTypeMap_Sg__has_key((std::map<RinexPrn,RinexObsData::RinexObsTypeMap > const *)arg1,(gpstk::RinexPrn const &)*arg2);
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexPrnMap_keys(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::map<RinexPrn,RinexObsData::RinexObsTypeMap > *arg1 = (std::map<RinexPrn,RinexObsData::RinexObsTypeMap > *) 0 ;
    PyObject *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RinexPrnMap_keys",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__mapTgpstk__RinexPrn_std__mapTRinexObsType_RinexDatum_std__lessTRinexObsType_t_std__allocatorTstd__pairTRinexObsType_const_RinexDatum_t_t_t_std__lessTgpstk__RinexPrn_t_std__allocatorTstd__pairTgpstk__RinexPrn_const_std__mapTRinexObsType_RinexDatum_std__lessTRinexObsType_t_std__allocatorTstd__pairTRinexObsType_const_RinexDatum_t_t_t_t_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (PyObject *)std_map_Sl_RinexPrn_Sc_RinexObsData_RinexObsTypeMap_Sg__keys(arg1);
    
    resultobj = result;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexPrnMap_values(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::map<RinexPrn,RinexObsData::RinexObsTypeMap > *arg1 = (std::map<RinexPrn,RinexObsData::RinexObsTypeMap > *) 0 ;
    PyObject *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RinexPrnMap_values",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__mapTgpstk__RinexPrn_std__mapTRinexObsType_RinexDatum_std__lessTRinexObsType_t_std__allocatorTstd__pairTRinexObsType_const_RinexDatum_t_t_t_std__lessTgpstk__RinexPrn_t_std__allocatorTstd__pairTgpstk__RinexPrn_const_std__mapTRinexObsType_RinexDatum_std__lessTRinexObsType_t_std__allocatorTstd__pairTRinexObsType_const_RinexDatum_t_t_t_t_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (PyObject *)std_map_Sl_RinexPrn_Sc_RinexObsData_RinexObsTypeMap_Sg__values(arg1);
    
    resultobj = result;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexPrnMap_items(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::map<RinexPrn,RinexObsData::RinexObsTypeMap > *arg1 = (std::map<RinexPrn,RinexObsData::RinexObsTypeMap > *) 0 ;
    PyObject *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RinexPrnMap_items",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__mapTgpstk__RinexPrn_std__mapTRinexObsType_RinexDatum_std__lessTRinexObsType_t_std__allocatorTstd__pairTRinexObsType_const_RinexDatum_t_t_t_std__lessTgpstk__RinexPrn_t_std__allocatorTstd__pairTgpstk__RinexPrn_const_std__mapTRinexObsType_RinexDatum_std__lessTRinexObsType_t_std__allocatorTstd__pairTRinexObsType_const_RinexDatum_t_t_t_t_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (PyObject *)std_map_Sl_RinexPrn_Sc_RinexObsData_RinexObsTypeMap_Sg__items(arg1);
    
    resultobj = result;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexPrnMap___contains__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::map<RinexPrn,RinexObsData::RinexObsTypeMap > *arg1 = (std::map<RinexPrn,RinexObsData::RinexObsTypeMap > *) 0 ;
    std::map<RinexPrn,RinexObsData::RinexObsTypeMap >::key_type *arg2 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RinexPrnMap___contains__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__mapTgpstk__RinexPrn_std__mapTRinexObsType_RinexDatum_std__lessTRinexObsType_t_std__allocatorTstd__pairTRinexObsType_const_RinexDatum_t_t_t_std__lessTgpstk__RinexPrn_t_std__allocatorTstd__pairTgpstk__RinexPrn_const_std__mapTRinexObsType_RinexDatum_std__lessTRinexObsType_t_std__allocatorTstd__pairTRinexObsType_const_RinexDatum_t_t_t_t_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__mapTgpstk__RinexPrn_gpstk__RinexObsData__RinexObsTypeMap_std__lessTgpstk__RinexPrn_t_std__allocatorTstd__pairTgpstk__RinexPrn_const_gpstk__RinexObsData__RinexObsTypeMap_t_t_t__key_type, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("std::map<RinexPrn,RinexObsData::RinexObsTypeMap >::key_type");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (bool)std_map_Sl_RinexPrn_Sc_RinexObsData_RinexObsTypeMap_Sg____contains__(arg1,(gpstk::RinexPrn const &)*arg2);
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexPrnMap___iter__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::map<RinexPrn,RinexObsData::RinexObsTypeMap > *arg1 = (std::map<RinexPrn,RinexObsData::RinexObsTypeMap > *) 0 ;
    PyObject *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RinexPrnMap___iter__",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__mapTgpstk__RinexPrn_std__mapTRinexObsType_RinexDatum_std__lessTRinexObsType_t_std__allocatorTstd__pairTRinexObsType_const_RinexDatum_t_t_t_std__lessTgpstk__RinexPrn_t_std__allocatorTstd__pairTgpstk__RinexPrn_const_std__mapTRinexObsType_RinexDatum_std__lessTRinexObsType_t_std__allocatorTstd__pairTRinexObsType_const_RinexDatum_t_t_t_t_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (PyObject *)std_map_Sl_RinexPrn_Sc_RinexObsData_RinexObsTypeMap_Sg____iter__(arg1);
    
    resultobj = result;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_RinexPrnMap(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::map<RinexPrn,RinexObsData::RinexObsTypeMap > *arg1 = (std::map<RinexPrn,RinexObsData::RinexObsTypeMap > *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_RinexPrnMap",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__mapTgpstk__RinexPrn_std__mapTRinexObsType_RinexDatum_std__lessTRinexObsType_t_std__allocatorTstd__pairTRinexObsType_const_RinexDatum_t_t_t_std__lessTgpstk__RinexPrn_t_std__allocatorTstd__pairTgpstk__RinexPrn_const_std__mapTRinexObsType_RinexDatum_std__lessTRinexObsType_t_std__allocatorTstd__pairTRinexObsType_const_RinexDatum_t_t_t_t_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * RinexPrnMap_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_std__mapTgpstk__RinexPrn_std__mapTRinexObsType_RinexDatum_std__lessTRinexObsType_t_std__allocatorTstd__pairTRinexObsType_const_RinexDatum_t_t_t_std__lessTgpstk__RinexPrn_t_std__allocatorTstd__pairTgpstk__RinexPrn_const_std__mapTRinexObsType_RinexDatum_std__lessTRinexObsType_t_std__allocatorTstd__pairTRinexObsType_const_RinexDatum_t_t_t_t_t_t, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_BOGUS_TEMPLATE__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::map<RinexPrn,int > *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_BOGUS_TEMPLATE")) goto fail;
    result = (std::map<RinexPrn,int > *)new std::map<RinexPrn,int >();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__mapTgpstk__RinexPrn_int_std__lessTgpstk__RinexPrn_t_std__allocatorTstd__pairTgpstk__RinexPrn_const_int_t_t_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_BOGUS_TEMPLATE__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::map<RinexPrn,int > *arg1 = 0 ;
    std::map<RinexPrn,int > *result;
    int res1 = 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_BOGUS_TEMPLATE",&obj0)) goto fail;
    {
        std::map<RinexPrn,int,std::less<RinexPrn >,std::allocator<std::pair<RinexPrn const,int > > > *ptr = (std::map<RinexPrn,int,std::less<RinexPrn >,std::allocator<std::pair<RinexPrn const,int > > > *)0;
        res1 = swig::asptr(obj0, &ptr);
        if (!res1) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::map<RinexPrn,int >", obj0);
        } else if (!ptr) {
            SWIG_null_ref("std::map<RinexPrn,int >");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = ptr;
    }
    result = (std::map<RinexPrn,int > *)new std::map<RinexPrn,int >((std::map<RinexPrn,int > const &)*arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__mapTgpstk__RinexPrn_int_std__lessTgpstk__RinexPrn_t_std__allocatorTstd__pairTgpstk__RinexPrn_const_int_t_t_t, 1);
    if (res1 == SWIG_NEWOBJ) delete arg1;
    return resultobj;
    fail:
    if (res1 == SWIG_NEWOBJ) delete arg1;
    return NULL;
}


static PyObject *_wrap_new_BOGUS_TEMPLATE(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[2];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 1); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_new_BOGUS_TEMPLATE__SWIG_0(self,args);
    }
    if (argc == 1) {
        int _v;
        _v = swig::asptr(argv[0], (std::map<RinexPrn,int,std::less<RinexPrn >,std::allocator<std::pair<RinexPrn const,int > > >**)(0));
        if (_v) {
            return _wrap_new_BOGUS_TEMPLATE__SWIG_1(self,args);
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'new_BOGUS_TEMPLATE'");
    return NULL;
}


static PyObject *_wrap_BOGUS_TEMPLATE_empty(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::map<RinexPrn,int > *arg1 = (std::map<RinexPrn,int > *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:BOGUS_TEMPLATE_empty",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__mapTgpstk__RinexPrn_int_std__lessTgpstk__RinexPrn_t_std__allocatorTstd__pairTgpstk__RinexPrn_const_int_t_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)((std::map<RinexPrn,int > const *)arg1)->empty();
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_BOGUS_TEMPLATE_size(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::map<RinexPrn,int > *arg1 = (std::map<RinexPrn,int > *) 0 ;
    std::map<RinexPrn,int >::size_type result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:BOGUS_TEMPLATE_size",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__mapTgpstk__RinexPrn_int_std__lessTgpstk__RinexPrn_t_std__allocatorTstd__pairTgpstk__RinexPrn_const_int_t_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = ((std::map<RinexPrn,int > const *)arg1)->size();
    
    {
        resultobj = SWIG_From_unsigned_SS_long((unsigned long)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_BOGUS_TEMPLATE_clear(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::map<RinexPrn,int > *arg1 = (std::map<RinexPrn,int > *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:BOGUS_TEMPLATE_clear",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__mapTgpstk__RinexPrn_int_std__lessTgpstk__RinexPrn_t_std__allocatorTstd__pairTgpstk__RinexPrn_const_int_t_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    (arg1)->clear();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_BOGUS_TEMPLATE_swap(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::map<RinexPrn,int > *arg1 = (std::map<RinexPrn,int > *) 0 ;
    std::map<RinexPrn,int > *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:BOGUS_TEMPLATE_swap",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__mapTgpstk__RinexPrn_int_std__lessTgpstk__RinexPrn_t_std__allocatorTstd__pairTgpstk__RinexPrn_const_int_t_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__mapTgpstk__RinexPrn_int_std__lessTgpstk__RinexPrn_t_std__allocatorTstd__pairTgpstk__RinexPrn_const_int_t_t_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("std::map<RinexPrn,int >");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    (arg1)->swap(*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_BOGUS_TEMPLATE_get_allocator(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::map<RinexPrn,int > *arg1 = (std::map<RinexPrn,int > *) 0 ;
    SwigValueWrapper<std::allocator<std::pair<gpstk::RinexPrn const,int > > > result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:BOGUS_TEMPLATE_get_allocator",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__mapTgpstk__RinexPrn_int_std__lessTgpstk__RinexPrn_t_std__allocatorTstd__pairTgpstk__RinexPrn_const_int_t_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = ((std::map<RinexPrn,int > const *)arg1)->get_allocator();
    
    {
        std::map<RinexPrn,int >::allocator_type * resultptr;
        resultptr = new std::map<RinexPrn,int >::allocator_type((std::map<RinexPrn,int >::allocator_type &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_std__mapTgpstk__RinexPrn_int_std__lessTgpstk__RinexPrn_t_std__allocatorTstd__pairTgpstk__RinexPrn_const_int_t_t_t__allocator_type, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_BOGUS_TEMPLATE_erase(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::map<RinexPrn,int > *arg1 = (std::map<RinexPrn,int > *) 0 ;
    std::map<RinexPrn,int >::key_type *arg2 = 0 ;
    std::map<RinexPrn,int >::size_type result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:BOGUS_TEMPLATE_erase",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__mapTgpstk__RinexPrn_int_std__lessTgpstk__RinexPrn_t_std__allocatorTstd__pairTgpstk__RinexPrn_const_int_t_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__mapTgpstk__RinexPrn_int_std__lessTgpstk__RinexPrn_t_std__allocatorTstd__pairTgpstk__RinexPrn_const_int_t_t_t__key_type, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("std::map<RinexPrn,int >::key_type");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (arg1)->erase((gpstk::RinexPrn const &)*arg2);
    
    {
        resultobj = SWIG_From_unsigned_SS_long((unsigned long)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_BOGUS_TEMPLATE_count(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::map<RinexPrn,int > *arg1 = (std::map<RinexPrn,int > *) 0 ;
    std::map<RinexPrn,int >::key_type *arg2 = 0 ;
    std::map<RinexPrn,int >::size_type result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:BOGUS_TEMPLATE_count",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__mapTgpstk__RinexPrn_int_std__lessTgpstk__RinexPrn_t_std__allocatorTstd__pairTgpstk__RinexPrn_const_int_t_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__mapTgpstk__RinexPrn_int_std__lessTgpstk__RinexPrn_t_std__allocatorTstd__pairTgpstk__RinexPrn_const_int_t_t_t__key_type, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("std::map<RinexPrn,int >::key_type");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = ((std::map<RinexPrn,int > const *)arg1)->count((gpstk::RinexPrn const &)*arg2);
    
    {
        resultobj = SWIG_From_unsigned_SS_long((unsigned long)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_BOGUS_TEMPLATE___nonzero__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::map<RinexPrn,int > *arg1 = (std::map<RinexPrn,int > *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:BOGUS_TEMPLATE___nonzero__",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__mapTgpstk__RinexPrn_int_std__lessTgpstk__RinexPrn_t_std__allocatorTstd__pairTgpstk__RinexPrn_const_int_t_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)std_map_Sl_RinexPrn_Sc_int_Sg____nonzero__((std::map<RinexPrn,int > const *)arg1);
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_BOGUS_TEMPLATE___len__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::map<RinexPrn,int > *arg1 = (std::map<RinexPrn,int > *) 0 ;
    std::map<RinexPrn,int >::size_type result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:BOGUS_TEMPLATE___len__",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__mapTgpstk__RinexPrn_int_std__lessTgpstk__RinexPrn_t_std__allocatorTstd__pairTgpstk__RinexPrn_const_int_t_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = std_map_Sl_RinexPrn_Sc_int_Sg____len__((std::map<RinexPrn,int > const *)arg1);
    
    {
        resultobj = SWIG_From_unsigned_SS_long((unsigned long)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_BOGUS_TEMPLATE___getitem__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::map<RinexPrn,int > *arg1 = (std::map<RinexPrn,int > *) 0 ;
    std::map<RinexPrn,int >::key_type *arg2 = 0 ;
    std::map<RinexPrn,int >::mapped_type result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:BOGUS_TEMPLATE___getitem__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__mapTgpstk__RinexPrn_int_std__lessTgpstk__RinexPrn_t_std__allocatorTstd__pairTgpstk__RinexPrn_const_int_t_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__mapTgpstk__RinexPrn_int_std__lessTgpstk__RinexPrn_t_std__allocatorTstd__pairTgpstk__RinexPrn_const_int_t_t_t__key_type, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("std::map<RinexPrn,int >::key_type");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        try {
            result = (std::map<RinexPrn,int >::mapped_type)std_map_Sl_RinexPrn_Sc_int_Sg____getitem__((std::map<RinexPrn,int > const *)arg1,(gpstk::RinexPrn const &)*arg2);
        }
        catch (std::out_of_range& e) {
            if (!PyErr_Occurred()) {
                SWIG_exception(SWIG_IndexError,const_cast<char*>(e.what()));
            } else {
                SWIG_fail;
            }
        }
        /*@/usr/local/share/swig/1.3.25/exception.i,341,SWIG_CATCH_UNKNOWN@*/  catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "unknown exception");
        }
        /*@@*/
    }
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_BOGUS_TEMPLATE___setitem__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::map<RinexPrn,int > *arg1 = (std::map<RinexPrn,int > *) 0 ;
    std::map<RinexPrn,int >::key_type *arg2 = 0 ;
    std::map<RinexPrn,int >::mapped_type *arg3 = 0 ;
    std::map<RinexPrn,int >::mapped_type temp3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:BOGUS_TEMPLATE___setitem__",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__mapTgpstk__RinexPrn_int_std__lessTgpstk__RinexPrn_t_std__allocatorTstd__pairTgpstk__RinexPrn_const_int_t_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__mapTgpstk__RinexPrn_int_std__lessTgpstk__RinexPrn_t_std__allocatorTstd__pairTgpstk__RinexPrn_const_int_t_t_t__key_type, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("std::map<RinexPrn,int >::key_type");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        temp3 = (std::map<RinexPrn,int >::mapped_type)(SWIG_As_int(obj2));
        if (SWIG_arg_fail(3)) SWIG_fail;
        arg3 = &temp3;
    }
    {
        try {
            std_map_Sl_RinexPrn_Sc_int_Sg____setitem__(arg1,(gpstk::RinexPrn const &)*arg2,(int const &)*arg3);
        }
        catch (std::out_of_range& e) {
            if (!PyErr_Occurred()) {
                SWIG_exception(SWIG_IndexError,const_cast<char*>(e.what()));
            } else {
                SWIG_fail;
            }
        }
        /*@/usr/local/share/swig/1.3.25/exception.i,341,SWIG_CATCH_UNKNOWN@*/  catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "unknown exception");
        }
        /*@@*/
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_BOGUS_TEMPLATE___delitem__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::map<RinexPrn,int > *arg1 = (std::map<RinexPrn,int > *) 0 ;
    std::map<RinexPrn,int >::key_type *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:BOGUS_TEMPLATE___delitem__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__mapTgpstk__RinexPrn_int_std__lessTgpstk__RinexPrn_t_std__allocatorTstd__pairTgpstk__RinexPrn_const_int_t_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__mapTgpstk__RinexPrn_int_std__lessTgpstk__RinexPrn_t_std__allocatorTstd__pairTgpstk__RinexPrn_const_int_t_t_t__key_type, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("std::map<RinexPrn,int >::key_type");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        try {
            std_map_Sl_RinexPrn_Sc_int_Sg____delitem__(arg1,(gpstk::RinexPrn const &)*arg2);
        }
        catch (std::out_of_range& e) {
            if (!PyErr_Occurred()) {
                SWIG_exception(SWIG_IndexError,const_cast<char*>(e.what()));
            } else {
                SWIG_fail;
            }
        }
        /*@/usr/local/share/swig/1.3.25/exception.i,341,SWIG_CATCH_UNKNOWN@*/  catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "unknown exception");
        }
        /*@@*/
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_BOGUS_TEMPLATE_has_key(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::map<RinexPrn,int > *arg1 = (std::map<RinexPrn,int > *) 0 ;
    std::map<RinexPrn,int >::key_type *arg2 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:BOGUS_TEMPLATE_has_key",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__mapTgpstk__RinexPrn_int_std__lessTgpstk__RinexPrn_t_std__allocatorTstd__pairTgpstk__RinexPrn_const_int_t_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__mapTgpstk__RinexPrn_int_std__lessTgpstk__RinexPrn_t_std__allocatorTstd__pairTgpstk__RinexPrn_const_int_t_t_t__key_type, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("std::map<RinexPrn,int >::key_type");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (bool)std_map_Sl_RinexPrn_Sc_int_Sg__has_key((std::map<RinexPrn,int > const *)arg1,(gpstk::RinexPrn const &)*arg2);
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_BOGUS_TEMPLATE_keys(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::map<RinexPrn,int > *arg1 = (std::map<RinexPrn,int > *) 0 ;
    PyObject *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:BOGUS_TEMPLATE_keys",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__mapTgpstk__RinexPrn_int_std__lessTgpstk__RinexPrn_t_std__allocatorTstd__pairTgpstk__RinexPrn_const_int_t_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (PyObject *)std_map_Sl_RinexPrn_Sc_int_Sg__keys(arg1);
    
    resultobj = result;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_BOGUS_TEMPLATE_values(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::map<RinexPrn,int > *arg1 = (std::map<RinexPrn,int > *) 0 ;
    PyObject *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:BOGUS_TEMPLATE_values",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__mapTgpstk__RinexPrn_int_std__lessTgpstk__RinexPrn_t_std__allocatorTstd__pairTgpstk__RinexPrn_const_int_t_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (PyObject *)std_map_Sl_RinexPrn_Sc_int_Sg__values(arg1);
    
    resultobj = result;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_BOGUS_TEMPLATE_items(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::map<RinexPrn,int > *arg1 = (std::map<RinexPrn,int > *) 0 ;
    PyObject *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:BOGUS_TEMPLATE_items",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__mapTgpstk__RinexPrn_int_std__lessTgpstk__RinexPrn_t_std__allocatorTstd__pairTgpstk__RinexPrn_const_int_t_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (PyObject *)std_map_Sl_RinexPrn_Sc_int_Sg__items(arg1);
    
    resultobj = result;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_BOGUS_TEMPLATE___contains__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::map<RinexPrn,int > *arg1 = (std::map<RinexPrn,int > *) 0 ;
    std::map<RinexPrn,int >::key_type *arg2 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:BOGUS_TEMPLATE___contains__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__mapTgpstk__RinexPrn_int_std__lessTgpstk__RinexPrn_t_std__allocatorTstd__pairTgpstk__RinexPrn_const_int_t_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__mapTgpstk__RinexPrn_int_std__lessTgpstk__RinexPrn_t_std__allocatorTstd__pairTgpstk__RinexPrn_const_int_t_t_t__key_type, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("std::map<RinexPrn,int >::key_type");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (bool)std_map_Sl_RinexPrn_Sc_int_Sg____contains__(arg1,(gpstk::RinexPrn const &)*arg2);
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_BOGUS_TEMPLATE___iter__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::map<RinexPrn,int > *arg1 = (std::map<RinexPrn,int > *) 0 ;
    PyObject *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:BOGUS_TEMPLATE___iter__",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__mapTgpstk__RinexPrn_int_std__lessTgpstk__RinexPrn_t_std__allocatorTstd__pairTgpstk__RinexPrn_const_int_t_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (PyObject *)std_map_Sl_RinexPrn_Sc_int_Sg____iter__(arg1);
    
    resultobj = result;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_BOGUS_TEMPLATE(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::map<RinexPrn,int > *arg1 = (std::map<RinexPrn,int > *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_BOGUS_TEMPLATE",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__mapTgpstk__RinexPrn_int_std__lessTgpstk__RinexPrn_t_std__allocatorTstd__pairTgpstk__RinexPrn_const_int_t_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * BOGUS_TEMPLATE_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_std__mapTgpstk__RinexPrn_int_std__lessTgpstk__RinexPrn_t_std__allocatorTstd__pairTgpstk__RinexPrn_const_int_t_t_t, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_SP3Header(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::SP3Header *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_SP3Header")) goto fail;
    result = (gpstk::SP3Header *)new gpstk::SP3Header();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__SP3Header, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_SP3Header(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::SP3Header *arg1 = (gpstk::SP3Header *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_SP3Header",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__SP3Header, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SP3Header_isHeader(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::SP3Header *arg1 = (gpstk::SP3Header *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:SP3Header_isHeader",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__SP3Header, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)((gpstk::SP3Header const *)arg1)->isHeader();
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SP3Header_dump(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::SP3Header *arg1 = (gpstk::SP3Header *) 0 ;
    std::ostream *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:SP3Header_dump",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__SP3Header, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("std::ostream");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    ((gpstk::SP3Header const *)arg1)->dump(*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SP3Header_version_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::SP3Header *arg1 = (gpstk::SP3Header *) 0 ;
    char arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:SP3Header_version_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__SP3Header, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (char)(SWIG_As_char(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->version = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SP3Header_version_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::SP3Header *arg1 = (gpstk::SP3Header *) 0 ;
    char result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:SP3Header_version_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__SP3Header, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (char) ((arg1)->version);
    
    {
        resultobj = SWIG_From_char((char)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SP3Header_pvFlag_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::SP3Header *arg1 = (gpstk::SP3Header *) 0 ;
    char arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:SP3Header_pvFlag_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__SP3Header, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (char)(SWIG_As_char(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->pvFlag = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SP3Header_pvFlag_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::SP3Header *arg1 = (gpstk::SP3Header *) 0 ;
    char result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:SP3Header_pvFlag_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__SP3Header, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (char) ((arg1)->pvFlag);
    
    {
        resultobj = SWIG_From_char((char)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SP3Header_time_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::SP3Header *arg1 = (gpstk::SP3Header *) 0 ;
    DayTime *arg2 = (DayTime *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:SP3Header_time_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__SP3Header, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_gpstk__DayTime, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->time = *arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SP3Header_time_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::SP3Header *arg1 = (gpstk::SP3Header *) 0 ;
    DayTime *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:SP3Header_time_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__SP3Header, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (DayTime *)& ((arg1)->time);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__DayTime, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SP3Header_epochInterval_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::SP3Header *arg1 = (gpstk::SP3Header *) 0 ;
    double arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:SP3Header_epochInterval_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__SP3Header, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->epochInterval = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SP3Header_epochInterval_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::SP3Header *arg1 = (gpstk::SP3Header *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:SP3Header_epochInterval_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__SP3Header, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double) ((arg1)->epochInterval);
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SP3Header_numberOfEpochs_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::SP3Header *arg1 = (gpstk::SP3Header *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:SP3Header_numberOfEpochs_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__SP3Header, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->numberOfEpochs = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SP3Header_numberOfEpochs_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::SP3Header *arg1 = (gpstk::SP3Header *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:SP3Header_numberOfEpochs_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__SP3Header, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int) ((arg1)->numberOfEpochs);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SP3Header_dataUsed_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::SP3Header *arg1 = (gpstk::SP3Header *) 0 ;
    std::string *arg2 = (std::string *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:SP3Header_dataUsed_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__SP3Header, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__string, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->dataUsed = *arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SP3Header_dataUsed_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::SP3Header *arg1 = (gpstk::SP3Header *) 0 ;
    std::string *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:SP3Header_dataUsed_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__SP3Header, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (std::string *)& ((arg1)->dataUsed);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__string, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SP3Header_coordSystem_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::SP3Header *arg1 = (gpstk::SP3Header *) 0 ;
    std::string *arg2 = (std::string *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:SP3Header_coordSystem_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__SP3Header, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__string, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->coordSystem = *arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SP3Header_coordSystem_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::SP3Header *arg1 = (gpstk::SP3Header *) 0 ;
    std::string *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:SP3Header_coordSystem_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__SP3Header, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (std::string *)& ((arg1)->coordSystem);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__string, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SP3Header_orbitType_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::SP3Header *arg1 = (gpstk::SP3Header *) 0 ;
    std::string *arg2 = (std::string *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:SP3Header_orbitType_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__SP3Header, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__string, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->orbitType = *arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SP3Header_orbitType_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::SP3Header *arg1 = (gpstk::SP3Header *) 0 ;
    std::string *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:SP3Header_orbitType_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__SP3Header, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (std::string *)& ((arg1)->orbitType);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__string, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SP3Header_agency_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::SP3Header *arg1 = (gpstk::SP3Header *) 0 ;
    std::string *arg2 = (std::string *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:SP3Header_agency_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__SP3Header, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__string, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->agency = *arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SP3Header_agency_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::SP3Header *arg1 = (gpstk::SP3Header *) 0 ;
    std::string *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:SP3Header_agency_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__SP3Header, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (std::string *)& ((arg1)->agency);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__string, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SP3Header_svList_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::SP3Header *arg1 = (gpstk::SP3Header *) 0 ;
    std::map<short,short,std::less<short >,std::allocator<std::pair<short const,short > > > *arg2 = (std::map<short,short,std::less<short >,std::allocator<std::pair<short const,short > > > *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:SP3Header_svList_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__SP3Header, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__mapTshort_short_std__lessTshort_t_std__allocatorTstd__pairTshort_const_short_t_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->svList = *arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SP3Header_svList_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::SP3Header *arg1 = (gpstk::SP3Header *) 0 ;
    std::map<short,short,std::less<short >,std::allocator<std::pair<short const,short > > > *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:SP3Header_svList_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__SP3Header, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (std::map<short,short,std::less<short >,std::allocator<std::pair<short const,short > > > *)& ((arg1)->svList);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__mapTshort_short_std__lessTshort_t_std__allocatorTstd__pairTshort_const_short_t_t_t, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SP3Header_comments_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::SP3Header *arg1 = (gpstk::SP3Header *) 0 ;
    std::vector<std::string,std::allocator<std::string > > *arg2 = (std::vector<std::string,std::allocator<std::string > > *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:SP3Header_comments_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__SP3Header, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__vectorTstd__string_std__allocatorTstd__string_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->comments = *arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SP3Header_comments_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::SP3Header *arg1 = (gpstk::SP3Header *) 0 ;
    std::vector<std::string,std::allocator<std::string > > *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:SP3Header_comments_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__SP3Header, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (std::vector<std::string,std::allocator<std::string > > *)& ((arg1)->comments);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__vectorTstd__string_std__allocatorTstd__string_t_t, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject * SP3Header_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_gpstk__SP3Header, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_RinexNavHeader(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexNavHeader *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_RinexNavHeader")) goto fail;
    result = (gpstk::RinexNavHeader *)new gpstk::RinexNavHeader();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__RinexNavHeader, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_RinexNavHeader(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexNavHeader *arg1 = (gpstk::RinexNavHeader *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_RinexNavHeader",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexNavHeader, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexNavHeader_isHeader(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexNavHeader *arg1 = (gpstk::RinexNavHeader *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RinexNavHeader_isHeader",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexNavHeader, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)((gpstk::RinexNavHeader const *)arg1)->isHeader();
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexNavHeader_dump(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexNavHeader *arg1 = (gpstk::RinexNavHeader *) 0 ;
    std::ostream *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RinexNavHeader_dump",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexNavHeader, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("std::ostream");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    ((gpstk::RinexNavHeader const *)arg1)->dump(*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexNavHeader_valid_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexNavHeader *arg1 = (gpstk::RinexNavHeader *) 0 ;
    unsigned long arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RinexNavHeader_valid_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexNavHeader, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (unsigned long)(SWIG_As_unsigned_SS_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->valid = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexNavHeader_valid_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexNavHeader *arg1 = (gpstk::RinexNavHeader *) 0 ;
    unsigned long result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RinexNavHeader_valid_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexNavHeader, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (unsigned long) ((arg1)->valid);
    
    {
        resultobj = SWIG_From_unsigned_SS_long((unsigned long)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexNavHeader_version_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexNavHeader *arg1 = (gpstk::RinexNavHeader *) 0 ;
    double arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RinexNavHeader_version_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexNavHeader, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->version = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexNavHeader_version_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexNavHeader *arg1 = (gpstk::RinexNavHeader *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RinexNavHeader_version_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexNavHeader, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double) ((arg1)->version);
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexNavHeader_fileType_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexNavHeader *arg1 = (gpstk::RinexNavHeader *) 0 ;
    std::string *arg2 = (std::string *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RinexNavHeader_fileType_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexNavHeader, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__string, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->fileType = *arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexNavHeader_fileType_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexNavHeader *arg1 = (gpstk::RinexNavHeader *) 0 ;
    std::string *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RinexNavHeader_fileType_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexNavHeader, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (std::string *)& ((arg1)->fileType);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__string, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexNavHeader_fileProgram_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexNavHeader *arg1 = (gpstk::RinexNavHeader *) 0 ;
    std::string *arg2 = (std::string *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RinexNavHeader_fileProgram_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexNavHeader, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__string, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->fileProgram = *arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexNavHeader_fileProgram_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexNavHeader *arg1 = (gpstk::RinexNavHeader *) 0 ;
    std::string *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RinexNavHeader_fileProgram_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexNavHeader, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (std::string *)& ((arg1)->fileProgram);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__string, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexNavHeader_fileAgency_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexNavHeader *arg1 = (gpstk::RinexNavHeader *) 0 ;
    std::string *arg2 = (std::string *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RinexNavHeader_fileAgency_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexNavHeader, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__string, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->fileAgency = *arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexNavHeader_fileAgency_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexNavHeader *arg1 = (gpstk::RinexNavHeader *) 0 ;
    std::string *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RinexNavHeader_fileAgency_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexNavHeader, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (std::string *)& ((arg1)->fileAgency);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__string, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexNavHeader_date_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexNavHeader *arg1 = (gpstk::RinexNavHeader *) 0 ;
    std::string *arg2 = (std::string *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RinexNavHeader_date_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexNavHeader, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__string, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->date = *arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexNavHeader_date_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexNavHeader *arg1 = (gpstk::RinexNavHeader *) 0 ;
    std::string *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RinexNavHeader_date_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexNavHeader, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (std::string *)& ((arg1)->date);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__string, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexNavHeader_commentList_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexNavHeader *arg1 = (gpstk::RinexNavHeader *) 0 ;
    std::vector<std::string,std::allocator<std::string > > *arg2 = (std::vector<std::string,std::allocator<std::string > > *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RinexNavHeader_commentList_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexNavHeader, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__vectorTstd__string_std__allocatorTstd__string_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->commentList = *arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexNavHeader_commentList_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexNavHeader *arg1 = (gpstk::RinexNavHeader *) 0 ;
    std::vector<std::string,std::allocator<std::string > > *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RinexNavHeader_commentList_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexNavHeader, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (std::vector<std::string,std::allocator<std::string > > *)& ((arg1)->commentList);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__vectorTstd__string_std__allocatorTstd__string_t_t, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexNavHeader_ionAlpha_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexNavHeader *arg1 = (gpstk::RinexNavHeader *) 0 ;
    double *arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RinexNavHeader_ionAlpha_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexNavHeader, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_double, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    {
        double *inp = (double *)(arg2);
        if (inp) {
            double *dest = (double *)(arg1->ionAlpha);
            size_t ii = 0;
            for (; ii < 4; ++ii) dest[ii] = inp[ii];
        } else {
            SWIG_null_ref("double");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexNavHeader_ionAlpha_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexNavHeader *arg1 = (gpstk::RinexNavHeader *) 0 ;
    double *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RinexNavHeader_ionAlpha_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexNavHeader, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double *)(double *) ((arg1)->ionAlpha);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_double, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexNavHeader_ionBeta_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexNavHeader *arg1 = (gpstk::RinexNavHeader *) 0 ;
    double *arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RinexNavHeader_ionBeta_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexNavHeader, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_double, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    {
        double *inp = (double *)(arg2);
        if (inp) {
            double *dest = (double *)(arg1->ionBeta);
            size_t ii = 0;
            for (; ii < 4; ++ii) dest[ii] = inp[ii];
        } else {
            SWIG_null_ref("double");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexNavHeader_ionBeta_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexNavHeader *arg1 = (gpstk::RinexNavHeader *) 0 ;
    double *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RinexNavHeader_ionBeta_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexNavHeader, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double *)(double *) ((arg1)->ionBeta);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_double, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexNavHeader_A0_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexNavHeader *arg1 = (gpstk::RinexNavHeader *) 0 ;
    double arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RinexNavHeader_A0_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexNavHeader, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->A0 = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexNavHeader_A0_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexNavHeader *arg1 = (gpstk::RinexNavHeader *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RinexNavHeader_A0_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexNavHeader, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double) ((arg1)->A0);
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexNavHeader_A1_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexNavHeader *arg1 = (gpstk::RinexNavHeader *) 0 ;
    double arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RinexNavHeader_A1_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexNavHeader, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->A1 = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexNavHeader_A1_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexNavHeader *arg1 = (gpstk::RinexNavHeader *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RinexNavHeader_A1_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexNavHeader, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double) ((arg1)->A1);
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexNavHeader_UTCRefTime_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexNavHeader *arg1 = (gpstk::RinexNavHeader *) 0 ;
    long arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RinexNavHeader_UTCRefTime_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexNavHeader, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (long)(SWIG_As_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->UTCRefTime = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexNavHeader_UTCRefTime_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexNavHeader *arg1 = (gpstk::RinexNavHeader *) 0 ;
    long result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RinexNavHeader_UTCRefTime_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexNavHeader, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (long) ((arg1)->UTCRefTime);
    
    {
        resultobj = SWIG_From_long((long)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexNavHeader_UTCRefWeek_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexNavHeader *arg1 = (gpstk::RinexNavHeader *) 0 ;
    long arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RinexNavHeader_UTCRefWeek_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexNavHeader, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (long)(SWIG_As_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->UTCRefWeek = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexNavHeader_UTCRefWeek_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexNavHeader *arg1 = (gpstk::RinexNavHeader *) 0 ;
    long result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RinexNavHeader_UTCRefWeek_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexNavHeader, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (long) ((arg1)->UTCRefWeek);
    
    {
        resultobj = SWIG_From_long((long)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexNavHeader_leapSeconds_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexNavHeader *arg1 = (gpstk::RinexNavHeader *) 0 ;
    long arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RinexNavHeader_leapSeconds_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexNavHeader, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (long)(SWIG_As_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->leapSeconds = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexNavHeader_leapSeconds_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexNavHeader *arg1 = (gpstk::RinexNavHeader *) 0 ;
    long result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RinexNavHeader_leapSeconds_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexNavHeader, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (long) ((arg1)->leapSeconds);
    
    {
        resultobj = SWIG_From_long((long)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static int _wrap_RinexNavHeader_versionString_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable RinexNavHeader_versionString is read-only.");
    return 1;
}


static PyObject *_wrap_RinexNavHeader_versionString_get(void) {
    PyObject *pyobj = NULL;
    
    {
        pyobj = SWIG_From_std_string((std::string)(gpstk::RinexNavHeader::versionString)); 
    }
    return pyobj;
}


static int _wrap_RinexNavHeader_runByString_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable RinexNavHeader_runByString is read-only.");
    return 1;
}


static PyObject *_wrap_RinexNavHeader_runByString_get(void) {
    PyObject *pyobj = NULL;
    
    {
        pyobj = SWIG_From_std_string((std::string)(gpstk::RinexNavHeader::runByString)); 
    }
    return pyobj;
}


static int _wrap_RinexNavHeader_commentString_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable RinexNavHeader_commentString is read-only.");
    return 1;
}


static PyObject *_wrap_RinexNavHeader_commentString_get(void) {
    PyObject *pyobj = NULL;
    
    {
        pyobj = SWIG_From_std_string((std::string)(gpstk::RinexNavHeader::commentString)); 
    }
    return pyobj;
}


static int _wrap_RinexNavHeader_ionAlphaString_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable RinexNavHeader_ionAlphaString is read-only.");
    return 1;
}


static PyObject *_wrap_RinexNavHeader_ionAlphaString_get(void) {
    PyObject *pyobj = NULL;
    
    {
        pyobj = SWIG_From_std_string((std::string)(gpstk::RinexNavHeader::ionAlphaString)); 
    }
    return pyobj;
}


static int _wrap_RinexNavHeader_ionBetaString_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable RinexNavHeader_ionBetaString is read-only.");
    return 1;
}


static PyObject *_wrap_RinexNavHeader_ionBetaString_get(void) {
    PyObject *pyobj = NULL;
    
    {
        pyobj = SWIG_From_std_string((std::string)(gpstk::RinexNavHeader::ionBetaString)); 
    }
    return pyobj;
}


static int _wrap_RinexNavHeader_deltaUTCString_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable RinexNavHeader_deltaUTCString is read-only.");
    return 1;
}


static PyObject *_wrap_RinexNavHeader_deltaUTCString_get(void) {
    PyObject *pyobj = NULL;
    
    {
        pyobj = SWIG_From_std_string((std::string)(gpstk::RinexNavHeader::deltaUTCString)); 
    }
    return pyobj;
}


static int _wrap_RinexNavHeader_leapSecondsString_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable RinexNavHeader_leapSecondsString is read-only.");
    return 1;
}


static PyObject *_wrap_RinexNavHeader_leapSecondsString_get(void) {
    PyObject *pyobj = NULL;
    
    {
        pyobj = SWIG_From_std_string((std::string)(gpstk::RinexNavHeader::leapSecondsString)); 
    }
    return pyobj;
}


static int _wrap_RinexNavHeader_endOfHeader_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable RinexNavHeader_endOfHeader is read-only.");
    return 1;
}


static PyObject *_wrap_RinexNavHeader_endOfHeader_get(void) {
    PyObject *pyobj = NULL;
    
    {
        pyobj = SWIG_From_std_string((std::string)(gpstk::RinexNavHeader::endOfHeader)); 
    }
    return pyobj;
}


static PyObject * RinexNavHeader_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_gpstk__RinexNavHeader, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_WrongBlockNumber__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::WrongBlockNumber *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_WrongBlockNumber")) goto fail;
    result = (gpstk::WrongBlockNumber *)new gpstk::WrongBlockNumber();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__WrongBlockNumber, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_WrongBlockNumber__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::WrongBlockNumber *arg1 = 0 ;
    gpstk::WrongBlockNumber *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_WrongBlockNumber",&obj0)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__WrongBlockNumber, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("gpstk::WrongBlockNumber");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    result = (gpstk::WrongBlockNumber *)new gpstk::WrongBlockNumber((gpstk::WrongBlockNumber const &)*arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__WrongBlockNumber, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_WrongBlockNumber__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::Exception *arg1 = 0 ;
    gpstk::WrongBlockNumber *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_WrongBlockNumber",&obj0)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__Exception, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("gpstk::Exception");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    result = (gpstk::WrongBlockNumber *)new gpstk::WrongBlockNumber((gpstk::Exception const &)*arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__WrongBlockNumber, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_WrongBlockNumber__SWIG_3(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::string arg1 ;
    unsigned long arg2 ;
    gpstk::Exception::Severity arg3 ;
    gpstk::WrongBlockNumber *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:new_WrongBlockNumber",&obj0,&obj1,&obj2)) goto fail;
    {
        std::string *ptr = (std::string *)0;
        int res = SWIG_AsPtr_std_string(obj0, &ptr);
        if (!res) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj0);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    {
        arg2 = (unsigned long)(SWIG_As_unsigned_SS_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (gpstk::Exception::Severity)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    result = (gpstk::WrongBlockNumber *)new gpstk::WrongBlockNumber(arg1,arg2,arg3);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__WrongBlockNumber, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_WrongBlockNumber__SWIG_4(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::string arg1 ;
    unsigned long arg2 ;
    gpstk::WrongBlockNumber *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:new_WrongBlockNumber",&obj0,&obj1)) goto fail;
    {
        std::string *ptr = (std::string *)0;
        int res = SWIG_AsPtr_std_string(obj0, &ptr);
        if (!res) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj0);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    {
        arg2 = (unsigned long)(SWIG_As_unsigned_SS_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (gpstk::WrongBlockNumber *)new gpstk::WrongBlockNumber(arg1,arg2);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__WrongBlockNumber, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_WrongBlockNumber__SWIG_5(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::string arg1 ;
    gpstk::WrongBlockNumber *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_WrongBlockNumber",&obj0)) goto fail;
    {
        std::string *ptr = (std::string *)0;
        int res = SWIG_AsPtr_std_string(obj0, &ptr);
        if (!res) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj0);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    result = (gpstk::WrongBlockNumber *)new gpstk::WrongBlockNumber(arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__WrongBlockNumber, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_WrongBlockNumber(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[4];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_new_WrongBlockNumber__SWIG_0(self,args);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_gpstk__WrongBlockNumber, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            return _wrap_new_WrongBlockNumber__SWIG_1(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_gpstk__Exception, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            return _wrap_new_WrongBlockNumber__SWIG_2(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        _v = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
        if (_v) {
            return _wrap_new_WrongBlockNumber__SWIG_5(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        _v = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
        if (_v) {
            _v = SWIG_Check_unsigned_SS_long(argv[1]);
            if (_v) {
                return _wrap_new_WrongBlockNumber__SWIG_4(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        _v = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
        if (_v) {
            _v = SWIG_Check_unsigned_SS_long(argv[1]);
            if (_v) {
                _v = SWIG_Check_int(argv[2]);
                if (_v) {
                    return _wrap_new_WrongBlockNumber__SWIG_3(self,args);
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'new_WrongBlockNumber'");
    return NULL;
}


static PyObject *_wrap_delete_WrongBlockNumber(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::WrongBlockNumber *arg1 = (gpstk::WrongBlockNumber *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_WrongBlockNumber",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__WrongBlockNumber, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_WrongBlockNumber_getName(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::WrongBlockNumber *arg1 = (gpstk::WrongBlockNumber *) 0 ;
    std::string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:WrongBlockNumber_getName",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__WrongBlockNumber, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = ((gpstk::WrongBlockNumber const *)arg1)->getName();
    
    {
        resultobj = SWIG_From_std_string((std::string)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_WrongBlockNumber_class_operator_assignment(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::WrongBlockNumber *arg1 = (gpstk::WrongBlockNumber *) 0 ;
    gpstk::WrongBlockNumber *arg2 = 0 ;
    gpstk::WrongBlockNumber *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:WrongBlockNumber_class_operator_assignment",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__WrongBlockNumber, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_gpstk__WrongBlockNumber, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("gpstk::WrongBlockNumber");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        gpstk::WrongBlockNumber &_result_ref = (arg1)->operator =((gpstk::WrongBlockNumber const &)*arg2);
        result = (gpstk::WrongBlockNumber *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__WrongBlockNumber, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_streamRead__SWIG_9(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::ostream *arg1 = 0 ;
    gpstk::WrongBlockNumber *arg2 = 0 ;
    std::ostream *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:streamRead",&obj0,&obj1)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("std::ostream");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_gpstk__WrongBlockNumber, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("gpstk::WrongBlockNumber");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        std::ostream &_result_ref = operator <<(*arg1,(gpstk::WrongBlockNumber const &)*arg2);
        result = (std::ostream *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject * WrongBlockNumber_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_gpstk__WrongBlockNumber, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_WrongBlockFormat__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::WrongBlockFormat *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_WrongBlockFormat")) goto fail;
    result = (gpstk::WrongBlockFormat *)new gpstk::WrongBlockFormat();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__WrongBlockFormat, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_WrongBlockFormat__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::WrongBlockFormat *arg1 = 0 ;
    gpstk::WrongBlockFormat *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_WrongBlockFormat",&obj0)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__WrongBlockFormat, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("gpstk::WrongBlockFormat");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    result = (gpstk::WrongBlockFormat *)new gpstk::WrongBlockFormat((gpstk::WrongBlockFormat const &)*arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__WrongBlockFormat, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_WrongBlockFormat__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::Exception *arg1 = 0 ;
    gpstk::WrongBlockFormat *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_WrongBlockFormat",&obj0)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__Exception, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("gpstk::Exception");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    result = (gpstk::WrongBlockFormat *)new gpstk::WrongBlockFormat((gpstk::Exception const &)*arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__WrongBlockFormat, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_WrongBlockFormat__SWIG_3(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::string arg1 ;
    unsigned long arg2 ;
    gpstk::Exception::Severity arg3 ;
    gpstk::WrongBlockFormat *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:new_WrongBlockFormat",&obj0,&obj1,&obj2)) goto fail;
    {
        std::string *ptr = (std::string *)0;
        int res = SWIG_AsPtr_std_string(obj0, &ptr);
        if (!res) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj0);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    {
        arg2 = (unsigned long)(SWIG_As_unsigned_SS_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (gpstk::Exception::Severity)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    result = (gpstk::WrongBlockFormat *)new gpstk::WrongBlockFormat(arg1,arg2,arg3);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__WrongBlockFormat, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_WrongBlockFormat__SWIG_4(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::string arg1 ;
    unsigned long arg2 ;
    gpstk::WrongBlockFormat *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:new_WrongBlockFormat",&obj0,&obj1)) goto fail;
    {
        std::string *ptr = (std::string *)0;
        int res = SWIG_AsPtr_std_string(obj0, &ptr);
        if (!res) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj0);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    {
        arg2 = (unsigned long)(SWIG_As_unsigned_SS_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (gpstk::WrongBlockFormat *)new gpstk::WrongBlockFormat(arg1,arg2);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__WrongBlockFormat, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_WrongBlockFormat__SWIG_5(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::string arg1 ;
    gpstk::WrongBlockFormat *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_WrongBlockFormat",&obj0)) goto fail;
    {
        std::string *ptr = (std::string *)0;
        int res = SWIG_AsPtr_std_string(obj0, &ptr);
        if (!res) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj0);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    result = (gpstk::WrongBlockFormat *)new gpstk::WrongBlockFormat(arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__WrongBlockFormat, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_WrongBlockFormat(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[4];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_new_WrongBlockFormat__SWIG_0(self,args);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_gpstk__WrongBlockFormat, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            return _wrap_new_WrongBlockFormat__SWIG_1(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_gpstk__Exception, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            return _wrap_new_WrongBlockFormat__SWIG_2(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        _v = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
        if (_v) {
            return _wrap_new_WrongBlockFormat__SWIG_5(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        _v = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
        if (_v) {
            _v = SWIG_Check_unsigned_SS_long(argv[1]);
            if (_v) {
                return _wrap_new_WrongBlockFormat__SWIG_4(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        _v = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
        if (_v) {
            _v = SWIG_Check_unsigned_SS_long(argv[1]);
            if (_v) {
                _v = SWIG_Check_int(argv[2]);
                if (_v) {
                    return _wrap_new_WrongBlockFormat__SWIG_3(self,args);
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'new_WrongBlockFormat'");
    return NULL;
}


static PyObject *_wrap_delete_WrongBlockFormat(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::WrongBlockFormat *arg1 = (gpstk::WrongBlockFormat *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_WrongBlockFormat",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__WrongBlockFormat, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_WrongBlockFormat_getName(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::WrongBlockFormat *arg1 = (gpstk::WrongBlockFormat *) 0 ;
    std::string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:WrongBlockFormat_getName",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__WrongBlockFormat, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = ((gpstk::WrongBlockFormat const *)arg1)->getName();
    
    {
        resultobj = SWIG_From_std_string((std::string)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_WrongBlockFormat_class_operator_assignment(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::WrongBlockFormat *arg1 = (gpstk::WrongBlockFormat *) 0 ;
    gpstk::WrongBlockFormat *arg2 = 0 ;
    gpstk::WrongBlockFormat *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:WrongBlockFormat_class_operator_assignment",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__WrongBlockFormat, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_gpstk__WrongBlockFormat, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("gpstk::WrongBlockFormat");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        gpstk::WrongBlockFormat &_result_ref = (arg1)->operator =((gpstk::WrongBlockFormat const &)*arg2);
        result = (gpstk::WrongBlockFormat *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__WrongBlockFormat, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_streamRead__SWIG_10(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::ostream *arg1 = 0 ;
    gpstk::WrongBlockFormat *arg2 = 0 ;
    std::ostream *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:streamRead",&obj0,&obj1)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("std::ostream");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_gpstk__WrongBlockFormat, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("gpstk::WrongBlockFormat");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        std::ostream &_result_ref = operator <<(*arg1,(gpstk::WrongBlockFormat const &)*arg2);
        result = (std::ostream *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject * WrongBlockFormat_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_gpstk__WrongBlockFormat, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_FICData(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::FICData *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_FICData")) goto fail;
    result = (gpstk::FICData *)new gpstk::FICData();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__FICData, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_FICData(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::FICData *arg1 = (gpstk::FICData *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_FICData",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__FICData, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FICData_isValid(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::FICData *arg1 = (gpstk::FICData *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:FICData_isValid",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__FICData, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)((gpstk::FICData const *)arg1)->isValid();
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FICData_isData(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::FICData *arg1 = (gpstk::FICData *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:FICData_isData",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__FICData, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)((gpstk::FICData const *)arg1)->isData();
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FICData_dump(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::FICData *arg1 = (gpstk::FICData *) 0 ;
    std::ostream *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:FICData_dump",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__FICData, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("std::ostream");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    ((gpstk::FICData const *)arg1)->dump(*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FICData_prettyDump(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::FICData *arg1 = (gpstk::FICData *) 0 ;
    std::ostream *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:FICData_prettyDump",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__FICData, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("std::ostream");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    ((gpstk::FICData const *)arg1)->prettyDump(*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FICData_operator_EngEphemeris(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::FICData *arg1 = (gpstk::FICData *) 0 ;
    EngEphemeris result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:FICData_operator_EngEphemeris",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__FICData, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = ((gpstk::FICData const *)arg1)->operator EngEphemeris();
    
    {
        EngEphemeris * resultptr;
        resultptr = new EngEphemeris((EngEphemeris &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_gpstk__EngEphemeris, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FICData_operator_AlmOrbit(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::FICData *arg1 = (gpstk::FICData *) 0 ;
    gpstk::AlmOrbit result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:FICData_operator_AlmOrbit",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__FICData, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = ((gpstk::FICData const *)arg1)->operator gpstk::AlmOrbit();
    
    {
        gpstk::AlmOrbit * resultptr;
        resultptr = new gpstk::AlmOrbit((gpstk::AlmOrbit &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_gpstk__AlmOrbit, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FICData_generateUniqueKey(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::FICData *arg1 = (gpstk::FICData *) 0 ;
    std::string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:FICData_generateUniqueKey",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__FICData, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        result = ((gpstk::FICData const *)arg1)->generateUniqueKey();
    }
    catch(gpstk::WrongBlockNumber &_e) {
        {
            gpstk::WrongBlockNumber * temp = new gpstk::WrongBlockNumber(_e);
            if (SWIGTYPE_p_gpstk__WrongBlockNumber->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_gpstk__WrongBlockNumber->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__WrongBlockNumber,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"gpstk::WrongBlockNumber");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__WrongBlockNumber,1));
                    */
            }
            SWIG_fail;
        }
    }
    catch(gpstk::WrongBlockFormat &_e) {
        {
            gpstk::WrongBlockFormat * temp = new gpstk::WrongBlockFormat(_e);
            if (SWIGTYPE_p_gpstk__WrongBlockFormat->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_gpstk__WrongBlockFormat->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__WrongBlockFormat,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"gpstk::WrongBlockFormat");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__WrongBlockFormat,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    {
        resultobj = SWIG_From_std_string((std::string)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static int _wrap_FICData_blockString_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable FICData_blockString is read-only.");
    return 1;
}


static PyObject *_wrap_FICData_blockString_get(void) {
    PyObject *pyobj = NULL;
    
    {
        pyobj = SWIG_From_std_string((std::string)(gpstk::FICData::blockString)); 
    }
    return pyobj;
}


static PyObject *_wrap_FICData_blockNum_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::FICData *arg1 = (gpstk::FICData *) 0 ;
    long arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:FICData_blockNum_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__FICData, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (long)(SWIG_As_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->blockNum = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FICData_blockNum_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::FICData *arg1 = (gpstk::FICData *) 0 ;
    long result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:FICData_blockNum_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__FICData, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (long) ((arg1)->blockNum);
    
    {
        resultobj = SWIG_From_long((long)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FICData_f_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::FICData *arg1 = (gpstk::FICData *) 0 ;
    std::vector<double,std::allocator<double > > *arg2 = (std::vector<double,std::allocator<double > > *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:FICData_f_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__FICData, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__vectorTdouble_std__allocatorTdouble_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->f = *arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FICData_f_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::FICData *arg1 = (gpstk::FICData *) 0 ;
    std::vector<double,std::allocator<double > > *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:FICData_f_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__FICData, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (std::vector<double,std::allocator<double > > *)& ((arg1)->f);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__vectorTdouble_std__allocatorTdouble_t_t, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FICData_i_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::FICData *arg1 = (gpstk::FICData *) 0 ;
    std::vector<long,std::allocator<long > > *arg2 = (std::vector<long,std::allocator<long > > *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:FICData_i_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__FICData, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__vectorTlong_std__allocatorTlong_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->i = *arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FICData_i_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::FICData *arg1 = (gpstk::FICData *) 0 ;
    std::vector<long,std::allocator<long > > *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:FICData_i_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__FICData, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (std::vector<long,std::allocator<long > > *)& ((arg1)->i);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__vectorTlong_std__allocatorTlong_t_t, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FICData_c_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::FICData *arg1 = (gpstk::FICData *) 0 ;
    std::vector<char,std::allocator<char > > *arg2 = (std::vector<char,std::allocator<char > > *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:FICData_c_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__FICData, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__vectorTchar_std__allocatorTchar_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->c = *arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FICData_c_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::FICData *arg1 = (gpstk::FICData *) 0 ;
    std::vector<char,std::allocator<char > > *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:FICData_c_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__FICData, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (std::vector<char,std::allocator<char > > *)& ((arg1)->c);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__vectorTchar_std__allocatorTchar_t_t, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject * FICData_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_gpstk__FICData, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_FICHeader(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::FICHeader *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_FICHeader")) goto fail;
    result = (gpstk::FICHeader *)new gpstk::FICHeader();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__FICHeader, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_FICHeader(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::FICHeader *arg1 = (gpstk::FICHeader *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_FICHeader",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__FICHeader, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FICHeader_isHeader(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::FICHeader *arg1 = (gpstk::FICHeader *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:FICHeader_isHeader",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__FICHeader, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)((gpstk::FICHeader const *)arg1)->isHeader();
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FICHeader_dump(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::FICHeader *arg1 = (gpstk::FICHeader *) 0 ;
    std::ostream *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:FICHeader_dump",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__FICHeader, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("std::ostream");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    ((gpstk::FICHeader const *)arg1)->dump(*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FICHeader_header_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::FICHeader *arg1 = (gpstk::FICHeader *) 0 ;
    std::string *arg2 = (std::string *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:FICHeader_header_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__FICHeader, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__string, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->header = *arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FICHeader_header_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::FICHeader *arg1 = (gpstk::FICHeader *) 0 ;
    std::string *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:FICHeader_header_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__FICHeader, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (std::string *)& ((arg1)->header);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__string, 0);
    return resultobj;
    fail:
    return NULL;
}


static int _wrap_FICHeader_headerSize_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable FICHeader_headerSize is read-only.");
    return 1;
}


static PyObject *_wrap_FICHeader_headerSize_get(void) {
    PyObject *pyobj = NULL;
    
    {
        pyobj = SWIG_From_int((int)(gpstk::FICHeader::headerSize)); 
    }
    return pyobj;
}


static PyObject * FICHeader_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_gpstk__FICHeader, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_RinexMetData(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexMetData *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_RinexMetData")) goto fail;
    result = (gpstk::RinexMetData *)new gpstk::RinexMetData();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__RinexMetData, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexMetData_isData(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexMetData *arg1 = (gpstk::RinexMetData *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RinexMetData_isData",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexMetData, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)((gpstk::RinexMetData const *)arg1)->isData();
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexMetData_dump(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexMetData *arg1 = (gpstk::RinexMetData *) 0 ;
    std::ostream *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RinexMetData_dump",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexMetData, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("std::ostream");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    ((gpstk::RinexMetData const *)arg1)->dump(*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexMetData_time_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexMetData *arg1 = (gpstk::RinexMetData *) 0 ;
    DayTime *arg2 = (DayTime *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RinexMetData_time_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexMetData, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_gpstk__DayTime, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->time = *arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexMetData_time_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexMetData *arg1 = (gpstk::RinexMetData *) 0 ;
    DayTime *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RinexMetData_time_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexMetData, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (DayTime *)& ((arg1)->time);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__DayTime, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexMetData_data_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexMetData *arg1 = (gpstk::RinexMetData *) 0 ;
    gpstk::RinexMetData::RinexMetMap *arg2 = (gpstk::RinexMetData::RinexMetMap *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RinexMetData_data_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexMetData, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__mapTgpstk__RinexMetHeader__RinexMetType_double_std__lessTgpstk__RinexMetHeader__RinexMetType_t_std__allocatorTstd__pairTgpstk__RinexMetHeader__RinexMetType_const_double_t_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->data = *arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexMetData_data_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexMetData *arg1 = (gpstk::RinexMetData *) 0 ;
    gpstk::RinexMetData::RinexMetMap *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RinexMetData_data_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexMetData, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (gpstk::RinexMetData::RinexMetMap *)& ((arg1)->data);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__mapTgpstk__RinexMetHeader__RinexMetType_double_std__lessTgpstk__RinexMetHeader__RinexMetType_t_std__allocatorTstd__pairTgpstk__RinexMetHeader__RinexMetType_const_double_t_t_t, 0);
    return resultobj;
    fail:
    return NULL;
}


static int _wrap_RinexMetData_maxObsPerLine_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable RinexMetData_maxObsPerLine is read-only.");
    return 1;
}


static PyObject *_wrap_RinexMetData_maxObsPerLine_get(void) {
    PyObject *pyobj = NULL;
    
    {
        pyobj = SWIG_From_int((int)(gpstk::RinexMetData::maxObsPerLine)); 
    }
    return pyobj;
}


static int _wrap_RinexMetData_maxObsPerContinuationLine_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable RinexMetData_maxObsPerContinuationLine is read-only.");
    return 1;
}


static PyObject *_wrap_RinexMetData_maxObsPerContinuationLine_get(void) {
    PyObject *pyobj = NULL;
    
    {
        pyobj = SWIG_From_int((int)(gpstk::RinexMetData::maxObsPerContinuationLine)); 
    }
    return pyobj;
}


static PyObject *_wrap_delete_RinexMetData(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexMetData *arg1 = (gpstk::RinexMetData *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_RinexMetData",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexMetData, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * RinexMetData_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_gpstk__RinexMetData, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_RinexMetHeader(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexMetHeader *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_RinexMetHeader")) goto fail;
    result = (gpstk::RinexMetHeader *)new gpstk::RinexMetHeader();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__RinexMetHeader, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_RinexMetHeader(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexMetHeader *arg1 = (gpstk::RinexMetHeader *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_RinexMetHeader",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexMetHeader, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexMetHeader_isHeader(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexMetHeader *arg1 = (gpstk::RinexMetHeader *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RinexMetHeader_isHeader",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexMetHeader, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)((gpstk::RinexMetHeader const *)arg1)->isHeader();
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexMetHeader_dump(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexMetHeader *arg1 = (gpstk::RinexMetHeader *) 0 ;
    std::ostream *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RinexMetHeader_dump",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexMetHeader, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("std::ostream");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    ((gpstk::RinexMetHeader const *)arg1)->dump(*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexMetHeader_convertObsType__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::string *arg1 = 0 ;
    gpstk::RinexMetHeader::RinexMetType result;
    int res1 = 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RinexMetHeader_convertObsType",&obj0)) goto fail;
    {
        std::string *ptr = (std::string *)0;
        res1 = SWIG_AsPtr_std_string(obj0, &ptr);
        if (!res1) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj0);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = ptr;
    }
    try {
        result = (gpstk::RinexMetHeader::RinexMetType)gpstk::RinexMetHeader::convertObsType((std::string const &)*arg1);
    }
    catch(FFStreamError &_e) {
        {
            FFStreamError * temp = new FFStreamError(_e);
            if (SWIGTYPE_p_FFStreamError->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_FFStreamError->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_FFStreamError,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"FFStreamError");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_FFStreamError,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    resultobj = SWIG_From_int((result));
    if (res1 == SWIG_NEWOBJ) delete arg1;
    return resultobj;
    fail:
    if (res1 == SWIG_NEWOBJ) delete arg1;
    return NULL;
}


static PyObject *_wrap_RinexMetHeader_convertObsType__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexMetHeader::RinexMetType *arg1 = 0 ;
    std::string result;
    gpstk::RinexMetHeader::RinexMetType temp1 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RinexMetHeader_convertObsType",&obj0)) goto fail;
    {
        temp1 = (gpstk::RinexMetHeader::RinexMetType)(SWIG_As_int(obj0));
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = &temp1;
    }
    try {
        result = gpstk::RinexMetHeader::convertObsType((enum gpstk::RinexMetHeader::RinexMetType const &)*arg1);
    }
    catch(FFStreamError &_e) {
        {
            FFStreamError * temp = new FFStreamError(_e);
            if (SWIGTYPE_p_FFStreamError->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_FFStreamError->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_FFStreamError,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"FFStreamError");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_FFStreamError,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    {
        resultobj = SWIG_From_std_string((std::string)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexMetHeader_convertObsType(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[2];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 1); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        _v = SWIG_Check_int(argv[0]);
        if (_v) {
            return _wrap_RinexMetHeader_convertObsType__SWIG_1(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        _v = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
        if (_v) {
            return _wrap_RinexMetHeader_convertObsType__SWIG_0(self,args);
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'RinexMetHeader_convertObsType'");
    return NULL;
}


static PyObject *_wrap_RinexMetHeader_valid_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexMetHeader *arg1 = (gpstk::RinexMetHeader *) 0 ;
    unsigned long arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RinexMetHeader_valid_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexMetHeader, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (unsigned long)(SWIG_As_unsigned_SS_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->valid = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexMetHeader_valid_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexMetHeader *arg1 = (gpstk::RinexMetHeader *) 0 ;
    unsigned long result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RinexMetHeader_valid_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexMetHeader, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (unsigned long) ((arg1)->valid);
    
    {
        resultobj = SWIG_From_unsigned_SS_long((unsigned long)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexMetHeader_bitsAsString(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexMetHeader::validBits arg1 ;
    std::string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RinexMetHeader_bitsAsString",&obj0)) goto fail;
    {
        arg1 = (gpstk::RinexMetHeader::validBits)(SWIG_As_int(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    result = gpstk::RinexMetHeader::bitsAsString(arg1);
    
    {
        resultobj = SWIG_From_std_string((std::string)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexMetHeader_bitString__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    unsigned long arg1 ;
    char arg2 ;
    std::string arg3 ;
    std::string result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:RinexMetHeader_bitString",&obj0,&obj1,&obj2)) goto fail;
    {
        arg1 = (unsigned long)(SWIG_As_unsigned_SS_long(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        arg2 = (char)(SWIG_As_char(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        std::string *ptr = (std::string *)0;
        int res = SWIG_AsPtr_std_string(obj2, &ptr);
        if (!res) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj2);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
        arg3 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    result = gpstk::RinexMetHeader::bitString(arg1,arg2,arg3);
    
    {
        resultobj = SWIG_From_std_string((std::string)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexMetHeader_bitString__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    unsigned long arg1 ;
    char arg2 ;
    std::string result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RinexMetHeader_bitString",&obj0,&obj1)) goto fail;
    {
        arg1 = (unsigned long)(SWIG_As_unsigned_SS_long(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        arg2 = (char)(SWIG_As_char(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = gpstk::RinexMetHeader::bitString(arg1,arg2);
    
    {
        resultobj = SWIG_From_std_string((std::string)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexMetHeader_bitString__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    unsigned long arg1 ;
    std::string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RinexMetHeader_bitString",&obj0)) goto fail;
    {
        arg1 = (unsigned long)(SWIG_As_unsigned_SS_long(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    result = gpstk::RinexMetHeader::bitString(arg1);
    
    {
        resultobj = SWIG_From_std_string((std::string)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexMetHeader_bitString(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[4];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        _v = SWIG_Check_unsigned_SS_long(argv[0]);
        if (_v) {
            return _wrap_RinexMetHeader_bitString__SWIG_2(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        _v = SWIG_Check_unsigned_SS_long(argv[0]);
        if (_v) {
            _v = SWIG_Check_char(argv[1]);
            if (_v) {
                return _wrap_RinexMetHeader_bitString__SWIG_1(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        _v = SWIG_Check_unsigned_SS_long(argv[0]);
        if (_v) {
            _v = SWIG_Check_char(argv[1]);
            if (_v) {
                _v = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
                if (_v) {
                    return _wrap_RinexMetHeader_bitString__SWIG_0(self,args);
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'RinexMetHeader_bitString'");
    return NULL;
}


static PyObject *_wrap_RinexMetHeader_version_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexMetHeader *arg1 = (gpstk::RinexMetHeader *) 0 ;
    double arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RinexMetHeader_version_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexMetHeader, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->version = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexMetHeader_version_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexMetHeader *arg1 = (gpstk::RinexMetHeader *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RinexMetHeader_version_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexMetHeader, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double) ((arg1)->version);
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexMetHeader_fileType_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexMetHeader *arg1 = (gpstk::RinexMetHeader *) 0 ;
    std::string *arg2 = (std::string *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RinexMetHeader_fileType_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexMetHeader, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__string, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->fileType = *arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexMetHeader_fileType_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexMetHeader *arg1 = (gpstk::RinexMetHeader *) 0 ;
    std::string *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RinexMetHeader_fileType_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexMetHeader, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (std::string *)& ((arg1)->fileType);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__string, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexMetHeader_fileProgram_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexMetHeader *arg1 = (gpstk::RinexMetHeader *) 0 ;
    std::string *arg2 = (std::string *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RinexMetHeader_fileProgram_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexMetHeader, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__string, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->fileProgram = *arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexMetHeader_fileProgram_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexMetHeader *arg1 = (gpstk::RinexMetHeader *) 0 ;
    std::string *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RinexMetHeader_fileProgram_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexMetHeader, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (std::string *)& ((arg1)->fileProgram);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__string, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexMetHeader_fileAgency_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexMetHeader *arg1 = (gpstk::RinexMetHeader *) 0 ;
    std::string *arg2 = (std::string *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RinexMetHeader_fileAgency_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexMetHeader, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__string, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->fileAgency = *arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexMetHeader_fileAgency_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexMetHeader *arg1 = (gpstk::RinexMetHeader *) 0 ;
    std::string *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RinexMetHeader_fileAgency_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexMetHeader, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (std::string *)& ((arg1)->fileAgency);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__string, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexMetHeader_date_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexMetHeader *arg1 = (gpstk::RinexMetHeader *) 0 ;
    std::string *arg2 = (std::string *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RinexMetHeader_date_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexMetHeader, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__string, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->date = *arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexMetHeader_date_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexMetHeader *arg1 = (gpstk::RinexMetHeader *) 0 ;
    std::string *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RinexMetHeader_date_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexMetHeader, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (std::string *)& ((arg1)->date);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__string, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexMetHeader_commentList_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexMetHeader *arg1 = (gpstk::RinexMetHeader *) 0 ;
    std::vector<std::string,std::allocator<std::string > > *arg2 = (std::vector<std::string,std::allocator<std::string > > *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RinexMetHeader_commentList_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexMetHeader, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__vectorTstd__string_std__allocatorTstd__string_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->commentList = *arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexMetHeader_commentList_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexMetHeader *arg1 = (gpstk::RinexMetHeader *) 0 ;
    std::vector<std::string,std::allocator<std::string > > *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RinexMetHeader_commentList_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexMetHeader, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (std::vector<std::string,std::allocator<std::string > > *)& ((arg1)->commentList);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__vectorTstd__string_std__allocatorTstd__string_t_t, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexMetHeader_markerName_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexMetHeader *arg1 = (gpstk::RinexMetHeader *) 0 ;
    std::string *arg2 = (std::string *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RinexMetHeader_markerName_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexMetHeader, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__string, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->markerName = *arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexMetHeader_markerName_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexMetHeader *arg1 = (gpstk::RinexMetHeader *) 0 ;
    std::string *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RinexMetHeader_markerName_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexMetHeader, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (std::string *)& ((arg1)->markerName);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__string, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexMetHeader_markerNumber_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexMetHeader *arg1 = (gpstk::RinexMetHeader *) 0 ;
    std::string *arg2 = (std::string *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RinexMetHeader_markerNumber_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexMetHeader, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__string, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->markerNumber = *arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexMetHeader_markerNumber_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexMetHeader *arg1 = (gpstk::RinexMetHeader *) 0 ;
    std::string *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RinexMetHeader_markerNumber_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexMetHeader, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (std::string *)& ((arg1)->markerNumber);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__string, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexMetHeader_obsTypeList_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexMetHeader *arg1 = (gpstk::RinexMetHeader *) 0 ;
    std::vector<gpstk::RinexMetHeader::RinexMetType,std::allocator<gpstk::RinexMetHeader::RinexMetType > > *arg2 = (std::vector<gpstk::RinexMetHeader::RinexMetType,std::allocator<gpstk::RinexMetHeader::RinexMetType > > *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RinexMetHeader_obsTypeList_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexMetHeader, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__vectorTgpstk__RinexMetHeader__RinexMetType_std__allocatorTgpstk__RinexMetHeader__RinexMetType_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->obsTypeList = *arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexMetHeader_obsTypeList_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexMetHeader *arg1 = (gpstk::RinexMetHeader *) 0 ;
    std::vector<gpstk::RinexMetHeader::RinexMetType,std::allocator<gpstk::RinexMetHeader::RinexMetType > > *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RinexMetHeader_obsTypeList_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexMetHeader, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (std::vector<gpstk::RinexMetHeader::RinexMetType,std::allocator<gpstk::RinexMetHeader::RinexMetType > > *)& ((arg1)->obsTypeList);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__vectorTgpstk__RinexMetHeader__RinexMetType_std__allocatorTgpstk__RinexMetHeader__RinexMetType_t_t, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexMetHeader_sensorTypeList_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexMetHeader *arg1 = (gpstk::RinexMetHeader *) 0 ;
    std::vector<sensorType,std::allocator<sensorType > > *arg2 = (std::vector<sensorType,std::allocator<sensorType > > *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RinexMetHeader_sensorTypeList_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexMetHeader, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__vectorTsensorType_std__allocatorTsensorType_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->sensorTypeList = *arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexMetHeader_sensorTypeList_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexMetHeader *arg1 = (gpstk::RinexMetHeader *) 0 ;
    std::vector<sensorType,std::allocator<sensorType > > *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RinexMetHeader_sensorTypeList_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexMetHeader, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (std::vector<sensorType,std::allocator<sensorType > > *)& ((arg1)->sensorTypeList);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__vectorTsensorType_std__allocatorTsensorType_t_t, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexMetHeader_sensorPosList_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexMetHeader *arg1 = (gpstk::RinexMetHeader *) 0 ;
    std::vector<sensorPosType,std::allocator<sensorPosType > > *arg2 = (std::vector<sensorPosType,std::allocator<sensorPosType > > *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RinexMetHeader_sensorPosList_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexMetHeader, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__vectorTsensorPosType_std__allocatorTsensorPosType_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->sensorPosList = *arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexMetHeader_sensorPosList_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexMetHeader *arg1 = (gpstk::RinexMetHeader *) 0 ;
    std::vector<sensorPosType,std::allocator<sensorPosType > > *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RinexMetHeader_sensorPosList_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexMetHeader, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (std::vector<sensorPosType,std::allocator<sensorPosType > > *)& ((arg1)->sensorPosList);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__vectorTsensorPosType_std__allocatorTsensorPosType_t_t, 0);
    return resultobj;
    fail:
    return NULL;
}


static int _wrap_RinexMetHeader_maxObsPerLine_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable RinexMetHeader_maxObsPerLine is read-only.");
    return 1;
}


static PyObject *_wrap_RinexMetHeader_maxObsPerLine_get(void) {
    PyObject *pyobj = NULL;
    
    {
        pyobj = SWIG_From_int((int)(gpstk::RinexMetHeader::maxObsPerLine)); 
    }
    return pyobj;
}


static int _wrap_RinexMetHeader_versionString_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable RinexMetHeader_versionString is read-only.");
    return 1;
}


static PyObject *_wrap_RinexMetHeader_versionString_get(void) {
    PyObject *pyobj = NULL;
    
    {
        pyobj = SWIG_From_std_string((std::string)(gpstk::RinexMetHeader::versionString)); 
    }
    return pyobj;
}


static int _wrap_RinexMetHeader_runByString_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable RinexMetHeader_runByString is read-only.");
    return 1;
}


static PyObject *_wrap_RinexMetHeader_runByString_get(void) {
    PyObject *pyobj = NULL;
    
    {
        pyobj = SWIG_From_std_string((std::string)(gpstk::RinexMetHeader::runByString)); 
    }
    return pyobj;
}


static int _wrap_RinexMetHeader_commentString_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable RinexMetHeader_commentString is read-only.");
    return 1;
}


static PyObject *_wrap_RinexMetHeader_commentString_get(void) {
    PyObject *pyobj = NULL;
    
    {
        pyobj = SWIG_From_std_string((std::string)(gpstk::RinexMetHeader::commentString)); 
    }
    return pyobj;
}


static int _wrap_RinexMetHeader_markerNameString_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable RinexMetHeader_markerNameString is read-only.");
    return 1;
}


static PyObject *_wrap_RinexMetHeader_markerNameString_get(void) {
    PyObject *pyobj = NULL;
    
    {
        pyobj = SWIG_From_std_string((std::string)(gpstk::RinexMetHeader::markerNameString)); 
    }
    return pyobj;
}


static int _wrap_RinexMetHeader_markerNumberString_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable RinexMetHeader_markerNumberString is read-only.");
    return 1;
}


static PyObject *_wrap_RinexMetHeader_markerNumberString_get(void) {
    PyObject *pyobj = NULL;
    
    {
        pyobj = SWIG_From_std_string((std::string)(gpstk::RinexMetHeader::markerNumberString)); 
    }
    return pyobj;
}


static int _wrap_RinexMetHeader_obsTypeString_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable RinexMetHeader_obsTypeString is read-only.");
    return 1;
}


static PyObject *_wrap_RinexMetHeader_obsTypeString_get(void) {
    PyObject *pyobj = NULL;
    
    {
        pyobj = SWIG_From_std_string((std::string)(gpstk::RinexMetHeader::obsTypeString)); 
    }
    return pyobj;
}


static int _wrap_RinexMetHeader_sensorTypeString_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable RinexMetHeader_sensorTypeString is read-only.");
    return 1;
}


static PyObject *_wrap_RinexMetHeader_sensorTypeString_get(void) {
    PyObject *pyobj = NULL;
    
    {
        pyobj = SWIG_From_std_string((std::string)(gpstk::RinexMetHeader::sensorTypeString)); 
    }
    return pyobj;
}


static int _wrap_RinexMetHeader_sensorPosString_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable RinexMetHeader_sensorPosString is read-only.");
    return 1;
}


static PyObject *_wrap_RinexMetHeader_sensorPosString_get(void) {
    PyObject *pyobj = NULL;
    
    {
        pyobj = SWIG_From_std_string((std::string)(gpstk::RinexMetHeader::sensorPosString)); 
    }
    return pyobj;
}


static int _wrap_RinexMetHeader_endOfHeader_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable RinexMetHeader_endOfHeader is read-only.");
    return 1;
}


static PyObject *_wrap_RinexMetHeader_endOfHeader_get(void) {
    PyObject *pyobj = NULL;
    
    {
        pyobj = SWIG_From_std_string((std::string)(gpstk::RinexMetHeader::endOfHeader)); 
    }
    return pyobj;
}


static PyObject * RinexMetHeader_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_gpstk__RinexMetHeader, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_sensorType_model_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    sensorType *arg1 = (sensorType *) 0 ;
    std::string *arg2 = (std::string *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:sensorType_model_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_sensorType, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__string, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->model = *arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_sensorType_model_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    sensorType *arg1 = (sensorType *) 0 ;
    std::string *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:sensorType_model_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_sensorType, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (std::string *)& ((arg1)->model);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__string, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_sensorType_type_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    sensorType *arg1 = (sensorType *) 0 ;
    std::string *arg2 = (std::string *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:sensorType_type_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_sensorType, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__string, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->type = *arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_sensorType_type_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    sensorType *arg1 = (sensorType *) 0 ;
    std::string *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:sensorType_type_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_sensorType, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (std::string *)& ((arg1)->type);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__string, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_sensorType_accuracy_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    sensorType *arg1 = (sensorType *) 0 ;
    double arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:sensorType_accuracy_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_sensorType, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->accuracy = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_sensorType_accuracy_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    sensorType *arg1 = (sensorType *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:sensorType_accuracy_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_sensorType, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double) ((arg1)->accuracy);
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_sensorType_obsType_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    sensorType *arg1 = (sensorType *) 0 ;
    RinexMetType arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:sensorType_obsType_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_sensorType, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        RinexMetType * argp;
        SWIG_Python_ConvertPtr(obj1, (void **)&argp, SWIGTYPE_p_RinexMetType, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("RinexMetType");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *argp;
    }
    if (arg1) (arg1)->obsType = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_sensorType_obsType_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    sensorType *arg1 = (sensorType *) 0 ;
    RinexMetType result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:sensorType_obsType_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_sensorType, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result =  ((arg1)->obsType);
    
    {
        RinexMetType * resultptr;
        resultptr = new RinexMetType((RinexMetType &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_RinexMetType, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_sensorType(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    sensorType *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_sensorType")) goto fail;
    result = (sensorType *)new sensorType();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_sensorType, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_sensorType(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    sensorType *arg1 = (sensorType *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_sensorType",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_sensorType, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * sensorType_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_sensorType, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_sensorPosType_position_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    sensorPosType *arg1 = (sensorPosType *) 0 ;
    gpstk::Triple *arg2 = (gpstk::Triple *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:sensorPosType_position_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_sensorPosType, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_gpstk__Triple, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->position = *arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_sensorPosType_position_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    sensorPosType *arg1 = (sensorPosType *) 0 ;
    gpstk::Triple *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:sensorPosType_position_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_sensorPosType, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (gpstk::Triple *)& ((arg1)->position);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__Triple, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_sensorPosType_height_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    sensorPosType *arg1 = (sensorPosType *) 0 ;
    double arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:sensorPosType_height_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_sensorPosType, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->height = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_sensorPosType_height_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    sensorPosType *arg1 = (sensorPosType *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:sensorPosType_height_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_sensorPosType, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double) ((arg1)->height);
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_sensorPosType_obsType_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    sensorPosType *arg1 = (sensorPosType *) 0 ;
    RinexMetType arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:sensorPosType_obsType_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_sensorPosType, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        RinexMetType * argp;
        SWIG_Python_ConvertPtr(obj1, (void **)&argp, SWIGTYPE_p_RinexMetType, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("RinexMetType");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *argp;
    }
    if (arg1) (arg1)->obsType = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_sensorPosType_obsType_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    sensorPosType *arg1 = (sensorPosType *) 0 ;
    RinexMetType result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:sensorPosType_obsType_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_sensorPosType, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result =  ((arg1)->obsType);
    
    {
        RinexMetType * resultptr;
        resultptr = new RinexMetType((RinexMetType &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_RinexMetType, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_sensorPosType(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    sensorPosType *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_sensorPosType")) goto fail;
    result = (sensorPosType *)new sensorPosType();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_sensorPosType, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_sensorPosType(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    sensorPosType *arg1 = (sensorPosType *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_sensorPosType",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_sensorPosType, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * sensorPosType_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_sensorPosType, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_RinexNavData__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexNavData *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_RinexNavData")) goto fail;
    result = (gpstk::RinexNavData *)new gpstk::RinexNavData();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__RinexNavData, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_RinexNavData__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    EngEphemeris *arg1 = 0 ;
    gpstk::RinexNavData *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_RinexNavData",&obj0)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__EngEphemeris, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("EngEphemeris");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    result = (gpstk::RinexNavData *)new gpstk::RinexNavData((EngEphemeris const &)*arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__RinexNavData, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_RinexNavData(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[2];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 1); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_new_RinexNavData__SWIG_0(self,args);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_gpstk__EngEphemeris, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            return _wrap_new_RinexNavData__SWIG_1(self,args);
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'new_RinexNavData'");
    return NULL;
}


static PyObject *_wrap_delete_RinexNavData(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexNavData *arg1 = (gpstk::RinexNavData *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_RinexNavData",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexNavData, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexNavData_isData(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexNavData *arg1 = (gpstk::RinexNavData *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RinexNavData_isData",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexNavData, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)((gpstk::RinexNavData const *)arg1)->isData();
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexNavData_dump(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexNavData *arg1 = (gpstk::RinexNavData *) 0 ;
    std::ostream *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RinexNavData_dump",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexNavData, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("std::ostream");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    ((gpstk::RinexNavData const *)arg1)->dump(*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexNavData_operator_EngEphemeris(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexNavData *arg1 = (gpstk::RinexNavData *) 0 ;
    EngEphemeris result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RinexNavData_operator_EngEphemeris",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexNavData, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = ((gpstk::RinexNavData const *)arg1)->operator EngEphemeris();
    
    {
        EngEphemeris * resultptr;
        resultptr = new EngEphemeris((EngEphemeris &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_gpstk__EngEphemeris, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexNavData_toList(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexNavData *arg1 = (gpstk::RinexNavData *) 0 ;
    std::list<double > result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RinexNavData_toList",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexNavData, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = ((gpstk::RinexNavData const *)arg1)->toList();
    
    {
        std::list<double > * resultptr;
        resultptr = new std::list<double >((std::list<double > &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_std__listTdouble_t, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexNavData_time_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexNavData *arg1 = (gpstk::RinexNavData *) 0 ;
    DayTime *arg2 = (DayTime *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RinexNavData_time_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexNavData, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_gpstk__DayTime, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->time = *arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexNavData_time_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexNavData *arg1 = (gpstk::RinexNavData *) 0 ;
    DayTime *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RinexNavData_time_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexNavData, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (DayTime *)& ((arg1)->time);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__DayTime, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexNavData_PRNID_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexNavData *arg1 = (gpstk::RinexNavData *) 0 ;
    short arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RinexNavData_PRNID_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexNavData, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (short)(SWIG_As_short(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->PRNID = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexNavData_PRNID_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexNavData *arg1 = (gpstk::RinexNavData *) 0 ;
    short result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RinexNavData_PRNID_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexNavData, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (short) ((arg1)->PRNID);
    
    {
        resultobj = SWIG_From_short((short)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexNavData_HOWtime_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexNavData *arg1 = (gpstk::RinexNavData *) 0 ;
    long arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RinexNavData_HOWtime_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexNavData, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (long)(SWIG_As_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->HOWtime = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexNavData_HOWtime_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexNavData *arg1 = (gpstk::RinexNavData *) 0 ;
    long result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RinexNavData_HOWtime_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexNavData, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (long) ((arg1)->HOWtime);
    
    {
        resultobj = SWIG_From_long((long)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexNavData_weeknum_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexNavData *arg1 = (gpstk::RinexNavData *) 0 ;
    short arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RinexNavData_weeknum_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexNavData, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (short)(SWIG_As_short(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->weeknum = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexNavData_weeknum_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexNavData *arg1 = (gpstk::RinexNavData *) 0 ;
    short result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RinexNavData_weeknum_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexNavData, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (short) ((arg1)->weeknum);
    
    {
        resultobj = SWIG_From_short((short)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexNavData_codeflgs_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexNavData *arg1 = (gpstk::RinexNavData *) 0 ;
    short arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RinexNavData_codeflgs_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexNavData, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (short)(SWIG_As_short(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->codeflgs = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexNavData_codeflgs_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexNavData *arg1 = (gpstk::RinexNavData *) 0 ;
    short result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RinexNavData_codeflgs_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexNavData, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (short) ((arg1)->codeflgs);
    
    {
        resultobj = SWIG_From_short((short)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexNavData_accuracy_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexNavData *arg1 = (gpstk::RinexNavData *) 0 ;
    double arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RinexNavData_accuracy_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexNavData, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->accuracy = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexNavData_accuracy_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexNavData *arg1 = (gpstk::RinexNavData *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RinexNavData_accuracy_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexNavData, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double) ((arg1)->accuracy);
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexNavData_health_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexNavData *arg1 = (gpstk::RinexNavData *) 0 ;
    short arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RinexNavData_health_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexNavData, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (short)(SWIG_As_short(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->health = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexNavData_health_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexNavData *arg1 = (gpstk::RinexNavData *) 0 ;
    short result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RinexNavData_health_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexNavData, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (short) ((arg1)->health);
    
    {
        resultobj = SWIG_From_short((short)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexNavData_L2Pdata_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexNavData *arg1 = (gpstk::RinexNavData *) 0 ;
    short arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RinexNavData_L2Pdata_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexNavData, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (short)(SWIG_As_short(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->L2Pdata = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexNavData_L2Pdata_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexNavData *arg1 = (gpstk::RinexNavData *) 0 ;
    short result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RinexNavData_L2Pdata_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexNavData, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (short) ((arg1)->L2Pdata);
    
    {
        resultobj = SWIG_From_short((short)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexNavData_IODC_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexNavData *arg1 = (gpstk::RinexNavData *) 0 ;
    double arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RinexNavData_IODC_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexNavData, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->IODC = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexNavData_IODC_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexNavData *arg1 = (gpstk::RinexNavData *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RinexNavData_IODC_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexNavData, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double) ((arg1)->IODC);
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexNavData_IODE_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexNavData *arg1 = (gpstk::RinexNavData *) 0 ;
    double arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RinexNavData_IODE_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexNavData, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->IODE = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexNavData_IODE_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexNavData *arg1 = (gpstk::RinexNavData *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RinexNavData_IODE_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexNavData, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double) ((arg1)->IODE);
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexNavData_Toc_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexNavData *arg1 = (gpstk::RinexNavData *) 0 ;
    double arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RinexNavData_Toc_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexNavData, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->Toc = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexNavData_Toc_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexNavData *arg1 = (gpstk::RinexNavData *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RinexNavData_Toc_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexNavData, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double) ((arg1)->Toc);
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexNavData_af0_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexNavData *arg1 = (gpstk::RinexNavData *) 0 ;
    double arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RinexNavData_af0_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexNavData, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->af0 = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexNavData_af0_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexNavData *arg1 = (gpstk::RinexNavData *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RinexNavData_af0_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexNavData, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double) ((arg1)->af0);
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexNavData_af1_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexNavData *arg1 = (gpstk::RinexNavData *) 0 ;
    double arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RinexNavData_af1_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexNavData, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->af1 = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexNavData_af1_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexNavData *arg1 = (gpstk::RinexNavData *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RinexNavData_af1_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexNavData, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double) ((arg1)->af1);
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexNavData_af2_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexNavData *arg1 = (gpstk::RinexNavData *) 0 ;
    double arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RinexNavData_af2_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexNavData, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->af2 = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexNavData_af2_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexNavData *arg1 = (gpstk::RinexNavData *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RinexNavData_af2_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexNavData, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double) ((arg1)->af2);
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexNavData_Tgd_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexNavData *arg1 = (gpstk::RinexNavData *) 0 ;
    double arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RinexNavData_Tgd_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexNavData, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->Tgd = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexNavData_Tgd_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexNavData *arg1 = (gpstk::RinexNavData *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RinexNavData_Tgd_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexNavData, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double) ((arg1)->Tgd);
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexNavData_Cuc_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexNavData *arg1 = (gpstk::RinexNavData *) 0 ;
    double arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RinexNavData_Cuc_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexNavData, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->Cuc = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexNavData_Cuc_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexNavData *arg1 = (gpstk::RinexNavData *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RinexNavData_Cuc_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexNavData, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double) ((arg1)->Cuc);
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexNavData_Cus_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexNavData *arg1 = (gpstk::RinexNavData *) 0 ;
    double arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RinexNavData_Cus_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexNavData, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->Cus = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexNavData_Cus_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexNavData *arg1 = (gpstk::RinexNavData *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RinexNavData_Cus_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexNavData, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double) ((arg1)->Cus);
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexNavData_Crc_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexNavData *arg1 = (gpstk::RinexNavData *) 0 ;
    double arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RinexNavData_Crc_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexNavData, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->Crc = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexNavData_Crc_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexNavData *arg1 = (gpstk::RinexNavData *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RinexNavData_Crc_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexNavData, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double) ((arg1)->Crc);
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexNavData_Crs_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexNavData *arg1 = (gpstk::RinexNavData *) 0 ;
    double arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RinexNavData_Crs_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexNavData, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->Crs = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexNavData_Crs_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexNavData *arg1 = (gpstk::RinexNavData *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RinexNavData_Crs_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexNavData, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double) ((arg1)->Crs);
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexNavData_Cic_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexNavData *arg1 = (gpstk::RinexNavData *) 0 ;
    double arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RinexNavData_Cic_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexNavData, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->Cic = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexNavData_Cic_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexNavData *arg1 = (gpstk::RinexNavData *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RinexNavData_Cic_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexNavData, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double) ((arg1)->Cic);
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexNavData_Cis_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexNavData *arg1 = (gpstk::RinexNavData *) 0 ;
    double arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RinexNavData_Cis_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexNavData, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->Cis = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexNavData_Cis_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexNavData *arg1 = (gpstk::RinexNavData *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RinexNavData_Cis_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexNavData, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double) ((arg1)->Cis);
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexNavData_Toe_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexNavData *arg1 = (gpstk::RinexNavData *) 0 ;
    double arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RinexNavData_Toe_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexNavData, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->Toe = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexNavData_Toe_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexNavData *arg1 = (gpstk::RinexNavData *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RinexNavData_Toe_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexNavData, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double) ((arg1)->Toe);
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexNavData_M0_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexNavData *arg1 = (gpstk::RinexNavData *) 0 ;
    double arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RinexNavData_M0_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexNavData, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->M0 = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexNavData_M0_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexNavData *arg1 = (gpstk::RinexNavData *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RinexNavData_M0_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexNavData, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double) ((arg1)->M0);
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexNavData_dn_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexNavData *arg1 = (gpstk::RinexNavData *) 0 ;
    double arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RinexNavData_dn_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexNavData, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->dn = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexNavData_dn_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexNavData *arg1 = (gpstk::RinexNavData *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RinexNavData_dn_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexNavData, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double) ((arg1)->dn);
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexNavData_ecc_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexNavData *arg1 = (gpstk::RinexNavData *) 0 ;
    double arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RinexNavData_ecc_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexNavData, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->ecc = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexNavData_ecc_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexNavData *arg1 = (gpstk::RinexNavData *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RinexNavData_ecc_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexNavData, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double) ((arg1)->ecc);
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexNavData_Ahalf_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexNavData *arg1 = (gpstk::RinexNavData *) 0 ;
    double arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RinexNavData_Ahalf_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexNavData, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->Ahalf = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexNavData_Ahalf_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexNavData *arg1 = (gpstk::RinexNavData *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RinexNavData_Ahalf_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexNavData, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double) ((arg1)->Ahalf);
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexNavData_OMEGA0_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexNavData *arg1 = (gpstk::RinexNavData *) 0 ;
    double arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RinexNavData_OMEGA0_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexNavData, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->OMEGA0 = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexNavData_OMEGA0_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexNavData *arg1 = (gpstk::RinexNavData *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RinexNavData_OMEGA0_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexNavData, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double) ((arg1)->OMEGA0);
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexNavData_i0_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexNavData *arg1 = (gpstk::RinexNavData *) 0 ;
    double arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RinexNavData_i0_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexNavData, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->i0 = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexNavData_i0_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexNavData *arg1 = (gpstk::RinexNavData *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RinexNavData_i0_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexNavData, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double) ((arg1)->i0);
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexNavData_w_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexNavData *arg1 = (gpstk::RinexNavData *) 0 ;
    double arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RinexNavData_w_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexNavData, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->w = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexNavData_w_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexNavData *arg1 = (gpstk::RinexNavData *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RinexNavData_w_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexNavData, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double) ((arg1)->w);
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexNavData_OMEGAdot_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexNavData *arg1 = (gpstk::RinexNavData *) 0 ;
    double arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RinexNavData_OMEGAdot_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexNavData, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->OMEGAdot = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexNavData_OMEGAdot_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexNavData *arg1 = (gpstk::RinexNavData *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RinexNavData_OMEGAdot_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexNavData, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double) ((arg1)->OMEGAdot);
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexNavData_idot_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexNavData *arg1 = (gpstk::RinexNavData *) 0 ;
    double arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RinexNavData_idot_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexNavData, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->idot = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexNavData_idot_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexNavData *arg1 = (gpstk::RinexNavData *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RinexNavData_idot_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexNavData, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double) ((arg1)->idot);
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexNavData_fitint_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexNavData *arg1 = (gpstk::RinexNavData *) 0 ;
    double arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RinexNavData_fitint_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexNavData, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->fitint = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RinexNavData_fitint_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RinexNavData *arg1 = (gpstk::RinexNavData *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RinexNavData_fitint_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RinexNavData, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double) ((arg1)->fitint);
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject * RinexNavData_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_gpstk__RinexNavData, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_SP3Data(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::SP3Data *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_SP3Data")) goto fail;
    result = (gpstk::SP3Data *)new gpstk::SP3Data();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__SP3Data, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_SP3Data(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::SP3Data *arg1 = (gpstk::SP3Data *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_SP3Data",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__SP3Data, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SP3Data_isData(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::SP3Data *arg1 = (gpstk::SP3Data *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:SP3Data_isData",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__SP3Data, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)((gpstk::SP3Data const *)arg1)->isData();
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SP3Data_dump(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::SP3Data *arg1 = (gpstk::SP3Data *) 0 ;
    std::ostream *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:SP3Data_dump",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__SP3Data, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("std::ostream");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    ((gpstk::SP3Data const *)arg1)->dump(*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SP3Data_flag_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::SP3Data *arg1 = (gpstk::SP3Data *) 0 ;
    char arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:SP3Data_flag_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__SP3Data, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (char)(SWIG_As_char(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->flag = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SP3Data_flag_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::SP3Data *arg1 = (gpstk::SP3Data *) 0 ;
    char result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:SP3Data_flag_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__SP3Data, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (char) ((arg1)->flag);
    
    {
        resultobj = SWIG_From_char((char)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SP3Data_id_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::SP3Data *arg1 = (gpstk::SP3Data *) 0 ;
    short arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:SP3Data_id_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__SP3Data, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (short)(SWIG_As_short(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->id = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SP3Data_id_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::SP3Data *arg1 = (gpstk::SP3Data *) 0 ;
    short result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:SP3Data_id_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__SP3Data, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (short) ((arg1)->id);
    
    {
        resultobj = SWIG_From_short((short)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SP3Data_x_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::SP3Data *arg1 = (gpstk::SP3Data *) 0 ;
    Triple *arg2 = (Triple *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:SP3Data_x_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__SP3Data, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_gpstk__Triple, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->x = *arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SP3Data_x_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::SP3Data *arg1 = (gpstk::SP3Data *) 0 ;
    Triple *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:SP3Data_x_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__SP3Data, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (Triple *)& ((arg1)->x);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__Triple, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SP3Data_clk_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::SP3Data *arg1 = (gpstk::SP3Data *) 0 ;
    double arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:SP3Data_clk_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__SP3Data, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->clk = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SP3Data_clk_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::SP3Data *arg1 = (gpstk::SP3Data *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:SP3Data_clk_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__SP3Data, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double) ((arg1)->clk);
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SP3Data_time_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::SP3Data *arg1 = (gpstk::SP3Data *) 0 ;
    DayTime *arg2 = (DayTime *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:SP3Data_time_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__SP3Data, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_gpstk__DayTime, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->time = *arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SP3Data_time_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::SP3Data *arg1 = (gpstk::SP3Data *) 0 ;
    DayTime *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:SP3Data_time_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__SP3Data, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (DayTime *)& ((arg1)->time);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__DayTime, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject * SP3Data_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_gpstk__SP3Data, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_RungeKutta4_integrateTo__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RungeKutta4 *arg1 = (gpstk::RungeKutta4 *) 0 ;
    double arg2 ;
    double arg3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:RungeKutta4_integrateTo",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RungeKutta4, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (double)(SWIG_As_double(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    (arg1)->integrateTo(arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RungeKutta4_integrateTo__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RungeKutta4 *arg1 = (gpstk::RungeKutta4 *) 0 ;
    double arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RungeKutta4_integrateTo",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RungeKutta4, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    (arg1)->integrateTo(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RungeKutta4_integrateTo__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RungeKutta4 *arg1 = (gpstk::RungeKutta4 *) 0 ;
    double arg2 ;
    Matrix<double > *arg3 = 0 ;
    double arg4 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:RungeKutta4_integrateTo",&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RungeKutta4, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_MatrixTdouble_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (arg3 == NULL) {
            SWIG_null_ref("Matrix<double >");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = (double)(SWIG_As_double(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    (arg1)->integrateTo(arg2,*arg3,arg4);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RungeKutta4_integrateTo__SWIG_3(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RungeKutta4 *arg1 = (gpstk::RungeKutta4 *) 0 ;
    double arg2 ;
    Matrix<double > *arg3 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:RungeKutta4_integrateTo",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RungeKutta4, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_MatrixTdouble_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (arg3 == NULL) {
            SWIG_null_ref("Matrix<double >");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    (arg1)->integrateTo(arg2,*arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RungeKutta4_integrateTo(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[5];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 4); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_gpstk__RungeKutta4, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_double(argv[1]);
            if (_v) {
                return _wrap_RungeKutta4_integrateTo__SWIG_1(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_gpstk__RungeKutta4, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_double(argv[1]);
            if (_v) {
                {
                    void *ptr = 0;
                    if (SWIG_ConvertPtr(argv[2], &ptr, SWIGTYPE_p_MatrixTdouble_t, 0) == -1) {
                        _v = 0;
                        PyErr_Clear();
                    } else {
                        _v = (ptr != 0);
                    }
                }
                if (_v) {
                    return _wrap_RungeKutta4_integrateTo__SWIG_3(self,args);
                }
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_gpstk__RungeKutta4, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_double(argv[1]);
            if (_v) {
                _v = SWIG_Check_double(argv[2]);
                if (_v) {
                    return _wrap_RungeKutta4_integrateTo__SWIG_0(self,args);
                }
            }
        }
    }
    if (argc == 4) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_gpstk__RungeKutta4, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_double(argv[1]);
            if (_v) {
                {
                    void *ptr = 0;
                    if (SWIG_ConvertPtr(argv[2], &ptr, SWIGTYPE_p_MatrixTdouble_t, 0) == -1) {
                        _v = 0;
                        PyErr_Clear();
                    } else {
                        _v = (ptr != 0);
                    }
                }
                if (_v) {
                    _v = SWIG_Check_double(argv[3]);
                    if (_v) {
                        return _wrap_RungeKutta4_integrateTo__SWIG_2(self,args);
                    }
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'RungeKutta4_integrateTo'");
    return NULL;
}


static PyObject *_wrap_RungeKutta4_derivative(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RungeKutta4 *arg1 = (gpstk::RungeKutta4 *) 0 ;
    long double arg2 ;
    gpstk::Matrix<double > *arg3 = 0 ;
    gpstk::Matrix<double > *arg4 = 0 ;
    gpstk::Matrix<double > *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:RungeKutta4_derivative",&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RungeKutta4, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        long double * argp;
        SWIG_Python_ConvertPtr(obj1, (void **)&argp, SWIGTYPE_p_long_double, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("long double");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *argp;
    }
    {
        SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_gpstk__MatrixTdouble_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (arg3 == NULL) {
            SWIG_null_ref("gpstk::Matrix<double >");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj3, (void **)&arg4, SWIGTYPE_p_gpstk__MatrixTdouble_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(4)) SWIG_fail;
        if (arg4 == NULL) {
            SWIG_null_ref("gpstk::Matrix<double >");
        }
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    {
        gpstk::Matrix<double > &_result_ref = (arg1)->derivative(arg2,(gpstk::Matrix<double > const &)*arg3,*arg4);
        result = (gpstk::Matrix<double > *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__MatrixTdouble_t, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RungeKutta4_getTime(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RungeKutta4 *arg1 = (gpstk::RungeKutta4 *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RungeKutta4_getTime",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RungeKutta4, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double)(arg1)->getTime();
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RungeKutta4_getState(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RungeKutta4 *arg1 = (gpstk::RungeKutta4 *) 0 ;
    Matrix<double > *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RungeKutta4_getState",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RungeKutta4, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        Matrix<double > const &_result_ref = (arg1)->getState();
        result = (Matrix<double > *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_MatrixTdouble_t, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_RungeKutta4(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RungeKutta4 *arg1 = (gpstk::RungeKutta4 *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_RungeKutta4",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RungeKutta4, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * RungeKutta4_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_gpstk__RungeKutta4, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_GeometryException__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::GeometryException *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_GeometryException")) goto fail;
    result = (gpstk::GeometryException *)new gpstk::GeometryException();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__GeometryException, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_GeometryException__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::GeometryException *arg1 = 0 ;
    gpstk::GeometryException *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_GeometryException",&obj0)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__GeometryException, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("gpstk::GeometryException");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    result = (gpstk::GeometryException *)new gpstk::GeometryException((gpstk::GeometryException const &)*arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__GeometryException, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_GeometryException__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::Exception *arg1 = 0 ;
    gpstk::GeometryException *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_GeometryException",&obj0)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__Exception, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("gpstk::Exception");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    result = (gpstk::GeometryException *)new gpstk::GeometryException((gpstk::Exception const &)*arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__GeometryException, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_GeometryException__SWIG_3(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::string arg1 ;
    unsigned long arg2 ;
    gpstk::Exception::Severity arg3 ;
    gpstk::GeometryException *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:new_GeometryException",&obj0,&obj1,&obj2)) goto fail;
    {
        std::string *ptr = (std::string *)0;
        int res = SWIG_AsPtr_std_string(obj0, &ptr);
        if (!res) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj0);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    {
        arg2 = (unsigned long)(SWIG_As_unsigned_SS_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (gpstk::Exception::Severity)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    result = (gpstk::GeometryException *)new gpstk::GeometryException(arg1,arg2,arg3);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__GeometryException, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_GeometryException__SWIG_4(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::string arg1 ;
    unsigned long arg2 ;
    gpstk::GeometryException *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:new_GeometryException",&obj0,&obj1)) goto fail;
    {
        std::string *ptr = (std::string *)0;
        int res = SWIG_AsPtr_std_string(obj0, &ptr);
        if (!res) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj0);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    {
        arg2 = (unsigned long)(SWIG_As_unsigned_SS_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (gpstk::GeometryException *)new gpstk::GeometryException(arg1,arg2);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__GeometryException, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_GeometryException__SWIG_5(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::string arg1 ;
    gpstk::GeometryException *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_GeometryException",&obj0)) goto fail;
    {
        std::string *ptr = (std::string *)0;
        int res = SWIG_AsPtr_std_string(obj0, &ptr);
        if (!res) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj0);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    result = (gpstk::GeometryException *)new gpstk::GeometryException(arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__GeometryException, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_GeometryException(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[4];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_new_GeometryException__SWIG_0(self,args);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_gpstk__GeometryException, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            return _wrap_new_GeometryException__SWIG_1(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_gpstk__Exception, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            return _wrap_new_GeometryException__SWIG_2(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        _v = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
        if (_v) {
            return _wrap_new_GeometryException__SWIG_5(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        _v = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
        if (_v) {
            _v = SWIG_Check_unsigned_SS_long(argv[1]);
            if (_v) {
                return _wrap_new_GeometryException__SWIG_4(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        _v = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
        if (_v) {
            _v = SWIG_Check_unsigned_SS_long(argv[1]);
            if (_v) {
                _v = SWIG_Check_int(argv[2]);
                if (_v) {
                    return _wrap_new_GeometryException__SWIG_3(self,args);
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'new_GeometryException'");
    return NULL;
}


static PyObject *_wrap_delete_GeometryException(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::GeometryException *arg1 = (gpstk::GeometryException *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_GeometryException",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__GeometryException, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_GeometryException_getName(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::GeometryException *arg1 = (gpstk::GeometryException *) 0 ;
    std::string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:GeometryException_getName",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__GeometryException, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = ((gpstk::GeometryException const *)arg1)->getName();
    
    {
        resultobj = SWIG_From_std_string((std::string)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_GeometryException_class_operator_assignment(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::GeometryException *arg1 = (gpstk::GeometryException *) 0 ;
    gpstk::GeometryException *arg2 = 0 ;
    gpstk::GeometryException *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:GeometryException_class_operator_assignment",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__GeometryException, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_gpstk__GeometryException, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("gpstk::GeometryException");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        gpstk::GeometryException &_result_ref = (arg1)->operator =((gpstk::GeometryException const &)*arg2);
        result = (gpstk::GeometryException *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__GeometryException, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Triple_streamRead__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::ostream *arg1 = 0 ;
    gpstk::GeometryException *arg2 = 0 ;
    std::ostream *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Triple_streamRead",&obj0,&obj1)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("std::ostream");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_gpstk__GeometryException, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("gpstk::GeometryException");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        std::ostream &_result_ref = operator <<(*arg1,(gpstk::GeometryException const &)*arg2);
        result = (std::ostream *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject * GeometryException_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_gpstk__GeometryException, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_Triple__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::Triple *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_Triple")) goto fail;
    result = (gpstk::Triple *)new gpstk::Triple();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__Triple, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_Triple__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::Triple *arg1 = 0 ;
    gpstk::Triple *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_Triple",&obj0)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__Triple, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("gpstk::Triple");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    result = (gpstk::Triple *)new gpstk::Triple((gpstk::Triple const &)*arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__Triple, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_Triple__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    double arg1 ;
    double arg2 ;
    double arg3 ;
    gpstk::Triple *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:new_Triple",&obj0,&obj1,&obj2)) goto fail;
    {
        arg1 = (double)(SWIG_As_double(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (double)(SWIG_As_double(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    result = (gpstk::Triple *)new gpstk::Triple(arg1,arg2,arg3);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__Triple, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_Triple(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[4];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_new_Triple__SWIG_0(self,args);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_gpstk__Triple, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            return _wrap_new_Triple__SWIG_1(self,args);
        }
    }
    if (argc == 3) {
        int _v;
        _v = SWIG_Check_double(argv[0]);
        if (_v) {
            _v = SWIG_Check_double(argv[1]);
            if (_v) {
                _v = SWIG_Check_double(argv[2]);
                if (_v) {
                    return _wrap_new_Triple__SWIG_2(self,args);
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'new_Triple'");
    return NULL;
}


static PyObject *_wrap_delete_Triple(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::Triple *arg1 = (gpstk::Triple *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_Triple",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__Triple, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Triple_class_operator_assignment__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::Triple *arg1 = (gpstk::Triple *) 0 ;
    gpstk::Triple *arg2 = 0 ;
    gpstk::Triple *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Triple_class_operator_assignment",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__Triple, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_gpstk__Triple, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("gpstk::Triple");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        gpstk::Triple &_result_ref = (arg1)->operator =((gpstk::Triple const &)*arg2);
        result = (gpstk::Triple *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__Triple, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Triple_class_operator_assignment__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::Triple *arg1 = (gpstk::Triple *) 0 ;
    std::valarray<double > *arg2 = 0 ;
    gpstk::Triple *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Triple_class_operator_assignment",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__Triple, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__valarrayTdouble_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("std::valarray<double >");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        {
            gpstk::Triple &_result_ref = (arg1)->operator =((std::valarray<double > const &)*arg2);
            result = (gpstk::Triple *) &_result_ref;
        }
    }
    catch(gpstk::GeometryException &_e) {
        {
            gpstk::GeometryException * temp = new gpstk::GeometryException(_e);
            if (SWIGTYPE_p_gpstk__GeometryException->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_gpstk__GeometryException->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__GeometryException,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"gpstk::GeometryException");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__GeometryException,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__Triple, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Triple_class_operator_assignment(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_gpstk__Triple, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_gpstk__Triple, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_Triple_class_operator_assignment__SWIG_0(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_gpstk__Triple, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_std__valarrayTdouble_t, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_Triple_class_operator_assignment__SWIG_1(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'Triple_class_operator_assignment'");
    return NULL;
}


static PyObject *_wrap_Triple_dot(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::Triple *arg1 = (gpstk::Triple *) 0 ;
    gpstk::Triple *arg2 = 0 ;
    double result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Triple_dot",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__Triple, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_gpstk__Triple, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("gpstk::Triple");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (double)((gpstk::Triple const *)arg1)->dot((gpstk::Triple const &)*arg2);
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Triple_cross(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::Triple *arg1 = (gpstk::Triple *) 0 ;
    gpstk::Triple *arg2 = 0 ;
    gpstk::Triple result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Triple_cross",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__Triple, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_gpstk__Triple, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("gpstk::Triple");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = ((gpstk::Triple const *)arg1)->cross((gpstk::Triple const &)*arg2);
    
    {
        gpstk::Triple * resultptr;
        resultptr = new gpstk::Triple((gpstk::Triple &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_gpstk__Triple, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Triple_mag(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::Triple *arg1 = (gpstk::Triple *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Triple_mag",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__Triple, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double)((gpstk::Triple const *)arg1)->mag();
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Triple_cosVector(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::Triple *arg1 = (gpstk::Triple *) 0 ;
    gpstk::Triple *arg2 = 0 ;
    double result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Triple_cosVector",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__Triple, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_gpstk__Triple, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("gpstk::Triple");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (double)((gpstk::Triple const *)arg1)->cosVector((gpstk::Triple const &)*arg2);
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Triple_slantRange(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::Triple *arg1 = (gpstk::Triple *) 0 ;
    gpstk::Triple *arg2 = 0 ;
    double result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Triple_slantRange",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__Triple, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_gpstk__Triple, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("gpstk::Triple");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (double)((gpstk::Triple const *)arg1)->slantRange((gpstk::Triple const &)*arg2);
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Triple_elvAngle(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::Triple *arg1 = (gpstk::Triple *) 0 ;
    gpstk::Triple *arg2 = 0 ;
    double result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Triple_elvAngle",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__Triple, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_gpstk__Triple, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("gpstk::Triple");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (double)((gpstk::Triple const *)arg1)->elvAngle((gpstk::Triple const &)*arg2);
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Triple_azAngle(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::Triple *arg1 = (gpstk::Triple *) 0 ;
    gpstk::Triple *arg2 = 0 ;
    double result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Triple_azAngle",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__Triple, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_gpstk__Triple, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("gpstk::Triple");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        result = (double)((gpstk::Triple const *)arg1)->azAngle((gpstk::Triple const &)*arg2);
    }
    catch(gpstk::GeometryException &_e) {
        {
            gpstk::GeometryException * temp = new gpstk::GeometryException(_e);
            if (SWIGTYPE_p_gpstk__GeometryException->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_gpstk__GeometryException->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__GeometryException,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"gpstk::GeometryException");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__GeometryException,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Triple_class_operator_bracket(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::Triple *arg1 = (gpstk::Triple *) 0 ;
    size_t arg2 ;
    double *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Triple_class_operator_bracket",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__Triple, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (size_t const)(SWIG_As_unsigned_SS_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        double &_result_ref = (arg1)->operator [](arg2);
        result = (double *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_double, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Triple_operator_bracket_const(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::Triple *arg1 = (gpstk::Triple *) 0 ;
    size_t arg2 ;
    double result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Triple_operator_bracket_const",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__Triple, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (size_t const)(SWIG_As_unsigned_SS_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (double)((gpstk::Triple const *)arg1)->operator [](arg2);
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Triple___sub__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::Triple *arg1 = (gpstk::Triple *) 0 ;
    gpstk::Triple *arg2 = 0 ;
    gpstk::Triple result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Triple___sub__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__Triple, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_gpstk__Triple, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("gpstk::Triple");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = ((gpstk::Triple const *)arg1)->operator -((gpstk::Triple const &)*arg2);
    
    {
        gpstk::Triple * resultptr;
        resultptr = new gpstk::Triple((gpstk::Triple &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_gpstk__Triple, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Triple___add__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::Triple *arg1 = (gpstk::Triple *) 0 ;
    gpstk::Triple *arg2 = 0 ;
    gpstk::Triple result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Triple___add__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__Triple, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_gpstk__Triple, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("gpstk::Triple");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = ((gpstk::Triple const *)arg1)->operator +((gpstk::Triple const &)*arg2);
    
    {
        gpstk::Triple * resultptr;
        resultptr = new gpstk::Triple((gpstk::Triple &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_gpstk__Triple, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Triple_size(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::Triple *arg1 = (gpstk::Triple *) 0 ;
    size_t result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Triple_size",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__Triple, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = ((gpstk::Triple const *)arg1)->size();
    
    {
        resultobj = SWIG_From_unsigned_SS_long((unsigned long)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Triple_streamRead__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::ostream *arg1 = 0 ;
    gpstk::Triple *arg2 = 0 ;
    std::ostream *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Triple_streamRead",&obj0,&obj1)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("std::ostream");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_gpstk__Triple, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("gpstk::Triple");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        std::ostream &_result_ref = operator <<(*arg1,(gpstk::Triple const &)*arg2);
        result = (std::ostream *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Triple_streamRead(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_gpstk__GeometryException, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_Triple_streamRead__SWIG_0(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_gpstk__Triple, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_Triple_streamRead__SWIG_1(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'Triple_streamRead'");
    return NULL;
}


static PyObject *_wrap_Triple_theArray_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::Triple *arg1 = (gpstk::Triple *) 0 ;
    std::valarray<double > arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Triple_theArray_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__Triple, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        std::valarray<double > * argp;
        SWIG_Python_ConvertPtr(obj1, (void **)&argp, SWIGTYPE_p_std__valarrayTdouble_t, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("std::valarray<double >");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *argp;
    }
    if (arg1) (arg1)->theArray = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Triple_theArray_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::Triple *arg1 = (gpstk::Triple *) 0 ;
    std::valarray<double > result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Triple_theArray_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__Triple, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result =  ((arg1)->theArray);
    
    {
        std::valarray<double > * resultptr;
        resultptr = new std::valarray<double >((std::valarray<double > &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_std__valarrayTdouble_t, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject * Triple_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_gpstk__Triple, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_Position_getSystemName(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::Position *arg1 = (gpstk::Position *) 0 ;
    std::string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Position_getSystemName",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__Position, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (arg1)->getSystemName();
    
    {
        resultobj = SWIG_From_std_string((std::string)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static int _wrap_Position_ONE_MM_TOLERANCE_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable Position_ONE_MM_TOLERANCE is read-only.");
    return 1;
}


static PyObject *_wrap_Position_ONE_MM_TOLERANCE_get(void) {
    PyObject *pyobj = NULL;
    
    {
        pyobj = SWIG_From_double((double)(gpstk::Position::ONE_MM_TOLERANCE)); 
    }
    return pyobj;
}


static int _wrap_Position_ONE_CM_TOLERANCE_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable Position_ONE_CM_TOLERANCE is read-only.");
    return 1;
}


static PyObject *_wrap_Position_ONE_CM_TOLERANCE_get(void) {
    PyObject *pyobj = NULL;
    
    {
        pyobj = SWIG_From_double((double)(gpstk::Position::ONE_CM_TOLERANCE)); 
    }
    return pyobj;
}


static int _wrap_Position_ONE_UM_TOLERANCE_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable Position_ONE_UM_TOLERANCE is read-only.");
    return 1;
}


static PyObject *_wrap_Position_ONE_UM_TOLERANCE_get(void) {
    PyObject *pyobj = NULL;
    
    {
        pyobj = SWIG_From_double((double)(gpstk::Position::ONE_UM_TOLERANCE)); 
    }
    return pyobj;
}


static int _wrap_Position_POSITION_TOLERANCE_set(PyObject *_val) {
    {
        double temp = (double)(SWIG_As_double(_val));
        if (PyErr_Occurred()) {
            SWIG_append_errmsg("C/C++ variable 'gpstk::Position::POSITION_TOLERANCE (double)'");
            return 1;
        }
        gpstk::Position::POSITION_TOLERANCE = temp;
    }
    return 0;
}


static PyObject *_wrap_Position_POSITION_TOLERANCE_get(void) {
    PyObject *pyobj = NULL;
    
    {
        pyobj = SWIG_From_double((double)(gpstk::Position::POSITION_TOLERANCE)); 
    }
    return pyobj;
}


static PyObject *_wrap_Position_setPositionTolerance(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    double arg1 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Position_setPositionTolerance",&obj0)) goto fail;
    {
        arg1 = (double const)(SWIG_As_double(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    result = (double)gpstk::Position::setPositionTolerance(arg1);
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Position_getPositionTolerance(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    double result;
    
    if(!PyArg_ParseTuple(args,(char *)":Position_getPositionTolerance")) goto fail;
    result = (double)gpstk::Position::getPositionTolerance();
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Position_setTolerance(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::Position *arg1 = (gpstk::Position *) 0 ;
    double arg2 ;
    gpstk::Position *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Position_setTolerance",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__Position, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (double const)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        gpstk::Position &_result_ref = (arg1)->setTolerance(arg2);
        result = (gpstk::Position *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__Position, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_Position__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::Position *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_Position")) goto fail;
    result = (gpstk::Position *)new gpstk::Position();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__Position, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_Position__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    double *arg1 = 0 ;
    double *arg2 = 0 ;
    double *arg3 = 0 ;
    gpstk::Position::CoordinateSystem arg4 ;
    GeoidModel *arg5 = (GeoidModel *) 0 ;
    gpstk::Position *result;
    double temp1 ;
    double temp2 ;
    double temp3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOO:new_Position",&obj0,&obj1,&obj2,&obj3,&obj4)) goto fail;
    {
        temp1 = (double)(SWIG_As_double(obj0));
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = &temp1;
    }
    {
        temp2 = (double)(SWIG_As_double(obj1));
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = &temp2;
    }
    {
        temp3 = (double)(SWIG_As_double(obj2));
        if (SWIG_arg_fail(3)) SWIG_fail;
        arg3 = &temp3;
    }
    {
        arg4 = (gpstk::Position::CoordinateSystem)(SWIG_As_int(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    SWIG_Python_ConvertPtr(obj4, (void **)&arg5, SWIGTYPE_p_gpstk__GeoidModel, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(5)) SWIG_fail;
    try {
        result = (gpstk::Position *)new gpstk::Position((double const &)*arg1,(double const &)*arg2,(double const &)*arg3,arg4,arg5);
    }
    catch(gpstk::GeometryException &_e) {
        {
            gpstk::GeometryException * temp = new gpstk::GeometryException(_e);
            if (SWIGTYPE_p_gpstk__GeometryException->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_gpstk__GeometryException->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__GeometryException,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"gpstk::GeometryException");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__GeometryException,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__Position, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_Position__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    double *arg1 = 0 ;
    double *arg2 = 0 ;
    double *arg3 = 0 ;
    gpstk::Position::CoordinateSystem arg4 ;
    gpstk::Position *result;
    double temp1 ;
    double temp2 ;
    double temp3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:new_Position",&obj0,&obj1,&obj2,&obj3)) goto fail;
    {
        temp1 = (double)(SWIG_As_double(obj0));
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = &temp1;
    }
    {
        temp2 = (double)(SWIG_As_double(obj1));
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = &temp2;
    }
    {
        temp3 = (double)(SWIG_As_double(obj2));
        if (SWIG_arg_fail(3)) SWIG_fail;
        arg3 = &temp3;
    }
    {
        arg4 = (gpstk::Position::CoordinateSystem)(SWIG_As_int(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    try {
        result = (gpstk::Position *)new gpstk::Position((double const &)*arg1,(double const &)*arg2,(double const &)*arg3,arg4);
    }
    catch(gpstk::GeometryException &_e) {
        {
            gpstk::GeometryException * temp = new gpstk::GeometryException(_e);
            if (SWIGTYPE_p_gpstk__GeometryException->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_gpstk__GeometryException->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__GeometryException,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"gpstk::GeometryException");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__GeometryException,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__Position, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_Position__SWIG_3(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    double *arg1 = 0 ;
    double *arg2 = 0 ;
    double *arg3 = 0 ;
    gpstk::Position *result;
    double temp1 ;
    double temp2 ;
    double temp3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:new_Position",&obj0,&obj1,&obj2)) goto fail;
    {
        temp1 = (double)(SWIG_As_double(obj0));
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = &temp1;
    }
    {
        temp2 = (double)(SWIG_As_double(obj1));
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = &temp2;
    }
    {
        temp3 = (double)(SWIG_As_double(obj2));
        if (SWIG_arg_fail(3)) SWIG_fail;
        arg3 = &temp3;
    }
    try {
        result = (gpstk::Position *)new gpstk::Position((double const &)*arg1,(double const &)*arg2,(double const &)*arg3);
    }
    catch(gpstk::GeometryException &_e) {
        {
            gpstk::GeometryException * temp = new gpstk::GeometryException(_e);
            if (SWIGTYPE_p_gpstk__GeometryException->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_gpstk__GeometryException->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__GeometryException,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"gpstk::GeometryException");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__GeometryException,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__Position, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_Position__SWIG_4(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    double *arg1 ;
    gpstk::Position::CoordinateSystem arg2 ;
    GeoidModel *arg3 = (GeoidModel *) 0 ;
    gpstk::Position *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:new_Position",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_double, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (gpstk::Position::CoordinateSystem)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_gpstk__GeoidModel, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(3)) SWIG_fail;
    try {
        result = (gpstk::Position *)new gpstk::Position((double const (*))arg1,arg2,arg3);
    }
    catch(gpstk::GeometryException &_e) {
        {
            gpstk::GeometryException * temp = new gpstk::GeometryException(_e);
            if (SWIGTYPE_p_gpstk__GeometryException->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_gpstk__GeometryException->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__GeometryException,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"gpstk::GeometryException");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__GeometryException,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__Position, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_Position__SWIG_5(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    double *arg1 ;
    gpstk::Position::CoordinateSystem arg2 ;
    gpstk::Position *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:new_Position",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_double, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (gpstk::Position::CoordinateSystem)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        result = (gpstk::Position *)new gpstk::Position((double const (*))arg1,arg2);
    }
    catch(gpstk::GeometryException &_e) {
        {
            gpstk::GeometryException * temp = new gpstk::GeometryException(_e);
            if (SWIGTYPE_p_gpstk__GeometryException->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_gpstk__GeometryException->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__GeometryException,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"gpstk::GeometryException");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__GeometryException,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__Position, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_Position__SWIG_6(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    double *arg1 ;
    gpstk::Position *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_Position",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_double, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        result = (gpstk::Position *)new gpstk::Position((double const (*))arg1);
    }
    catch(gpstk::GeometryException &_e) {
        {
            gpstk::GeometryException * temp = new gpstk::GeometryException(_e);
            if (SWIGTYPE_p_gpstk__GeometryException->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_gpstk__GeometryException->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__GeometryException,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"gpstk::GeometryException");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__GeometryException,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__Position, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_Position__SWIG_7(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::Triple *arg1 = 0 ;
    gpstk::Position::CoordinateSystem arg2 ;
    GeoidModel *arg3 = (GeoidModel *) 0 ;
    gpstk::Position *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:new_Position",&obj0,&obj1,&obj2)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__Triple, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("gpstk::Triple");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        arg2 = (gpstk::Position::CoordinateSystem)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_gpstk__GeoidModel, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(3)) SWIG_fail;
    try {
        result = (gpstk::Position *)new gpstk::Position((gpstk::Triple const &)*arg1,arg2,arg3);
    }
    catch(gpstk::GeometryException &_e) {
        {
            gpstk::GeometryException * temp = new gpstk::GeometryException(_e);
            if (SWIGTYPE_p_gpstk__GeometryException->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_gpstk__GeometryException->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__GeometryException,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"gpstk::GeometryException");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__GeometryException,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__Position, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_Position__SWIG_8(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::Triple *arg1 = 0 ;
    gpstk::Position::CoordinateSystem arg2 ;
    gpstk::Position *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:new_Position",&obj0,&obj1)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__Triple, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("gpstk::Triple");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        arg2 = (gpstk::Position::CoordinateSystem)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        result = (gpstk::Position *)new gpstk::Position((gpstk::Triple const &)*arg1,arg2);
    }
    catch(gpstk::GeometryException &_e) {
        {
            gpstk::GeometryException * temp = new gpstk::GeometryException(_e);
            if (SWIGTYPE_p_gpstk__GeometryException->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_gpstk__GeometryException->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__GeometryException,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"gpstk::GeometryException");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__GeometryException,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__Position, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_Position__SWIG_9(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::Triple *arg1 = 0 ;
    gpstk::Position *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_Position",&obj0)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__Triple, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("gpstk::Triple");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    try {
        result = (gpstk::Position *)new gpstk::Position((gpstk::Triple const &)*arg1);
    }
    catch(gpstk::GeometryException &_e) {
        {
            gpstk::GeometryException * temp = new gpstk::GeometryException(_e);
            if (SWIGTYPE_p_gpstk__GeometryException->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_gpstk__GeometryException->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__GeometryException,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"gpstk::GeometryException");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__GeometryException,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__Position, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_Position__SWIG_10(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    Xvt *arg1 = 0 ;
    gpstk::Position *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_Position",&obj0)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__Xvt, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("Xvt");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    result = (gpstk::Position *)new gpstk::Position((Xvt const &)*arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__Position, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_Position(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[6];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 5); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_new_Position__SWIG_0(self,args);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_double, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_new_Position__SWIG_6(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_gpstk__Triple, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            return _wrap_new_Position__SWIG_9(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_gpstk__Xvt, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            return _wrap_new_Position__SWIG_10(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_double, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_int(argv[1]);
            if (_v) {
                return _wrap_new_Position__SWIG_5(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_gpstk__Triple, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            _v = SWIG_Check_int(argv[1]);
            if (_v) {
                return _wrap_new_Position__SWIG_8(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_double, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_int(argv[1]);
            if (_v) {
                {
                    void *ptr;
                    if (SWIG_ConvertPtr(argv[2], &ptr, SWIGTYPE_p_gpstk__GeoidModel, 0) == -1) {
                        _v = 0;
                        PyErr_Clear();
                    } else {
                        _v = 1;
                    }
                }
                if (_v) {
                    return _wrap_new_Position__SWIG_4(self,args);
                }
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_gpstk__Triple, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            _v = SWIG_Check_int(argv[1]);
            if (_v) {
                {
                    void *ptr;
                    if (SWIG_ConvertPtr(argv[2], &ptr, SWIGTYPE_p_gpstk__GeoidModel, 0) == -1) {
                        _v = 0;
                        PyErr_Clear();
                    } else {
                        _v = 1;
                    }
                }
                if (_v) {
                    return _wrap_new_Position__SWIG_7(self,args);
                }
            }
        }
    }
    if (argc == 3) {
        int _v;
        _v = SWIG_Check_double(argv[0]);
        if (_v) {
            _v = SWIG_Check_double(argv[1]);
            if (_v) {
                _v = SWIG_Check_double(argv[2]);
                if (_v) {
                    return _wrap_new_Position__SWIG_3(self,args);
                }
            }
        }
    }
    if (argc == 4) {
        int _v;
        _v = SWIG_Check_double(argv[0]);
        if (_v) {
            _v = SWIG_Check_double(argv[1]);
            if (_v) {
                _v = SWIG_Check_double(argv[2]);
                if (_v) {
                    _v = SWIG_Check_int(argv[3]);
                    if (_v) {
                        return _wrap_new_Position__SWIG_2(self,args);
                    }
                }
            }
        }
    }
    if (argc == 5) {
        int _v;
        _v = SWIG_Check_double(argv[0]);
        if (_v) {
            _v = SWIG_Check_double(argv[1]);
            if (_v) {
                _v = SWIG_Check_double(argv[2]);
                if (_v) {
                    _v = SWIG_Check_int(argv[3]);
                    if (_v) {
                        {
                            void *ptr;
                            if (SWIG_ConvertPtr(argv[4], &ptr, SWIGTYPE_p_gpstk__GeoidModel, 0) == -1) {
                                _v = 0;
                                PyErr_Clear();
                            } else {
                                _v = 1;
                            }
                        }
                        if (_v) {
                            return _wrap_new_Position__SWIG_1(self,args);
                        }
                    }
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'new_Position'");
    return NULL;
}


static PyObject *_wrap_delete_Position(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::Position *arg1 = (gpstk::Position *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_Position",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__Position, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Position___sub__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::Position *arg1 = (gpstk::Position *) 0 ;
    gpstk::Position *arg2 = 0 ;
    gpstk::Position result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Position___sub__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__Position, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_gpstk__Position, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("gpstk::Position");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        result = ((gpstk::Position const *)arg1)->operator -((gpstk::Position const &)*arg2);
    }
    catch(gpstk::GeometryException &_e) {
        {
            gpstk::GeometryException * temp = new gpstk::GeometryException(_e);
            if (SWIGTYPE_p_gpstk__GeometryException->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_gpstk__GeometryException->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__GeometryException,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"gpstk::GeometryException");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__GeometryException,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    {
        gpstk::Position * resultptr;
        resultptr = new gpstk::Position((gpstk::Position &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_gpstk__Position, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Position___add__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::Position *arg1 = (gpstk::Position *) 0 ;
    gpstk::Position *arg2 = 0 ;
    gpstk::Position result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Position___add__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__Position, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_gpstk__Position, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("gpstk::Position");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        result = ((gpstk::Position const *)arg1)->operator +((gpstk::Position const &)*arg2);
    }
    catch(gpstk::GeometryException &_e) {
        {
            gpstk::GeometryException * temp = new gpstk::GeometryException(_e);
            if (SWIGTYPE_p_gpstk__GeometryException->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_gpstk__GeometryException->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__GeometryException,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"gpstk::GeometryException");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__GeometryException,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    {
        gpstk::Position * resultptr;
        resultptr = new gpstk::Position((gpstk::Position &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_gpstk__Position, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap___mul____SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    double *arg1 = 0 ;
    gpstk::Position *arg2 = 0 ;
    gpstk::Position result;
    double temp1 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:__mul__",&obj0,&obj1)) goto fail;
    {
        temp1 = (double)(SWIG_As_double(obj0));
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = &temp1;
    }
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_gpstk__Position, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("gpstk::Position");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = operator *((double const &)*arg1,(gpstk::Position const &)*arg2);
    
    {
        gpstk::Position * resultptr;
        resultptr = new gpstk::Position((gpstk::Position &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_gpstk__Position, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap___mul____SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::Position *arg1 = 0 ;
    double *arg2 = 0 ;
    gpstk::Position result;
    double temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:__mul__",&obj0,&obj1)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__Position, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("gpstk::Position");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        temp2 = (double)(SWIG_As_double(obj1));
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = &temp2;
    }
    result = operator *((gpstk::Position const &)*arg1,(double const &)*arg2);
    
    {
        gpstk::Position * resultptr;
        resultptr = new gpstk::Position((gpstk::Position &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_gpstk__Position, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap___mul____SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    int *arg1 = 0 ;
    gpstk::Position *arg2 = 0 ;
    gpstk::Position result;
    int temp1 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:__mul__",&obj0,&obj1)) goto fail;
    {
        temp1 = (int)(SWIG_As_int(obj0));
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = &temp1;
    }
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_gpstk__Position, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("gpstk::Position");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = operator *((int const &)*arg1,(gpstk::Position const &)*arg2);
    
    {
        gpstk::Position * resultptr;
        resultptr = new gpstk::Position((gpstk::Position &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_gpstk__Position, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap___mul____SWIG_3(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::Position *arg1 = 0 ;
    int *arg2 = 0 ;
    gpstk::Position result;
    int temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:__mul__",&obj0,&obj1)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__Position, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("gpstk::Position");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        temp2 = (int)(SWIG_As_int(obj1));
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = &temp2;
    }
    result = operator *((gpstk::Position const &)*arg1,(int const &)*arg2);
    
    {
        gpstk::Position * resultptr;
        resultptr = new gpstk::Position((gpstk::Position &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_gpstk__Position, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap___mul__(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_gpstk__Position, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            _v = SWIG_Check_int(argv[1]);
            if (_v) {
                return _wrap___mul____SWIG_3(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_gpstk__Position, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            _v = SWIG_Check_double(argv[1]);
            if (_v) {
                return _wrap___mul____SWIG_1(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        _v = SWIG_Check_int(argv[0]);
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_gpstk__Position, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap___mul____SWIG_2(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        _v = SWIG_Check_double(argv[0]);
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_gpstk__Position, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap___mul____SWIG_0(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded '__mul__'");
    return NULL;
}


static PyObject *_wrap_Position___eq__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::Position *arg1 = (gpstk::Position *) 0 ;
    gpstk::Position *arg2 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Position___eq__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__Position, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_gpstk__Position, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("gpstk::Position");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (bool)((gpstk::Position const *)arg1)->operator ==((gpstk::Position const &)*arg2);
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Position___ne__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::Position *arg1 = (gpstk::Position *) 0 ;
    gpstk::Position *arg2 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Position___ne__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__Position, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_gpstk__Position, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("gpstk::Position");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (bool)((gpstk::Position const *)arg1)->operator !=((gpstk::Position const &)*arg2);
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Position_transformTo(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::Position *arg1 = (gpstk::Position *) 0 ;
    gpstk::Position::CoordinateSystem arg2 ;
    gpstk::Position result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Position_transformTo",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__Position, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (gpstk::Position::CoordinateSystem)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        result = (arg1)->transformTo(arg2);
    }
    catch(gpstk::GeometryException &_e) {
        {
            gpstk::GeometryException * temp = new gpstk::GeometryException(_e);
            if (SWIGTYPE_p_gpstk__GeometryException->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_gpstk__GeometryException->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__GeometryException,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"gpstk::GeometryException");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__GeometryException,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    {
        gpstk::Position * resultptr;
        resultptr = new gpstk::Position((gpstk::Position &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_gpstk__Position, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Position_asGeodetic__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::Position *arg1 = (gpstk::Position *) 0 ;
    gpstk::Position result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Position_asGeodetic",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__Position, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        result = (arg1)->asGeodetic();
    }
    catch(gpstk::GeometryException &_e) {
        {
            gpstk::GeometryException * temp = new gpstk::GeometryException(_e);
            if (SWIGTYPE_p_gpstk__GeometryException->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_gpstk__GeometryException->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__GeometryException,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"gpstk::GeometryException");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__GeometryException,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    {
        gpstk::Position * resultptr;
        resultptr = new gpstk::Position((gpstk::Position &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_gpstk__Position, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Position_asGeodetic__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::Position *arg1 = (gpstk::Position *) 0 ;
    GeoidModel *arg2 = (GeoidModel *) 0 ;
    gpstk::Position result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Position_asGeodetic",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__Position, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_gpstk__GeoidModel, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    try {
        result = (arg1)->asGeodetic(arg2);
    }
    catch(gpstk::GeometryException &_e) {
        {
            gpstk::GeometryException * temp = new gpstk::GeometryException(_e);
            if (SWIGTYPE_p_gpstk__GeometryException->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_gpstk__GeometryException->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__GeometryException,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"gpstk::GeometryException");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__GeometryException,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    {
        gpstk::Position * resultptr;
        resultptr = new gpstk::Position((gpstk::Position &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_gpstk__Position, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Position_asGeodetic(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_gpstk__Position, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_Position_asGeodetic__SWIG_0(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_gpstk__Position, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_gpstk__GeoidModel, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                return _wrap_Position_asGeodetic__SWIG_1(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'Position_asGeodetic'");
    return NULL;
}


static PyObject *_wrap_Position_asECEF(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::Position *arg1 = (gpstk::Position *) 0 ;
    gpstk::Position result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Position_asECEF",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__Position, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        result = (arg1)->asECEF();
    }
    catch(gpstk::GeometryException &_e) {
        {
            gpstk::GeometryException * temp = new gpstk::GeometryException(_e);
            if (SWIGTYPE_p_gpstk__GeometryException->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_gpstk__GeometryException->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__GeometryException,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"gpstk::GeometryException");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__GeometryException,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    {
        gpstk::Position * resultptr;
        resultptr = new gpstk::Position((gpstk::Position &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_gpstk__Position, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Position_X(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::Position *arg1 = (gpstk::Position *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Position_X",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__Position, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        result = (double)((gpstk::Position const *)arg1)->X();
    }
    catch(gpstk::GeometryException &_e) {
        {
            gpstk::GeometryException * temp = new gpstk::GeometryException(_e);
            if (SWIGTYPE_p_gpstk__GeometryException->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_gpstk__GeometryException->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__GeometryException,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"gpstk::GeometryException");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__GeometryException,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Position_Y(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::Position *arg1 = (gpstk::Position *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Position_Y",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__Position, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        result = (double)((gpstk::Position const *)arg1)->Y();
    }
    catch(gpstk::GeometryException &_e) {
        {
            gpstk::GeometryException * temp = new gpstk::GeometryException(_e);
            if (SWIGTYPE_p_gpstk__GeometryException->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_gpstk__GeometryException->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__GeometryException,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"gpstk::GeometryException");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__GeometryException,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Position_Z(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::Position *arg1 = (gpstk::Position *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Position_Z",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__Position, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        result = (double)((gpstk::Position const *)arg1)->Z();
    }
    catch(gpstk::GeometryException &_e) {
        {
            gpstk::GeometryException * temp = new gpstk::GeometryException(_e);
            if (SWIGTYPE_p_gpstk__GeometryException->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_gpstk__GeometryException->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__GeometryException,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"gpstk::GeometryException");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__GeometryException,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Position_geodeticLatitude(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::Position *arg1 = (gpstk::Position *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Position_geodeticLatitude",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__Position, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        result = (double)((gpstk::Position const *)arg1)->geodeticLatitude();
    }
    catch(gpstk::GeometryException &_e) {
        {
            gpstk::GeometryException * temp = new gpstk::GeometryException(_e);
            if (SWIGTYPE_p_gpstk__GeometryException->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_gpstk__GeometryException->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__GeometryException,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"gpstk::GeometryException");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__GeometryException,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Position_geocentricLatitude(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::Position *arg1 = (gpstk::Position *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Position_geocentricLatitude",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__Position, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        result = (double)((gpstk::Position const *)arg1)->geocentricLatitude();
    }
    catch(gpstk::GeometryException &_e) {
        {
            gpstk::GeometryException * temp = new gpstk::GeometryException(_e);
            if (SWIGTYPE_p_gpstk__GeometryException->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_gpstk__GeometryException->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__GeometryException,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"gpstk::GeometryException");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__GeometryException,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Position_theta(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::Position *arg1 = (gpstk::Position *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Position_theta",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__Position, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        result = (double)((gpstk::Position const *)arg1)->theta();
    }
    catch(gpstk::GeometryException &_e) {
        {
            gpstk::GeometryException * temp = new gpstk::GeometryException(_e);
            if (SWIGTYPE_p_gpstk__GeometryException->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_gpstk__GeometryException->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__GeometryException,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"gpstk::GeometryException");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__GeometryException,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Position_phi(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::Position *arg1 = (gpstk::Position *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Position_phi",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__Position, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        result = (double)((gpstk::Position const *)arg1)->phi();
    }
    catch(gpstk::GeometryException &_e) {
        {
            gpstk::GeometryException * temp = new gpstk::GeometryException(_e);
            if (SWIGTYPE_p_gpstk__GeometryException->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_gpstk__GeometryException->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__GeometryException,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"gpstk::GeometryException");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__GeometryException,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Position_longitude(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::Position *arg1 = (gpstk::Position *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Position_longitude",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__Position, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        result = (double)((gpstk::Position const *)arg1)->longitude();
    }
    catch(gpstk::GeometryException &_e) {
        {
            gpstk::GeometryException * temp = new gpstk::GeometryException(_e);
            if (SWIGTYPE_p_gpstk__GeometryException->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_gpstk__GeometryException->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__GeometryException,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"gpstk::GeometryException");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__GeometryException,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Position_radius(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::Position *arg1 = (gpstk::Position *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Position_radius",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__Position, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        result = (double)((gpstk::Position const *)arg1)->radius();
    }
    catch(gpstk::GeometryException &_e) {
        {
            gpstk::GeometryException * temp = new gpstk::GeometryException(_e);
            if (SWIGTYPE_p_gpstk__GeometryException->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_gpstk__GeometryException->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__GeometryException,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"gpstk::GeometryException");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__GeometryException,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Position_height(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::Position *arg1 = (gpstk::Position *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Position_height",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__Position, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        result = (double)((gpstk::Position const *)arg1)->height();
    }
    catch(gpstk::GeometryException &_e) {
        {
            gpstk::GeometryException * temp = new gpstk::GeometryException(_e);
            if (SWIGTYPE_p_gpstk__GeometryException->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_gpstk__GeometryException->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__GeometryException,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"gpstk::GeometryException");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__GeometryException,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Position_getCoordinateSystem(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::Position *arg1 = (gpstk::Position *) 0 ;
    gpstk::Position::CoordinateSystem result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Position_getCoordinateSystem",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__Position, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (gpstk::Position::CoordinateSystem)((gpstk::Position const *)arg1)->getCoordinateSystem();
    
    resultobj = SWIG_From_int((result));
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Position_getGeodeticLatitude(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::Position *arg1 = (gpstk::Position *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Position_getGeodeticLatitude",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__Position, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        result = (double)((gpstk::Position const *)arg1)->getGeodeticLatitude();
    }
    catch(gpstk::GeometryException &_e) {
        {
            gpstk::GeometryException * temp = new gpstk::GeometryException(_e);
            if (SWIGTYPE_p_gpstk__GeometryException->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_gpstk__GeometryException->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__GeometryException,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"gpstk::GeometryException");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__GeometryException,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Position_getGeocentricLatitude(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::Position *arg1 = (gpstk::Position *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Position_getGeocentricLatitude",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__Position, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        result = (double)((gpstk::Position const *)arg1)->getGeocentricLatitude();
    }
    catch(gpstk::GeometryException &_e) {
        {
            gpstk::GeometryException * temp = new gpstk::GeometryException(_e);
            if (SWIGTYPE_p_gpstk__GeometryException->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_gpstk__GeometryException->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__GeometryException,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"gpstk::GeometryException");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__GeometryException,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Position_getLongitude(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::Position *arg1 = (gpstk::Position *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Position_getLongitude",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__Position, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        result = (double)((gpstk::Position const *)arg1)->getLongitude();
    }
    catch(gpstk::GeometryException &_e) {
        {
            gpstk::GeometryException * temp = new gpstk::GeometryException(_e);
            if (SWIGTYPE_p_gpstk__GeometryException->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_gpstk__GeometryException->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__GeometryException,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"gpstk::GeometryException");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__GeometryException,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Position_getAltitude(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::Position *arg1 = (gpstk::Position *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Position_getAltitude",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__Position, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        result = (double)((gpstk::Position const *)arg1)->getAltitude();
    }
    catch(gpstk::GeometryException &_e) {
        {
            gpstk::GeometryException * temp = new gpstk::GeometryException(_e);
            if (SWIGTYPE_p_gpstk__GeometryException->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_gpstk__GeometryException->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__GeometryException,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"gpstk::GeometryException");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__GeometryException,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Position_getHeight(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::Position *arg1 = (gpstk::Position *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Position_getHeight",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__Position, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        result = (double)((gpstk::Position const *)arg1)->getHeight();
    }
    catch(gpstk::GeometryException &_e) {
        {
            gpstk::GeometryException * temp = new gpstk::GeometryException(_e);
            if (SWIGTYPE_p_gpstk__GeometryException->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_gpstk__GeometryException->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__GeometryException,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"gpstk::GeometryException");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__GeometryException,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Position_getX(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::Position *arg1 = (gpstk::Position *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Position_getX",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__Position, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        result = (double)((gpstk::Position const *)arg1)->getX();
    }
    catch(gpstk::GeometryException &_e) {
        {
            gpstk::GeometryException * temp = new gpstk::GeometryException(_e);
            if (SWIGTYPE_p_gpstk__GeometryException->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_gpstk__GeometryException->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__GeometryException,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"gpstk::GeometryException");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__GeometryException,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Position_getY(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::Position *arg1 = (gpstk::Position *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Position_getY",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__Position, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        result = (double)((gpstk::Position const *)arg1)->getY();
    }
    catch(gpstk::GeometryException &_e) {
        {
            gpstk::GeometryException * temp = new gpstk::GeometryException(_e);
            if (SWIGTYPE_p_gpstk__GeometryException->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_gpstk__GeometryException->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__GeometryException,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"gpstk::GeometryException");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__GeometryException,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Position_getZ(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::Position *arg1 = (gpstk::Position *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Position_getZ",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__Position, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        result = (double)((gpstk::Position const *)arg1)->getZ();
    }
    catch(gpstk::GeometryException &_e) {
        {
            gpstk::GeometryException * temp = new gpstk::GeometryException(_e);
            if (SWIGTYPE_p_gpstk__GeometryException->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_gpstk__GeometryException->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__GeometryException,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"gpstk::GeometryException");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__GeometryException,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Position_getTheta(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::Position *arg1 = (gpstk::Position *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Position_getTheta",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__Position, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        result = (double)((gpstk::Position const *)arg1)->getTheta();
    }
    catch(gpstk::GeometryException &_e) {
        {
            gpstk::GeometryException * temp = new gpstk::GeometryException(_e);
            if (SWIGTYPE_p_gpstk__GeometryException->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_gpstk__GeometryException->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__GeometryException,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"gpstk::GeometryException");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__GeometryException,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Position_getPhi(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::Position *arg1 = (gpstk::Position *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Position_getPhi",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__Position, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        result = (double)((gpstk::Position const *)arg1)->getPhi();
    }
    catch(gpstk::GeometryException &_e) {
        {
            gpstk::GeometryException * temp = new gpstk::GeometryException(_e);
            if (SWIGTYPE_p_gpstk__GeometryException->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_gpstk__GeometryException->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__GeometryException,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"gpstk::GeometryException");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__GeometryException,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Position_getRadius(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::Position *arg1 = (gpstk::Position *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Position_getRadius",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__Position, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        result = (double)((gpstk::Position const *)arg1)->getRadius();
    }
    catch(gpstk::GeometryException &_e) {
        {
            gpstk::GeometryException * temp = new gpstk::GeometryException(_e);
            if (SWIGTYPE_p_gpstk__GeometryException->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_gpstk__GeometryException->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__GeometryException,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"gpstk::GeometryException");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__GeometryException,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Position_setGeoidModel(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::Position *arg1 = (gpstk::Position *) 0 ;
    GeoidModel *arg2 = (GeoidModel *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Position_setGeoidModel",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__Position, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_gpstk__GeoidModel, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    try {
        (arg1)->setGeoidModel((GeoidModel const *)arg2);
    }
    catch(gpstk::GeometryException &_e) {
        {
            gpstk::GeometryException * temp = new gpstk::GeometryException(_e);
            if (SWIGTYPE_p_gpstk__GeometryException->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_gpstk__GeometryException->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__GeometryException,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"gpstk::GeometryException");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__GeometryException,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Position_setGeodetic__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::Position *arg1 = (gpstk::Position *) 0 ;
    double arg2 ;
    double arg3 ;
    double arg4 ;
    GeoidModel *arg5 = (GeoidModel *) 0 ;
    gpstk::Position *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOO:Position_setGeodetic",&obj0,&obj1,&obj2,&obj3,&obj4)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__Position, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (double const)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (double const)(SWIG_As_double(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = (double const)(SWIG_As_double(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    SWIG_Python_ConvertPtr(obj4, (void **)&arg5, SWIGTYPE_p_gpstk__GeoidModel, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(5)) SWIG_fail;
    try {
        {
            gpstk::Position &_result_ref = (arg1)->setGeodetic(arg2,arg3,arg4,(GeoidModel const *)arg5);
            result = (gpstk::Position *) &_result_ref;
        }
    }
    catch(gpstk::GeometryException &_e) {
        {
            gpstk::GeometryException * temp = new gpstk::GeometryException(_e);
            if (SWIGTYPE_p_gpstk__GeometryException->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_gpstk__GeometryException->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__GeometryException,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"gpstk::GeometryException");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__GeometryException,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__Position, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Position_setGeodetic__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::Position *arg1 = (gpstk::Position *) 0 ;
    double arg2 ;
    double arg3 ;
    double arg4 ;
    gpstk::Position *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:Position_setGeodetic",&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__Position, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (double const)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (double const)(SWIG_As_double(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = (double const)(SWIG_As_double(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    try {
        {
            gpstk::Position &_result_ref = (arg1)->setGeodetic(arg2,arg3,arg4);
            result = (gpstk::Position *) &_result_ref;
        }
    }
    catch(gpstk::GeometryException &_e) {
        {
            gpstk::GeometryException * temp = new gpstk::GeometryException(_e);
            if (SWIGTYPE_p_gpstk__GeometryException->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_gpstk__GeometryException->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__GeometryException,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"gpstk::GeometryException");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__GeometryException,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__Position, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Position_setGeodetic(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[6];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 5); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 4) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_gpstk__Position, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_double(argv[1]);
            if (_v) {
                _v = SWIG_Check_double(argv[2]);
                if (_v) {
                    _v = SWIG_Check_double(argv[3]);
                    if (_v) {
                        return _wrap_Position_setGeodetic__SWIG_1(self,args);
                    }
                }
            }
        }
    }
    if (argc == 5) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_gpstk__Position, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_double(argv[1]);
            if (_v) {
                _v = SWIG_Check_double(argv[2]);
                if (_v) {
                    _v = SWIG_Check_double(argv[3]);
                    if (_v) {
                        {
                            void *ptr;
                            if (SWIG_ConvertPtr(argv[4], &ptr, SWIGTYPE_p_gpstk__GeoidModel, 0) == -1) {
                                _v = 0;
                                PyErr_Clear();
                            } else {
                                _v = 1;
                            }
                        }
                        if (_v) {
                            return _wrap_Position_setGeodetic__SWIG_0(self,args);
                        }
                    }
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'Position_setGeodetic'");
    return NULL;
}


static PyObject *_wrap_Position_setGeocentric(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::Position *arg1 = (gpstk::Position *) 0 ;
    double arg2 ;
    double arg3 ;
    double arg4 ;
    gpstk::Position *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:Position_setGeocentric",&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__Position, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (double const)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (double const)(SWIG_As_double(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = (double const)(SWIG_As_double(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    try {
        {
            gpstk::Position &_result_ref = (arg1)->setGeocentric(arg2,arg3,arg4);
            result = (gpstk::Position *) &_result_ref;
        }
    }
    catch(gpstk::GeometryException &_e) {
        {
            gpstk::GeometryException * temp = new gpstk::GeometryException(_e);
            if (SWIGTYPE_p_gpstk__GeometryException->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_gpstk__GeometryException->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__GeometryException,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"gpstk::GeometryException");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__GeometryException,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__Position, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Position_setSpherical(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::Position *arg1 = (gpstk::Position *) 0 ;
    double arg2 ;
    double arg3 ;
    double arg4 ;
    gpstk::Position *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:Position_setSpherical",&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__Position, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (double const)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (double const)(SWIG_As_double(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = (double const)(SWIG_As_double(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    try {
        {
            gpstk::Position &_result_ref = (arg1)->setSpherical(arg2,arg3,arg4);
            result = (gpstk::Position *) &_result_ref;
        }
    }
    catch(gpstk::GeometryException &_e) {
        {
            gpstk::GeometryException * temp = new gpstk::GeometryException(_e);
            if (SWIGTYPE_p_gpstk__GeometryException->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_gpstk__GeometryException->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__GeometryException,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"gpstk::GeometryException");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__GeometryException,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__Position, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Position_setECEF__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::Position *arg1 = (gpstk::Position *) 0 ;
    double arg2 ;
    double arg3 ;
    double arg4 ;
    gpstk::Position *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:Position_setECEF",&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__Position, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (double const)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (double const)(SWIG_As_double(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = (double const)(SWIG_As_double(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    {
        gpstk::Position &_result_ref = (arg1)->setECEF(arg2,arg3,arg4);
        result = (gpstk::Position *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__Position, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Position_setECEF__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::Position *arg1 = (gpstk::Position *) 0 ;
    double *arg2 ;
    gpstk::Position *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Position_setECEF",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__Position, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_double, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    {
        gpstk::Position &_result_ref = (arg1)->setECEF((double const (*))arg2);
        result = (gpstk::Position *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__Position, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Position_setECEF__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::Position *arg1 = (gpstk::Position *) 0 ;
    gpstk::Triple *arg2 = 0 ;
    gpstk::Position *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Position_setECEF",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__Position, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_gpstk__Triple, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("gpstk::Triple");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        gpstk::Position &_result_ref = (arg1)->setECEF((gpstk::Triple const &)*arg2);
        result = (gpstk::Position *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__Position, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Position_setECEF(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[5];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 4); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_gpstk__Position, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_double, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                return _wrap_Position_setECEF__SWIG_1(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_gpstk__Position, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_gpstk__Triple, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_Position_setECEF__SWIG_2(self,args);
            }
        }
    }
    if (argc == 4) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_gpstk__Position, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_double(argv[1]);
            if (_v) {
                _v = SWIG_Check_double(argv[2]);
                if (_v) {
                    _v = SWIG_Check_double(argv[3]);
                    if (_v) {
                        return _wrap_Position_setECEF__SWIG_0(self,args);
                    }
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'Position_setECEF'");
    return NULL;
}


static PyObject *_wrap_Position_setToString(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::Position *arg1 = (gpstk::Position *) 0 ;
    std::string *arg2 = 0 ;
    std::string *arg3 = 0 ;
    gpstk::Position *result;
    int res2 = 0 ;
    int res3 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:Position_setToString",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__Position, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        std::string *ptr = (std::string *)0;
        res2 = SWIG_AsPtr_std_string(obj1, &ptr);
        if (!res2) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj1);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = ptr;
    }
    {
        std::string *ptr = (std::string *)0;
        res3 = SWIG_AsPtr_std_string(obj2, &ptr);
        if (!res3) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj2);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
        arg3 = ptr;
    }
    try {
        {
            gpstk::Position &_result_ref = (arg1)->setToString((std::string const &)*arg2,(std::string const &)*arg3);
            result = (gpstk::Position *) &_result_ref;
        }
    }
    catch(gpstk::GeometryException &_e) {
        {
            gpstk::GeometryException * temp = new gpstk::GeometryException(_e);
            if (SWIGTYPE_p_gpstk__GeometryException->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_gpstk__GeometryException->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__GeometryException,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"gpstk::GeometryException");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__GeometryException,1));
                    */
            }
            SWIG_fail;
        }
    }
    catch(DayTime::FormatException &_e) {
        {
            DayTime::FormatException * temp = new DayTime::FormatException(_e);
            if (SWIGTYPE_p_FormatException->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_FormatException->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_FormatException,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"DayTime::FormatException");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_FormatException,1));
                    */
            }
            SWIG_fail;
        }
    }
    catch(StringUtils::StringException &_e) {
        {
            StringUtils::StringException * temp = new StringUtils::StringException(_e);
            if (SWIGTYPE_p_StringUtils__StringException->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_StringUtils__StringException->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_StringUtils__StringException,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"StringUtils::StringException");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_StringUtils__StringException,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__Position, 0);
    if (res2 == SWIG_NEWOBJ) delete arg2;
    if (res3 == SWIG_NEWOBJ) delete arg3;
    return resultobj;
    fail:
    if (res2 == SWIG_NEWOBJ) delete arg2;
    if (res3 == SWIG_NEWOBJ) delete arg3;
    return NULL;
}


static PyObject *_wrap_Position_printf(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::Position *arg1 = (gpstk::Position *) 0 ;
    char *arg2 = (char *) 0 ;
    std::string result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Position_printf",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__Position, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    if (!SWIG_AsCharPtr(obj1, (char**)&arg2)) {
        SWIG_arg_fail(2);SWIG_fail;
    }
    try {
        result = ((gpstk::Position const *)arg1)->printf((char const *)arg2);
    }
    catch(StringUtils::StringException &_e) {
        {
            StringUtils::StringException * temp = new StringUtils::StringException(_e);
            if (SWIGTYPE_p_StringUtils__StringException->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_StringUtils__StringException->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_StringUtils__StringException,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"StringUtils::StringException");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_StringUtils__StringException,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    {
        resultobj = SWIG_From_std_string((std::string)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Position_printf_const(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::Position *arg1 = (gpstk::Position *) 0 ;
    std::string *arg2 = 0 ;
    std::string result;
    int res2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Position_printf_const",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__Position, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        std::string *ptr = (std::string *)0;
        res2 = SWIG_AsPtr_std_string(obj1, &ptr);
        if (!res2) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj1);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = ptr;
    }
    try {
        result = ((gpstk::Position const *)arg1)->printf((std::string const &)*arg2);
    }
    catch(StringUtils::StringException &_e) {
        {
            StringUtils::StringException * temp = new StringUtils::StringException(_e);
            if (SWIGTYPE_p_StringUtils__StringException->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_StringUtils__StringException->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_StringUtils__StringException,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"StringUtils::StringException");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_StringUtils__StringException,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    {
        resultobj = SWIG_From_std_string((std::string)(result)); 
    }
    if (res2 == SWIG_NEWOBJ) delete arg2;
    return resultobj;
    fail:
    if (res2 == SWIG_NEWOBJ) delete arg2;
    return NULL;
}


static PyObject *_wrap_Position_asString(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::Position *arg1 = (gpstk::Position *) 0 ;
    std::string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Position_asString",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__Position, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        result = ((gpstk::Position const *)arg1)->asString();
    }
    catch(StringUtils::StringException &_e) {
        {
            StringUtils::StringException * temp = new StringUtils::StringException(_e);
            if (SWIGTYPE_p_StringUtils__StringException->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_StringUtils__StringException->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_StringUtils__StringException,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"StringUtils::StringException");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_StringUtils__StringException,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    {
        resultobj = SWIG_From_std_string((std::string)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Position_convertSphericalToCartesian(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::Triple *arg1 = 0 ;
    gpstk::Triple *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Position_convertSphericalToCartesian",&obj0,&obj1)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__Triple, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("gpstk::Triple");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_gpstk__Triple, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("gpstk::Triple");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    gpstk::Position::convertSphericalToCartesian((gpstk::Triple const &)*arg1,*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Position_convertCartesianToSpherical(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::Triple *arg1 = 0 ;
    gpstk::Triple *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Position_convertCartesianToSpherical",&obj0,&obj1)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__Triple, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("gpstk::Triple");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_gpstk__Triple, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("gpstk::Triple");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        gpstk::Position::convertCartesianToSpherical((gpstk::Triple const &)*arg1,*arg2);
    }
    catch(gpstk::GeometryException &_e) {
        {
            gpstk::GeometryException * temp = new gpstk::GeometryException(_e);
            if (SWIGTYPE_p_gpstk__GeometryException->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_gpstk__GeometryException->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__GeometryException,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"gpstk::GeometryException");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__GeometryException,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Position_convertCartesianToGeodetic(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::Triple *arg1 = 0 ;
    gpstk::Triple *arg2 = 0 ;
    double arg3 ;
    double arg4 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:Position_convertCartesianToGeodetic",&obj0,&obj1,&obj2,&obj3)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__Triple, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("gpstk::Triple");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_gpstk__Triple, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("gpstk::Triple");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (double const)(SWIG_As_double(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = (double const)(SWIG_As_double(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    gpstk::Position::convertCartesianToGeodetic((gpstk::Triple const &)*arg1,*arg2,arg3,arg4);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Position_convertGeodeticToCartesian(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::Triple *arg1 = 0 ;
    gpstk::Triple *arg2 = 0 ;
    double arg3 ;
    double arg4 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:Position_convertGeodeticToCartesian",&obj0,&obj1,&obj2,&obj3)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__Triple, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("gpstk::Triple");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_gpstk__Triple, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("gpstk::Triple");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (double const)(SWIG_As_double(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = (double const)(SWIG_As_double(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    gpstk::Position::convertGeodeticToCartesian((gpstk::Triple const &)*arg1,*arg2,arg3,arg4);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Position_convertCartesianToGeocentric(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::Triple *arg1 = 0 ;
    gpstk::Triple *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Position_convertCartesianToGeocentric",&obj0,&obj1)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__Triple, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("gpstk::Triple");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_gpstk__Triple, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("gpstk::Triple");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        gpstk::Position::convertCartesianToGeocentric((gpstk::Triple const &)*arg1,*arg2);
    }
    catch(gpstk::GeometryException &_e) {
        {
            gpstk::GeometryException * temp = new gpstk::GeometryException(_e);
            if (SWIGTYPE_p_gpstk__GeometryException->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_gpstk__GeometryException->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__GeometryException,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"gpstk::GeometryException");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__GeometryException,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Position_convertGeocentricToCartesian(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::Triple *arg1 = 0 ;
    gpstk::Triple *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Position_convertGeocentricToCartesian",&obj0,&obj1)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__Triple, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("gpstk::Triple");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_gpstk__Triple, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("gpstk::Triple");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    gpstk::Position::convertGeocentricToCartesian((gpstk::Triple const &)*arg1,*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Position_convertGeocentricToGeodetic(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::Triple *arg1 = 0 ;
    gpstk::Triple *arg2 = 0 ;
    double arg3 ;
    double arg4 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:Position_convertGeocentricToGeodetic",&obj0,&obj1,&obj2,&obj3)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__Triple, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("gpstk::Triple");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_gpstk__Triple, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("gpstk::Triple");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (double const)(SWIG_As_double(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = (double const)(SWIG_As_double(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    gpstk::Position::convertGeocentricToGeodetic((gpstk::Triple const &)*arg1,*arg2,arg3,arg4);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Position_convertGeodeticToGeocentric(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::Triple *arg1 = 0 ;
    gpstk::Triple *arg2 = 0 ;
    double arg3 ;
    double arg4 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:Position_convertGeodeticToGeocentric",&obj0,&obj1,&obj2,&obj3)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__Triple, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("gpstk::Triple");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_gpstk__Triple, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("gpstk::Triple");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (double const)(SWIG_As_double(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = (double const)(SWIG_As_double(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    try {
        gpstk::Position::convertGeodeticToGeocentric((gpstk::Triple const &)*arg1,*arg2,arg3,arg4);
    }
    catch(gpstk::GeometryException &_e) {
        {
            gpstk::GeometryException * temp = new gpstk::GeometryException(_e);
            if (SWIGTYPE_p_gpstk__GeometryException->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_gpstk__GeometryException->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__GeometryException,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"gpstk::GeometryException");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__GeometryException,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_streamRead__SWIG_11(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::ostream *arg1 = 0 ;
    gpstk::Position *arg2 = 0 ;
    std::ostream *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:streamRead",&obj0,&obj1)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("std::ostream");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_gpstk__Position, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("gpstk::Position");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        std::ostream &_result_ref = operator <<(*arg1,(gpstk::Position const &)*arg2);
        result = (std::ostream *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_range(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::Position *arg1 = 0 ;
    gpstk::Position *arg2 = 0 ;
    double result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:range",&obj0,&obj1)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__Position, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("gpstk::Position");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_gpstk__Position, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("gpstk::Position");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        result = (double)range((gpstk::Position const &)*arg1,(gpstk::Position const &)*arg2);
    }
    catch(gpstk::GeometryException &_e) {
        {
            gpstk::GeometryException * temp = new gpstk::GeometryException(_e);
            if (SWIGTYPE_p_gpstk__GeometryException->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_gpstk__GeometryException->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__GeometryException,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"gpstk::GeometryException");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__GeometryException,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Position_radiusEarth__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    double arg1 ;
    double arg2 ;
    double arg3 ;
    double result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:Position_radiusEarth",&obj0,&obj1,&obj2)) goto fail;
    {
        arg1 = (double const)(SWIG_As_double(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        arg2 = (double const)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (double const)(SWIG_As_double(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    result = (double)gpstk::Position::radiusEarth(arg1,arg2,arg3);
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Position_radiusEarth__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::Position *arg1 = (gpstk::Position *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Position_radiusEarth",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__Position, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        result = (double)((gpstk::Position const *)arg1)->radiusEarth();
    }
    catch(gpstk::GeometryException &_e) {
        {
            gpstk::GeometryException * temp = new gpstk::GeometryException(_e);
            if (SWIGTYPE_p_gpstk__GeometryException->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_gpstk__GeometryException->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__GeometryException,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"gpstk::GeometryException");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__GeometryException,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Position_radiusEarth(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[4];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_gpstk__Position, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_Position_radiusEarth__SWIG_1(self,args);
        }
    }
    if (argc == 3) {
        int _v;
        _v = SWIG_Check_double(argv[0]);
        if (_v) {
            _v = SWIG_Check_double(argv[1]);
            if (_v) {
                _v = SWIG_Check_double(argv[2]);
                if (_v) {
                    return _wrap_Position_radiusEarth__SWIG_0(self,args);
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'Position_radiusEarth'");
    return NULL;
}


static PyObject *_wrap_Position_elevation(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::Position *arg1 = (gpstk::Position *) 0 ;
    gpstk::Position *arg2 = 0 ;
    double result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Position_elevation",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__Position, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_gpstk__Position, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("gpstk::Position");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (double)((gpstk::Position const *)arg1)->elevation((gpstk::Position const &)*arg2);
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Position_azimuth(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::Position *arg1 = (gpstk::Position *) 0 ;
    gpstk::Position *arg2 = 0 ;
    double result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Position_azimuth",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__Position, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_gpstk__Position, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("gpstk::Position");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (double)((gpstk::Position const *)arg1)->azimuth((gpstk::Position const &)*arg2);
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Position_getIonosphericPiercePoint(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::Position *arg1 = (gpstk::Position *) 0 ;
    double arg2 ;
    double arg3 ;
    double arg4 ;
    gpstk::Position result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:Position_getIonosphericPiercePoint",&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__Position, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (double const)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (double const)(SWIG_As_double(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = (double const)(SWIG_As_double(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    try {
        result = ((gpstk::Position const *)arg1)->getIonosphericPiercePoint(arg2,arg3,arg4);
    }
    catch(gpstk::GeometryException &_e) {
        {
            gpstk::GeometryException * temp = new gpstk::GeometryException(_e);
            if (SWIGTYPE_p_gpstk__GeometryException->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_gpstk__GeometryException->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__GeometryException,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"gpstk::GeometryException");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__GeometryException,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    {
        gpstk::Position * resultptr;
        resultptr = new gpstk::Position((gpstk::Position &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_gpstk__Position, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject * Position_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_gpstk__Position, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_ECEF__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::ECEF *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_ECEF")) goto fail;
    result = (gpstk::ECEF *)new gpstk::ECEF();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__ECEF, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_ECEF__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::ECEF *arg1 = 0 ;
    gpstk::ECEF *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_ECEF",&obj0)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__ECEF, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("gpstk::ECEF");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    result = (gpstk::ECEF *)new gpstk::ECEF((gpstk::ECEF const &)*arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__ECEF, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_ECEF__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    double *arg1 = 0 ;
    double *arg2 = 0 ;
    double *arg3 = 0 ;
    gpstk::ECEF *result;
    double temp1 ;
    double temp2 ;
    double temp3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:new_ECEF",&obj0,&obj1,&obj2)) goto fail;
    {
        temp1 = (double)(SWIG_As_double(obj0));
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = &temp1;
    }
    {
        temp2 = (double)(SWIG_As_double(obj1));
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = &temp2;
    }
    {
        temp3 = (double)(SWIG_As_double(obj2));
        if (SWIG_arg_fail(3)) SWIG_fail;
        arg3 = &temp3;
    }
    result = (gpstk::ECEF *)new gpstk::ECEF((double const &)*arg1,(double const &)*arg2,(double const &)*arg3);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__ECEF, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_ECEF__SWIG_3(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::Triple *arg1 = 0 ;
    gpstk::ECEF *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_ECEF",&obj0)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__Triple, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("gpstk::Triple");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    result = (gpstk::ECEF *)new gpstk::ECEF((gpstk::Triple const &)*arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__ECEF, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_ECEF(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[4];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_new_ECEF__SWIG_0(self,args);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_gpstk__ECEF, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            return _wrap_new_ECEF__SWIG_1(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_gpstk__Triple, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            return _wrap_new_ECEF__SWIG_3(self,args);
        }
    }
    if (argc == 3) {
        int _v;
        _v = SWIG_Check_double(argv[0]);
        if (_v) {
            _v = SWIG_Check_double(argv[1]);
            if (_v) {
                _v = SWIG_Check_double(argv[2]);
                if (_v) {
                    return _wrap_new_ECEF__SWIG_2(self,args);
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'new_ECEF'");
    return NULL;
}


static PyObject *_wrap_delete_ECEF(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::ECEF *arg1 = (gpstk::ECEF *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_ECEF",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__ECEF, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ECEF_class_operator_assignment(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::ECEF *arg1 = (gpstk::ECEF *) 0 ;
    gpstk::ECEF *arg2 = 0 ;
    gpstk::ECEF *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ECEF_class_operator_assignment",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__ECEF, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_gpstk__ECEF, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("gpstk::ECEF");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        gpstk::ECEF &_result_ref = (arg1)->operator =((gpstk::ECEF const &)*arg2);
        result = (gpstk::ECEF *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__ECEF, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ECEF_asGeodetic(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::ECEF *arg1 = (gpstk::ECEF *) 0 ;
    GeoidModel *arg2 = (GeoidModel *) 0 ;
    gpstk::Geodetic result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ECEF_asGeodetic",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__ECEF, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_gpstk__GeoidModel, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    result = (arg1)->asGeodetic(arg2);
    
    {
        gpstk::Geodetic * resultptr;
        resultptr = new gpstk::Geodetic((gpstk::Geodetic &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_gpstk__Geodetic, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject * ECEF_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_gpstk__ECEF, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_GeoidModel_a(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::GeoidModel *arg1 = (gpstk::GeoidModel *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:GeoidModel_a",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__GeoidModel, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double)((gpstk::GeoidModel const *)arg1)->a();
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_GeoidModel_a_km(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::GeoidModel *arg1 = (gpstk::GeoidModel *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:GeoidModel_a_km",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__GeoidModel, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double)((gpstk::GeoidModel const *)arg1)->a_km();
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_GeoidModel_flattening(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::GeoidModel *arg1 = (gpstk::GeoidModel *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:GeoidModel_flattening",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__GeoidModel, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double)((gpstk::GeoidModel const *)arg1)->flattening();
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_GeoidModel_eccentricity(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::GeoidModel *arg1 = (gpstk::GeoidModel *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:GeoidModel_eccentricity",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__GeoidModel, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double)((gpstk::GeoidModel const *)arg1)->eccentricity();
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_GeoidModel_eccSquared(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::GeoidModel *arg1 = (gpstk::GeoidModel *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:GeoidModel_eccSquared",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__GeoidModel, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double)((gpstk::GeoidModel const *)arg1)->eccSquared();
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_GeoidModel_angVelocity(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::GeoidModel *arg1 = (gpstk::GeoidModel *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:GeoidModel_angVelocity",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__GeoidModel, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double)((gpstk::GeoidModel const *)arg1)->angVelocity();
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_GeoidModel_gm(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::GeoidModel *arg1 = (gpstk::GeoidModel *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:GeoidModel_gm",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__GeoidModel, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double)((gpstk::GeoidModel const *)arg1)->gm();
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_GeoidModel_gm_km(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::GeoidModel *arg1 = (gpstk::GeoidModel *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:GeoidModel_gm_km",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__GeoidModel, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double)((gpstk::GeoidModel const *)arg1)->gm_km();
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_GeoidModel_c(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::GeoidModel *arg1 = (gpstk::GeoidModel *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:GeoidModel_c",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__GeoidModel, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double)((gpstk::GeoidModel const *)arg1)->c();
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_GeoidModel_c_km(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::GeoidModel *arg1 = (gpstk::GeoidModel *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:GeoidModel_c_km",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__GeoidModel, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double)((gpstk::GeoidModel const *)arg1)->c_km();
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_GeoidModel(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::GeoidModel *arg1 = (gpstk::GeoidModel *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_GeoidModel",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__GeoidModel, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * GeoidModel_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_gpstk__GeoidModel, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_Xvt(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::Xvt *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_Xvt")) goto fail;
    result = (gpstk::Xvt *)new gpstk::Xvt();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__Xvt, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Xvt_x_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::Xvt *arg1 = (gpstk::Xvt *) 0 ;
    gpstk::ECEF *arg2 = (gpstk::ECEF *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Xvt_x_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__Xvt, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_gpstk__ECEF, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->x = *arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Xvt_x_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::Xvt *arg1 = (gpstk::Xvt *) 0 ;
    gpstk::ECEF *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Xvt_x_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__Xvt, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (gpstk::ECEF *)& ((arg1)->x);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__ECEF, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Xvt_v_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::Xvt *arg1 = (gpstk::Xvt *) 0 ;
    gpstk::Triple *arg2 = (gpstk::Triple *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Xvt_v_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__Xvt, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_gpstk__Triple, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->v = *arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Xvt_v_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::Xvt *arg1 = (gpstk::Xvt *) 0 ;
    gpstk::Triple *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Xvt_v_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__Xvt, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (gpstk::Triple *)& ((arg1)->v);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__Triple, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Xvt_dtime_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::Xvt *arg1 = (gpstk::Xvt *) 0 ;
    double arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Xvt_dtime_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__Xvt, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->dtime = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Xvt_dtime_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::Xvt *arg1 = (gpstk::Xvt *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Xvt_dtime_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__Xvt, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double) ((arg1)->dtime);
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Xvt_ddtime_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::Xvt *arg1 = (gpstk::Xvt *) 0 ;
    double arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Xvt_ddtime_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__Xvt, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->ddtime = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Xvt_ddtime_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::Xvt *arg1 = (gpstk::Xvt *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Xvt_ddtime_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__Xvt, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double) ((arg1)->ddtime);
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Xvt_preciseRho__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::Xvt *arg1 = (gpstk::Xvt *) 0 ;
    gpstk::ECEF *arg2 = 0 ;
    gpstk::GeoidModel *arg3 = 0 ;
    double arg4 ;
    double result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:Xvt_preciseRho",&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__Xvt, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_gpstk__ECEF, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("gpstk::ECEF");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_gpstk__GeoidModel, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (arg3 == NULL) {
            SWIG_null_ref("gpstk::GeoidModel");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = (double)(SWIG_As_double(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    result = (double)((gpstk::Xvt const *)arg1)->preciseRho((gpstk::ECEF const &)*arg2,(gpstk::GeoidModel const &)*arg3,arg4);
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Xvt_preciseRho__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::Xvt *arg1 = (gpstk::Xvt *) 0 ;
    gpstk::ECEF *arg2 = 0 ;
    gpstk::GeoidModel *arg3 = 0 ;
    double result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:Xvt_preciseRho",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__Xvt, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_gpstk__ECEF, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("gpstk::ECEF");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_gpstk__GeoidModel, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (arg3 == NULL) {
            SWIG_null_ref("gpstk::GeoidModel");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    result = (double)((gpstk::Xvt const *)arg1)->preciseRho((gpstk::ECEF const &)*arg2,(gpstk::GeoidModel const &)*arg3);
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Xvt_preciseRho(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[5];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 4); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_gpstk__Xvt, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_gpstk__ECEF, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                {
                    void *ptr = 0;
                    if (SWIG_ConvertPtr(argv[2], &ptr, SWIGTYPE_p_gpstk__GeoidModel, 0) == -1) {
                        _v = 0;
                        PyErr_Clear();
                    } else {
                        _v = (ptr != 0);
                    }
                }
                if (_v) {
                    return _wrap_Xvt_preciseRho__SWIG_1(self,args);
                }
            }
        }
    }
    if (argc == 4) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_gpstk__Xvt, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_gpstk__ECEF, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                {
                    void *ptr = 0;
                    if (SWIG_ConvertPtr(argv[2], &ptr, SWIGTYPE_p_gpstk__GeoidModel, 0) == -1) {
                        _v = 0;
                        PyErr_Clear();
                    } else {
                        _v = (ptr != 0);
                    }
                }
                if (_v) {
                    _v = SWIG_Check_double(argv[3]);
                    if (_v) {
                        return _wrap_Xvt_preciseRho__SWIG_0(self,args);
                    }
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'Xvt_preciseRho'");
    return NULL;
}


static PyObject *_wrap_delete_Xvt(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::Xvt *arg1 = (gpstk::Xvt *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_Xvt",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__Xvt, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * Xvt_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_gpstk__Xvt, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_Xvt_streamRead(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::ostream *arg1 = 0 ;
    gpstk::Xvt *arg2 = 0 ;
    std::ostream *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Xvt_streamRead",&obj0,&obj1)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("std::ostream");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_gpstk__Xvt, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("gpstk::Xvt");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        std::ostream &_result_ref = operator <<(*arg1,(gpstk::Xvt const &)*arg2);
        result = (std::ostream *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_NoGeoidException__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::NoGeoidException *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_NoGeoidException")) goto fail;
    result = (gpstk::NoGeoidException *)new gpstk::NoGeoidException();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__NoGeoidException, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_NoGeoidException__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::NoGeoidException *arg1 = 0 ;
    gpstk::NoGeoidException *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_NoGeoidException",&obj0)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__NoGeoidException, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("gpstk::NoGeoidException");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    result = (gpstk::NoGeoidException *)new gpstk::NoGeoidException((gpstk::NoGeoidException const &)*arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__NoGeoidException, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_NoGeoidException__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::Exception *arg1 = 0 ;
    gpstk::NoGeoidException *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_NoGeoidException",&obj0)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__Exception, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("gpstk::Exception");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    result = (gpstk::NoGeoidException *)new gpstk::NoGeoidException((gpstk::Exception const &)*arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__NoGeoidException, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_NoGeoidException__SWIG_3(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::string arg1 ;
    unsigned long arg2 ;
    gpstk::Exception::Severity arg3 ;
    gpstk::NoGeoidException *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:new_NoGeoidException",&obj0,&obj1,&obj2)) goto fail;
    {
        std::string *ptr = (std::string *)0;
        int res = SWIG_AsPtr_std_string(obj0, &ptr);
        if (!res) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj0);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    {
        arg2 = (unsigned long)(SWIG_As_unsigned_SS_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (gpstk::Exception::Severity)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    result = (gpstk::NoGeoidException *)new gpstk::NoGeoidException(arg1,arg2,arg3);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__NoGeoidException, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_NoGeoidException__SWIG_4(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::string arg1 ;
    unsigned long arg2 ;
    gpstk::NoGeoidException *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:new_NoGeoidException",&obj0,&obj1)) goto fail;
    {
        std::string *ptr = (std::string *)0;
        int res = SWIG_AsPtr_std_string(obj0, &ptr);
        if (!res) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj0);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    {
        arg2 = (unsigned long)(SWIG_As_unsigned_SS_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (gpstk::NoGeoidException *)new gpstk::NoGeoidException(arg1,arg2);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__NoGeoidException, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_NoGeoidException__SWIG_5(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::string arg1 ;
    gpstk::NoGeoidException *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_NoGeoidException",&obj0)) goto fail;
    {
        std::string *ptr = (std::string *)0;
        int res = SWIG_AsPtr_std_string(obj0, &ptr);
        if (!res) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj0);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    result = (gpstk::NoGeoidException *)new gpstk::NoGeoidException(arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__NoGeoidException, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_NoGeoidException(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[4];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_new_NoGeoidException__SWIG_0(self,args);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_gpstk__NoGeoidException, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            return _wrap_new_NoGeoidException__SWIG_1(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_gpstk__Exception, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            return _wrap_new_NoGeoidException__SWIG_2(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        _v = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
        if (_v) {
            return _wrap_new_NoGeoidException__SWIG_5(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        _v = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
        if (_v) {
            _v = SWIG_Check_unsigned_SS_long(argv[1]);
            if (_v) {
                return _wrap_new_NoGeoidException__SWIG_4(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        _v = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
        if (_v) {
            _v = SWIG_Check_unsigned_SS_long(argv[1]);
            if (_v) {
                _v = SWIG_Check_int(argv[2]);
                if (_v) {
                    return _wrap_new_NoGeoidException__SWIG_3(self,args);
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'new_NoGeoidException'");
    return NULL;
}


static PyObject *_wrap_delete_NoGeoidException(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::NoGeoidException *arg1 = (gpstk::NoGeoidException *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_NoGeoidException",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__NoGeoidException, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_NoGeoidException_getName(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::NoGeoidException *arg1 = (gpstk::NoGeoidException *) 0 ;
    std::string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:NoGeoidException_getName",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__NoGeoidException, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = ((gpstk::NoGeoidException const *)arg1)->getName();
    
    {
        resultobj = SWIG_From_std_string((std::string)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_NoGeoidException_class_operator_assignment(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::NoGeoidException *arg1 = (gpstk::NoGeoidException *) 0 ;
    gpstk::NoGeoidException *arg2 = 0 ;
    gpstk::NoGeoidException *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:NoGeoidException_class_operator_assignment",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__NoGeoidException, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_gpstk__NoGeoidException, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("gpstk::NoGeoidException");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        gpstk::NoGeoidException &_result_ref = (arg1)->operator =((gpstk::NoGeoidException const &)*arg2);
        result = (gpstk::NoGeoidException *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__NoGeoidException, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_streamRead__SWIG_12(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::ostream *arg1 = 0 ;
    gpstk::NoGeoidException *arg2 = 0 ;
    std::ostream *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:streamRead",&obj0,&obj1)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("std::ostream");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_gpstk__NoGeoidException, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("gpstk::NoGeoidException");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        std::ostream &_result_ref = operator <<(*arg1,(gpstk::NoGeoidException const &)*arg2);
        result = (std::ostream *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject * NoGeoidException_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_gpstk__NoGeoidException, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_Geodetic__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::Geodetic *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_Geodetic")) goto fail;
    result = (gpstk::Geodetic *)new gpstk::Geodetic();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__Geodetic, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_Geodetic__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::Geodetic *arg1 = 0 ;
    gpstk::Geodetic *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_Geodetic",&obj0)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__Geodetic, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("gpstk::Geodetic");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    result = (gpstk::Geodetic *)new gpstk::Geodetic((gpstk::Geodetic const &)*arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__Geodetic, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_Geodetic__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    double *arg1 = 0 ;
    double *arg2 = 0 ;
    double *arg3 = 0 ;
    gpstk::GeoidModel *arg4 = (gpstk::GeoidModel *) 0 ;
    gpstk::Geodetic *result;
    double temp1 ;
    double temp2 ;
    double temp3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:new_Geodetic",&obj0,&obj1,&obj2,&obj3)) goto fail;
    {
        temp1 = (double)(SWIG_As_double(obj0));
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = &temp1;
    }
    {
        temp2 = (double)(SWIG_As_double(obj1));
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = &temp2;
    }
    {
        temp3 = (double)(SWIG_As_double(obj2));
        if (SWIG_arg_fail(3)) SWIG_fail;
        arg3 = &temp3;
    }
    SWIG_Python_ConvertPtr(obj3, (void **)&arg4, SWIGTYPE_p_gpstk__GeoidModel, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(4)) SWIG_fail;
    result = (gpstk::Geodetic *)new gpstk::Geodetic((double const &)*arg1,(double const &)*arg2,(double const &)*arg3,arg4);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__Geodetic, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_Geodetic__SWIG_3(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    double *arg1 = 0 ;
    double *arg2 = 0 ;
    double *arg3 = 0 ;
    gpstk::Geodetic *result;
    double temp1 ;
    double temp2 ;
    double temp3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:new_Geodetic",&obj0,&obj1,&obj2)) goto fail;
    {
        temp1 = (double)(SWIG_As_double(obj0));
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = &temp1;
    }
    {
        temp2 = (double)(SWIG_As_double(obj1));
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = &temp2;
    }
    {
        temp3 = (double)(SWIG_As_double(obj2));
        if (SWIG_arg_fail(3)) SWIG_fail;
        arg3 = &temp3;
    }
    result = (gpstk::Geodetic *)new gpstk::Geodetic((double const &)*arg1,(double const &)*arg2,(double const &)*arg3);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__Geodetic, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_Geodetic__SWIG_4(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::Triple *arg1 = 0 ;
    gpstk::GeoidModel *arg2 = (gpstk::GeoidModel *) 0 ;
    gpstk::Geodetic *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:new_Geodetic",&obj0,&obj1)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__Triple, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("gpstk::Triple");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_gpstk__GeoidModel, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    result = (gpstk::Geodetic *)new gpstk::Geodetic((gpstk::Triple const &)*arg1,arg2);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__Geodetic, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_Geodetic__SWIG_5(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::Triple *arg1 = 0 ;
    gpstk::Geodetic *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_Geodetic",&obj0)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__Triple, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("gpstk::Triple");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    result = (gpstk::Geodetic *)new gpstk::Geodetic((gpstk::Triple const &)*arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__Geodetic, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_Geodetic__SWIG_6(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::ECEF *arg1 = 0 ;
    gpstk::GeoidModel *arg2 = (gpstk::GeoidModel *) 0 ;
    gpstk::Geodetic *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:new_Geodetic",&obj0,&obj1)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__ECEF, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("gpstk::ECEF");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_gpstk__GeoidModel, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    try {
        result = (gpstk::Geodetic *)new gpstk::Geodetic((gpstk::ECEF const &)*arg1,arg2);
    }
    catch(gpstk::NoGeoidException &_e) {
        {
            gpstk::NoGeoidException * temp = new gpstk::NoGeoidException(_e);
            if (SWIGTYPE_p_gpstk__NoGeoidException->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_gpstk__NoGeoidException->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__NoGeoidException,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"gpstk::NoGeoidException");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__NoGeoidException,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__Geodetic, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_Geodetic(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[5];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 4); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_new_Geodetic__SWIG_0(self,args);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_gpstk__Geodetic, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            return _wrap_new_Geodetic__SWIG_1(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_gpstk__Triple, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            return _wrap_new_Geodetic__SWIG_5(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_gpstk__ECEF, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_gpstk__GeoidModel, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                return _wrap_new_Geodetic__SWIG_6(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_gpstk__Triple, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_gpstk__GeoidModel, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                return _wrap_new_Geodetic__SWIG_4(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        _v = SWIG_Check_double(argv[0]);
        if (_v) {
            _v = SWIG_Check_double(argv[1]);
            if (_v) {
                _v = SWIG_Check_double(argv[2]);
                if (_v) {
                    return _wrap_new_Geodetic__SWIG_3(self,args);
                }
            }
        }
    }
    if (argc == 4) {
        int _v;
        _v = SWIG_Check_double(argv[0]);
        if (_v) {
            _v = SWIG_Check_double(argv[1]);
            if (_v) {
                _v = SWIG_Check_double(argv[2]);
                if (_v) {
                    {
                        void *ptr;
                        if (SWIG_ConvertPtr(argv[3], &ptr, SWIGTYPE_p_gpstk__GeoidModel, 0) == -1) {
                            _v = 0;
                            PyErr_Clear();
                        } else {
                            _v = 1;
                        }
                    }
                    if (_v) {
                        return _wrap_new_Geodetic__SWIG_2(self,args);
                    }
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'new_Geodetic'");
    return NULL;
}


static PyObject *_wrap_delete_Geodetic(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::Geodetic *arg1 = (gpstk::Geodetic *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_Geodetic",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__Geodetic, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Geodetic_class_operator_assignment(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::Geodetic *arg1 = (gpstk::Geodetic *) 0 ;
    gpstk::Geodetic *arg2 = 0 ;
    gpstk::Geodetic *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Geodetic_class_operator_assignment",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__Geodetic, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_gpstk__Geodetic, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("gpstk::Geodetic");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        gpstk::Geodetic &_result_ref = (arg1)->operator =((gpstk::Geodetic const &)*arg2);
        result = (gpstk::Geodetic *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__Geodetic, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Geodetic_asECEF(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::Geodetic *arg1 = (gpstk::Geodetic *) 0 ;
    gpstk::ECEF result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Geodetic_asECEF",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__Geodetic, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        result = ((gpstk::Geodetic const *)arg1)->asECEF();
    }
    catch(gpstk::NoGeoidException &_e) {
        {
            gpstk::NoGeoidException * temp = new gpstk::NoGeoidException(_e);
            if (SWIGTYPE_p_gpstk__NoGeoidException->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_gpstk__NoGeoidException->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__NoGeoidException,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"gpstk::NoGeoidException");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__NoGeoidException,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    {
        gpstk::ECEF * resultptr;
        resultptr = new gpstk::ECEF((gpstk::ECEF &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_gpstk__ECEF, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Geodetic_getLatitude(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::Geodetic *arg1 = (gpstk::Geodetic *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Geodetic_getLatitude",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__Geodetic, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double)((gpstk::Geodetic const *)arg1)->getLatitude();
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Geodetic_getLongitude(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::Geodetic *arg1 = (gpstk::Geodetic *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Geodetic_getLongitude",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__Geodetic, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double)((gpstk::Geodetic const *)arg1)->getLongitude();
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Geodetic_getAltitude(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::Geodetic *arg1 = (gpstk::Geodetic *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Geodetic_getAltitude",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__Geodetic, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double)((gpstk::Geodetic const *)arg1)->getAltitude();
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject * Geodetic_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_gpstk__Geodetic, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_RAIMSolution(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RAIMSolution *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_RAIMSolution")) goto fail;
    try {
        result = (gpstk::RAIMSolution *)new gpstk::RAIMSolution();
    }
    catch(gpstk::Exception &_e) {
        {
            gpstk::Exception * temp = new gpstk::Exception(_e);
            if (SWIGTYPE_p_gpstk__Exception->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_gpstk__Exception->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__Exception,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"gpstk::Exception");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__Exception,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__RAIMSolution, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RAIMSolution_Compute(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RAIMSolution *arg1 = (gpstk::RAIMSolution *) 0 ;
    DayTime *arg2 = 0 ;
    std::vector<gpstk::RinexPrn > *arg3 = 0 ;
    std::vector<double > *arg4 = 0 ;
    gpstk::EphemerisStore *arg5 = 0 ;
    gpstk::TropModel *arg6 = (gpstk::TropModel *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    PyObject * obj5 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOOO:RAIMSolution_Compute",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RAIMSolution, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_gpstk__DayTime, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("DayTime");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_std__vectorTgpstk__RinexPrn_std__allocatorTgpstk__RinexPrn_t_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (arg3 == NULL) {
            SWIG_null_ref("std::vector<gpstk::RinexPrn >");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj3, (void **)&arg4, SWIGTYPE_p_std__vectorTdouble_std__allocatorTdouble_t_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(4)) SWIG_fail;
        if (arg4 == NULL) {
            SWIG_null_ref("std::vector<double >");
        }
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj4, (void **)&arg5, SWIGTYPE_p_gpstk__EphemerisStore, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(5)) SWIG_fail;
        if (arg5 == NULL) {
            SWIG_null_ref("gpstk::EphemerisStore");
        }
        if (SWIG_arg_fail(5)) SWIG_fail;
    }
    SWIG_Python_ConvertPtr(obj5, (void **)&arg6, SWIGTYPE_p_gpstk__TropModel, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(6)) SWIG_fail;
    try {
        result = (int)(arg1)->Compute((DayTime const &)*arg2,*arg3,*arg4,(gpstk::EphemerisStore const &)*arg5,arg6);
    }
    catch(gpstk::Exception &_e) {
        {
            gpstk::Exception * temp = new gpstk::Exception(_e);
            if (SWIGTYPE_p_gpstk__Exception->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_gpstk__Exception->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__Exception,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"gpstk::Exception");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__Exception,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RAIMSolution_isValid(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RAIMSolution *arg1 = (gpstk::RAIMSolution *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RAIMSolution_isValid",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RAIMSolution, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)((gpstk::RAIMSolution const *)arg1)->isValid();
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RAIMSolution_RMSLimit_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RAIMSolution *arg1 = (gpstk::RAIMSolution *) 0 ;
    double arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RAIMSolution_RMSLimit_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RAIMSolution, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->RMSLimit = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RAIMSolution_RMSLimit_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RAIMSolution *arg1 = (gpstk::RAIMSolution *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RAIMSolution_RMSLimit_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RAIMSolution, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double) ((arg1)->RMSLimit);
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RAIMSolution_SlopeLimit_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RAIMSolution *arg1 = (gpstk::RAIMSolution *) 0 ;
    double arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RAIMSolution_SlopeLimit_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RAIMSolution, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->SlopeLimit = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RAIMSolution_SlopeLimit_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RAIMSolution *arg1 = (gpstk::RAIMSolution *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RAIMSolution_SlopeLimit_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RAIMSolution, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double) ((arg1)->SlopeLimit);
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RAIMSolution_Algebraic_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RAIMSolution *arg1 = (gpstk::RAIMSolution *) 0 ;
    bool arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RAIMSolution_Algebraic_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RAIMSolution, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (bool)(SWIG_As_bool(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->Algebraic = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RAIMSolution_Algebraic_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RAIMSolution *arg1 = (gpstk::RAIMSolution *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RAIMSolution_Algebraic_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RAIMSolution, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool) ((arg1)->Algebraic);
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RAIMSolution_ResidualCriterion_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RAIMSolution *arg1 = (gpstk::RAIMSolution *) 0 ;
    bool arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RAIMSolution_ResidualCriterion_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RAIMSolution, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (bool)(SWIG_As_bool(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->ResidualCriterion = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RAIMSolution_ResidualCriterion_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RAIMSolution *arg1 = (gpstk::RAIMSolution *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RAIMSolution_ResidualCriterion_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RAIMSolution, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool) ((arg1)->ResidualCriterion);
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RAIMSolution_ReturnAtOnce_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RAIMSolution *arg1 = (gpstk::RAIMSolution *) 0 ;
    bool arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RAIMSolution_ReturnAtOnce_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RAIMSolution, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (bool)(SWIG_As_bool(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->ReturnAtOnce = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RAIMSolution_ReturnAtOnce_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RAIMSolution *arg1 = (gpstk::RAIMSolution *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RAIMSolution_ReturnAtOnce_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RAIMSolution, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool) ((arg1)->ReturnAtOnce);
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RAIMSolution_NSatsReject_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RAIMSolution *arg1 = (gpstk::RAIMSolution *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RAIMSolution_NSatsReject_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RAIMSolution, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->NSatsReject = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RAIMSolution_NSatsReject_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RAIMSolution *arg1 = (gpstk::RAIMSolution *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RAIMSolution_NSatsReject_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RAIMSolution, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int) ((arg1)->NSatsReject);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RAIMSolution_Debug_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RAIMSolution *arg1 = (gpstk::RAIMSolution *) 0 ;
    bool arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RAIMSolution_Debug_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RAIMSolution, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (bool)(SWIG_As_bool(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->Debug = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RAIMSolution_Debug_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RAIMSolution *arg1 = (gpstk::RAIMSolution *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RAIMSolution_Debug_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RAIMSolution, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool) ((arg1)->Debug);
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RAIMSolution_pDebugStream_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RAIMSolution *arg1 = (gpstk::RAIMSolution *) 0 ;
    std::ostream *arg2 = (std::ostream *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RAIMSolution_pDebugStream_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RAIMSolution, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->pDebugStream = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RAIMSolution_pDebugStream_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RAIMSolution *arg1 = (gpstk::RAIMSolution *) 0 ;
    std::ostream *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RAIMSolution_pDebugStream_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RAIMSolution, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (std::ostream *) ((arg1)->pDebugStream);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RAIMSolution_MaxNIterations_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RAIMSolution *arg1 = (gpstk::RAIMSolution *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RAIMSolution_MaxNIterations_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RAIMSolution, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->MaxNIterations = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RAIMSolution_MaxNIterations_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RAIMSolution *arg1 = (gpstk::RAIMSolution *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RAIMSolution_MaxNIterations_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RAIMSolution, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int) ((arg1)->MaxNIterations);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RAIMSolution_ConvergenceLimit_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RAIMSolution *arg1 = (gpstk::RAIMSolution *) 0 ;
    double arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RAIMSolution_ConvergenceLimit_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RAIMSolution, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->ConvergenceLimit = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RAIMSolution_ConvergenceLimit_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RAIMSolution *arg1 = (gpstk::RAIMSolution *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RAIMSolution_ConvergenceLimit_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RAIMSolution, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double) ((arg1)->ConvergenceLimit);
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RAIMSolution_Valid_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RAIMSolution *arg1 = (gpstk::RAIMSolution *) 0 ;
    bool arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RAIMSolution_Valid_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RAIMSolution, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (bool)(SWIG_As_bool(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->Valid = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RAIMSolution_Valid_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RAIMSolution *arg1 = (gpstk::RAIMSolution *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RAIMSolution_Valid_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RAIMSolution, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool) ((arg1)->Valid);
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RAIMSolution_Solution_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RAIMSolution *arg1 = (gpstk::RAIMSolution *) 0 ;
    Vector<double > arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RAIMSolution_Solution_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RAIMSolution, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        Vector<double > * argp;
        SWIG_Python_ConvertPtr(obj1, (void **)&argp, SWIGTYPE_p_VectorTdouble_t, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("Vector<double >");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *argp;
    }
    if (arg1) (arg1)->Solution = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RAIMSolution_Solution_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RAIMSolution *arg1 = (gpstk::RAIMSolution *) 0 ;
    Vector<double > result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RAIMSolution_Solution_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RAIMSolution, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result =  ((arg1)->Solution);
    
    {
        Vector<double > * resultptr;
        resultptr = new Vector<double >((Vector<double > &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_VectorTdouble_t, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RAIMSolution_Covariance_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RAIMSolution *arg1 = (gpstk::RAIMSolution *) 0 ;
    Matrix<double > arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RAIMSolution_Covariance_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RAIMSolution, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        Matrix<double > * argp;
        SWIG_Python_ConvertPtr(obj1, (void **)&argp, SWIGTYPE_p_MatrixTdouble_t, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("Matrix<double >");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *argp;
    }
    if (arg1) (arg1)->Covariance = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RAIMSolution_Covariance_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RAIMSolution *arg1 = (gpstk::RAIMSolution *) 0 ;
    Matrix<double > result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RAIMSolution_Covariance_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RAIMSolution, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result =  ((arg1)->Covariance);
    
    {
        Matrix<double > * resultptr;
        resultptr = new Matrix<double >((Matrix<double > &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_MatrixTdouble_t, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RAIMSolution_RMSResidual_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RAIMSolution *arg1 = (gpstk::RAIMSolution *) 0 ;
    double arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RAIMSolution_RMSResidual_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RAIMSolution, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->RMSResidual = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RAIMSolution_RMSResidual_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RAIMSolution *arg1 = (gpstk::RAIMSolution *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RAIMSolution_RMSResidual_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RAIMSolution, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double) ((arg1)->RMSResidual);
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RAIMSolution_MaxSlope_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RAIMSolution *arg1 = (gpstk::RAIMSolution *) 0 ;
    double arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RAIMSolution_MaxSlope_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RAIMSolution, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->MaxSlope = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RAIMSolution_MaxSlope_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RAIMSolution *arg1 = (gpstk::RAIMSolution *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RAIMSolution_MaxSlope_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RAIMSolution, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double) ((arg1)->MaxSlope);
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RAIMSolution_NIterations_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RAIMSolution *arg1 = (gpstk::RAIMSolution *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RAIMSolution_NIterations_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RAIMSolution, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->NIterations = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RAIMSolution_NIterations_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RAIMSolution *arg1 = (gpstk::RAIMSolution *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RAIMSolution_NIterations_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RAIMSolution, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int) ((arg1)->NIterations);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RAIMSolution_Convergence_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RAIMSolution *arg1 = (gpstk::RAIMSolution *) 0 ;
    double arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RAIMSolution_Convergence_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RAIMSolution, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->Convergence = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RAIMSolution_Convergence_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RAIMSolution *arg1 = (gpstk::RAIMSolution *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RAIMSolution_Convergence_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RAIMSolution, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double) ((arg1)->Convergence);
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RAIMSolution_Nsvs_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RAIMSolution *arg1 = (gpstk::RAIMSolution *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RAIMSolution_Nsvs_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RAIMSolution, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->Nsvs = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RAIMSolution_Nsvs_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RAIMSolution *arg1 = (gpstk::RAIMSolution *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RAIMSolution_Nsvs_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RAIMSolution, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int) ((arg1)->Nsvs);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_RAIMSolution(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::RAIMSolution *arg1 = (gpstk::RAIMSolution *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_RAIMSolution",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__RAIMSolution, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * RAIMSolution_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_gpstk__RAIMSolution, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_PrepareAutonomousSolution(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    DayTime *arg1 = 0 ;
    std::vector<gpstk::RinexPrn > *arg2 = 0 ;
    std::vector<double > *arg3 = 0 ;
    gpstk::EphemerisStore *arg4 = 0 ;
    Matrix<double > *arg5 = 0 ;
    int result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOO:PrepareAutonomousSolution",&obj0,&obj1,&obj2,&obj3,&obj4)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__DayTime, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("DayTime");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__vectorTgpstk__RinexPrn_std__allocatorTgpstk__RinexPrn_t_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("std::vector<gpstk::RinexPrn >");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_std__vectorTdouble_std__allocatorTdouble_t_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (arg3 == NULL) {
            SWIG_null_ref("std::vector<double >");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj3, (void **)&arg4, SWIGTYPE_p_gpstk__EphemerisStore, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(4)) SWIG_fail;
        if (arg4 == NULL) {
            SWIG_null_ref("gpstk::EphemerisStore");
        }
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj4, (void **)&arg5, SWIGTYPE_p_MatrixTdouble_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(5)) SWIG_fail;
        if (arg5 == NULL) {
            SWIG_null_ref("Matrix<double >");
        }
        if (SWIG_arg_fail(5)) SWIG_fail;
    }
    result = (int)gpstk::PrepareAutonomousSolution((DayTime const &)*arg1,*arg2,*arg3,(gpstk::EphemerisStore const &)*arg4,*arg5);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_AutonomousPRSolution(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    DayTime *arg1 = 0 ;
    Vector<bool > *arg2 = 0 ;
    Matrix<double > arg3 ;
    gpstk::TropModel *arg4 = (gpstk::TropModel *) 0 ;
    bool arg5 ;
    int *arg6 = 0 ;
    double *arg7 = 0 ;
    Vector<double > *arg8 = 0 ;
    Matrix<double > *arg9 = 0 ;
    Vector<double > *arg10 = 0 ;
    Vector<double > *arg11 = 0 ;
    int result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    PyObject * obj5 = 0 ;
    PyObject * obj6 = 0 ;
    PyObject * obj7 = 0 ;
    PyObject * obj8 = 0 ;
    PyObject * obj9 = 0 ;
    PyObject * obj10 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOOOOOOOO:AutonomousPRSolution",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8,&obj9,&obj10)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__DayTime, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("DayTime");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_VectorTbool_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("Vector<bool >");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        Matrix<double > * argp;
        SWIG_Python_ConvertPtr(obj2, (void **)&argp, SWIGTYPE_p_MatrixTdouble_t, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("Matrix<double >");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
        arg3 = *argp;
    }
    SWIG_Python_ConvertPtr(obj3, (void **)&arg4, SWIGTYPE_p_gpstk__TropModel, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(4)) SWIG_fail;
    {
        arg5 = (bool const)(SWIG_As_bool(obj4)); 
        if (SWIG_arg_fail(5)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj5, (void **)&arg6, SWIGTYPE_p_int, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(6)) SWIG_fail;
        if (arg6 == NULL) {
            SWIG_null_ref("int");
        }
        if (SWIG_arg_fail(6)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj6, (void **)&arg7, SWIGTYPE_p_double, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(7)) SWIG_fail;
        if (arg7 == NULL) {
            SWIG_null_ref("double");
        }
        if (SWIG_arg_fail(7)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj7, (void **)&arg8, SWIGTYPE_p_VectorTdouble_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(8)) SWIG_fail;
        if (arg8 == NULL) {
            SWIG_null_ref("Vector<double >");
        }
        if (SWIG_arg_fail(8)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj8, (void **)&arg9, SWIGTYPE_p_MatrixTdouble_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(9)) SWIG_fail;
        if (arg9 == NULL) {
            SWIG_null_ref("Matrix<double >");
        }
        if (SWIG_arg_fail(9)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj9, (void **)&arg10, SWIGTYPE_p_VectorTdouble_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(10)) SWIG_fail;
        if (arg10 == NULL) {
            SWIG_null_ref("Vector<double >");
        }
        if (SWIG_arg_fail(10)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj10, (void **)&arg11, SWIGTYPE_p_VectorTdouble_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(11)) SWIG_fail;
        if (arg11 == NULL) {
            SWIG_null_ref("Vector<double >");
        }
        if (SWIG_arg_fail(11)) SWIG_fail;
    }
    try {
        result = (int)gpstk::AutonomousPRSolution((DayTime const &)*arg1,(Vector<bool > const &)*arg2,arg3,arg4,arg5,*arg6,*arg7,*arg8,*arg9,*arg10,*arg11);
    }
    catch(gpstk::Exception &_e) {
        {
            gpstk::Exception * temp = new gpstk::Exception(_e);
            if (SWIGTYPE_p_gpstk__Exception->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_gpstk__Exception->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__Exception,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"gpstk::Exception");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__Exception,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_CorrectedEphemerisRange(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::CorrectedEphemerisRange *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_CorrectedEphemerisRange")) goto fail;
    result = (gpstk::CorrectedEphemerisRange *)new gpstk::CorrectedEphemerisRange();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__CorrectedEphemerisRange, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CorrectedEphemerisRange_ComputeAtReceiveTime(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::CorrectedEphemerisRange *arg1 = (gpstk::CorrectedEphemerisRange *) 0 ;
    DayTime *arg2 = 0 ;
    gpstk::Position *arg3 = 0 ;
    int arg4 ;
    gpstk::EphemerisStore *arg5 = 0 ;
    double result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOO:CorrectedEphemerisRange_ComputeAtReceiveTime",&obj0,&obj1,&obj2,&obj3,&obj4)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__CorrectedEphemerisRange, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_gpstk__DayTime, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("DayTime");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_gpstk__Position, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (arg3 == NULL) {
            SWIG_null_ref("gpstk::Position");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = (int const)(SWIG_As_int(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj4, (void **)&arg5, SWIGTYPE_p_gpstk__EphemerisStore, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(5)) SWIG_fail;
        if (arg5 == NULL) {
            SWIG_null_ref("gpstk::EphemerisStore");
        }
        if (SWIG_arg_fail(5)) SWIG_fail;
    }
    result = (double)(arg1)->ComputeAtReceiveTime((DayTime const &)*arg2,(gpstk::Position const &)*arg3,arg4,(gpstk::EphemerisStore const &)*arg5);
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CorrectedEphemerisRange_ComputeAtTransmitTime(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::CorrectedEphemerisRange *arg1 = (gpstk::CorrectedEphemerisRange *) 0 ;
    DayTime *arg2 = 0 ;
    double *arg3 = 0 ;
    gpstk::Position *arg4 = 0 ;
    int arg5 ;
    gpstk::EphemerisStore *arg6 = 0 ;
    double result;
    double temp3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    PyObject * obj5 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOOO:CorrectedEphemerisRange_ComputeAtTransmitTime",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__CorrectedEphemerisRange, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_gpstk__DayTime, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("DayTime");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        temp3 = (double)(SWIG_As_double(obj2));
        if (SWIG_arg_fail(3)) SWIG_fail;
        arg3 = &temp3;
    }
    {
        SWIG_Python_ConvertPtr(obj3, (void **)&arg4, SWIGTYPE_p_gpstk__Position, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(4)) SWIG_fail;
        if (arg4 == NULL) {
            SWIG_null_ref("gpstk::Position");
        }
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    {
        arg5 = (int const)(SWIG_As_int(obj4)); 
        if (SWIG_arg_fail(5)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj5, (void **)&arg6, SWIGTYPE_p_gpstk__EphemerisStore, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(6)) SWIG_fail;
        if (arg6 == NULL) {
            SWIG_null_ref("gpstk::EphemerisStore");
        }
        if (SWIG_arg_fail(6)) SWIG_fail;
    }
    result = (double)(arg1)->ComputeAtTransmitTime((DayTime const &)*arg2,(double const &)*arg3,(gpstk::Position const &)*arg4,arg5,(gpstk::EphemerisStore const &)*arg6);
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CorrectedEphemerisRange_rawrange_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::CorrectedEphemerisRange *arg1 = (gpstk::CorrectedEphemerisRange *) 0 ;
    double arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CorrectedEphemerisRange_rawrange_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__CorrectedEphemerisRange, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->rawrange = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CorrectedEphemerisRange_rawrange_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::CorrectedEphemerisRange *arg1 = (gpstk::CorrectedEphemerisRange *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CorrectedEphemerisRange_rawrange_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__CorrectedEphemerisRange, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double) ((arg1)->rawrange);
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CorrectedEphemerisRange_svclkbias_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::CorrectedEphemerisRange *arg1 = (gpstk::CorrectedEphemerisRange *) 0 ;
    double arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CorrectedEphemerisRange_svclkbias_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__CorrectedEphemerisRange, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->svclkbias = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CorrectedEphemerisRange_svclkbias_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::CorrectedEphemerisRange *arg1 = (gpstk::CorrectedEphemerisRange *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CorrectedEphemerisRange_svclkbias_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__CorrectedEphemerisRange, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double) ((arg1)->svclkbias);
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CorrectedEphemerisRange_svclkdrift_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::CorrectedEphemerisRange *arg1 = (gpstk::CorrectedEphemerisRange *) 0 ;
    double arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CorrectedEphemerisRange_svclkdrift_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__CorrectedEphemerisRange, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->svclkdrift = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CorrectedEphemerisRange_svclkdrift_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::CorrectedEphemerisRange *arg1 = (gpstk::CorrectedEphemerisRange *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CorrectedEphemerisRange_svclkdrift_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__CorrectedEphemerisRange, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double) ((arg1)->svclkdrift);
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CorrectedEphemerisRange_relativity_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::CorrectedEphemerisRange *arg1 = (gpstk::CorrectedEphemerisRange *) 0 ;
    double arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CorrectedEphemerisRange_relativity_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__CorrectedEphemerisRange, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->relativity = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CorrectedEphemerisRange_relativity_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::CorrectedEphemerisRange *arg1 = (gpstk::CorrectedEphemerisRange *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CorrectedEphemerisRange_relativity_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__CorrectedEphemerisRange, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double) ((arg1)->relativity);
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CorrectedEphemerisRange_elevation_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::CorrectedEphemerisRange *arg1 = (gpstk::CorrectedEphemerisRange *) 0 ;
    double arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CorrectedEphemerisRange_elevation_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__CorrectedEphemerisRange, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->elevation = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CorrectedEphemerisRange_elevation_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::CorrectedEphemerisRange *arg1 = (gpstk::CorrectedEphemerisRange *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CorrectedEphemerisRange_elevation_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__CorrectedEphemerisRange, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double) ((arg1)->elevation);
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CorrectedEphemerisRange_azimuth_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::CorrectedEphemerisRange *arg1 = (gpstk::CorrectedEphemerisRange *) 0 ;
    double arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CorrectedEphemerisRange_azimuth_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__CorrectedEphemerisRange, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->azimuth = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CorrectedEphemerisRange_azimuth_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::CorrectedEphemerisRange *arg1 = (gpstk::CorrectedEphemerisRange *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CorrectedEphemerisRange_azimuth_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__CorrectedEphemerisRange, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double) ((arg1)->azimuth);
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CorrectedEphemerisRange_transmit_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::CorrectedEphemerisRange *arg1 = (gpstk::CorrectedEphemerisRange *) 0 ;
    DayTime *arg2 = (DayTime *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CorrectedEphemerisRange_transmit_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__CorrectedEphemerisRange, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_gpstk__DayTime, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->transmit = *arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CorrectedEphemerisRange_transmit_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::CorrectedEphemerisRange *arg1 = (gpstk::CorrectedEphemerisRange *) 0 ;
    DayTime *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CorrectedEphemerisRange_transmit_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__CorrectedEphemerisRange, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (DayTime *)& ((arg1)->transmit);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__DayTime, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CorrectedEphemerisRange_cosines_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::CorrectedEphemerisRange *arg1 = (gpstk::CorrectedEphemerisRange *) 0 ;
    gpstk::Triple *arg2 = (gpstk::Triple *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CorrectedEphemerisRange_cosines_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__CorrectedEphemerisRange, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_gpstk__Triple, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->cosines = *arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CorrectedEphemerisRange_cosines_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::CorrectedEphemerisRange *arg1 = (gpstk::CorrectedEphemerisRange *) 0 ;
    gpstk::Triple *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CorrectedEphemerisRange_cosines_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__CorrectedEphemerisRange, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (gpstk::Triple *)& ((arg1)->cosines);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__Triple, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CorrectedEphemerisRange_svPosVel_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::CorrectedEphemerisRange *arg1 = (gpstk::CorrectedEphemerisRange *) 0 ;
    gpstk::Xvt *arg2 = (gpstk::Xvt *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CorrectedEphemerisRange_svPosVel_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__CorrectedEphemerisRange, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_gpstk__Xvt, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->svPosVel = *arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CorrectedEphemerisRange_svPosVel_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::CorrectedEphemerisRange *arg1 = (gpstk::CorrectedEphemerisRange *) 0 ;
    gpstk::Xvt *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CorrectedEphemerisRange_svPosVel_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__CorrectedEphemerisRange, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (gpstk::Xvt *)& ((arg1)->svPosVel);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__Xvt, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_CorrectedEphemerisRange(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::CorrectedEphemerisRange *arg1 = (gpstk::CorrectedEphemerisRange *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_CorrectedEphemerisRange",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__CorrectedEphemerisRange, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * CorrectedEphemerisRange_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_gpstk__CorrectedEphemerisRange, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_RelativityCorrection(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::Xvt *arg1 = 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RelativityCorrection",&obj0)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__Xvt, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("gpstk::Xvt");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    result = (double)gpstk::RelativityCorrection((gpstk::Xvt const &)*arg1);
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_EngNav(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::EngNav *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_EngNav")) goto fail;
    result = (gpstk::EngNav *)new gpstk::EngNav();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__EngNav, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_EngNav(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::EngNav *arg1 = (gpstk::EngNav *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_EngNav",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__EngNav, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_EngNav_subframeParity(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    long *arg1 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:EngNav_subframeParity",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_long, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)gpstk::EngNav::subframeParity((long const (*))arg1);
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_EngNav_subframeConvert(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    long *arg1 ;
    long arg2 ;
    double *arg3 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:EngNav_subframeConvert",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_long, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (long const)(SWIG_As_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_double, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(3)) SWIG_fail;
    result = (bool)gpstk::EngNav::subframeConvert((long const (*))arg1,arg2,arg3);
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_EngNav_convert8bit(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    long arg1 ;
    double *arg2 = (double *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:EngNav_convert8bit",&obj0,&obj1)) goto fail;
    {
        arg1 = (long const)(SWIG_As_long(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_double, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    result = (bool)gpstk::EngNav::convert8bit(arg1,arg2);
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_EngNav_convert10bit(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    long arg1 ;
    double *arg2 = (double *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:EngNav_convert10bit",&obj0,&obj1)) goto fail;
    {
        arg1 = (long const)(SWIG_As_long(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_double, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    result = (bool)gpstk::EngNav::convert10bit(arg1,arg2);
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_EngNav_getSubframePattern(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    long *arg1 ;
    short result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:EngNav_getSubframePattern",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_long, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (short)gpstk::EngNav::getSubframePattern((long const (*))arg1);
    
    {
        resultobj = SWIG_From_short((short)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject * EngNav_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_gpstk__EngNav, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_EngAlmanac(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::EngAlmanac *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_EngAlmanac")) goto fail;
    result = (gpstk::EngAlmanac *)new gpstk::EngAlmanac();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__EngAlmanac, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_EngAlmanac(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::EngAlmanac *arg1 = (gpstk::EngAlmanac *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_EngAlmanac",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__EngAlmanac, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_EngAlmanac_addSubframe(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::EngAlmanac *arg1 = (gpstk::EngAlmanac *) 0 ;
    long *arg2 ;
    long arg3 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:EngAlmanac_addSubframe",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__EngAlmanac, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_long, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    {
        arg3 = (long const)(SWIG_As_long(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    try {
        result = (bool)(arg1)->addSubframe((long const (*))arg2,arg3);
    }
    catch(gpstk::InvalidParameter &_e) {
        {
            gpstk::InvalidParameter * temp = new gpstk::InvalidParameter(_e);
            if (SWIGTYPE_p_gpstk__InvalidParameter->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_gpstk__InvalidParameter->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__InvalidParameter,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"gpstk::InvalidParameter");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__InvalidParameter,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_EngAlmanac_isData(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::EngAlmanac *arg1 = (gpstk::EngAlmanac *) 0 ;
    short arg2 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:EngAlmanac_isData",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__EngAlmanac, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (short)(SWIG_As_short(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (bool)((gpstk::EngAlmanac const *)arg1)->isData(arg2);
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_EngAlmanac_getEcc(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::EngAlmanac *arg1 = (gpstk::EngAlmanac *) 0 ;
    short arg2 ;
    double result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:EngAlmanac_getEcc",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__EngAlmanac, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (short)(SWIG_As_short(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        result = (double)((gpstk::EngAlmanac const *)arg1)->getEcc(arg2);
    }
    catch(SVNotPresentException &_e) {
        {
            SVNotPresentException * temp = new SVNotPresentException(_e);
            if (SWIGTYPE_p_SVNotPresentException->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_SVNotPresentException->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_SVNotPresentException,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"SVNotPresentException");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_SVNotPresentException,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_EngAlmanac_getIOffset(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::EngAlmanac *arg1 = (gpstk::EngAlmanac *) 0 ;
    short arg2 ;
    double result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:EngAlmanac_getIOffset",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__EngAlmanac, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (short)(SWIG_As_short(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        result = (double)((gpstk::EngAlmanac const *)arg1)->getIOffset(arg2);
    }
    catch(SVNotPresentException &_e) {
        {
            SVNotPresentException * temp = new SVNotPresentException(_e);
            if (SWIGTYPE_p_SVNotPresentException->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_SVNotPresentException->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_SVNotPresentException,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"SVNotPresentException");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_SVNotPresentException,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_EngAlmanac_getOmegadot(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::EngAlmanac *arg1 = (gpstk::EngAlmanac *) 0 ;
    short arg2 ;
    double result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:EngAlmanac_getOmegadot",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__EngAlmanac, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (short)(SWIG_As_short(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        result = (double)((gpstk::EngAlmanac const *)arg1)->getOmegadot(arg2);
    }
    catch(SVNotPresentException &_e) {
        {
            SVNotPresentException * temp = new SVNotPresentException(_e);
            if (SWIGTYPE_p_SVNotPresentException->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_SVNotPresentException->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_SVNotPresentException,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"SVNotPresentException");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_SVNotPresentException,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_EngAlmanac_getSVHealth(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::EngAlmanac *arg1 = (gpstk::EngAlmanac *) 0 ;
    short arg2 ;
    short result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:EngAlmanac_getSVHealth",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__EngAlmanac, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (short)(SWIG_As_short(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        result = (short)((gpstk::EngAlmanac const *)arg1)->getSVHealth(arg2);
    }
    catch(SVNotPresentException &_e) {
        {
            SVNotPresentException * temp = new SVNotPresentException(_e);
            if (SWIGTYPE_p_SVNotPresentException->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_SVNotPresentException->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_SVNotPresentException,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"SVNotPresentException");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_SVNotPresentException,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    {
        resultobj = SWIG_From_short((short)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_EngAlmanac_getAhalf(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::EngAlmanac *arg1 = (gpstk::EngAlmanac *) 0 ;
    short arg2 ;
    double result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:EngAlmanac_getAhalf",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__EngAlmanac, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (short)(SWIG_As_short(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        result = (double)((gpstk::EngAlmanac const *)arg1)->getAhalf(arg2);
    }
    catch(SVNotPresentException &_e) {
        {
            SVNotPresentException * temp = new SVNotPresentException(_e);
            if (SWIGTYPE_p_SVNotPresentException->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_SVNotPresentException->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_SVNotPresentException,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"SVNotPresentException");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_SVNotPresentException,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_EngAlmanac_getA(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::EngAlmanac *arg1 = (gpstk::EngAlmanac *) 0 ;
    short arg2 ;
    double result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:EngAlmanac_getA",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__EngAlmanac, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (short)(SWIG_As_short(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        result = (double)((gpstk::EngAlmanac const *)arg1)->getA(arg2);
    }
    catch(SVNotPresentException &_e) {
        {
            SVNotPresentException * temp = new SVNotPresentException(_e);
            if (SWIGTYPE_p_SVNotPresentException->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_SVNotPresentException->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_SVNotPresentException,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"SVNotPresentException");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_SVNotPresentException,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_EngAlmanac_getOmega0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::EngAlmanac *arg1 = (gpstk::EngAlmanac *) 0 ;
    short arg2 ;
    double result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:EngAlmanac_getOmega0",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__EngAlmanac, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (short)(SWIG_As_short(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        result = (double)((gpstk::EngAlmanac const *)arg1)->getOmega0(arg2);
    }
    catch(SVNotPresentException &_e) {
        {
            SVNotPresentException * temp = new SVNotPresentException(_e);
            if (SWIGTYPE_p_SVNotPresentException->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_SVNotPresentException->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_SVNotPresentException,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"SVNotPresentException");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_SVNotPresentException,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_EngAlmanac_getW(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::EngAlmanac *arg1 = (gpstk::EngAlmanac *) 0 ;
    short arg2 ;
    double result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:EngAlmanac_getW",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__EngAlmanac, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (short)(SWIG_As_short(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        result = (double)((gpstk::EngAlmanac const *)arg1)->getW(arg2);
    }
    catch(SVNotPresentException &_e) {
        {
            SVNotPresentException * temp = new SVNotPresentException(_e);
            if (SWIGTYPE_p_SVNotPresentException->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_SVNotPresentException->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_SVNotPresentException,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"SVNotPresentException");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_SVNotPresentException,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_EngAlmanac_getM0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::EngAlmanac *arg1 = (gpstk::EngAlmanac *) 0 ;
    short arg2 ;
    double result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:EngAlmanac_getM0",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__EngAlmanac, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (short)(SWIG_As_short(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        result = (double)((gpstk::EngAlmanac const *)arg1)->getM0(arg2);
    }
    catch(SVNotPresentException &_e) {
        {
            SVNotPresentException * temp = new SVNotPresentException(_e);
            if (SWIGTYPE_p_SVNotPresentException->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_SVNotPresentException->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_SVNotPresentException,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"SVNotPresentException");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_SVNotPresentException,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_EngAlmanac_getAf0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::EngAlmanac *arg1 = (gpstk::EngAlmanac *) 0 ;
    short arg2 ;
    double result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:EngAlmanac_getAf0",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__EngAlmanac, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (short)(SWIG_As_short(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        result = (double)((gpstk::EngAlmanac const *)arg1)->getAf0(arg2);
    }
    catch(SVNotPresentException &_e) {
        {
            SVNotPresentException * temp = new SVNotPresentException(_e);
            if (SWIGTYPE_p_SVNotPresentException->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_SVNotPresentException->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_SVNotPresentException,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"SVNotPresentException");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_SVNotPresentException,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_EngAlmanac_getAf1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::EngAlmanac *arg1 = (gpstk::EngAlmanac *) 0 ;
    short arg2 ;
    double result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:EngAlmanac_getAf1",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__EngAlmanac, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (short)(SWIG_As_short(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        result = (double)((gpstk::EngAlmanac const *)arg1)->getAf1(arg2);
    }
    catch(SVNotPresentException &_e) {
        {
            SVNotPresentException * temp = new SVNotPresentException(_e);
            if (SWIGTYPE_p_SVNotPresentException->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_SVNotPresentException->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_SVNotPresentException,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"SVNotPresentException");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_SVNotPresentException,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_EngAlmanac_getToa__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::EngAlmanac *arg1 = (gpstk::EngAlmanac *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:EngAlmanac_getToa",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__EngAlmanac, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double)((gpstk::EngAlmanac const *)arg1)->getToa();
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_EngAlmanac_getToa__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::EngAlmanac *arg1 = (gpstk::EngAlmanac *) 0 ;
    short arg2 ;
    double result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:EngAlmanac_getToa",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__EngAlmanac, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (short)(SWIG_As_short(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        result = (double)((gpstk::EngAlmanac const *)arg1)->getToa(arg2);
    }
    catch(SVNotPresentException &_e) {
        {
            SVNotPresentException * temp = new SVNotPresentException(_e);
            if (SWIGTYPE_p_SVNotPresentException->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_SVNotPresentException->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_SVNotPresentException,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"SVNotPresentException");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_SVNotPresentException,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_EngAlmanac_getToa(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_gpstk__EngAlmanac, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_EngAlmanac_getToa__SWIG_0(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_gpstk__EngAlmanac, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_short(argv[1]);
            if (_v) {
                return _wrap_EngAlmanac_getToa__SWIG_1(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'EngAlmanac_getToa'");
    return NULL;
}


static PyObject *_wrap_EngAlmanac_getXmitTime(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::EngAlmanac *arg1 = (gpstk::EngAlmanac *) 0 ;
    short arg2 ;
    double result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:EngAlmanac_getXmitTime",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__EngAlmanac, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (short)(SWIG_As_short(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        result = (double)((gpstk::EngAlmanac const *)arg1)->getXmitTime(arg2);
    }
    catch(SVNotPresentException &_e) {
        {
            SVNotPresentException * temp = new SVNotPresentException(_e);
            if (SWIGTYPE_p_SVNotPresentException->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_SVNotPresentException->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_SVNotPresentException,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"SVNotPresentException");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_SVNotPresentException,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_EngAlmanac_getFullWeek(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::EngAlmanac *arg1 = (gpstk::EngAlmanac *) 0 ;
    short arg2 ;
    short result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:EngAlmanac_getFullWeek",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__EngAlmanac, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (short)(SWIG_As_short(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        result = (short)((gpstk::EngAlmanac const *)arg1)->getFullWeek(arg2);
    }
    catch(SVNotPresentException &_e) {
        {
            SVNotPresentException * temp = new SVNotPresentException(_e);
            if (SWIGTYPE_p_SVNotPresentException->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_SVNotPresentException->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_SVNotPresentException,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"SVNotPresentException");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_SVNotPresentException,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    {
        resultobj = SWIG_From_short((short)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_EngAlmanac_getIon(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::EngAlmanac *arg1 = (gpstk::EngAlmanac *) 0 ;
    double *arg2 ;
    double *arg3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:EngAlmanac_getIon",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__EngAlmanac, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_double, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_double, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(3)) SWIG_fail;
    try {
        ((gpstk::EngAlmanac const *)arg1)->getIon(arg2,arg3);
    }
    catch(gpstk::InvalidRequest &_e) {
        {
            gpstk::InvalidRequest * temp = new gpstk::InvalidRequest(_e);
            if (SWIGTYPE_p_gpstk__InvalidRequest->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_gpstk__InvalidRequest->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__InvalidRequest,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"gpstk::InvalidRequest");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__InvalidRequest,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_EngAlmanac_getUTC(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::EngAlmanac *arg1 = (gpstk::EngAlmanac *) 0 ;
    double *arg2 = 0 ;
    double *arg3 = 0 ;
    double *arg4 = 0 ;
    long *arg5 = 0 ;
    int *arg6 = 0 ;
    int *arg7 = 0 ;
    int *arg8 = 0 ;
    double *arg9 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    PyObject * obj5 = 0 ;
    PyObject * obj6 = 0 ;
    PyObject * obj7 = 0 ;
    PyObject * obj8 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOOOOOO:EngAlmanac_getUTC",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__EngAlmanac, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_double, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("double");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_double, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (arg3 == NULL) {
            SWIG_null_ref("double");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj3, (void **)&arg4, SWIGTYPE_p_double, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(4)) SWIG_fail;
        if (arg4 == NULL) {
            SWIG_null_ref("double");
        }
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj4, (void **)&arg5, SWIGTYPE_p_long, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(5)) SWIG_fail;
        if (arg5 == NULL) {
            SWIG_null_ref("long");
        }
        if (SWIG_arg_fail(5)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj5, (void **)&arg6, SWIGTYPE_p_int, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(6)) SWIG_fail;
        if (arg6 == NULL) {
            SWIG_null_ref("int");
        }
        if (SWIG_arg_fail(6)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj6, (void **)&arg7, SWIGTYPE_p_int, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(7)) SWIG_fail;
        if (arg7 == NULL) {
            SWIG_null_ref("int");
        }
        if (SWIG_arg_fail(7)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj7, (void **)&arg8, SWIGTYPE_p_int, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(8)) SWIG_fail;
        if (arg8 == NULL) {
            SWIG_null_ref("int");
        }
        if (SWIG_arg_fail(8)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj8, (void **)&arg9, SWIGTYPE_p_double, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(9)) SWIG_fail;
        if (arg9 == NULL) {
            SWIG_null_ref("double");
        }
        if (SWIG_arg_fail(9)) SWIG_fail;
    }
    try {
        ((gpstk::EngAlmanac const *)arg1)->getUTC(*arg2,*arg3,*arg4,*arg5,*arg6,*arg7,*arg8,*arg9);
    }
    catch(gpstk::InvalidRequest &_e) {
        {
            gpstk::InvalidRequest * temp = new gpstk::InvalidRequest(_e);
            if (SWIGTYPE_p_gpstk__InvalidRequest->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_gpstk__InvalidRequest->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__InvalidRequest,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"gpstk::InvalidRequest");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__InvalidRequest,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_EngAlmanac_getAlmWeek(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::EngAlmanac *arg1 = (gpstk::EngAlmanac *) 0 ;
    short result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:EngAlmanac_getAlmWeek",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__EngAlmanac, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (short)((gpstk::EngAlmanac const *)arg1)->getAlmWeek();
    
    {
        resultobj = SWIG_From_short((short)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_EngAlmanac_getAlmOrbElem(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::EngAlmanac *arg1 = (gpstk::EngAlmanac *) 0 ;
    short arg2 ;
    gpstk::AlmOrbit result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:EngAlmanac_getAlmOrbElem",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__EngAlmanac, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (short)(SWIG_As_short(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        result = ((gpstk::EngAlmanac const *)arg1)->getAlmOrbElem(arg2);
    }
    catch(SVNotPresentException &_e) {
        {
            SVNotPresentException * temp = new SVNotPresentException(_e);
            if (SWIGTYPE_p_SVNotPresentException->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_SVNotPresentException->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_SVNotPresentException,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"SVNotPresentException");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_SVNotPresentException,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    {
        gpstk::AlmOrbit * resultptr;
        resultptr = new gpstk::AlmOrbit((gpstk::AlmOrbit &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_gpstk__AlmOrbit, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_EngAlmanac_getAlmOrbElems(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::EngAlmanac *arg1 = (gpstk::EngAlmanac *) 0 ;
    SwigValueWrapper<std::map<short,gpstk::AlmOrbit,std::less<short >,std::allocator<std::pair<short const,gpstk::AlmOrbit > > > > result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:EngAlmanac_getAlmOrbElems",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__EngAlmanac, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = ((gpstk::EngAlmanac const *)arg1)->getAlmOrbElems();
    
    {
        gpstk::AlmOrbits * resultptr;
        resultptr = new gpstk::AlmOrbits((gpstk::AlmOrbits &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_std__mapTshort_gpstk__AlmOrbit_std__lessTshort_t_std__allocatorTstd__pairTshort_const_gpstk__AlmOrbit_t_t_t, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_EngAlmanac_svXvt(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::EngAlmanac *arg1 = (gpstk::EngAlmanac *) 0 ;
    short arg2 ;
    DayTime *arg3 = 0 ;
    gpstk::Xvt result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:EngAlmanac_svXvt",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__EngAlmanac, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (short)(SWIG_As_short(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_gpstk__DayTime, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (arg3 == NULL) {
            SWIG_null_ref("DayTime");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    try {
        result = ((gpstk::EngAlmanac const *)arg1)->svXvt(arg2,(DayTime const &)*arg3);
    }
    catch(SVNotPresentException &_e) {
        {
            SVNotPresentException * temp = new SVNotPresentException(_e);
            if (SWIGTYPE_p_SVNotPresentException->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_SVNotPresentException->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_SVNotPresentException,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"SVNotPresentException");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_SVNotPresentException,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    {
        gpstk::Xvt * resultptr;
        resultptr = new gpstk::Xvt((gpstk::Xvt &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_gpstk__Xvt, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject * EngAlmanac_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_gpstk__EngAlmanac, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_EngEphemeris(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::EngEphemeris *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_EngEphemeris")) goto fail;
    result = (gpstk::EngEphemeris *)new gpstk::EngEphemeris();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__EngEphemeris, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_EngEphemeris(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::EngEphemeris *arg1 = (gpstk::EngEphemeris *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_EngEphemeris",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__EngEphemeris, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_EngEphemeris_addSubframe(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::EngEphemeris *arg1 = (gpstk::EngEphemeris *) 0 ;
    long *arg2 ;
    long arg3 ;
    short arg4 ;
    short arg5 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOO:EngEphemeris_addSubframe",&obj0,&obj1,&obj2,&obj3,&obj4)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__EngEphemeris, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_long, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    {
        arg3 = (long const)(SWIG_As_long(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = (short)(SWIG_As_short(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    {
        arg5 = (short)(SWIG_As_short(obj4)); 
        if (SWIG_arg_fail(5)) SWIG_fail;
    }
    try {
        result = (bool)(arg1)->addSubframe((long const (*))arg2,arg3,arg4,arg5);
    }
    catch(gpstk::InvalidParameter &_e) {
        {
            gpstk::InvalidParameter * temp = new gpstk::InvalidParameter(_e);
            if (SWIGTYPE_p_gpstk__InvalidParameter->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_gpstk__InvalidParameter->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__InvalidParameter,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"gpstk::InvalidParameter");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__InvalidParameter,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_EngEphemeris_isData(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::EngEphemeris *arg1 = (gpstk::EngEphemeris *) 0 ;
    short arg2 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:EngEphemeris_isData",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__EngEphemeris, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (short)(SWIG_As_short(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        result = (bool)((gpstk::EngEphemeris const *)arg1)->isData(arg2);
    }
    catch(gpstk::InvalidRequest &_e) {
        {
            gpstk::InvalidRequest * temp = new gpstk::InvalidRequest(_e);
            if (SWIGTYPE_p_gpstk__InvalidRequest->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_gpstk__InvalidRequest->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__InvalidRequest,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"gpstk::InvalidRequest");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__InvalidRequest,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_EngEphemeris_setAccuracy(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::EngEphemeris *arg1 = (gpstk::EngEphemeris *) 0 ;
    double *arg2 = 0 ;
    double temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:EngEphemeris_setAccuracy",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__EngEphemeris, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        temp2 = (double)(SWIG_As_double(obj1));
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = &temp2;
    }
    try {
        (arg1)->setAccuracy((double const &)*arg2);
    }
    catch(gpstk::InvalidParameter &_e) {
        {
            gpstk::InvalidParameter * temp = new gpstk::InvalidParameter(_e);
            if (SWIGTYPE_p_gpstk__InvalidParameter->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_gpstk__InvalidParameter->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__InvalidParameter,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"gpstk::InvalidParameter");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__InvalidParameter,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_EngEphemeris_getFitInterval(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::EngEphemeris *arg1 = (gpstk::EngEphemeris *) 0 ;
    short result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:EngEphemeris_getFitInterval",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__EngEphemeris, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        result = (short)((gpstk::EngEphemeris const *)arg1)->getFitInterval();
    }
    catch(gpstk::InvalidRequest &_e) {
        {
            gpstk::InvalidRequest * temp = new gpstk::InvalidRequest(_e);
            if (SWIGTYPE_p_gpstk__InvalidRequest->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_gpstk__InvalidRequest->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__InvalidRequest,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"gpstk::InvalidRequest");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__InvalidRequest,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    {
        resultobj = SWIG_From_short((short)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_EngEphemeris_getTLMPreamble(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::EngEphemeris *arg1 = (gpstk::EngEphemeris *) 0 ;
    unsigned char result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:EngEphemeris_getTLMPreamble",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__EngEphemeris, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (unsigned char)((gpstk::EngEphemeris const *)arg1)->getTLMPreamble();
    
    {
        resultobj = SWIG_From_unsigned_SS_char((unsigned char)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_EngEphemeris_getTLMMessage(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::EngEphemeris *arg1 = (gpstk::EngEphemeris *) 0 ;
    short arg2 ;
    unsigned int result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:EngEphemeris_getTLMMessage",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__EngEphemeris, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (short)(SWIG_As_short(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        result = (unsigned int)((gpstk::EngEphemeris const *)arg1)->getTLMMessage(arg2);
    }
    catch(gpstk::InvalidRequest &_e) {
        {
            gpstk::InvalidRequest * temp = new gpstk::InvalidRequest(_e);
            if (SWIGTYPE_p_gpstk__InvalidRequest->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_gpstk__InvalidRequest->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__InvalidRequest,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"gpstk::InvalidRequest");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__InvalidRequest,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    {
        resultobj = SWIG_From_unsigned_SS_int((unsigned int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_EngEphemeris_getEphemerisEpoch(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::EngEphemeris *arg1 = (gpstk::EngEphemeris *) 0 ;
    DayTime result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:EngEphemeris_getEphemerisEpoch",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__EngEphemeris, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        result = ((gpstk::EngEphemeris const *)arg1)->getEphemerisEpoch();
    }
    catch(gpstk::InvalidRequest &_e) {
        {
            gpstk::InvalidRequest * temp = new gpstk::InvalidRequest(_e);
            if (SWIGTYPE_p_gpstk__InvalidRequest->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_gpstk__InvalidRequest->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__InvalidRequest,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"gpstk::InvalidRequest");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__InvalidRequest,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    {
        DayTime * resultptr;
        resultptr = new DayTime((DayTime &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_gpstk__DayTime, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_EngEphemeris_getEpochTime(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::EngEphemeris *arg1 = (gpstk::EngEphemeris *) 0 ;
    DayTime result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:EngEphemeris_getEpochTime",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__EngEphemeris, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        result = ((gpstk::EngEphemeris const *)arg1)->getEpochTime();
    }
    catch(gpstk::InvalidRequest &_e) {
        {
            gpstk::InvalidRequest * temp = new gpstk::InvalidRequest(_e);
            if (SWIGTYPE_p_gpstk__InvalidRequest->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_gpstk__InvalidRequest->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__InvalidRequest,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"gpstk::InvalidRequest");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__InvalidRequest,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    {
        DayTime * resultptr;
        resultptr = new DayTime((DayTime &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_gpstk__DayTime, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_EngEphemeris_getTransmitTime(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::EngEphemeris *arg1 = (gpstk::EngEphemeris *) 0 ;
    DayTime result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:EngEphemeris_getTransmitTime",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__EngEphemeris, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        result = ((gpstk::EngEphemeris const *)arg1)->getTransmitTime();
    }
    catch(gpstk::InvalidRequest &_e) {
        {
            gpstk::InvalidRequest * temp = new gpstk::InvalidRequest(_e);
            if (SWIGTYPE_p_gpstk__InvalidRequest->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_gpstk__InvalidRequest->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__InvalidRequest,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"gpstk::InvalidRequest");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__InvalidRequest,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    {
        DayTime * resultptr;
        resultptr = new DayTime((DayTime &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_gpstk__DayTime, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_EngEphemeris_getTimestamp(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::EngEphemeris *arg1 = (gpstk::EngEphemeris *) 0 ;
    DayTime result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:EngEphemeris_getTimestamp",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__EngEphemeris, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        result = ((gpstk::EngEphemeris const *)arg1)->getTimestamp();
    }
    catch(gpstk::InvalidRequest &_e) {
        {
            gpstk::InvalidRequest * temp = new gpstk::InvalidRequest(_e);
            if (SWIGTYPE_p_gpstk__InvalidRequest->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_gpstk__InvalidRequest->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__InvalidRequest,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"gpstk::InvalidRequest");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__InvalidRequest,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    {
        DayTime * resultptr;
        resultptr = new DayTime((DayTime &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_gpstk__DayTime, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_EngEphemeris_getPRNID(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::EngEphemeris *arg1 = (gpstk::EngEphemeris *) 0 ;
    short result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:EngEphemeris_getPRNID",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__EngEphemeris, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        result = (short)((gpstk::EngEphemeris const *)arg1)->getPRNID();
    }
    catch(gpstk::InvalidRequest &_e) {
        {
            gpstk::InvalidRequest * temp = new gpstk::InvalidRequest(_e);
            if (SWIGTYPE_p_gpstk__InvalidRequest->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_gpstk__InvalidRequest->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__InvalidRequest,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"gpstk::InvalidRequest");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__InvalidRequest,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    {
        resultobj = SWIG_From_short((short)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_EngEphemeris_getTracker(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::EngEphemeris *arg1 = (gpstk::EngEphemeris *) 0 ;
    short result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:EngEphemeris_getTracker",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__EngEphemeris, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        result = (short)((gpstk::EngEphemeris const *)arg1)->getTracker();
    }
    catch(gpstk::InvalidRequest &_e) {
        {
            gpstk::InvalidRequest * temp = new gpstk::InvalidRequest(_e);
            if (SWIGTYPE_p_gpstk__InvalidRequest->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_gpstk__InvalidRequest->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__InvalidRequest,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"gpstk::InvalidRequest");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__InvalidRequest,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    {
        resultobj = SWIG_From_short((short)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_EngEphemeris_getHOWTime(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::EngEphemeris *arg1 = (gpstk::EngEphemeris *) 0 ;
    short arg2 ;
    double result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:EngEphemeris_getHOWTime",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__EngEphemeris, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (short)(SWIG_As_short(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        result = (double)((gpstk::EngEphemeris const *)arg1)->getHOWTime(arg2);
    }
    catch(gpstk::InvalidRequest &_e) {
        {
            gpstk::InvalidRequest * temp = new gpstk::InvalidRequest(_e);
            if (SWIGTYPE_p_gpstk__InvalidRequest->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_gpstk__InvalidRequest->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__InvalidRequest,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"gpstk::InvalidRequest");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__InvalidRequest,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_EngEphemeris_getASAlert(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::EngEphemeris *arg1 = (gpstk::EngEphemeris *) 0 ;
    short arg2 ;
    short result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:EngEphemeris_getASAlert",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__EngEphemeris, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (short)(SWIG_As_short(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        result = (short)((gpstk::EngEphemeris const *)arg1)->getASAlert(arg2);
    }
    catch(gpstk::InvalidRequest &_e) {
        {
            gpstk::InvalidRequest * temp = new gpstk::InvalidRequest(_e);
            if (SWIGTYPE_p_gpstk__InvalidRequest->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_gpstk__InvalidRequest->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__InvalidRequest,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"gpstk::InvalidRequest");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__InvalidRequest,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    {
        resultobj = SWIG_From_short((short)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_EngEphemeris_getFullWeek(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::EngEphemeris *arg1 = (gpstk::EngEphemeris *) 0 ;
    short result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:EngEphemeris_getFullWeek",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__EngEphemeris, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        result = (short)((gpstk::EngEphemeris const *)arg1)->getFullWeek();
    }
    catch(gpstk::InvalidRequest &_e) {
        {
            gpstk::InvalidRequest * temp = new gpstk::InvalidRequest(_e);
            if (SWIGTYPE_p_gpstk__InvalidRequest->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_gpstk__InvalidRequest->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__InvalidRequest,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"gpstk::InvalidRequest");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__InvalidRequest,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    {
        resultobj = SWIG_From_short((short)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_EngEphemeris_getCodeFlags(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::EngEphemeris *arg1 = (gpstk::EngEphemeris *) 0 ;
    short result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:EngEphemeris_getCodeFlags",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__EngEphemeris, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        result = (short)((gpstk::EngEphemeris const *)arg1)->getCodeFlags();
    }
    catch(gpstk::InvalidRequest &_e) {
        {
            gpstk::InvalidRequest * temp = new gpstk::InvalidRequest(_e);
            if (SWIGTYPE_p_gpstk__InvalidRequest->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_gpstk__InvalidRequest->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__InvalidRequest,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"gpstk::InvalidRequest");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__InvalidRequest,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    {
        resultobj = SWIG_From_short((short)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_EngEphemeris_getAccuracy(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::EngEphemeris *arg1 = (gpstk::EngEphemeris *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:EngEphemeris_getAccuracy",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__EngEphemeris, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        result = (double)((gpstk::EngEphemeris const *)arg1)->getAccuracy();
    }
    catch(gpstk::InvalidRequest &_e) {
        {
            gpstk::InvalidRequest * temp = new gpstk::InvalidRequest(_e);
            if (SWIGTYPE_p_gpstk__InvalidRequest->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_gpstk__InvalidRequest->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__InvalidRequest,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"gpstk::InvalidRequest");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__InvalidRequest,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_EngEphemeris_getAccFlag(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::EngEphemeris *arg1 = (gpstk::EngEphemeris *) 0 ;
    short result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:EngEphemeris_getAccFlag",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__EngEphemeris, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        result = (short)((gpstk::EngEphemeris const *)arg1)->getAccFlag();
    }
    catch(gpstk::InvalidRequest &_e) {
        {
            gpstk::InvalidRequest * temp = new gpstk::InvalidRequest(_e);
            if (SWIGTYPE_p_gpstk__InvalidRequest->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_gpstk__InvalidRequest->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__InvalidRequest,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"gpstk::InvalidRequest");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__InvalidRequest,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    {
        resultobj = SWIG_From_short((short)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_EngEphemeris_getHealth(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::EngEphemeris *arg1 = (gpstk::EngEphemeris *) 0 ;
    short result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:EngEphemeris_getHealth",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__EngEphemeris, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        result = (short)((gpstk::EngEphemeris const *)arg1)->getHealth();
    }
    catch(gpstk::InvalidRequest &_e) {
        {
            gpstk::InvalidRequest * temp = new gpstk::InvalidRequest(_e);
            if (SWIGTYPE_p_gpstk__InvalidRequest->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_gpstk__InvalidRequest->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__InvalidRequest,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"gpstk::InvalidRequest");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__InvalidRequest,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    {
        resultobj = SWIG_From_short((short)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_EngEphemeris_getL2Pdata(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::EngEphemeris *arg1 = (gpstk::EngEphemeris *) 0 ;
    short result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:EngEphemeris_getL2Pdata",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__EngEphemeris, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        result = (short)((gpstk::EngEphemeris const *)arg1)->getL2Pdata();
    }
    catch(gpstk::InvalidRequest &_e) {
        {
            gpstk::InvalidRequest * temp = new gpstk::InvalidRequest(_e);
            if (SWIGTYPE_p_gpstk__InvalidRequest->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_gpstk__InvalidRequest->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__InvalidRequest,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"gpstk::InvalidRequest");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__InvalidRequest,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    {
        resultobj = SWIG_From_short((short)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_EngEphemeris_getIODC(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::EngEphemeris *arg1 = (gpstk::EngEphemeris *) 0 ;
    short result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:EngEphemeris_getIODC",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__EngEphemeris, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        result = (short)((gpstk::EngEphemeris const *)arg1)->getIODC();
    }
    catch(gpstk::InvalidRequest &_e) {
        {
            gpstk::InvalidRequest * temp = new gpstk::InvalidRequest(_e);
            if (SWIGTYPE_p_gpstk__InvalidRequest->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_gpstk__InvalidRequest->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__InvalidRequest,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"gpstk::InvalidRequest");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__InvalidRequest,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    {
        resultobj = SWIG_From_short((short)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_EngEphemeris_getIODE(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::EngEphemeris *arg1 = (gpstk::EngEphemeris *) 0 ;
    short result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:EngEphemeris_getIODE",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__EngEphemeris, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        result = (short)((gpstk::EngEphemeris const *)arg1)->getIODE();
    }
    catch(gpstk::InvalidRequest &_e) {
        {
            gpstk::InvalidRequest * temp = new gpstk::InvalidRequest(_e);
            if (SWIGTYPE_p_gpstk__InvalidRequest->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_gpstk__InvalidRequest->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__InvalidRequest,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"gpstk::InvalidRequest");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__InvalidRequest,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    {
        resultobj = SWIG_From_short((short)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_EngEphemeris_getToc(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::EngEphemeris *arg1 = (gpstk::EngEphemeris *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:EngEphemeris_getToc",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__EngEphemeris, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        result = (double)((gpstk::EngEphemeris const *)arg1)->getToc();
    }
    catch(gpstk::InvalidRequest &_e) {
        {
            gpstk::InvalidRequest * temp = new gpstk::InvalidRequest(_e);
            if (SWIGTYPE_p_gpstk__InvalidRequest->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_gpstk__InvalidRequest->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__InvalidRequest,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"gpstk::InvalidRequest");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__InvalidRequest,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_EngEphemeris_getAf0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::EngEphemeris *arg1 = (gpstk::EngEphemeris *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:EngEphemeris_getAf0",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__EngEphemeris, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        result = (double)((gpstk::EngEphemeris const *)arg1)->getAf0();
    }
    catch(gpstk::InvalidRequest &_e) {
        {
            gpstk::InvalidRequest * temp = new gpstk::InvalidRequest(_e);
            if (SWIGTYPE_p_gpstk__InvalidRequest->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_gpstk__InvalidRequest->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__InvalidRequest,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"gpstk::InvalidRequest");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__InvalidRequest,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_EngEphemeris_getAf1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::EngEphemeris *arg1 = (gpstk::EngEphemeris *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:EngEphemeris_getAf1",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__EngEphemeris, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        result = (double)((gpstk::EngEphemeris const *)arg1)->getAf1();
    }
    catch(gpstk::InvalidRequest &_e) {
        {
            gpstk::InvalidRequest * temp = new gpstk::InvalidRequest(_e);
            if (SWIGTYPE_p_gpstk__InvalidRequest->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_gpstk__InvalidRequest->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__InvalidRequest,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"gpstk::InvalidRequest");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__InvalidRequest,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_EngEphemeris_getAf2(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::EngEphemeris *arg1 = (gpstk::EngEphemeris *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:EngEphemeris_getAf2",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__EngEphemeris, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        result = (double)((gpstk::EngEphemeris const *)arg1)->getAf2();
    }
    catch(gpstk::InvalidRequest &_e) {
        {
            gpstk::InvalidRequest * temp = new gpstk::InvalidRequest(_e);
            if (SWIGTYPE_p_gpstk__InvalidRequest->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_gpstk__InvalidRequest->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__InvalidRequest,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"gpstk::InvalidRequest");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__InvalidRequest,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_EngEphemeris_getTgd(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::EngEphemeris *arg1 = (gpstk::EngEphemeris *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:EngEphemeris_getTgd",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__EngEphemeris, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        result = (double)((gpstk::EngEphemeris const *)arg1)->getTgd();
    }
    catch(gpstk::InvalidRequest &_e) {
        {
            gpstk::InvalidRequest * temp = new gpstk::InvalidRequest(_e);
            if (SWIGTYPE_p_gpstk__InvalidRequest->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_gpstk__InvalidRequest->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__InvalidRequest,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"gpstk::InvalidRequest");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__InvalidRequest,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_EngEphemeris_getCus(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::EngEphemeris *arg1 = (gpstk::EngEphemeris *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:EngEphemeris_getCus",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__EngEphemeris, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        result = (double)((gpstk::EngEphemeris const *)arg1)->getCus();
    }
    catch(gpstk::InvalidRequest &_e) {
        {
            gpstk::InvalidRequest * temp = new gpstk::InvalidRequest(_e);
            if (SWIGTYPE_p_gpstk__InvalidRequest->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_gpstk__InvalidRequest->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__InvalidRequest,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"gpstk::InvalidRequest");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__InvalidRequest,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_EngEphemeris_getCrs(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::EngEphemeris *arg1 = (gpstk::EngEphemeris *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:EngEphemeris_getCrs",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__EngEphemeris, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        result = (double)((gpstk::EngEphemeris const *)arg1)->getCrs();
    }
    catch(gpstk::InvalidRequest &_e) {
        {
            gpstk::InvalidRequest * temp = new gpstk::InvalidRequest(_e);
            if (SWIGTYPE_p_gpstk__InvalidRequest->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_gpstk__InvalidRequest->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__InvalidRequest,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"gpstk::InvalidRequest");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__InvalidRequest,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_EngEphemeris_getCis(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::EngEphemeris *arg1 = (gpstk::EngEphemeris *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:EngEphemeris_getCis",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__EngEphemeris, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        result = (double)((gpstk::EngEphemeris const *)arg1)->getCis();
    }
    catch(gpstk::InvalidRequest &_e) {
        {
            gpstk::InvalidRequest * temp = new gpstk::InvalidRequest(_e);
            if (SWIGTYPE_p_gpstk__InvalidRequest->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_gpstk__InvalidRequest->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__InvalidRequest,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"gpstk::InvalidRequest");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__InvalidRequest,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_EngEphemeris_getCrc(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::EngEphemeris *arg1 = (gpstk::EngEphemeris *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:EngEphemeris_getCrc",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__EngEphemeris, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        result = (double)((gpstk::EngEphemeris const *)arg1)->getCrc();
    }
    catch(gpstk::InvalidRequest &_e) {
        {
            gpstk::InvalidRequest * temp = new gpstk::InvalidRequest(_e);
            if (SWIGTYPE_p_gpstk__InvalidRequest->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_gpstk__InvalidRequest->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__InvalidRequest,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"gpstk::InvalidRequest");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__InvalidRequest,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_EngEphemeris_getCuc(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::EngEphemeris *arg1 = (gpstk::EngEphemeris *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:EngEphemeris_getCuc",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__EngEphemeris, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        result = (double)((gpstk::EngEphemeris const *)arg1)->getCuc();
    }
    catch(gpstk::InvalidRequest &_e) {
        {
            gpstk::InvalidRequest * temp = new gpstk::InvalidRequest(_e);
            if (SWIGTYPE_p_gpstk__InvalidRequest->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_gpstk__InvalidRequest->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__InvalidRequest,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"gpstk::InvalidRequest");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__InvalidRequest,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_EngEphemeris_getCic(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::EngEphemeris *arg1 = (gpstk::EngEphemeris *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:EngEphemeris_getCic",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__EngEphemeris, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        result = (double)((gpstk::EngEphemeris const *)arg1)->getCic();
    }
    catch(gpstk::InvalidRequest &_e) {
        {
            gpstk::InvalidRequest * temp = new gpstk::InvalidRequest(_e);
            if (SWIGTYPE_p_gpstk__InvalidRequest->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_gpstk__InvalidRequest->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__InvalidRequest,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"gpstk::InvalidRequest");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__InvalidRequest,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_EngEphemeris_getToe(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::EngEphemeris *arg1 = (gpstk::EngEphemeris *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:EngEphemeris_getToe",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__EngEphemeris, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        result = (double)((gpstk::EngEphemeris const *)arg1)->getToe();
    }
    catch(gpstk::InvalidRequest &_e) {
        {
            gpstk::InvalidRequest * temp = new gpstk::InvalidRequest(_e);
            if (SWIGTYPE_p_gpstk__InvalidRequest->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_gpstk__InvalidRequest->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__InvalidRequest,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"gpstk::InvalidRequest");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__InvalidRequest,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_EngEphemeris_getM0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::EngEphemeris *arg1 = (gpstk::EngEphemeris *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:EngEphemeris_getM0",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__EngEphemeris, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        result = (double)((gpstk::EngEphemeris const *)arg1)->getM0();
    }
    catch(gpstk::InvalidRequest &_e) {
        {
            gpstk::InvalidRequest * temp = new gpstk::InvalidRequest(_e);
            if (SWIGTYPE_p_gpstk__InvalidRequest->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_gpstk__InvalidRequest->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__InvalidRequest,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"gpstk::InvalidRequest");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__InvalidRequest,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_EngEphemeris_getDn(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::EngEphemeris *arg1 = (gpstk::EngEphemeris *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:EngEphemeris_getDn",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__EngEphemeris, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        result = (double)((gpstk::EngEphemeris const *)arg1)->getDn();
    }
    catch(gpstk::InvalidRequest &_e) {
        {
            gpstk::InvalidRequest * temp = new gpstk::InvalidRequest(_e);
            if (SWIGTYPE_p_gpstk__InvalidRequest->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_gpstk__InvalidRequest->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__InvalidRequest,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"gpstk::InvalidRequest");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__InvalidRequest,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_EngEphemeris_getEcc(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::EngEphemeris *arg1 = (gpstk::EngEphemeris *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:EngEphemeris_getEcc",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__EngEphemeris, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        result = (double)((gpstk::EngEphemeris const *)arg1)->getEcc();
    }
    catch(gpstk::InvalidRequest &_e) {
        {
            gpstk::InvalidRequest * temp = new gpstk::InvalidRequest(_e);
            if (SWIGTYPE_p_gpstk__InvalidRequest->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_gpstk__InvalidRequest->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__InvalidRequest,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"gpstk::InvalidRequest");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__InvalidRequest,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_EngEphemeris_getAhalf(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::EngEphemeris *arg1 = (gpstk::EngEphemeris *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:EngEphemeris_getAhalf",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__EngEphemeris, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        result = (double)((gpstk::EngEphemeris const *)arg1)->getAhalf();
    }
    catch(gpstk::InvalidRequest &_e) {
        {
            gpstk::InvalidRequest * temp = new gpstk::InvalidRequest(_e);
            if (SWIGTYPE_p_gpstk__InvalidRequest->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_gpstk__InvalidRequest->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__InvalidRequest,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"gpstk::InvalidRequest");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__InvalidRequest,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_EngEphemeris_getA(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::EngEphemeris *arg1 = (gpstk::EngEphemeris *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:EngEphemeris_getA",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__EngEphemeris, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        result = (double)((gpstk::EngEphemeris const *)arg1)->getA();
    }
    catch(gpstk::InvalidRequest &_e) {
        {
            gpstk::InvalidRequest * temp = new gpstk::InvalidRequest(_e);
            if (SWIGTYPE_p_gpstk__InvalidRequest->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_gpstk__InvalidRequest->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__InvalidRequest,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"gpstk::InvalidRequest");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__InvalidRequest,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_EngEphemeris_getOmega0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::EngEphemeris *arg1 = (gpstk::EngEphemeris *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:EngEphemeris_getOmega0",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__EngEphemeris, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        result = (double)((gpstk::EngEphemeris const *)arg1)->getOmega0();
    }
    catch(gpstk::InvalidRequest &_e) {
        {
            gpstk::InvalidRequest * temp = new gpstk::InvalidRequest(_e);
            if (SWIGTYPE_p_gpstk__InvalidRequest->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_gpstk__InvalidRequest->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__InvalidRequest,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"gpstk::InvalidRequest");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__InvalidRequest,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_EngEphemeris_getI0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::EngEphemeris *arg1 = (gpstk::EngEphemeris *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:EngEphemeris_getI0",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__EngEphemeris, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        result = (double)((gpstk::EngEphemeris const *)arg1)->getI0();
    }
    catch(gpstk::InvalidRequest &_e) {
        {
            gpstk::InvalidRequest * temp = new gpstk::InvalidRequest(_e);
            if (SWIGTYPE_p_gpstk__InvalidRequest->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_gpstk__InvalidRequest->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__InvalidRequest,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"gpstk::InvalidRequest");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__InvalidRequest,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_EngEphemeris_getW(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::EngEphemeris *arg1 = (gpstk::EngEphemeris *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:EngEphemeris_getW",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__EngEphemeris, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        result = (double)((gpstk::EngEphemeris const *)arg1)->getW();
    }
    catch(gpstk::InvalidRequest &_e) {
        {
            gpstk::InvalidRequest * temp = new gpstk::InvalidRequest(_e);
            if (SWIGTYPE_p_gpstk__InvalidRequest->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_gpstk__InvalidRequest->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__InvalidRequest,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"gpstk::InvalidRequest");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__InvalidRequest,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_EngEphemeris_getOmegaDot(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::EngEphemeris *arg1 = (gpstk::EngEphemeris *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:EngEphemeris_getOmegaDot",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__EngEphemeris, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        result = (double)((gpstk::EngEphemeris const *)arg1)->getOmegaDot();
    }
    catch(gpstk::InvalidRequest &_e) {
        {
            gpstk::InvalidRequest * temp = new gpstk::InvalidRequest(_e);
            if (SWIGTYPE_p_gpstk__InvalidRequest->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_gpstk__InvalidRequest->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__InvalidRequest,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"gpstk::InvalidRequest");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__InvalidRequest,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_EngEphemeris_getIDot(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::EngEphemeris *arg1 = (gpstk::EngEphemeris *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:EngEphemeris_getIDot",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__EngEphemeris, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        result = (double)((gpstk::EngEphemeris const *)arg1)->getIDot();
    }
    catch(gpstk::InvalidRequest &_e) {
        {
            gpstk::InvalidRequest * temp = new gpstk::InvalidRequest(_e);
            if (SWIGTYPE_p_gpstk__InvalidRequest->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_gpstk__InvalidRequest->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__InvalidRequest,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"gpstk::InvalidRequest");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__InvalidRequest,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_EngEphemeris_svXvt(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::EngEphemeris *arg1 = (gpstk::EngEphemeris *) 0 ;
    DayTime *arg2 = 0 ;
    gpstk::Xvt result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:EngEphemeris_svXvt",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__EngEphemeris, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_gpstk__DayTime, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("DayTime");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        result = ((gpstk::EngEphemeris const *)arg1)->svXvt((DayTime const &)*arg2);
    }
    catch(gpstk::InvalidRequest &_e) {
        {
            gpstk::InvalidRequest * temp = new gpstk::InvalidRequest(_e);
            if (SWIGTYPE_p_gpstk__InvalidRequest->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_gpstk__InvalidRequest->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__InvalidRequest,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"gpstk::InvalidRequest");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__InvalidRequest,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    {
        gpstk::Xvt * resultptr;
        resultptr = new gpstk::Xvt((gpstk::Xvt &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_gpstk__Xvt, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_EngEphemeris_svRelativity(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::EngEphemeris *arg1 = (gpstk::EngEphemeris *) 0 ;
    DayTime *arg2 = 0 ;
    double result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:EngEphemeris_svRelativity",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__EngEphemeris, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_gpstk__DayTime, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("DayTime");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        result = (double)((gpstk::EngEphemeris const *)arg1)->svRelativity((DayTime const &)*arg2);
    }
    catch(gpstk::InvalidRequest &_e) {
        {
            gpstk::InvalidRequest * temp = new gpstk::InvalidRequest(_e);
            if (SWIGTYPE_p_gpstk__InvalidRequest->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_gpstk__InvalidRequest->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__InvalidRequest,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"gpstk::InvalidRequest");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__InvalidRequest,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_EngEphemeris_svClockBias(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::EngEphemeris *arg1 = (gpstk::EngEphemeris *) 0 ;
    DayTime *arg2 = 0 ;
    double result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:EngEphemeris_svClockBias",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__EngEphemeris, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_gpstk__DayTime, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("DayTime");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        result = (double)((gpstk::EngEphemeris const *)arg1)->svClockBias((DayTime const &)*arg2);
    }
    catch(gpstk::InvalidRequest &_e) {
        {
            gpstk::InvalidRequest * temp = new gpstk::InvalidRequest(_e);
            if (SWIGTYPE_p_gpstk__InvalidRequest->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_gpstk__InvalidRequest->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__InvalidRequest,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"gpstk::InvalidRequest");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__InvalidRequest,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_EngEphemeris_svClockDrift(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::EngEphemeris *arg1 = (gpstk::EngEphemeris *) 0 ;
    DayTime *arg2 = 0 ;
    double result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:EngEphemeris_svClockDrift",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__EngEphemeris, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_gpstk__DayTime, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("DayTime");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        result = (double)((gpstk::EngEphemeris const *)arg1)->svClockDrift((DayTime const &)*arg2);
    }
    catch(gpstk::InvalidRequest &_e) {
        {
            gpstk::InvalidRequest * temp = new gpstk::InvalidRequest(_e);
            if (SWIGTYPE_p_gpstk__InvalidRequest->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_gpstk__InvalidRequest->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__InvalidRequest,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"gpstk::InvalidRequest");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__InvalidRequest,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_EngEphemeris_getFitInt(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::EngEphemeris *arg1 = (gpstk::EngEphemeris *) 0 ;
    short result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:EngEphemeris_getFitInt",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__EngEphemeris, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        result = (short)((gpstk::EngEphemeris const *)arg1)->getFitInt();
    }
    catch(gpstk::InvalidRequest &_e) {
        {
            gpstk::InvalidRequest * temp = new gpstk::InvalidRequest(_e);
            if (SWIGTYPE_p_gpstk__InvalidRequest->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_gpstk__InvalidRequest->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__InvalidRequest,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"gpstk::InvalidRequest");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__InvalidRequest,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    {
        resultobj = SWIG_From_short((short)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_EngEphemeris_getTot(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::EngEphemeris *arg1 = (gpstk::EngEphemeris *) 0 ;
    long result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:EngEphemeris_getTot",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__EngEphemeris, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        result = (long)((gpstk::EngEphemeris const *)arg1)->getTot();
    }
    catch(gpstk::InvalidRequest &_e) {
        {
            gpstk::InvalidRequest * temp = new gpstk::InvalidRequest(_e);
            if (SWIGTYPE_p_gpstk__InvalidRequest->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_gpstk__InvalidRequest->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__InvalidRequest,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"gpstk::InvalidRequest");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__InvalidRequest,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    {
        resultobj = SWIG_From_long((long)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_EngEphemeris_setSF1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::EngEphemeris *arg1 = (gpstk::EngEphemeris *) 0 ;
    unsigned int arg2 ;
    double arg3 ;
    short arg4 ;
    short arg5 ;
    short arg6 ;
    short arg7 ;
    short arg8 ;
    short arg9 ;
    short arg10 ;
    double arg11 ;
    double arg12 ;
    double arg13 ;
    double arg14 ;
    double arg15 ;
    short arg16 ;
    short arg17 ;
    gpstk::EngEphemeris *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    PyObject * obj5 = 0 ;
    PyObject * obj6 = 0 ;
    PyObject * obj7 = 0 ;
    PyObject * obj8 = 0 ;
    PyObject * obj9 = 0 ;
    PyObject * obj10 = 0 ;
    PyObject * obj11 = 0 ;
    PyObject * obj12 = 0 ;
    PyObject * obj13 = 0 ;
    PyObject * obj14 = 0 ;
    PyObject * obj15 = 0 ;
    PyObject * obj16 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOOOOOOOOOOOOOO:EngEphemeris_setSF1",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8,&obj9,&obj10,&obj11,&obj12,&obj13,&obj14,&obj15,&obj16)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__EngEphemeris, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (unsigned int)(SWIG_As_unsigned_SS_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (double)(SWIG_As_double(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = (short)(SWIG_As_short(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    {
        arg5 = (short)(SWIG_As_short(obj4)); 
        if (SWIG_arg_fail(5)) SWIG_fail;
    }
    {
        arg6 = (short)(SWIG_As_short(obj5)); 
        if (SWIG_arg_fail(6)) SWIG_fail;
    }
    {
        arg7 = (short)(SWIG_As_short(obj6)); 
        if (SWIG_arg_fail(7)) SWIG_fail;
    }
    {
        arg8 = (short)(SWIG_As_short(obj7)); 
        if (SWIG_arg_fail(8)) SWIG_fail;
    }
    {
        arg9 = (short)(SWIG_As_short(obj8)); 
        if (SWIG_arg_fail(9)) SWIG_fail;
    }
    {
        arg10 = (short)(SWIG_As_short(obj9)); 
        if (SWIG_arg_fail(10)) SWIG_fail;
    }
    {
        arg11 = (double)(SWIG_As_double(obj10)); 
        if (SWIG_arg_fail(11)) SWIG_fail;
    }
    {
        arg12 = (double)(SWIG_As_double(obj11)); 
        if (SWIG_arg_fail(12)) SWIG_fail;
    }
    {
        arg13 = (double)(SWIG_As_double(obj12)); 
        if (SWIG_arg_fail(13)) SWIG_fail;
    }
    {
        arg14 = (double)(SWIG_As_double(obj13)); 
        if (SWIG_arg_fail(14)) SWIG_fail;
    }
    {
        arg15 = (double)(SWIG_As_double(obj14)); 
        if (SWIG_arg_fail(15)) SWIG_fail;
    }
    {
        arg16 = (short)(SWIG_As_short(obj15)); 
        if (SWIG_arg_fail(16)) SWIG_fail;
    }
    {
        arg17 = (short)(SWIG_As_short(obj16)); 
        if (SWIG_arg_fail(17)) SWIG_fail;
    }
    {
        gpstk::EngEphemeris &_result_ref = (arg1)->setSF1(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16,arg17);
        result = (gpstk::EngEphemeris *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__EngEphemeris, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_EngEphemeris_setSF2(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::EngEphemeris *arg1 = (gpstk::EngEphemeris *) 0 ;
    unsigned int arg2 ;
    double arg3 ;
    short arg4 ;
    short arg5 ;
    double arg6 ;
    double arg7 ;
    double arg8 ;
    double arg9 ;
    double arg10 ;
    double arg11 ;
    double arg12 ;
    double arg13 ;
    short arg14 ;
    gpstk::EngEphemeris *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    PyObject * obj5 = 0 ;
    PyObject * obj6 = 0 ;
    PyObject * obj7 = 0 ;
    PyObject * obj8 = 0 ;
    PyObject * obj9 = 0 ;
    PyObject * obj10 = 0 ;
    PyObject * obj11 = 0 ;
    PyObject * obj12 = 0 ;
    PyObject * obj13 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOOOOOOOOOOO:EngEphemeris_setSF2",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8,&obj9,&obj10,&obj11,&obj12,&obj13)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__EngEphemeris, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (unsigned int)(SWIG_As_unsigned_SS_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (double)(SWIG_As_double(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = (short)(SWIG_As_short(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    {
        arg5 = (short)(SWIG_As_short(obj4)); 
        if (SWIG_arg_fail(5)) SWIG_fail;
    }
    {
        arg6 = (double)(SWIG_As_double(obj5)); 
        if (SWIG_arg_fail(6)) SWIG_fail;
    }
    {
        arg7 = (double)(SWIG_As_double(obj6)); 
        if (SWIG_arg_fail(7)) SWIG_fail;
    }
    {
        arg8 = (double)(SWIG_As_double(obj7)); 
        if (SWIG_arg_fail(8)) SWIG_fail;
    }
    {
        arg9 = (double)(SWIG_As_double(obj8)); 
        if (SWIG_arg_fail(9)) SWIG_fail;
    }
    {
        arg10 = (double)(SWIG_As_double(obj9)); 
        if (SWIG_arg_fail(10)) SWIG_fail;
    }
    {
        arg11 = (double)(SWIG_As_double(obj10)); 
        if (SWIG_arg_fail(11)) SWIG_fail;
    }
    {
        arg12 = (double)(SWIG_As_double(obj11)); 
        if (SWIG_arg_fail(12)) SWIG_fail;
    }
    {
        arg13 = (double)(SWIG_As_double(obj12)); 
        if (SWIG_arg_fail(13)) SWIG_fail;
    }
    {
        arg14 = (short)(SWIG_As_short(obj13)); 
        if (SWIG_arg_fail(14)) SWIG_fail;
    }
    {
        gpstk::EngEphemeris &_result_ref = (arg1)->setSF2(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14);
        result = (gpstk::EngEphemeris *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__EngEphemeris, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_EngEphemeris_setSF3(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::EngEphemeris *arg1 = (gpstk::EngEphemeris *) 0 ;
    unsigned int arg2 ;
    double arg3 ;
    short arg4 ;
    double arg5 ;
    double arg6 ;
    double arg7 ;
    double arg8 ;
    double arg9 ;
    double arg10 ;
    double arg11 ;
    double arg12 ;
    gpstk::EngEphemeris *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    PyObject * obj5 = 0 ;
    PyObject * obj6 = 0 ;
    PyObject * obj7 = 0 ;
    PyObject * obj8 = 0 ;
    PyObject * obj9 = 0 ;
    PyObject * obj10 = 0 ;
    PyObject * obj11 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOOOOOOOOO:EngEphemeris_setSF3",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8,&obj9,&obj10,&obj11)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__EngEphemeris, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (unsigned int)(SWIG_As_unsigned_SS_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (double)(SWIG_As_double(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = (short)(SWIG_As_short(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    {
        arg5 = (double)(SWIG_As_double(obj4)); 
        if (SWIG_arg_fail(5)) SWIG_fail;
    }
    {
        arg6 = (double)(SWIG_As_double(obj5)); 
        if (SWIG_arg_fail(6)) SWIG_fail;
    }
    {
        arg7 = (double)(SWIG_As_double(obj6)); 
        if (SWIG_arg_fail(7)) SWIG_fail;
    }
    {
        arg8 = (double)(SWIG_As_double(obj7)); 
        if (SWIG_arg_fail(8)) SWIG_fail;
    }
    {
        arg9 = (double)(SWIG_As_double(obj8)); 
        if (SWIG_arg_fail(9)) SWIG_fail;
    }
    {
        arg10 = (double)(SWIG_As_double(obj9)); 
        if (SWIG_arg_fail(10)) SWIG_fail;
    }
    {
        arg11 = (double)(SWIG_As_double(obj10)); 
        if (SWIG_arg_fail(11)) SWIG_fail;
    }
    {
        arg12 = (double)(SWIG_As_double(obj11)); 
        if (SWIG_arg_fail(12)) SWIG_fail;
    }
    {
        gpstk::EngEphemeris &_result_ref = (arg1)->setSF3(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12);
        result = (gpstk::EngEphemeris *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__EngEphemeris, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_EngEphemeris_dump__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::EngEphemeris *arg1 = (gpstk::EngEphemeris *) 0 ;
    std::ostream *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:EngEphemeris_dump",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__EngEphemeris, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("std::ostream");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    ((gpstk::EngEphemeris const *)arg1)->dump(*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_EngEphemeris_dump__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::EngEphemeris *arg1 = (gpstk::EngEphemeris *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:EngEphemeris_dump",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__EngEphemeris, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    ((gpstk::EngEphemeris const *)arg1)->dump();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_EngEphemeris_dump(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_gpstk__EngEphemeris, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_EngEphemeris_dump__SWIG_1(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_gpstk__EngEphemeris, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_EngEphemeris_dump__SWIG_0(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'EngEphemeris_dump'");
    return NULL;
}


static PyObject *_wrap_streamRead__SWIG_13(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::ostream *arg1 = 0 ;
    gpstk::EngEphemeris *arg2 = 0 ;
    std::ostream *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:streamRead",&obj0,&obj1)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("std::ostream");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_gpstk__EngEphemeris, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("gpstk::EngEphemeris");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        std::ostream &_result_ref = operator <<(*arg1,(gpstk::EngEphemeris const &)*arg2);
        result = (std::ostream *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject * EngEphemeris_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_gpstk__EngEphemeris, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static int _wrap_GPSZcount_ZCOUNT_MINUTE_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable GPSZcount_ZCOUNT_MINUTE is read-only.");
    return 1;
}


static PyObject *_wrap_GPSZcount_ZCOUNT_MINUTE_get(void) {
    PyObject *pyobj = NULL;
    
    {
        pyobj = SWIG_From_long((long)(gpstk::GPSZcount::ZCOUNT_MINUTE)); 
    }
    return pyobj;
}


static int _wrap_GPSZcount_ZCOUNT_HOUR_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable GPSZcount_ZCOUNT_HOUR is read-only.");
    return 1;
}


static PyObject *_wrap_GPSZcount_ZCOUNT_HOUR_get(void) {
    PyObject *pyobj = NULL;
    
    {
        pyobj = SWIG_From_long((long)(gpstk::GPSZcount::ZCOUNT_HOUR)); 
    }
    return pyobj;
}


static int _wrap_GPSZcount_ZCOUNT_DAY_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable GPSZcount_ZCOUNT_DAY is read-only.");
    return 1;
}


static PyObject *_wrap_GPSZcount_ZCOUNT_DAY_get(void) {
    PyObject *pyobj = NULL;
    
    {
        pyobj = SWIG_From_long((long)(gpstk::GPSZcount::ZCOUNT_DAY)); 
    }
    return pyobj;
}


static int _wrap_GPSZcount_ZCOUNT_WEEK_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable GPSZcount_ZCOUNT_WEEK is read-only.");
    return 1;
}


static PyObject *_wrap_GPSZcount_ZCOUNT_WEEK_get(void) {
    PyObject *pyobj = NULL;
    
    {
        pyobj = SWIG_From_long((long)(gpstk::GPSZcount::ZCOUNT_WEEK)); 
    }
    return pyobj;
}


static PyObject *_wrap_new_GPSZcount__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    short arg1 ;
    long arg2 ;
    gpstk::GPSZcount *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:new_GPSZcount",&obj0,&obj1)) goto fail;
    {
        arg1 = (short)(SWIG_As_short(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        arg2 = (long)(SWIG_As_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        result = (gpstk::GPSZcount *)new gpstk::GPSZcount(arg1,arg2);
    }
    catch(gpstk::InvalidParameter &_e) {
        {
            gpstk::InvalidParameter * temp = new gpstk::InvalidParameter(_e);
            if (SWIGTYPE_p_gpstk__InvalidParameter->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_gpstk__InvalidParameter->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__InvalidParameter,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"gpstk::InvalidParameter");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__InvalidParameter,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__GPSZcount, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_GPSZcount__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    long arg1 ;
    gpstk::GPSZcount *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_GPSZcount",&obj0)) goto fail;
    {
        arg1 = (long)(SWIG_As_long(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    try {
        result = (gpstk::GPSZcount *)new gpstk::GPSZcount(arg1);
    }
    catch(gpstk::InvalidParameter &_e) {
        {
            gpstk::InvalidParameter * temp = new gpstk::InvalidParameter(_e);
            if (SWIGTYPE_p_gpstk__InvalidParameter->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_gpstk__InvalidParameter->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__InvalidParameter,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"gpstk::InvalidParameter");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__InvalidParameter,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__GPSZcount, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_GPSZcount__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::GPSZcount *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_GPSZcount")) goto fail;
    try {
        result = (gpstk::GPSZcount *)new gpstk::GPSZcount();
    }
    catch(gpstk::InvalidParameter &_e) {
        {
            gpstk::InvalidParameter * temp = new gpstk::InvalidParameter(_e);
            if (SWIGTYPE_p_gpstk__InvalidParameter->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_gpstk__InvalidParameter->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__InvalidParameter,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"gpstk::InvalidParameter");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__InvalidParameter,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__GPSZcount, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_GPSZcount(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::GPSZcount *arg1 = (gpstk::GPSZcount *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_GPSZcount",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__GPSZcount, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_GPSZcount__SWIG_3(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::GPSZcount *arg1 = 0 ;
    gpstk::GPSZcount *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_GPSZcount",&obj0)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__GPSZcount, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("gpstk::GPSZcount");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    result = (gpstk::GPSZcount *)new gpstk::GPSZcount((gpstk::GPSZcount const &)*arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__GPSZcount, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_GPSZcount(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_new_GPSZcount__SWIG_2(self,args);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_gpstk__GPSZcount, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            return _wrap_new_GPSZcount__SWIG_3(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        _v = SWIG_Check_long(argv[0]);
        if (_v) {
            return _wrap_new_GPSZcount__SWIG_1(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        _v = SWIG_Check_short(argv[0]);
        if (_v) {
            _v = SWIG_Check_long(argv[1]);
            if (_v) {
                return _wrap_new_GPSZcount__SWIG_0(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'new_GPSZcount'");
    return NULL;
}


static PyObject *_wrap_GPSZcount_getWeek(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::GPSZcount *arg1 = (gpstk::GPSZcount *) 0 ;
    short result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:GPSZcount_getWeek",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__GPSZcount, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (short)((gpstk::GPSZcount const *)arg1)->getWeek();
    
    {
        resultobj = SWIG_From_short((short)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_GPSZcount_getZcount(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::GPSZcount *arg1 = (gpstk::GPSZcount *) 0 ;
    long result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:GPSZcount_getZcount",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__GPSZcount, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (long)((gpstk::GPSZcount const *)arg1)->getZcount();
    
    {
        resultobj = SWIG_From_long((long)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_GPSZcount_getFullZcount(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::GPSZcount *arg1 = (gpstk::GPSZcount *) 0 ;
    long result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:GPSZcount_getFullZcount",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__GPSZcount, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (long)((gpstk::GPSZcount const *)arg1)->getFullZcount();
    
    {
        resultobj = SWIG_From_long((long)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_GPSZcount_getTotalZcounts(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::GPSZcount *arg1 = (gpstk::GPSZcount *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:GPSZcount_getTotalZcounts",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__GPSZcount, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double)((gpstk::GPSZcount const *)arg1)->getTotalZcounts();
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_GPSZcount_setWeek(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::GPSZcount *arg1 = (gpstk::GPSZcount *) 0 ;
    short arg2 ;
    gpstk::GPSZcount *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:GPSZcount_setWeek",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__GPSZcount, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (short)(SWIG_As_short(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        {
            gpstk::GPSZcount &_result_ref = (arg1)->setWeek(arg2);
            result = (gpstk::GPSZcount *) &_result_ref;
        }
    }
    catch(gpstk::InvalidParameter &_e) {
        {
            gpstk::InvalidParameter * temp = new gpstk::InvalidParameter(_e);
            if (SWIGTYPE_p_gpstk__InvalidParameter->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_gpstk__InvalidParameter->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__InvalidParameter,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"gpstk::InvalidParameter");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__InvalidParameter,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__GPSZcount, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_GPSZcount_setZcount(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::GPSZcount *arg1 = (gpstk::GPSZcount *) 0 ;
    long arg2 ;
    gpstk::GPSZcount *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:GPSZcount_setZcount",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__GPSZcount, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (long)(SWIG_As_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        {
            gpstk::GPSZcount &_result_ref = (arg1)->setZcount(arg2);
            result = (gpstk::GPSZcount *) &_result_ref;
        }
    }
    catch(gpstk::InvalidParameter &_e) {
        {
            gpstk::InvalidParameter * temp = new gpstk::InvalidParameter(_e);
            if (SWIGTYPE_p_gpstk__InvalidParameter->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_gpstk__InvalidParameter->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__InvalidParameter,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"gpstk::InvalidParameter");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__InvalidParameter,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__GPSZcount, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_GPSZcount_setFullZcount(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::GPSZcount *arg1 = (gpstk::GPSZcount *) 0 ;
    long arg2 ;
    gpstk::GPSZcount *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:GPSZcount_setFullZcount",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__GPSZcount, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (long)(SWIG_As_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        {
            gpstk::GPSZcount &_result_ref = (arg1)->setFullZcount(arg2);
            result = (gpstk::GPSZcount *) &_result_ref;
        }
    }
    catch(gpstk::InvalidParameter &_e) {
        {
            gpstk::InvalidParameter * temp = new gpstk::InvalidParameter(_e);
            if (SWIGTYPE_p_gpstk__InvalidParameter->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_gpstk__InvalidParameter->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__InvalidParameter,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"gpstk::InvalidParameter");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__InvalidParameter,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__GPSZcount, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_GPSZcount_addWeeks(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::GPSZcount *arg1 = (gpstk::GPSZcount *) 0 ;
    short arg2 ;
    gpstk::GPSZcount *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:GPSZcount_addWeeks",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__GPSZcount, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (short)(SWIG_As_short(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        {
            gpstk::GPSZcount &_result_ref = (arg1)->addWeeks(arg2);
            result = (gpstk::GPSZcount *) &_result_ref;
        }
    }
    catch(gpstk::InvalidRequest &_e) {
        {
            gpstk::InvalidRequest * temp = new gpstk::InvalidRequest(_e);
            if (SWIGTYPE_p_gpstk__InvalidRequest->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_gpstk__InvalidRequest->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__InvalidRequest,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"gpstk::InvalidRequest");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__InvalidRequest,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__GPSZcount, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_GPSZcount_addZcounts(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::GPSZcount *arg1 = (gpstk::GPSZcount *) 0 ;
    long arg2 ;
    gpstk::GPSZcount *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:GPSZcount_addZcounts",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__GPSZcount, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (long)(SWIG_As_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        {
            gpstk::GPSZcount &_result_ref = (arg1)->addZcounts(arg2);
            result = (gpstk::GPSZcount *) &_result_ref;
        }
    }
    catch(gpstk::InvalidRequest &_e) {
        {
            gpstk::InvalidRequest * temp = new gpstk::InvalidRequest(_e);
            if (SWIGTYPE_p_gpstk__InvalidRequest->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_gpstk__InvalidRequest->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__InvalidRequest,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"gpstk::InvalidRequest");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__InvalidRequest,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__GPSZcount, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_GPSZcount___add__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::GPSZcount *arg1 = (gpstk::GPSZcount *) 0 ;
    long arg2 ;
    gpstk::GPSZcount result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:GPSZcount___add__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__GPSZcount, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (long)(SWIG_As_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        result = ((gpstk::GPSZcount const *)arg1)->operator +(arg2);
    }
    catch(gpstk::InvalidRequest &_e) {
        {
            gpstk::InvalidRequest * temp = new gpstk::InvalidRequest(_e);
            if (SWIGTYPE_p_gpstk__InvalidRequest->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_gpstk__InvalidRequest->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__InvalidRequest,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"gpstk::InvalidRequest");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__InvalidRequest,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    {
        gpstk::GPSZcount * resultptr;
        resultptr = new gpstk::GPSZcount((gpstk::GPSZcount &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_gpstk__GPSZcount, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_GPSZcount___sub____SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::GPSZcount *arg1 = (gpstk::GPSZcount *) 0 ;
    long arg2 ;
    gpstk::GPSZcount result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:GPSZcount___sub__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__GPSZcount, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (long)(SWIG_As_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        result = ((gpstk::GPSZcount const *)arg1)->operator -(arg2);
    }
    catch(gpstk::InvalidRequest &_e) {
        {
            gpstk::InvalidRequest * temp = new gpstk::InvalidRequest(_e);
            if (SWIGTYPE_p_gpstk__InvalidRequest->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_gpstk__InvalidRequest->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__InvalidRequest,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"gpstk::InvalidRequest");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__InvalidRequest,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    {
        gpstk::GPSZcount * resultptr;
        resultptr = new gpstk::GPSZcount((gpstk::GPSZcount &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_gpstk__GPSZcount, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_GPSZcount___sub____SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::GPSZcount *arg1 = (gpstk::GPSZcount *) 0 ;
    gpstk::GPSZcount *arg2 = 0 ;
    double result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:GPSZcount___sub__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__GPSZcount, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_gpstk__GPSZcount, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("gpstk::GPSZcount");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (double)((gpstk::GPSZcount const *)arg1)->operator -((gpstk::GPSZcount const &)*arg2);
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_GPSZcount___sub__(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_gpstk__GPSZcount, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_gpstk__GPSZcount, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_GPSZcount___sub____SWIG_1(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_gpstk__GPSZcount, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_long(argv[1]);
            if (_v) {
                return _wrap_GPSZcount___sub____SWIG_0(self,args);
            }
        }
    }
    
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


static PyObject *_wrap_GPSZcount___iadd__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::GPSZcount *arg1 = (gpstk::GPSZcount *) 0 ;
    long arg2 ;
    gpstk::GPSZcount *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:GPSZcount___iadd__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__GPSZcount, SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (long)(SWIG_As_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        {
            gpstk::GPSZcount &_result_ref = (arg1)->operator +=(arg2);
            result = (gpstk::GPSZcount *) &_result_ref;
        }
    }
    catch(gpstk::InvalidRequest &_e) {
        {
            gpstk::InvalidRequest * temp = new gpstk::InvalidRequest(_e);
            if (SWIGTYPE_p_gpstk__InvalidRequest->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_gpstk__InvalidRequest->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__InvalidRequest,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"gpstk::InvalidRequest");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__InvalidRequest,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__GPSZcount, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_GPSZcount___isub__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::GPSZcount *arg1 = (gpstk::GPSZcount *) 0 ;
    long arg2 ;
    gpstk::GPSZcount *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:GPSZcount___isub__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__GPSZcount, SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (long)(SWIG_As_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        {
            gpstk::GPSZcount &_result_ref = (arg1)->operator -=(arg2);
            result = (gpstk::GPSZcount *) &_result_ref;
        }
    }
    catch(gpstk::InvalidRequest &_e) {
        {
            gpstk::InvalidRequest * temp = new gpstk::InvalidRequest(_e);
            if (SWIGTYPE_p_gpstk__InvalidRequest->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_gpstk__InvalidRequest->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__InvalidRequest,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"gpstk::InvalidRequest");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__InvalidRequest,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__GPSZcount, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_GPSZcount_class_operator_assignment(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::GPSZcount *arg1 = (gpstk::GPSZcount *) 0 ;
    gpstk::GPSZcount *arg2 = 0 ;
    gpstk::GPSZcount *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:GPSZcount_class_operator_assignment",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__GPSZcount, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_gpstk__GPSZcount, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("gpstk::GPSZcount");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        gpstk::GPSZcount &_result_ref = (arg1)->operator =((gpstk::GPSZcount const &)*arg2);
        result = (gpstk::GPSZcount *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__GPSZcount, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_GPSZcount___lt__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::GPSZcount *arg1 = (gpstk::GPSZcount *) 0 ;
    gpstk::GPSZcount *arg2 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:GPSZcount___lt__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__GPSZcount, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_gpstk__GPSZcount, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("gpstk::GPSZcount");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (bool)((gpstk::GPSZcount const *)arg1)->operator <((gpstk::GPSZcount const &)*arg2);
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_GPSZcount___gt__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::GPSZcount *arg1 = (gpstk::GPSZcount *) 0 ;
    gpstk::GPSZcount *arg2 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:GPSZcount___gt__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__GPSZcount, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_gpstk__GPSZcount, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("gpstk::GPSZcount");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (bool)((gpstk::GPSZcount const *)arg1)->operator >((gpstk::GPSZcount const &)*arg2);
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_GPSZcount___eq__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::GPSZcount *arg1 = (gpstk::GPSZcount *) 0 ;
    gpstk::GPSZcount *arg2 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:GPSZcount___eq__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__GPSZcount, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_gpstk__GPSZcount, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("gpstk::GPSZcount");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (bool)((gpstk::GPSZcount const *)arg1)->operator ==((gpstk::GPSZcount const &)*arg2);
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_GPSZcount___ne__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::GPSZcount *arg1 = (gpstk::GPSZcount *) 0 ;
    gpstk::GPSZcount *arg2 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:GPSZcount___ne__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__GPSZcount, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_gpstk__GPSZcount, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("gpstk::GPSZcount");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (bool)((gpstk::GPSZcount const *)arg1)->operator !=((gpstk::GPSZcount const &)*arg2);
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_GPSZcount___le__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::GPSZcount *arg1 = (gpstk::GPSZcount *) 0 ;
    gpstk::GPSZcount *arg2 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:GPSZcount___le__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__GPSZcount, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_gpstk__GPSZcount, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("gpstk::GPSZcount");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (bool)((gpstk::GPSZcount const *)arg1)->operator <=((gpstk::GPSZcount const &)*arg2);
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_GPSZcount___ge__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::GPSZcount *arg1 = (gpstk::GPSZcount *) 0 ;
    gpstk::GPSZcount *arg2 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:GPSZcount___ge__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__GPSZcount, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_gpstk__GPSZcount, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("gpstk::GPSZcount");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (bool)((gpstk::GPSZcount const *)arg1)->operator >=((gpstk::GPSZcount const &)*arg2);
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_GPSZcount_operator_std_string(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::GPSZcount *arg1 = (gpstk::GPSZcount *) 0 ;
    std::string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:GPSZcount_operator_std_string",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__GPSZcount, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = ((gpstk::GPSZcount const *)arg1)->operator std::string();
    
    {
        resultobj = SWIG_From_std_string((std::string)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_GPSZcount_inSameTimeBlock__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::GPSZcount *arg1 = (gpstk::GPSZcount *) 0 ;
    gpstk::GPSZcount *arg2 = 0 ;
    unsigned long arg3 ;
    unsigned long arg4 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:GPSZcount_inSameTimeBlock",&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__GPSZcount, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_gpstk__GPSZcount, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("gpstk::GPSZcount");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (unsigned long)(SWIG_As_unsigned_SS_long(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = (unsigned long)(SWIG_As_unsigned_SS_long(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    result = (bool)(arg1)->inSameTimeBlock((gpstk::GPSZcount const &)*arg2,arg3,arg4);
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_GPSZcount_inSameTimeBlock__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::GPSZcount *arg1 = (gpstk::GPSZcount *) 0 ;
    gpstk::GPSZcount *arg2 = 0 ;
    unsigned long arg3 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:GPSZcount_inSameTimeBlock",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__GPSZcount, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_gpstk__GPSZcount, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("gpstk::GPSZcount");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (unsigned long)(SWIG_As_unsigned_SS_long(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    result = (bool)(arg1)->inSameTimeBlock((gpstk::GPSZcount const &)*arg2,arg3);
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_GPSZcount_inSameTimeBlock(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[5];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 4); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_gpstk__GPSZcount, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_gpstk__GPSZcount, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                _v = SWIG_Check_unsigned_SS_long(argv[2]);
                if (_v) {
                    return _wrap_GPSZcount_inSameTimeBlock__SWIG_1(self,args);
                }
            }
        }
    }
    if (argc == 4) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_gpstk__GPSZcount, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_gpstk__GPSZcount, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                _v = SWIG_Check_unsigned_SS_long(argv[2]);
                if (_v) {
                    _v = SWIG_Check_unsigned_SS_long(argv[3]);
                    if (_v) {
                        return _wrap_GPSZcount_inSameTimeBlock__SWIG_0(self,args);
                    }
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'GPSZcount_inSameTimeBlock'");
    return NULL;
}


static PyObject *_wrap_GPSZcount_dump__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::GPSZcount *arg1 = (gpstk::GPSZcount *) 0 ;
    std::ostream *arg2 = 0 ;
    short arg3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:GPSZcount_dump",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__GPSZcount, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("std::ostream");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (short)(SWIG_As_short(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    ((gpstk::GPSZcount const *)arg1)->dump(*arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_GPSZcount_dump__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::GPSZcount *arg1 = (gpstk::GPSZcount *) 0 ;
    std::ostream *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:GPSZcount_dump",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__GPSZcount, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("std::ostream");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    ((gpstk::GPSZcount const *)arg1)->dump(*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_GPSZcount_dump(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[4];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_gpstk__GPSZcount, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_GPSZcount_dump__SWIG_1(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_gpstk__GPSZcount, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                _v = SWIG_Check_short(argv[2]);
                if (_v) {
                    return _wrap_GPSZcount_dump__SWIG_0(self,args);
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'GPSZcount_dump'");
    return NULL;
}


static PyObject * GPSZcount_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_gpstk__GPSZcount, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap___lshift____SWIG_4(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::ostream *arg1 = 0 ;
    gpstk::GPSZcount *arg2 = 0 ;
    std::ostream *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:__lshift__",&obj0,&obj1)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("std::ostream");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_gpstk__GPSZcount, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("gpstk::GPSZcount");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        std::ostream &_result_ref = gpstk::operator <<(*arg1,(gpstk::GPSZcount const &)*arg2);
        result = (std::ostream *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_DayTimeException__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    DayTimeException *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_DayTimeException")) goto fail;
    result = (DayTimeException *)new DayTimeException();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_DayTimeException, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_DayTimeException__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    DayTimeException *arg1 = 0 ;
    DayTimeException *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_DayTimeException",&obj0)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_DayTimeException, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("DayTimeException");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    result = (DayTimeException *)new DayTimeException((DayTimeException const &)*arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_DayTimeException, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_DayTimeException__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::Exception *arg1 = 0 ;
    DayTimeException *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_DayTimeException",&obj0)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__Exception, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("gpstk::Exception");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    result = (DayTimeException *)new DayTimeException((gpstk::Exception const &)*arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_DayTimeException, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_DayTimeException__SWIG_3(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::string arg1 ;
    unsigned long arg2 ;
    gpstk::Exception::Severity arg3 ;
    DayTimeException *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:new_DayTimeException",&obj0,&obj1,&obj2)) goto fail;
    {
        std::string *ptr = (std::string *)0;
        int res = SWIG_AsPtr_std_string(obj0, &ptr);
        if (!res) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj0);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    {
        arg2 = (unsigned long)(SWIG_As_unsigned_SS_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (gpstk::Exception::Severity)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    result = (DayTimeException *)new DayTimeException(arg1,arg2,arg3);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_DayTimeException, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_DayTimeException__SWIG_4(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::string arg1 ;
    unsigned long arg2 ;
    DayTimeException *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:new_DayTimeException",&obj0,&obj1)) goto fail;
    {
        std::string *ptr = (std::string *)0;
        int res = SWIG_AsPtr_std_string(obj0, &ptr);
        if (!res) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj0);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    {
        arg2 = (unsigned long)(SWIG_As_unsigned_SS_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (DayTimeException *)new DayTimeException(arg1,arg2);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_DayTimeException, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_DayTimeException__SWIG_5(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::string arg1 ;
    DayTimeException *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_DayTimeException",&obj0)) goto fail;
    {
        std::string *ptr = (std::string *)0;
        int res = SWIG_AsPtr_std_string(obj0, &ptr);
        if (!res) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj0);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    result = (DayTimeException *)new DayTimeException(arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_DayTimeException, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_DayTimeException(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[4];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_new_DayTimeException__SWIG_0(self,args);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_DayTimeException, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            return _wrap_new_DayTimeException__SWIG_1(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_gpstk__Exception, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            return _wrap_new_DayTimeException__SWIG_2(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        _v = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
        if (_v) {
            return _wrap_new_DayTimeException__SWIG_5(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        _v = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
        if (_v) {
            _v = SWIG_Check_unsigned_SS_long(argv[1]);
            if (_v) {
                return _wrap_new_DayTimeException__SWIG_4(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        _v = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
        if (_v) {
            _v = SWIG_Check_unsigned_SS_long(argv[1]);
            if (_v) {
                _v = SWIG_Check_int(argv[2]);
                if (_v) {
                    return _wrap_new_DayTimeException__SWIG_3(self,args);
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'new_DayTimeException'");
    return NULL;
}


static PyObject *_wrap_delete_DayTimeException(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    DayTimeException *arg1 = (DayTimeException *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_DayTimeException",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_DayTimeException, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DayTimeException_getName(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    DayTimeException *arg1 = (DayTimeException *) 0 ;
    std::string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DayTimeException_getName",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_DayTimeException, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = ((DayTimeException const *)arg1)->getName();
    
    {
        resultobj = SWIG_From_std_string((std::string)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DayTimeException_class_operator_assignment(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    DayTimeException *arg1 = (DayTimeException *) 0 ;
    DayTimeException *arg2 = 0 ;
    DayTimeException *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:DayTimeException_class_operator_assignment",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_DayTimeException, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_DayTimeException, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("DayTimeException");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        DayTimeException &_result_ref = (arg1)->operator =((DayTimeException const &)*arg2);
        result = (DayTimeException *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_DayTimeException, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DayTimeException_streamRead__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::ostream *arg1 = 0 ;
    DayTimeException *arg2 = 0 ;
    std::ostream *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:DayTimeException_streamRead",&obj0,&obj1)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("std::ostream");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_DayTimeException, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("DayTimeException");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        std::ostream &_result_ref = operator <<(*arg1,(DayTimeException const &)*arg2);
        result = (std::ostream *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject * DayTimeException_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_DayTimeException, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_FormatException__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    FormatException *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_FormatException")) goto fail;
    result = (FormatException *)new FormatException();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_FormatException, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_FormatException__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    FormatException *arg1 = 0 ;
    FormatException *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_FormatException",&obj0)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_FormatException, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("FormatException");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    result = (FormatException *)new FormatException((FormatException const &)*arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_FormatException, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_FormatException__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::Exception *arg1 = 0 ;
    FormatException *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_FormatException",&obj0)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__Exception, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("gpstk::Exception");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    result = (FormatException *)new FormatException((gpstk::Exception const &)*arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_FormatException, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_FormatException__SWIG_3(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::string arg1 ;
    unsigned long arg2 ;
    gpstk::Exception::Severity arg3 ;
    FormatException *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:new_FormatException",&obj0,&obj1,&obj2)) goto fail;
    {
        std::string *ptr = (std::string *)0;
        int res = SWIG_AsPtr_std_string(obj0, &ptr);
        if (!res) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj0);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    {
        arg2 = (unsigned long)(SWIG_As_unsigned_SS_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (gpstk::Exception::Severity)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    result = (FormatException *)new FormatException(arg1,arg2,arg3);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_FormatException, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_FormatException__SWIG_4(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::string arg1 ;
    unsigned long arg2 ;
    FormatException *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:new_FormatException",&obj0,&obj1)) goto fail;
    {
        std::string *ptr = (std::string *)0;
        int res = SWIG_AsPtr_std_string(obj0, &ptr);
        if (!res) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj0);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    {
        arg2 = (unsigned long)(SWIG_As_unsigned_SS_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (FormatException *)new FormatException(arg1,arg2);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_FormatException, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_FormatException__SWIG_5(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::string arg1 ;
    FormatException *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_FormatException",&obj0)) goto fail;
    {
        std::string *ptr = (std::string *)0;
        int res = SWIG_AsPtr_std_string(obj0, &ptr);
        if (!res) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj0);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    result = (FormatException *)new FormatException(arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_FormatException, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_FormatException(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[4];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_new_FormatException__SWIG_0(self,args);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_FormatException, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            return _wrap_new_FormatException__SWIG_1(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_gpstk__Exception, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            return _wrap_new_FormatException__SWIG_2(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        _v = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
        if (_v) {
            return _wrap_new_FormatException__SWIG_5(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        _v = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
        if (_v) {
            _v = SWIG_Check_unsigned_SS_long(argv[1]);
            if (_v) {
                return _wrap_new_FormatException__SWIG_4(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        _v = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
        if (_v) {
            _v = SWIG_Check_unsigned_SS_long(argv[1]);
            if (_v) {
                _v = SWIG_Check_int(argv[2]);
                if (_v) {
                    return _wrap_new_FormatException__SWIG_3(self,args);
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'new_FormatException'");
    return NULL;
}


static PyObject *_wrap_delete_FormatException(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    FormatException *arg1 = (FormatException *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_FormatException",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_FormatException, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FormatException_getName(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    FormatException *arg1 = (FormatException *) 0 ;
    std::string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:FormatException_getName",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_FormatException, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = ((FormatException const *)arg1)->getName();
    
    {
        resultobj = SWIG_From_std_string((std::string)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FormatException_class_operator_assignment(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    FormatException *arg1 = (FormatException *) 0 ;
    FormatException *arg2 = 0 ;
    FormatException *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:FormatException_class_operator_assignment",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_FormatException, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_FormatException, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("FormatException");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        FormatException &_result_ref = (arg1)->operator =((FormatException const &)*arg2);
        result = (FormatException *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_FormatException, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DayTimeException_streamRead__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::ostream *arg1 = 0 ;
    FormatException *arg2 = 0 ;
    std::ostream *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:DayTimeException_streamRead",&obj0,&obj1)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("std::ostream");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_FormatException, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("FormatException");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        std::ostream &_result_ref = operator <<(*arg1,(FormatException const &)*arg2);
        result = (std::ostream *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DayTimeException_streamRead(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_DayTimeException, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_DayTimeException_streamRead__SWIG_0(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_FormatException, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_DayTimeException_streamRead__SWIG_1(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'DayTimeException_streamRead'");
    return NULL;
}


static PyObject * FormatException_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_FormatException, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static int _wrap_DayTime_FACTOR_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable DayTime_FACTOR is read-only.");
    return 1;
}


static PyObject *_wrap_DayTime_FACTOR_get(void) {
    PyObject *pyobj = NULL;
    
    {
        pyobj = SWIG_From_long((long)(gpstk::DayTime::FACTOR)); 
    }
    return pyobj;
}


static int _wrap_DayTime_JD_TO_MJD_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable DayTime_JD_TO_MJD is read-only.");
    return 1;
}


static PyObject *_wrap_DayTime_JD_TO_MJD_get(void) {
    PyObject *pyobj = NULL;
    
    {
        pyobj = SWIG_From_double((double)(gpstk::DayTime::JD_TO_MJD)); 
    }
    return pyobj;
}


static int _wrap_DayTime_MJD_JDAY_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable DayTime_MJD_JDAY is read-only.");
    return 1;
}


static PyObject *_wrap_DayTime_MJD_JDAY_get(void) {
    PyObject *pyobj = NULL;
    
    {
        pyobj = SWIG_From_long((long)(gpstk::DayTime::MJD_JDAY)); 
    }
    return pyobj;
}


static int _wrap_DayTime_GPS_EPOCH_JDAY_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable DayTime_GPS_EPOCH_JDAY is read-only.");
    return 1;
}


static PyObject *_wrap_DayTime_GPS_EPOCH_JDAY_get(void) {
    PyObject *pyobj = NULL;
    
    {
        pyobj = SWIG_From_long((long)(gpstk::DayTime::GPS_EPOCH_JDAY)); 
    }
    return pyobj;
}


static int _wrap_DayTime_GPS_EPOCH_MJD_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable DayTime_GPS_EPOCH_MJD is read-only.");
    return 1;
}


static PyObject *_wrap_DayTime_GPS_EPOCH_MJD_get(void) {
    PyObject *pyobj = NULL;
    
    {
        pyobj = SWIG_From_long((long)(gpstk::DayTime::GPS_EPOCH_MJD)); 
    }
    return pyobj;
}


static int _wrap_DayTime_UNIX_MJD_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable DayTime_UNIX_MJD is read-only.");
    return 1;
}


static PyObject *_wrap_DayTime_UNIX_MJD_get(void) {
    PyObject *pyobj = NULL;
    
    {
        pyobj = SWIG_From_long((long)(gpstk::DayTime::UNIX_MJD)); 
    }
    return pyobj;
}


static int _wrap_DayTime_HALFWEEK_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable DayTime_HALFWEEK is read-only.");
    return 1;
}


static PyObject *_wrap_DayTime_HALFWEEK_get(void) {
    PyObject *pyobj = NULL;
    
    {
        pyobj = SWIG_From_long((long)(gpstk::DayTime::HALFWEEK)); 
    }
    return pyobj;
}


static int _wrap_DayTime_FULLWEEK_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable DayTime_FULLWEEK is read-only.");
    return 1;
}


static PyObject *_wrap_DayTime_FULLWEEK_get(void) {
    PyObject *pyobj = NULL;
    
    {
        pyobj = SWIG_From_long((long)(gpstk::DayTime::FULLWEEK)); 
    }
    return pyobj;
}


static int _wrap_DayTime_SEC_DAY_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable DayTime_SEC_DAY is read-only.");
    return 1;
}


static PyObject *_wrap_DayTime_SEC_DAY_get(void) {
    PyObject *pyobj = NULL;
    
    {
        pyobj = SWIG_From_long((long)(gpstk::DayTime::SEC_DAY)); 
    }
    return pyobj;
}


static int _wrap_DayTime_MS_PER_DAY_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable DayTime_MS_PER_DAY is read-only.");
    return 1;
}


static PyObject *_wrap_DayTime_MS_PER_DAY_get(void) {
    PyObject *pyobj = NULL;
    
    {
        pyobj = SWIG_From_long((long)(gpstk::DayTime::MS_PER_DAY)); 
    }
    return pyobj;
}


static int _wrap_DayTime_ONE_NSEC_TOLERANCE_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable DayTime_ONE_NSEC_TOLERANCE is read-only.");
    return 1;
}


static PyObject *_wrap_DayTime_ONE_NSEC_TOLERANCE_get(void) {
    PyObject *pyobj = NULL;
    
    {
        pyobj = SWIG_From_double((double)(gpstk::DayTime::ONE_NSEC_TOLERANCE)); 
    }
    return pyobj;
}


static int _wrap_DayTime_ONE_USEC_TOLERANCE_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable DayTime_ONE_USEC_TOLERANCE is read-only.");
    return 1;
}


static PyObject *_wrap_DayTime_ONE_USEC_TOLERANCE_get(void) {
    PyObject *pyobj = NULL;
    
    {
        pyobj = SWIG_From_double((double)(gpstk::DayTime::ONE_USEC_TOLERANCE)); 
    }
    return pyobj;
}


static int _wrap_DayTime_ONE_MSEC_TOLERANCE_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable DayTime_ONE_MSEC_TOLERANCE is read-only.");
    return 1;
}


static PyObject *_wrap_DayTime_ONE_MSEC_TOLERANCE_get(void) {
    PyObject *pyobj = NULL;
    
    {
        pyobj = SWIG_From_double((double)(gpstk::DayTime::ONE_MSEC_TOLERANCE)); 
    }
    return pyobj;
}


static int _wrap_DayTime_ONE_SEC_TOLERANCE_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable DayTime_ONE_SEC_TOLERANCE is read-only.");
    return 1;
}


static PyObject *_wrap_DayTime_ONE_SEC_TOLERANCE_get(void) {
    PyObject *pyobj = NULL;
    
    {
        pyobj = SWIG_From_double((double)(gpstk::DayTime::ONE_SEC_TOLERANCE)); 
    }
    return pyobj;
}


static int _wrap_DayTime_ONE_MIN_TOLERANCE_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable DayTime_ONE_MIN_TOLERANCE is read-only.");
    return 1;
}


static PyObject *_wrap_DayTime_ONE_MIN_TOLERANCE_get(void) {
    PyObject *pyobj = NULL;
    
    {
        pyobj = SWIG_From_double((double)(gpstk::DayTime::ONE_MIN_TOLERANCE)); 
    }
    return pyobj;
}


static int _wrap_DayTime_ONE_HOUR_TOLERANCE_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable DayTime_ONE_HOUR_TOLERANCE is read-only.");
    return 1;
}


static PyObject *_wrap_DayTime_ONE_HOUR_TOLERANCE_get(void) {
    PyObject *pyobj = NULL;
    
    {
        pyobj = SWIG_From_double((double)(gpstk::DayTime::ONE_HOUR_TOLERANCE)); 
    }
    return pyobj;
}


static int _wrap_DayTime_DAYTIME_TOLERANCE_set(PyObject *_val) {
    {
        double temp = (double)(SWIG_As_double(_val));
        if (PyErr_Occurred()) {
            SWIG_append_errmsg("C/C++ variable 'gpstk::DayTime::DAYTIME_TOLERANCE (double)'");
            return 1;
        }
        gpstk::DayTime::DAYTIME_TOLERANCE = temp;
    }
    return 0;
}


static PyObject *_wrap_DayTime_DAYTIME_TOLERANCE_get(void) {
    PyObject *pyobj = NULL;
    
    {
        pyobj = SWIG_From_double((double)(gpstk::DayTime::DAYTIME_TOLERANCE)); 
    }
    return pyobj;
}


static int _wrap_DayTime_BEGIN_LIMIT_JDAY_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable DayTime_BEGIN_LIMIT_JDAY is read-only.");
    return 1;
}


static PyObject *_wrap_DayTime_BEGIN_LIMIT_JDAY_get(void) {
    PyObject *pyobj = NULL;
    
    {
        pyobj = SWIG_From_long((long)(gpstk::DayTime::BEGIN_LIMIT_JDAY)); 
    }
    return pyobj;
}


static int _wrap_DayTime_END_LIMIT_JDAY_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable DayTime_END_LIMIT_JDAY is read-only.");
    return 1;
}


static PyObject *_wrap_DayTime_END_LIMIT_JDAY_get(void) {
    PyObject *pyobj = NULL;
    
    {
        pyobj = SWIG_From_long((long)(gpstk::DayTime::END_LIMIT_JDAY)); 
    }
    return pyobj;
}


static int _wrap_DayTime_BEGINNING_OF_TIME_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable DayTime_BEGINNING_OF_TIME is read-only.");
    return 1;
}


static PyObject *_wrap_DayTime_BEGINNING_OF_TIME_get(void) {
    PyObject *pyobj = NULL;
    
    pyobj = SWIG_NewPointerObj((void *)(&gpstk::DayTime::BEGINNING_OF_TIME), SWIGTYPE_p_gpstk__DayTime, 0);
    return pyobj;
}


static int _wrap_DayTime_END_OF_TIME_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable DayTime_END_OF_TIME is read-only.");
    return 1;
}


static PyObject *_wrap_DayTime_END_OF_TIME_get(void) {
    PyObject *pyobj = NULL;
    
    pyobj = SWIG_NewPointerObj((void *)(&gpstk::DayTime::END_OF_TIME), SWIGTYPE_p_gpstk__DayTime, 0);
    return pyobj;
}


static int _wrap_DayTime_DAYTIME_TEST_VALID_set(PyObject *_val) {
    {
        bool temp = (bool)(SWIG_As_bool(_val));
        if (PyErr_Occurred()) {
            SWIG_append_errmsg("C/C++ variable 'gpstk::DayTime::DAYTIME_TEST_VALID (bool)'");
            return 1;
        }
        gpstk::DayTime::DAYTIME_TEST_VALID = temp;
    }
    return 0;
}


static PyObject *_wrap_DayTime_DAYTIME_TEST_VALID_get(void) {
    PyObject *pyobj = NULL;
    
    {
        pyobj = SWIG_From_bool((bool)(gpstk::DayTime::DAYTIME_TEST_VALID)); 
    }
    return pyobj;
}


static PyObject *_wrap_DayTime_setDayTimeTolerance(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    double arg1 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DayTime_setDayTimeTolerance",&obj0)) goto fail;
    {
        arg1 = (double const)(SWIG_As_double(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    result = (double)gpstk::DayTime::setDayTimeTolerance(arg1);
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DayTime_getDayTimeTolerance(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    double result;
    
    if(!PyArg_ParseTuple(args,(char *)":DayTime_getDayTimeTolerance")) goto fail;
    result = (double)gpstk::DayTime::getDayTimeTolerance();
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DayTime_setTolerance(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::DayTime *arg1 = (gpstk::DayTime *) 0 ;
    double arg2 ;
    gpstk::DayTime *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:DayTime_setTolerance",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__DayTime, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (double const)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        gpstk::DayTime &_result_ref = (arg1)->setTolerance(arg2);
        result = (gpstk::DayTime *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__DayTime, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DayTime_getTolerance(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::DayTime *arg1 = (gpstk::DayTime *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DayTime_getTolerance",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__DayTime, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double)(arg1)->getTolerance();
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_DayTime__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::DayTime *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_DayTime")) goto fail;
    try {
        result = (gpstk::DayTime *)new gpstk::DayTime();
    }
    catch(DayTimeException &_e) {
        {
            DayTimeException * temp = new DayTimeException(_e);
            if (SWIGTYPE_p_DayTimeException->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_DayTimeException->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_DayTimeException,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"DayTimeException");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_DayTimeException,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__DayTime, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_DayTime__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    short arg1 ;
    double arg2 ;
    gpstk::DayTime::TimeFrame arg3 ;
    gpstk::DayTime *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:new_DayTime",&obj0,&obj1,&obj2)) goto fail;
    {
        arg1 = (short)(SWIG_As_short(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (gpstk::DayTime::TimeFrame)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    try {
        result = (gpstk::DayTime *)new gpstk::DayTime(arg1,arg2,arg3);
    }
    catch(DayTimeException &_e) {
        {
            DayTimeException * temp = new DayTimeException(_e);
            if (SWIGTYPE_p_DayTimeException->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_DayTimeException->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_DayTimeException,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"DayTimeException");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_DayTimeException,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__DayTime, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_DayTime__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    short arg1 ;
    double arg2 ;
    gpstk::DayTime *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:new_DayTime",&obj0,&obj1)) goto fail;
    {
        arg1 = (short)(SWIG_As_short(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        result = (gpstk::DayTime *)new gpstk::DayTime(arg1,arg2);
    }
    catch(DayTimeException &_e) {
        {
            DayTimeException * temp = new DayTimeException(_e);
            if (SWIGTYPE_p_DayTimeException->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_DayTimeException->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_DayTimeException,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"DayTimeException");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_DayTimeException,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__DayTime, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_DayTime__SWIG_3(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    short arg1 ;
    double arg2 ;
    short arg3 ;
    gpstk::DayTime::TimeFrame arg4 ;
    gpstk::DayTime *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:new_DayTime",&obj0,&obj1,&obj2,&obj3)) goto fail;
    {
        arg1 = (short)(SWIG_As_short(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (short)(SWIG_As_short(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = (gpstk::DayTime::TimeFrame)(SWIG_As_int(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    try {
        result = (gpstk::DayTime *)new gpstk::DayTime(arg1,arg2,arg3,arg4);
    }
    catch(DayTimeException &_e) {
        {
            DayTimeException * temp = new DayTimeException(_e);
            if (SWIGTYPE_p_DayTimeException->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_DayTimeException->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_DayTimeException,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"DayTimeException");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_DayTimeException,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__DayTime, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_DayTime__SWIG_4(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    short arg1 ;
    double arg2 ;
    short arg3 ;
    gpstk::DayTime *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:new_DayTime",&obj0,&obj1,&obj2)) goto fail;
    {
        arg1 = (short)(SWIG_As_short(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (short)(SWIG_As_short(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    try {
        result = (gpstk::DayTime *)new gpstk::DayTime(arg1,arg2,arg3);
    }
    catch(DayTimeException &_e) {
        {
            DayTimeException * temp = new DayTimeException(_e);
            if (SWIGTYPE_p_DayTimeException->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_DayTimeException->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_DayTimeException,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"DayTimeException");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_DayTimeException,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__DayTime, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_DayTime__SWIG_5(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    short arg1 ;
    long arg2 ;
    short arg3 ;
    gpstk::DayTime::TimeFrame arg4 ;
    gpstk::DayTime *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:new_DayTime",&obj0,&obj1,&obj2,&obj3)) goto fail;
    {
        arg1 = (short)(SWIG_As_short(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        arg2 = (long)(SWIG_As_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (short)(SWIG_As_short(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = (gpstk::DayTime::TimeFrame)(SWIG_As_int(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    try {
        result = (gpstk::DayTime *)new gpstk::DayTime(arg1,arg2,arg3,arg4);
    }
    catch(DayTimeException &_e) {
        {
            DayTimeException * temp = new DayTimeException(_e);
            if (SWIGTYPE_p_DayTimeException->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_DayTimeException->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_DayTimeException,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"DayTimeException");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_DayTimeException,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__DayTime, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_DayTime__SWIG_6(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    short arg1 ;
    long arg2 ;
    short arg3 ;
    gpstk::DayTime *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:new_DayTime",&obj0,&obj1,&obj2)) goto fail;
    {
        arg1 = (short)(SWIG_As_short(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        arg2 = (long)(SWIG_As_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (short)(SWIG_As_short(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    try {
        result = (gpstk::DayTime *)new gpstk::DayTime(arg1,arg2,arg3);
    }
    catch(DayTimeException &_e) {
        {
            DayTimeException * temp = new DayTimeException(_e);
            if (SWIGTYPE_p_DayTimeException->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_DayTimeException->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_DayTimeException,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"DayTimeException");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_DayTimeException,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__DayTime, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_DayTime__SWIG_7(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    unsigned long arg1 ;
    gpstk::DayTime::TimeFrame arg2 ;
    gpstk::DayTime *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:new_DayTime",&obj0,&obj1)) goto fail;
    {
        arg1 = (unsigned long)(SWIG_As_unsigned_SS_long(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        arg2 = (gpstk::DayTime::TimeFrame)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        result = (gpstk::DayTime *)new gpstk::DayTime(arg1,arg2);
    }
    catch(DayTimeException &_e) {
        {
            DayTimeException * temp = new DayTimeException(_e);
            if (SWIGTYPE_p_DayTimeException->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_DayTimeException->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_DayTimeException,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"DayTimeException");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_DayTimeException,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__DayTime, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_DayTime__SWIG_8(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    unsigned long arg1 ;
    gpstk::DayTime *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_DayTime",&obj0)) goto fail;
    {
        arg1 = (unsigned long)(SWIG_As_unsigned_SS_long(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    try {
        result = (gpstk::DayTime *)new gpstk::DayTime(arg1);
    }
    catch(DayTimeException &_e) {
        {
            DayTimeException * temp = new DayTimeException(_e);
            if (SWIGTYPE_p_DayTimeException->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_DayTimeException->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_DayTimeException,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"DayTimeException");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_DayTimeException,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__DayTime, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_DayTime__SWIG_9(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::GPSZcount *arg1 = 0 ;
    gpstk::DayTime::TimeFrame arg2 ;
    gpstk::DayTime *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:new_DayTime",&obj0,&obj1)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__GPSZcount, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("gpstk::GPSZcount");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        arg2 = (gpstk::DayTime::TimeFrame)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        result = (gpstk::DayTime *)new gpstk::DayTime((gpstk::GPSZcount const &)*arg1,arg2);
    }
    catch(DayTimeException &_e) {
        {
            DayTimeException * temp = new DayTimeException(_e);
            if (SWIGTYPE_p_DayTimeException->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_DayTimeException->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_DayTimeException,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"DayTimeException");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_DayTimeException,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__DayTime, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_DayTime__SWIG_10(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::GPSZcount *arg1 = 0 ;
    gpstk::DayTime *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_DayTime",&obj0)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__GPSZcount, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("gpstk::GPSZcount");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    try {
        result = (gpstk::DayTime *)new gpstk::DayTime((gpstk::GPSZcount const &)*arg1);
    }
    catch(DayTimeException &_e) {
        {
            DayTimeException * temp = new DayTimeException(_e);
            if (SWIGTYPE_p_DayTimeException->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_DayTimeException->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_DayTimeException,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"DayTimeException");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_DayTimeException,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__DayTime, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_DayTime__SWIG_11(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    short arg1 ;
    short arg2 ;
    short arg3 ;
    short arg4 ;
    short arg5 ;
    double arg6 ;
    gpstk::DayTime::TimeFrame arg7 ;
    gpstk::DayTime *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    PyObject * obj5 = 0 ;
    PyObject * obj6 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOOOO:new_DayTime",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) goto fail;
    {
        arg1 = (short)(SWIG_As_short(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        arg2 = (short)(SWIG_As_short(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (short)(SWIG_As_short(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = (short)(SWIG_As_short(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    {
        arg5 = (short)(SWIG_As_short(obj4)); 
        if (SWIG_arg_fail(5)) SWIG_fail;
    }
    {
        arg6 = (double)(SWIG_As_double(obj5)); 
        if (SWIG_arg_fail(6)) SWIG_fail;
    }
    {
        arg7 = (gpstk::DayTime::TimeFrame)(SWIG_As_int(obj6)); 
        if (SWIG_arg_fail(7)) SWIG_fail;
    }
    try {
        result = (gpstk::DayTime *)new gpstk::DayTime(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
    }
    catch(DayTimeException &_e) {
        {
            DayTimeException * temp = new DayTimeException(_e);
            if (SWIGTYPE_p_DayTimeException->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_DayTimeException->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_DayTimeException,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"DayTimeException");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_DayTimeException,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__DayTime, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_DayTime__SWIG_12(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    short arg1 ;
    short arg2 ;
    short arg3 ;
    short arg4 ;
    short arg5 ;
    double arg6 ;
    gpstk::DayTime *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    PyObject * obj5 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOOO:new_DayTime",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) goto fail;
    {
        arg1 = (short)(SWIG_As_short(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        arg2 = (short)(SWIG_As_short(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (short)(SWIG_As_short(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = (short)(SWIG_As_short(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    {
        arg5 = (short)(SWIG_As_short(obj4)); 
        if (SWIG_arg_fail(5)) SWIG_fail;
    }
    {
        arg6 = (double)(SWIG_As_double(obj5)); 
        if (SWIG_arg_fail(6)) SWIG_fail;
    }
    try {
        result = (gpstk::DayTime *)new gpstk::DayTime(arg1,arg2,arg3,arg4,arg5,arg6);
    }
    catch(DayTimeException &_e) {
        {
            DayTimeException * temp = new DayTimeException(_e);
            if (SWIGTYPE_p_DayTimeException->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_DayTimeException->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_DayTimeException,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"DayTimeException");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_DayTimeException,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__DayTime, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_DayTime__SWIG_13(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    long double arg1 ;
    gpstk::DayTime::TimeFrame arg2 ;
    gpstk::DayTime *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:new_DayTime",&obj0,&obj1)) goto fail;
    {
        long double * argp;
        SWIG_Python_ConvertPtr(obj0, (void **)&argp, SWIGTYPE_p_long_double, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("long double");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = *argp;
    }
    {
        arg2 = (gpstk::DayTime::TimeFrame)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        result = (gpstk::DayTime *)new gpstk::DayTime(arg1,arg2);
    }
    catch(DayTimeException &_e) {
        {
            DayTimeException * temp = new DayTimeException(_e);
            if (SWIGTYPE_p_DayTimeException->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_DayTimeException->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_DayTimeException,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"DayTimeException");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_DayTimeException,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__DayTime, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_DayTime__SWIG_14(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    long double arg1 ;
    gpstk::DayTime *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_DayTime",&obj0)) goto fail;
    {
        long double * argp;
        SWIG_Python_ConvertPtr(obj0, (void **)&argp, SWIGTYPE_p_long_double, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("long double");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = *argp;
    }
    try {
        result = (gpstk::DayTime *)new gpstk::DayTime(arg1);
    }
    catch(DayTimeException &_e) {
        {
            DayTimeException * temp = new DayTimeException(_e);
            if (SWIGTYPE_p_DayTimeException->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_DayTimeException->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_DayTimeException,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"DayTimeException");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_DayTimeException,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__DayTime, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_DayTime__SWIG_15(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    double arg1 ;
    gpstk::DayTime::TimeFrame arg2 ;
    gpstk::DayTime *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:new_DayTime",&obj0,&obj1)) goto fail;
    {
        arg1 = (double)(SWIG_As_double(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        arg2 = (gpstk::DayTime::TimeFrame)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        result = (gpstk::DayTime *)new gpstk::DayTime(arg1,arg2);
    }
    catch(DayTimeException &_e) {
        {
            DayTimeException * temp = new DayTimeException(_e);
            if (SWIGTYPE_p_DayTimeException->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_DayTimeException->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_DayTimeException,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"DayTimeException");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_DayTimeException,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__DayTime, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_DayTime__SWIG_16(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    double arg1 ;
    gpstk::DayTime *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_DayTime",&obj0)) goto fail;
    {
        arg1 = (double)(SWIG_As_double(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    try {
        result = (gpstk::DayTime *)new gpstk::DayTime(arg1);
    }
    catch(DayTimeException &_e) {
        {
            DayTimeException * temp = new DayTimeException(_e);
            if (SWIGTYPE_p_DayTimeException->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_DayTimeException->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_DayTimeException,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"DayTimeException");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_DayTimeException,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__DayTime, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_DayTime__SWIG_17(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    short arg1 ;
    short arg2 ;
    double arg3 ;
    gpstk::DayTime::TimeFrame arg4 ;
    gpstk::DayTime *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:new_DayTime",&obj0,&obj1,&obj2,&obj3)) goto fail;
    {
        arg1 = (short)(SWIG_As_short(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        arg2 = (short)(SWIG_As_short(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (double)(SWIG_As_double(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = (gpstk::DayTime::TimeFrame)(SWIG_As_int(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    try {
        result = (gpstk::DayTime *)new gpstk::DayTime(arg1,arg2,arg3,arg4);
    }
    catch(DayTimeException &_e) {
        {
            DayTimeException * temp = new DayTimeException(_e);
            if (SWIGTYPE_p_DayTimeException->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_DayTimeException->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_DayTimeException,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"DayTimeException");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_DayTimeException,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__DayTime, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_DayTime__SWIG_18(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    short arg1 ;
    short arg2 ;
    double arg3 ;
    gpstk::DayTime *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:new_DayTime",&obj0,&obj1,&obj2)) goto fail;
    {
        arg1 = (short)(SWIG_As_short(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        arg2 = (short)(SWIG_As_short(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (double)(SWIG_As_double(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    try {
        result = (gpstk::DayTime *)new gpstk::DayTime(arg1,arg2,arg3);
    }
    catch(DayTimeException &_e) {
        {
            DayTimeException * temp = new DayTimeException(_e);
            if (SWIGTYPE_p_DayTimeException->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_DayTimeException->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_DayTimeException,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"DayTimeException");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_DayTimeException,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__DayTime, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_DayTime__SWIG_19(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    timeval *arg1 = 0 ;
    gpstk::DayTime::TimeFrame arg2 ;
    gpstk::DayTime *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:new_DayTime",&obj0,&obj1)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_timeval, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("timeval");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        arg2 = (gpstk::DayTime::TimeFrame)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        result = (gpstk::DayTime *)new gpstk::DayTime((timeval const &)*arg1,arg2);
    }
    catch(DayTimeException &_e) {
        {
            DayTimeException * temp = new DayTimeException(_e);
            if (SWIGTYPE_p_DayTimeException->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_DayTimeException->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_DayTimeException,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"DayTimeException");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_DayTimeException,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__DayTime, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_DayTime__SWIG_20(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    timeval *arg1 = 0 ;
    gpstk::DayTime *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_DayTime",&obj0)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_timeval, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("timeval");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    try {
        result = (gpstk::DayTime *)new gpstk::DayTime((timeval const &)*arg1);
    }
    catch(DayTimeException &_e) {
        {
            DayTimeException * temp = new DayTimeException(_e);
            if (SWIGTYPE_p_DayTimeException->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_DayTimeException->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_DayTimeException,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"DayTimeException");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_DayTimeException,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__DayTime, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_DayTime(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::DayTime *arg1 = (gpstk::DayTime *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_DayTime",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__DayTime, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_DayTime__SWIG_21(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::DayTime *arg1 = 0 ;
    gpstk::DayTime *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_DayTime",&obj0)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__DayTime, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("gpstk::DayTime");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    try {
        result = (gpstk::DayTime *)new gpstk::DayTime((gpstk::DayTime const &)*arg1);
    }
    catch(DayTimeException &_e) {
        {
            DayTimeException * temp = new DayTimeException(_e);
            if (SWIGTYPE_p_DayTimeException->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_DayTimeException->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_DayTimeException,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"DayTimeException");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_DayTimeException,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__DayTime, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_DayTime(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[8];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 7); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_new_DayTime__SWIG_0(self,args);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_gpstk__GPSZcount, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            return _wrap_new_DayTime__SWIG_10(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_long_double, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            return _wrap_new_DayTime__SWIG_14(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_timeval, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            return _wrap_new_DayTime__SWIG_20(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_gpstk__DayTime, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            return _wrap_new_DayTime__SWIG_21(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        _v = SWIG_Check_unsigned_SS_long(argv[0]);
        if (_v) {
            return _wrap_new_DayTime__SWIG_8(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        _v = SWIG_Check_double(argv[0]);
        if (_v) {
            return _wrap_new_DayTime__SWIG_16(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_gpstk__GPSZcount, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            _v = SWIG_Check_int(argv[1]);
            if (_v) {
                return _wrap_new_DayTime__SWIG_9(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_timeval, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            _v = SWIG_Check_int(argv[1]);
            if (_v) {
                return _wrap_new_DayTime__SWIG_19(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_long_double, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            _v = SWIG_Check_int(argv[1]);
            if (_v) {
                return _wrap_new_DayTime__SWIG_13(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        _v = SWIG_Check_short(argv[0]);
        if (_v) {
            _v = SWIG_Check_double(argv[1]);
            if (_v) {
                return _wrap_new_DayTime__SWIG_2(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        _v = SWIG_Check_unsigned_SS_long(argv[0]);
        if (_v) {
            _v = SWIG_Check_int(argv[1]);
            if (_v) {
                return _wrap_new_DayTime__SWIG_7(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        _v = SWIG_Check_double(argv[0]);
        if (_v) {
            _v = SWIG_Check_int(argv[1]);
            if (_v) {
                return _wrap_new_DayTime__SWIG_15(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        _v = SWIG_Check_short(argv[0]);
        if (_v) {
            _v = SWIG_Check_short(argv[1]);
            if (_v) {
                _v = SWIG_Check_double(argv[2]);
                if (_v) {
                    return _wrap_new_DayTime__SWIG_18(self,args);
                }
            }
        }
    }
    if (argc == 3) {
        int _v;
        _v = SWIG_Check_short(argv[0]);
        if (_v) {
            _v = SWIG_Check_long(argv[1]);
            if (_v) {
                _v = SWIG_Check_short(argv[2]);
                if (_v) {
                    return _wrap_new_DayTime__SWIG_6(self,args);
                }
            }
        }
    }
    if (argc == 3) {
        int _v;
        _v = SWIG_Check_short(argv[0]);
        if (_v) {
            _v = SWIG_Check_double(argv[1]);
            if (_v) {
                _v = SWIG_Check_short(argv[2]);
                if (_v) {
                    return _wrap_new_DayTime__SWIG_4(self,args);
                }
            }
        }
    }
    if (argc == 3) {
        int _v;
        _v = SWIG_Check_short(argv[0]);
        if (_v) {
            _v = SWIG_Check_double(argv[1]);
            if (_v) {
                _v = SWIG_Check_int(argv[2]);
                if (_v) {
                    return _wrap_new_DayTime__SWIG_1(self,args);
                }
            }
        }
    }
    if (argc == 4) {
        int _v;
        _v = SWIG_Check_short(argv[0]);
        if (_v) {
            _v = SWIG_Check_short(argv[1]);
            if (_v) {
                _v = SWIG_Check_double(argv[2]);
                if (_v) {
                    _v = SWIG_Check_int(argv[3]);
                    if (_v) {
                        return _wrap_new_DayTime__SWIG_17(self,args);
                    }
                }
            }
        }
    }
    if (argc == 4) {
        int _v;
        _v = SWIG_Check_short(argv[0]);
        if (_v) {
            _v = SWIG_Check_long(argv[1]);
            if (_v) {
                _v = SWIG_Check_short(argv[2]);
                if (_v) {
                    _v = SWIG_Check_int(argv[3]);
                    if (_v) {
                        return _wrap_new_DayTime__SWIG_5(self,args);
                    }
                }
            }
        }
    }
    if (argc == 4) {
        int _v;
        _v = SWIG_Check_short(argv[0]);
        if (_v) {
            _v = SWIG_Check_double(argv[1]);
            if (_v) {
                _v = SWIG_Check_short(argv[2]);
                if (_v) {
                    _v = SWIG_Check_int(argv[3]);
                    if (_v) {
                        return _wrap_new_DayTime__SWIG_3(self,args);
                    }
                }
            }
        }
    }
    if (argc == 6) {
        int _v;
        _v = SWIG_Check_short(argv[0]);
        if (_v) {
            _v = SWIG_Check_short(argv[1]);
            if (_v) {
                _v = SWIG_Check_short(argv[2]);
                if (_v) {
                    _v = SWIG_Check_short(argv[3]);
                    if (_v) {
                        _v = SWIG_Check_short(argv[4]);
                        if (_v) {
                            _v = SWIG_Check_double(argv[5]);
                            if (_v) {
                                return _wrap_new_DayTime__SWIG_12(self,args);
                            }
                        }
                    }
                }
            }
        }
    }
    if (argc == 7) {
        int _v;
        _v = SWIG_Check_short(argv[0]);
        if (_v) {
            _v = SWIG_Check_short(argv[1]);
            if (_v) {
                _v = SWIG_Check_short(argv[2]);
                if (_v) {
                    _v = SWIG_Check_short(argv[3]);
                    if (_v) {
                        _v = SWIG_Check_short(argv[4]);
                        if (_v) {
                            _v = SWIG_Check_double(argv[5]);
                            if (_v) {
                                _v = SWIG_Check_int(argv[6]);
                                if (_v) {
                                    return _wrap_new_DayTime__SWIG_11(self,args);
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'new_DayTime'");
    return NULL;
}


static PyObject *_wrap_DayTime_class_operator_assignment(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::DayTime *arg1 = (gpstk::DayTime *) 0 ;
    gpstk::DayTime *arg2 = 0 ;
    gpstk::DayTime *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:DayTime_class_operator_assignment",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__DayTime, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_gpstk__DayTime, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("gpstk::DayTime");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        gpstk::DayTime &_result_ref = (arg1)->operator =((gpstk::DayTime const &)*arg2);
        result = (gpstk::DayTime *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__DayTime, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DayTime___sub____SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::DayTime *arg1 = (gpstk::DayTime *) 0 ;
    gpstk::DayTime *arg2 = 0 ;
    double result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:DayTime___sub__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__DayTime, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_gpstk__DayTime, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("gpstk::DayTime");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (double)((gpstk::DayTime const *)arg1)->operator -((gpstk::DayTime const &)*arg2);
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DayTime___add__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::DayTime *arg1 = (gpstk::DayTime *) 0 ;
    double arg2 ;
    gpstk::DayTime result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:DayTime___add__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__DayTime, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = ((gpstk::DayTime const *)arg1)->operator +(arg2);
    
    {
        gpstk::DayTime * resultptr;
        resultptr = new gpstk::DayTime((gpstk::DayTime &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_gpstk__DayTime, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DayTime___sub____SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::DayTime *arg1 = (gpstk::DayTime *) 0 ;
    double arg2 ;
    gpstk::DayTime result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:DayTime___sub__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__DayTime, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = ((gpstk::DayTime const *)arg1)->operator -(arg2);
    
    {
        gpstk::DayTime * resultptr;
        resultptr = new gpstk::DayTime((gpstk::DayTime &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_gpstk__DayTime, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DayTime___sub__(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_gpstk__DayTime, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_gpstk__DayTime, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_DayTime___sub____SWIG_0(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_gpstk__DayTime, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_double(argv[1]);
            if (_v) {
                return _wrap_DayTime___sub____SWIG_1(self,args);
            }
        }
    }
    
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


static PyObject *_wrap_DayTime___iadd__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::DayTime *arg1 = (gpstk::DayTime *) 0 ;
    double arg2 ;
    gpstk::DayTime *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:DayTime___iadd__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__DayTime, SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        {
            gpstk::DayTime &_result_ref = (arg1)->operator +=(arg2);
            result = (gpstk::DayTime *) &_result_ref;
        }
    }
    catch(DayTimeException &_e) {
        {
            DayTimeException * temp = new DayTimeException(_e);
            if (SWIGTYPE_p_DayTimeException->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_DayTimeException->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_DayTimeException,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"DayTimeException");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_DayTimeException,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__DayTime, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DayTime___isub__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::DayTime *arg1 = (gpstk::DayTime *) 0 ;
    double arg2 ;
    gpstk::DayTime *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:DayTime___isub__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__DayTime, SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        {
            gpstk::DayTime &_result_ref = (arg1)->operator -=(arg2);
            result = (gpstk::DayTime *) &_result_ref;
        }
    }
    catch(DayTimeException &_e) {
        {
            DayTimeException * temp = new DayTimeException(_e);
            if (SWIGTYPE_p_DayTimeException->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_DayTimeException->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_DayTimeException,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"DayTimeException");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_DayTimeException,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__DayTime, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DayTime_addSeconds__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::DayTime *arg1 = (gpstk::DayTime *) 0 ;
    double arg2 ;
    gpstk::DayTime *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:DayTime_addSeconds",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__DayTime, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        {
            gpstk::DayTime &_result_ref = (arg1)->addSeconds(arg2);
            result = (gpstk::DayTime *) &_result_ref;
        }
    }
    catch(DayTimeException &_e) {
        {
            DayTimeException * temp = new DayTimeException(_e);
            if (SWIGTYPE_p_DayTimeException->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_DayTimeException->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_DayTimeException,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"DayTimeException");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_DayTimeException,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__DayTime, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DayTime_addSeconds__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::DayTime *arg1 = (gpstk::DayTime *) 0 ;
    long arg2 ;
    gpstk::DayTime *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:DayTime_addSeconds",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__DayTime, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (long)(SWIG_As_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        {
            gpstk::DayTime &_result_ref = (arg1)->addSeconds(arg2);
            result = (gpstk::DayTime *) &_result_ref;
        }
    }
    catch(DayTimeException &_e) {
        {
            DayTimeException * temp = new DayTimeException(_e);
            if (SWIGTYPE_p_DayTimeException->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_DayTimeException->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_DayTimeException,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"DayTimeException");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_DayTimeException,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__DayTime, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DayTime_addSeconds(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_gpstk__DayTime, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_long(argv[1]);
            if (_v) {
                return _wrap_DayTime_addSeconds__SWIG_1(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_gpstk__DayTime, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_double(argv[1]);
            if (_v) {
                return _wrap_DayTime_addSeconds__SWIG_0(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'DayTime_addSeconds'");
    return NULL;
}


static PyObject *_wrap_DayTime_addMilliSeconds(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::DayTime *arg1 = (gpstk::DayTime *) 0 ;
    long arg2 ;
    gpstk::DayTime *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:DayTime_addMilliSeconds",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__DayTime, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (long)(SWIG_As_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        {
            gpstk::DayTime &_result_ref = (arg1)->addMilliSeconds(arg2);
            result = (gpstk::DayTime *) &_result_ref;
        }
    }
    catch(DayTimeException &_e) {
        {
            DayTimeException * temp = new DayTimeException(_e);
            if (SWIGTYPE_p_DayTimeException->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_DayTimeException->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_DayTimeException,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"DayTimeException");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_DayTimeException,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__DayTime, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DayTime_addMicroSeconds(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::DayTime *arg1 = (gpstk::DayTime *) 0 ;
    long arg2 ;
    gpstk::DayTime *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:DayTime_addMicroSeconds",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__DayTime, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (long)(SWIG_As_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        {
            gpstk::DayTime &_result_ref = (arg1)->addMicroSeconds(arg2);
            result = (gpstk::DayTime *) &_result_ref;
        }
    }
    catch(DayTimeException &_e) {
        {
            DayTimeException * temp = new DayTimeException(_e);
            if (SWIGTYPE_p_DayTimeException->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_DayTimeException->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_DayTimeException,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"DayTimeException");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_DayTimeException,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__DayTime, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DayTime___eq__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::DayTime *arg1 = (gpstk::DayTime *) 0 ;
    gpstk::DayTime *arg2 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:DayTime___eq__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__DayTime, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_gpstk__DayTime, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("gpstk::DayTime");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (bool)((gpstk::DayTime const *)arg1)->operator ==((gpstk::DayTime const &)*arg2);
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DayTime___ne__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::DayTime *arg1 = (gpstk::DayTime *) 0 ;
    gpstk::DayTime *arg2 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:DayTime___ne__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__DayTime, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_gpstk__DayTime, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("gpstk::DayTime");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (bool)((gpstk::DayTime const *)arg1)->operator !=((gpstk::DayTime const &)*arg2);
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DayTime___lt__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::DayTime *arg1 = (gpstk::DayTime *) 0 ;
    gpstk::DayTime *arg2 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:DayTime___lt__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__DayTime, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_gpstk__DayTime, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("gpstk::DayTime");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (bool)((gpstk::DayTime const *)arg1)->operator <((gpstk::DayTime const &)*arg2);
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DayTime___gt__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::DayTime *arg1 = (gpstk::DayTime *) 0 ;
    gpstk::DayTime *arg2 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:DayTime___gt__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__DayTime, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_gpstk__DayTime, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("gpstk::DayTime");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (bool)((gpstk::DayTime const *)arg1)->operator >((gpstk::DayTime const &)*arg2);
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DayTime___le__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::DayTime *arg1 = (gpstk::DayTime *) 0 ;
    gpstk::DayTime *arg2 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:DayTime___le__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__DayTime, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_gpstk__DayTime, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("gpstk::DayTime");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (bool)((gpstk::DayTime const *)arg1)->operator <=((gpstk::DayTime const &)*arg2);
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DayTime___ge__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::DayTime *arg1 = (gpstk::DayTime *) 0 ;
    gpstk::DayTime *arg2 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:DayTime___ge__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__DayTime, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_gpstk__DayTime, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("gpstk::DayTime");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (bool)((gpstk::DayTime const *)arg1)->operator >=((gpstk::DayTime const &)*arg2);
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DayTime_setAllButTimeFrame(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::DayTime *arg1 = (gpstk::DayTime *) 0 ;
    gpstk::DayTime *arg2 = 0 ;
    gpstk::DayTime *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:DayTime_setAllButTimeFrame",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__DayTime, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_gpstk__DayTime, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("gpstk::DayTime");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        {
            gpstk::DayTime &_result_ref = (arg1)->setAllButTimeFrame((gpstk::DayTime const &)*arg2);
            result = (gpstk::DayTime *) &_result_ref;
        }
    }
    catch(DayTimeException &_e) {
        {
            DayTimeException * temp = new DayTimeException(_e);
            if (SWIGTYPE_p_DayTimeException->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_DayTimeException->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_DayTimeException,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"DayTimeException");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_DayTimeException,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__DayTime, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DayTime_setTimeFrame(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::DayTime *arg1 = (gpstk::DayTime *) 0 ;
    gpstk::DayTime::TimeFrame arg2 ;
    gpstk::DayTime *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:DayTime_setTimeFrame",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__DayTime, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (gpstk::DayTime::TimeFrame)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        gpstk::DayTime &_result_ref = (arg1)->setTimeFrame(arg2);
        result = (gpstk::DayTime *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__DayTime, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DayTime_getTimeFrame(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::DayTime *arg1 = (gpstk::DayTime *) 0 ;
    gpstk::DayTime::TimeFrame result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DayTime_getTimeFrame",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__DayTime, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (gpstk::DayTime::TimeFrame)((gpstk::DayTime const *)arg1)->getTimeFrame();
    
    resultobj = SWIG_From_int((result));
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DayTime_JD(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::DayTime *arg1 = (gpstk::DayTime *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DayTime_JD",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__DayTime, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double)((gpstk::DayTime const *)arg1)->JD();
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DayTime_MJD(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::DayTime *arg1 = (gpstk::DayTime *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DayTime_MJD",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__DayTime, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double)((gpstk::DayTime const *)arg1)->MJD();
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DayTime_year(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::DayTime *arg1 = (gpstk::DayTime *) 0 ;
    short result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DayTime_year",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__DayTime, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (short)((gpstk::DayTime const *)arg1)->year();
    
    {
        resultobj = SWIG_From_short((short)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DayTime_month(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::DayTime *arg1 = (gpstk::DayTime *) 0 ;
    short result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DayTime_month",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__DayTime, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (short)((gpstk::DayTime const *)arg1)->month();
    
    {
        resultobj = SWIG_From_short((short)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DayTime_day(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::DayTime *arg1 = (gpstk::DayTime *) 0 ;
    short result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DayTime_day",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__DayTime, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (short)((gpstk::DayTime const *)arg1)->day();
    
    {
        resultobj = SWIG_From_short((short)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DayTime_dayOfWeek(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::DayTime *arg1 = (gpstk::DayTime *) 0 ;
    short result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DayTime_dayOfWeek",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__DayTime, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (short)((gpstk::DayTime const *)arg1)->dayOfWeek();
    
    {
        resultobj = SWIG_From_short((short)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DayTime_getYMD(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::DayTime *arg1 = (gpstk::DayTime *) 0 ;
    int *arg2 = 0 ;
    int *arg3 = 0 ;
    int *arg4 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:DayTime_getYMD",&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__DayTime, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_int, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("int");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_int, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (arg3 == NULL) {
            SWIG_null_ref("int");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj3, (void **)&arg4, SWIGTYPE_p_int, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(4)) SWIG_fail;
        if (arg4 == NULL) {
            SWIG_null_ref("int");
        }
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    ((gpstk::DayTime const *)arg1)->getYMD(*arg2,*arg3,*arg4);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DayTime_hour(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::DayTime *arg1 = (gpstk::DayTime *) 0 ;
    short result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DayTime_hour",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__DayTime, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (short)((gpstk::DayTime const *)arg1)->hour();
    
    {
        resultobj = SWIG_From_short((short)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DayTime_minute(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::DayTime *arg1 = (gpstk::DayTime *) 0 ;
    short result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DayTime_minute",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__DayTime, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (short)((gpstk::DayTime const *)arg1)->minute();
    
    {
        resultobj = SWIG_From_short((short)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DayTime_second(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::DayTime *arg1 = (gpstk::DayTime *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DayTime_second",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__DayTime, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double)((gpstk::DayTime const *)arg1)->second();
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DayTime_secOfDay(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::DayTime *arg1 = (gpstk::DayTime *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DayTime_secOfDay",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__DayTime, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double)((gpstk::DayTime const *)arg1)->secOfDay();
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DayTime_GPS10bitweek(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::DayTime *arg1 = (gpstk::DayTime *) 0 ;
    short result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DayTime_GPS10bitweek",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__DayTime, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (short)((gpstk::DayTime const *)arg1)->GPS10bitweek();
    
    {
        resultobj = SWIG_From_short((short)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DayTime_GPSzcount(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::DayTime *arg1 = (gpstk::DayTime *) 0 ;
    long result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DayTime_GPSzcount",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__DayTime, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (long)((gpstk::DayTime const *)arg1)->GPSzcount();
    
    {
        resultobj = SWIG_From_long((long)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DayTime_GPSzcountFloor(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::DayTime *arg1 = (gpstk::DayTime *) 0 ;
    long result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DayTime_GPSzcountFloor",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__DayTime, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (long)((gpstk::DayTime const *)arg1)->GPSzcountFloor();
    
    {
        resultobj = SWIG_From_long((long)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DayTime_GPSsecond(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::DayTime *arg1 = (gpstk::DayTime *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DayTime_GPSsecond",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__DayTime, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double)((gpstk::DayTime const *)arg1)->GPSsecond();
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DayTime_GPSsow(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::DayTime *arg1 = (gpstk::DayTime *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DayTime_GPSsow",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__DayTime, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double)((gpstk::DayTime const *)arg1)->GPSsow();
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DayTime_GPSday(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::DayTime *arg1 = (gpstk::DayTime *) 0 ;
    short result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DayTime_GPSday",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__DayTime, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (short)((gpstk::DayTime const *)arg1)->GPSday();
    
    {
        resultobj = SWIG_From_short((short)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DayTime_GPSfullweek(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::DayTime *arg1 = (gpstk::DayTime *) 0 ;
    short result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DayTime_GPSfullweek",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__DayTime, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (short)((gpstk::DayTime const *)arg1)->GPSfullweek();
    
    {
        resultobj = SWIG_From_short((short)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DayTime_GPSyear(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::DayTime *arg1 = (gpstk::DayTime *) 0 ;
    short result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DayTime_GPSyear",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__DayTime, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (short)((gpstk::DayTime const *)arg1)->GPSyear();
    
    {
        resultobj = SWIG_From_short((short)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DayTime_DOYyear(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::DayTime *arg1 = (gpstk::DayTime *) 0 ;
    short result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DayTime_DOYyear",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__DayTime, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (short)((gpstk::DayTime const *)arg1)->DOYyear();
    
    {
        resultobj = SWIG_From_short((short)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DayTime_DOYday(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::DayTime *arg1 = (gpstk::DayTime *) 0 ;
    short result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DayTime_DOYday",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__DayTime, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (short)((gpstk::DayTime const *)arg1)->DOYday();
    
    {
        resultobj = SWIG_From_short((short)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DayTime_DOY(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::DayTime *arg1 = (gpstk::DayTime *) 0 ;
    short result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DayTime_DOY",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__DayTime, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (short)((gpstk::DayTime const *)arg1)->DOY();
    
    {
        resultobj = SWIG_From_short((short)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DayTime_DOYsecond(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::DayTime *arg1 = (gpstk::DayTime *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DayTime_DOYsecond",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__DayTime, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double)((gpstk::DayTime const *)arg1)->DOYsecond();
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DayTime_MJDdate(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::DayTime *arg1 = (gpstk::DayTime *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DayTime_MJDdate",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__DayTime, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double)((gpstk::DayTime const *)arg1)->MJDdate();
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DayTime_getMJDasLongDouble(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::DayTime *arg1 = (gpstk::DayTime *) 0 ;
    long double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DayTime_getMJDasLongDouble",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__DayTime, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (long double)((gpstk::DayTime const *)arg1)->getMJDasLongDouble();
    
    {
        long double * resultptr;
        resultptr = new long double((long double &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_long_double, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DayTime_unixTime(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::DayTime *arg1 = (gpstk::DayTime *) 0 ;
    timeval result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DayTime_unixTime",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__DayTime, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        result = ((gpstk::DayTime const *)arg1)->unixTime();
    }
    catch(DayTimeException &_e) {
        {
            DayTimeException * temp = new DayTimeException(_e);
            if (SWIGTYPE_p_DayTimeException->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_DayTimeException->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_DayTimeException,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"DayTimeException");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_DayTimeException,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    {
        timeval * resultptr;
        resultptr = new timeval((timeval &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_timeval, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DayTime_fullZcount(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::DayTime *arg1 = (gpstk::DayTime *) 0 ;
    unsigned long result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DayTime_fullZcount",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__DayTime, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (unsigned long)((gpstk::DayTime const *)arg1)->fullZcount();
    
    {
        resultobj = SWIG_From_unsigned_SS_long((unsigned long)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DayTime_fullZcountFloor(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::DayTime *arg1 = (gpstk::DayTime *) 0 ;
    unsigned long result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DayTime_fullZcountFloor",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__DayTime, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (unsigned long)((gpstk::DayTime const *)arg1)->fullZcountFloor();
    
    {
        resultobj = SWIG_From_unsigned_SS_long((unsigned long)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DayTime_Operator_GPSZcount(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::DayTime *arg1 = (gpstk::DayTime *) 0 ;
    gpstk::GPSZcount result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DayTime_Operator_GPSZcount",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__DayTime, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = ((gpstk::DayTime const *)arg1)->operator gpstk::GPSZcount();
    
    {
        gpstk::GPSZcount * resultptr;
        resultptr = new gpstk::GPSZcount((gpstk::GPSZcount &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_gpstk__GPSZcount, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DayTime_setYMDHMS__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::DayTime *arg1 = (gpstk::DayTime *) 0 ;
    short arg2 ;
    short arg3 ;
    short arg4 ;
    short arg5 ;
    short arg6 ;
    double arg7 ;
    gpstk::DayTime::TimeFrame arg8 ;
    gpstk::DayTime *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    PyObject * obj5 = 0 ;
    PyObject * obj6 = 0 ;
    PyObject * obj7 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOOOOO:DayTime_setYMDHMS",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__DayTime, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (short)(SWIG_As_short(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (short)(SWIG_As_short(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = (short)(SWIG_As_short(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    {
        arg5 = (short)(SWIG_As_short(obj4)); 
        if (SWIG_arg_fail(5)) SWIG_fail;
    }
    {
        arg6 = (short)(SWIG_As_short(obj5)); 
        if (SWIG_arg_fail(6)) SWIG_fail;
    }
    {
        arg7 = (double)(SWIG_As_double(obj6)); 
        if (SWIG_arg_fail(7)) SWIG_fail;
    }
    {
        arg8 = (gpstk::DayTime::TimeFrame)(SWIG_As_int(obj7)); 
        if (SWIG_arg_fail(8)) SWIG_fail;
    }
    try {
        {
            gpstk::DayTime &_result_ref = (arg1)->setYMDHMS(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
            result = (gpstk::DayTime *) &_result_ref;
        }
    }
    catch(DayTimeException &_e) {
        {
            DayTimeException * temp = new DayTimeException(_e);
            if (SWIGTYPE_p_DayTimeException->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_DayTimeException->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_DayTimeException,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"DayTimeException");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_DayTimeException,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__DayTime, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DayTime_setYMDHMS__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::DayTime *arg1 = (gpstk::DayTime *) 0 ;
    short arg2 ;
    short arg3 ;
    short arg4 ;
    short arg5 ;
    short arg6 ;
    double arg7 ;
    gpstk::DayTime *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    PyObject * obj5 = 0 ;
    PyObject * obj6 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOOOO:DayTime_setYMDHMS",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__DayTime, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (short)(SWIG_As_short(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (short)(SWIG_As_short(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = (short)(SWIG_As_short(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    {
        arg5 = (short)(SWIG_As_short(obj4)); 
        if (SWIG_arg_fail(5)) SWIG_fail;
    }
    {
        arg6 = (short)(SWIG_As_short(obj5)); 
        if (SWIG_arg_fail(6)) SWIG_fail;
    }
    {
        arg7 = (double)(SWIG_As_double(obj6)); 
        if (SWIG_arg_fail(7)) SWIG_fail;
    }
    try {
        {
            gpstk::DayTime &_result_ref = (arg1)->setYMDHMS(arg2,arg3,arg4,arg5,arg6,arg7);
            result = (gpstk::DayTime *) &_result_ref;
        }
    }
    catch(DayTimeException &_e) {
        {
            DayTimeException * temp = new DayTimeException(_e);
            if (SWIGTYPE_p_DayTimeException->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_DayTimeException->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_DayTimeException,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"DayTimeException");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_DayTimeException,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__DayTime, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DayTime_setYMDHMS(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[9];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 8); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 7) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_gpstk__DayTime, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_short(argv[1]);
            if (_v) {
                _v = SWIG_Check_short(argv[2]);
                if (_v) {
                    _v = SWIG_Check_short(argv[3]);
                    if (_v) {
                        _v = SWIG_Check_short(argv[4]);
                        if (_v) {
                            _v = SWIG_Check_short(argv[5]);
                            if (_v) {
                                _v = SWIG_Check_double(argv[6]);
                                if (_v) {
                                    return _wrap_DayTime_setYMDHMS__SWIG_1(self,args);
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    if (argc == 8) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_gpstk__DayTime, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_short(argv[1]);
            if (_v) {
                _v = SWIG_Check_short(argv[2]);
                if (_v) {
                    _v = SWIG_Check_short(argv[3]);
                    if (_v) {
                        _v = SWIG_Check_short(argv[4]);
                        if (_v) {
                            _v = SWIG_Check_short(argv[5]);
                            if (_v) {
                                _v = SWIG_Check_double(argv[6]);
                                if (_v) {
                                    _v = SWIG_Check_int(argv[7]);
                                    if (_v) {
                                        return _wrap_DayTime_setYMDHMS__SWIG_0(self,args);
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'DayTime_setYMDHMS'");
    return NULL;
}


static PyObject *_wrap_DayTime_setGPS__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::DayTime *arg1 = (gpstk::DayTime *) 0 ;
    short arg2 ;
    double arg3 ;
    gpstk::DayTime::TimeFrame arg4 ;
    gpstk::DayTime *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:DayTime_setGPS",&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__DayTime, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (short)(SWIG_As_short(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (double)(SWIG_As_double(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = (gpstk::DayTime::TimeFrame)(SWIG_As_int(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    try {
        {
            gpstk::DayTime &_result_ref = (arg1)->setGPS(arg2,arg3,arg4);
            result = (gpstk::DayTime *) &_result_ref;
        }
    }
    catch(DayTimeException &_e) {
        {
            DayTimeException * temp = new DayTimeException(_e);
            if (SWIGTYPE_p_DayTimeException->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_DayTimeException->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_DayTimeException,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"DayTimeException");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_DayTimeException,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__DayTime, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DayTime_setGPS__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::DayTime *arg1 = (gpstk::DayTime *) 0 ;
    short arg2 ;
    double arg3 ;
    gpstk::DayTime *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:DayTime_setGPS",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__DayTime, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (short)(SWIG_As_short(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (double)(SWIG_As_double(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    try {
        {
            gpstk::DayTime &_result_ref = (arg1)->setGPS(arg2,arg3);
            result = (gpstk::DayTime *) &_result_ref;
        }
    }
    catch(DayTimeException &_e) {
        {
            DayTimeException * temp = new DayTimeException(_e);
            if (SWIGTYPE_p_DayTimeException->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_DayTimeException->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_DayTimeException,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"DayTimeException");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_DayTimeException,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__DayTime, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DayTime_setGPS__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::DayTime *arg1 = (gpstk::DayTime *) 0 ;
    short arg2 ;
    long arg3 ;
    gpstk::DayTime::TimeFrame arg4 ;
    gpstk::DayTime *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:DayTime_setGPS",&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__DayTime, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (short)(SWIG_As_short(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (long)(SWIG_As_long(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = (gpstk::DayTime::TimeFrame)(SWIG_As_int(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    try {
        {
            gpstk::DayTime &_result_ref = (arg1)->setGPS(arg2,arg3,arg4);
            result = (gpstk::DayTime *) &_result_ref;
        }
    }
    catch(DayTimeException &_e) {
        {
            DayTimeException * temp = new DayTimeException(_e);
            if (SWIGTYPE_p_DayTimeException->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_DayTimeException->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_DayTimeException,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"DayTimeException");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_DayTimeException,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__DayTime, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DayTime_setGPS__SWIG_3(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::DayTime *arg1 = (gpstk::DayTime *) 0 ;
    short arg2 ;
    long arg3 ;
    gpstk::DayTime *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:DayTime_setGPS",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__DayTime, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (short)(SWIG_As_short(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (long)(SWIG_As_long(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    try {
        {
            gpstk::DayTime &_result_ref = (arg1)->setGPS(arg2,arg3);
            result = (gpstk::DayTime *) &_result_ref;
        }
    }
    catch(DayTimeException &_e) {
        {
            DayTimeException * temp = new DayTimeException(_e);
            if (SWIGTYPE_p_DayTimeException->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_DayTimeException->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_DayTimeException,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"DayTimeException");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_DayTimeException,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__DayTime, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DayTime_setGPS__SWIG_4(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::DayTime *arg1 = (gpstk::DayTime *) 0 ;
    short arg2 ;
    long arg3 ;
    short arg4 ;
    gpstk::DayTime::TimeFrame arg5 ;
    gpstk::DayTime *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOO:DayTime_setGPS",&obj0,&obj1,&obj2,&obj3,&obj4)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__DayTime, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (short)(SWIG_As_short(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (long)(SWIG_As_long(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = (short)(SWIG_As_short(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    {
        arg5 = (gpstk::DayTime::TimeFrame)(SWIG_As_int(obj4)); 
        if (SWIG_arg_fail(5)) SWIG_fail;
    }
    try {
        {
            gpstk::DayTime &_result_ref = (arg1)->setGPS(arg2,arg3,arg4,arg5);
            result = (gpstk::DayTime *) &_result_ref;
        }
    }
    catch(DayTimeException &_e) {
        {
            DayTimeException * temp = new DayTimeException(_e);
            if (SWIGTYPE_p_DayTimeException->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_DayTimeException->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_DayTimeException,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"DayTimeException");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_DayTimeException,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__DayTime, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DayTime_setGPS__SWIG_5(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::DayTime *arg1 = (gpstk::DayTime *) 0 ;
    short arg2 ;
    long arg3 ;
    short arg4 ;
    gpstk::DayTime *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:DayTime_setGPS",&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__DayTime, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (short)(SWIG_As_short(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (long)(SWIG_As_long(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = (short)(SWIG_As_short(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    try {
        {
            gpstk::DayTime &_result_ref = (arg1)->setGPS(arg2,arg3,arg4);
            result = (gpstk::DayTime *) &_result_ref;
        }
    }
    catch(DayTimeException &_e) {
        {
            DayTimeException * temp = new DayTimeException(_e);
            if (SWIGTYPE_p_DayTimeException->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_DayTimeException->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_DayTimeException,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"DayTimeException");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_DayTimeException,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__DayTime, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DayTime_setGPS__SWIG_6(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::DayTime *arg1 = (gpstk::DayTime *) 0 ;
    short arg2 ;
    double arg3 ;
    short arg4 ;
    gpstk::DayTime::TimeFrame arg5 ;
    gpstk::DayTime *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOO:DayTime_setGPS",&obj0,&obj1,&obj2,&obj3,&obj4)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__DayTime, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (short)(SWIG_As_short(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (double)(SWIG_As_double(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = (short)(SWIG_As_short(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    {
        arg5 = (gpstk::DayTime::TimeFrame)(SWIG_As_int(obj4)); 
        if (SWIG_arg_fail(5)) SWIG_fail;
    }
    try {
        {
            gpstk::DayTime &_result_ref = (arg1)->setGPS(arg2,arg3,arg4,arg5);
            result = (gpstk::DayTime *) &_result_ref;
        }
    }
    catch(DayTimeException &_e) {
        {
            DayTimeException * temp = new DayTimeException(_e);
            if (SWIGTYPE_p_DayTimeException->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_DayTimeException->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_DayTimeException,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"DayTimeException");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_DayTimeException,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__DayTime, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DayTime_setGPS__SWIG_7(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::DayTime *arg1 = (gpstk::DayTime *) 0 ;
    short arg2 ;
    double arg3 ;
    short arg4 ;
    gpstk::DayTime *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:DayTime_setGPS",&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__DayTime, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (short)(SWIG_As_short(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (double)(SWIG_As_double(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = (short)(SWIG_As_short(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    try {
        {
            gpstk::DayTime &_result_ref = (arg1)->setGPS(arg2,arg3,arg4);
            result = (gpstk::DayTime *) &_result_ref;
        }
    }
    catch(DayTimeException &_e) {
        {
            DayTimeException * temp = new DayTimeException(_e);
            if (SWIGTYPE_p_DayTimeException->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_DayTimeException->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_DayTimeException,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"DayTimeException");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_DayTimeException,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__DayTime, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DayTime_setGPS__SWIG_8(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::DayTime *arg1 = (gpstk::DayTime *) 0 ;
    unsigned long arg2 ;
    gpstk::DayTime::TimeFrame arg3 ;
    gpstk::DayTime *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:DayTime_setGPS",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__DayTime, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (unsigned long)(SWIG_As_unsigned_SS_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (gpstk::DayTime::TimeFrame)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    try {
        {
            gpstk::DayTime &_result_ref = (arg1)->setGPS(arg2,arg3);
            result = (gpstk::DayTime *) &_result_ref;
        }
    }
    catch(DayTimeException &_e) {
        {
            DayTimeException * temp = new DayTimeException(_e);
            if (SWIGTYPE_p_DayTimeException->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_DayTimeException->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_DayTimeException,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"DayTimeException");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_DayTimeException,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__DayTime, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DayTime_setGPS__SWIG_9(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::DayTime *arg1 = (gpstk::DayTime *) 0 ;
    unsigned long arg2 ;
    gpstk::DayTime *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:DayTime_setGPS",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__DayTime, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (unsigned long)(SWIG_As_unsigned_SS_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        {
            gpstk::DayTime &_result_ref = (arg1)->setGPS(arg2);
            result = (gpstk::DayTime *) &_result_ref;
        }
    }
    catch(DayTimeException &_e) {
        {
            DayTimeException * temp = new DayTimeException(_e);
            if (SWIGTYPE_p_DayTimeException->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_DayTimeException->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_DayTimeException,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"DayTimeException");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_DayTimeException,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__DayTime, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DayTime_setGPS(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[6];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 5); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_gpstk__DayTime, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_unsigned_SS_long(argv[1]);
            if (_v) {
                return _wrap_DayTime_setGPS__SWIG_9(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_gpstk__DayTime, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_short(argv[1]);
            if (_v) {
                _v = SWIG_Check_long(argv[2]);
                if (_v) {
                    return _wrap_DayTime_setGPS__SWIG_3(self,args);
                }
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_gpstk__DayTime, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_short(argv[1]);
            if (_v) {
                _v = SWIG_Check_double(argv[2]);
                if (_v) {
                    return _wrap_DayTime_setGPS__SWIG_1(self,args);
                }
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_gpstk__DayTime, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_unsigned_SS_long(argv[1]);
            if (_v) {
                _v = SWIG_Check_int(argv[2]);
                if (_v) {
                    return _wrap_DayTime_setGPS__SWIG_8(self,args);
                }
            }
        }
    }
    if (argc == 4) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_gpstk__DayTime, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_short(argv[1]);
            if (_v) {
                _v = SWIG_Check_long(argv[2]);
                if (_v) {
                    _v = SWIG_Check_short(argv[3]);
                    if (_v) {
                        return _wrap_DayTime_setGPS__SWIG_5(self,args);
                    }
                }
            }
        }
    }
    if (argc == 4) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_gpstk__DayTime, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_short(argv[1]);
            if (_v) {
                _v = SWIG_Check_long(argv[2]);
                if (_v) {
                    _v = SWIG_Check_int(argv[3]);
                    if (_v) {
                        return _wrap_DayTime_setGPS__SWIG_2(self,args);
                    }
                }
            }
        }
    }
    if (argc == 4) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_gpstk__DayTime, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_short(argv[1]);
            if (_v) {
                _v = SWIG_Check_double(argv[2]);
                if (_v) {
                    _v = SWIG_Check_short(argv[3]);
                    if (_v) {
                        return _wrap_DayTime_setGPS__SWIG_7(self,args);
                    }
                }
            }
        }
    }
    if (argc == 4) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_gpstk__DayTime, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_short(argv[1]);
            if (_v) {
                _v = SWIG_Check_double(argv[2]);
                if (_v) {
                    _v = SWIG_Check_int(argv[3]);
                    if (_v) {
                        return _wrap_DayTime_setGPS__SWIG_0(self,args);
                    }
                }
            }
        }
    }
    if (argc == 5) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_gpstk__DayTime, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_short(argv[1]);
            if (_v) {
                _v = SWIG_Check_long(argv[2]);
                if (_v) {
                    _v = SWIG_Check_short(argv[3]);
                    if (_v) {
                        _v = SWIG_Check_int(argv[4]);
                        if (_v) {
                            return _wrap_DayTime_setGPS__SWIG_4(self,args);
                        }
                    }
                }
            }
        }
    }
    if (argc == 5) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_gpstk__DayTime, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_short(argv[1]);
            if (_v) {
                _v = SWIG_Check_double(argv[2]);
                if (_v) {
                    _v = SWIG_Check_short(argv[3]);
                    if (_v) {
                        _v = SWIG_Check_int(argv[4]);
                        if (_v) {
                            return _wrap_DayTime_setGPS__SWIG_6(self,args);
                        }
                    }
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'DayTime_setGPS'");
    return NULL;
}


static PyObject *_wrap_DayTime_setGPSfullweek__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::DayTime *arg1 = (gpstk::DayTime *) 0 ;
    short arg2 ;
    double arg3 ;
    gpstk::DayTime::TimeFrame arg4 ;
    gpstk::DayTime *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:DayTime_setGPSfullweek",&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__DayTime, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (short)(SWIG_As_short(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (double)(SWIG_As_double(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = (gpstk::DayTime::TimeFrame)(SWIG_As_int(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    try {
        {
            gpstk::DayTime &_result_ref = (arg1)->setGPSfullweek(arg2,arg3,arg4);
            result = (gpstk::DayTime *) &_result_ref;
        }
    }
    catch(DayTimeException &_e) {
        {
            DayTimeException * temp = new DayTimeException(_e);
            if (SWIGTYPE_p_DayTimeException->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_DayTimeException->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_DayTimeException,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"DayTimeException");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_DayTimeException,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__DayTime, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DayTime_setGPSfullweek__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::DayTime *arg1 = (gpstk::DayTime *) 0 ;
    short arg2 ;
    double arg3 ;
    gpstk::DayTime *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:DayTime_setGPSfullweek",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__DayTime, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (short)(SWIG_As_short(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (double)(SWIG_As_double(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    try {
        {
            gpstk::DayTime &_result_ref = (arg1)->setGPSfullweek(arg2,arg3);
            result = (gpstk::DayTime *) &_result_ref;
        }
    }
    catch(DayTimeException &_e) {
        {
            DayTimeException * temp = new DayTimeException(_e);
            if (SWIGTYPE_p_DayTimeException->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_DayTimeException->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_DayTimeException,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"DayTimeException");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_DayTimeException,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__DayTime, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DayTime_setGPSfullweek__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::DayTime *arg1 = (gpstk::DayTime *) 0 ;
    short arg2 ;
    long arg3 ;
    gpstk::DayTime::TimeFrame arg4 ;
    gpstk::DayTime *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:DayTime_setGPSfullweek",&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__DayTime, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (short)(SWIG_As_short(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (long)(SWIG_As_long(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = (gpstk::DayTime::TimeFrame)(SWIG_As_int(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    try {
        {
            gpstk::DayTime &_result_ref = (arg1)->setGPSfullweek(arg2,arg3,arg4);
            result = (gpstk::DayTime *) &_result_ref;
        }
    }
    catch(DayTimeException &_e) {
        {
            DayTimeException * temp = new DayTimeException(_e);
            if (SWIGTYPE_p_DayTimeException->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_DayTimeException->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_DayTimeException,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"DayTimeException");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_DayTimeException,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__DayTime, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DayTime_setGPSfullweek__SWIG_3(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::DayTime *arg1 = (gpstk::DayTime *) 0 ;
    short arg2 ;
    long arg3 ;
    gpstk::DayTime *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:DayTime_setGPSfullweek",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__DayTime, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (short)(SWIG_As_short(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (long)(SWIG_As_long(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    try {
        {
            gpstk::DayTime &_result_ref = (arg1)->setGPSfullweek(arg2,arg3);
            result = (gpstk::DayTime *) &_result_ref;
        }
    }
    catch(DayTimeException &_e) {
        {
            DayTimeException * temp = new DayTimeException(_e);
            if (SWIGTYPE_p_DayTimeException->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_DayTimeException->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_DayTimeException,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"DayTimeException");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_DayTimeException,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__DayTime, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DayTime_setGPSfullweek(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[5];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 4); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_gpstk__DayTime, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_short(argv[1]);
            if (_v) {
                _v = SWIG_Check_long(argv[2]);
                if (_v) {
                    return _wrap_DayTime_setGPSfullweek__SWIG_3(self,args);
                }
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_gpstk__DayTime, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_short(argv[1]);
            if (_v) {
                _v = SWIG_Check_double(argv[2]);
                if (_v) {
                    return _wrap_DayTime_setGPSfullweek__SWIG_1(self,args);
                }
            }
        }
    }
    if (argc == 4) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_gpstk__DayTime, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_short(argv[1]);
            if (_v) {
                _v = SWIG_Check_long(argv[2]);
                if (_v) {
                    _v = SWIG_Check_int(argv[3]);
                    if (_v) {
                        return _wrap_DayTime_setGPSfullweek__SWIG_2(self,args);
                    }
                }
            }
        }
    }
    if (argc == 4) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_gpstk__DayTime, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_short(argv[1]);
            if (_v) {
                _v = SWIG_Check_double(argv[2]);
                if (_v) {
                    _v = SWIG_Check_int(argv[3]);
                    if (_v) {
                        return _wrap_DayTime_setGPSfullweek__SWIG_0(self,args);
                    }
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'DayTime_setGPSfullweek'");
    return NULL;
}


static PyObject *_wrap_DayTime_setGPSZcount__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::DayTime *arg1 = (gpstk::DayTime *) 0 ;
    gpstk::GPSZcount *arg2 = 0 ;
    gpstk::DayTime::TimeFrame arg3 ;
    gpstk::DayTime *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:DayTime_setGPSZcount",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__DayTime, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_gpstk__GPSZcount, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("gpstk::GPSZcount");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (gpstk::DayTime::TimeFrame)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    try {
        {
            gpstk::DayTime &_result_ref = (arg1)->setGPSZcount((gpstk::GPSZcount const &)*arg2,arg3);
            result = (gpstk::DayTime *) &_result_ref;
        }
    }
    catch(DayTimeException &_e) {
        {
            DayTimeException * temp = new DayTimeException(_e);
            if (SWIGTYPE_p_DayTimeException->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_DayTimeException->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_DayTimeException,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"DayTimeException");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_DayTimeException,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__DayTime, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DayTime_setGPSZcount__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::DayTime *arg1 = (gpstk::DayTime *) 0 ;
    gpstk::GPSZcount *arg2 = 0 ;
    gpstk::DayTime *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:DayTime_setGPSZcount",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__DayTime, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_gpstk__GPSZcount, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("gpstk::GPSZcount");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        {
            gpstk::DayTime &_result_ref = (arg1)->setGPSZcount((gpstk::GPSZcount const &)*arg2);
            result = (gpstk::DayTime *) &_result_ref;
        }
    }
    catch(DayTimeException &_e) {
        {
            DayTimeException * temp = new DayTimeException(_e);
            if (SWIGTYPE_p_DayTimeException->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_DayTimeException->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_DayTimeException,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"DayTimeException");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_DayTimeException,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__DayTime, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DayTime_setGPSZcount(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[4];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_gpstk__DayTime, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_gpstk__GPSZcount, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_DayTime_setGPSZcount__SWIG_1(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_gpstk__DayTime, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_gpstk__GPSZcount, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                _v = SWIG_Check_int(argv[2]);
                if (_v) {
                    return _wrap_DayTime_setGPSZcount__SWIG_0(self,args);
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'DayTime_setGPSZcount'");
    return NULL;
}


static PyObject *_wrap_DayTime_setYDoySod__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::DayTime *arg1 = (gpstk::DayTime *) 0 ;
    short arg2 ;
    short arg3 ;
    double arg4 ;
    gpstk::DayTime::TimeFrame arg5 ;
    gpstk::DayTime *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOO:DayTime_setYDoySod",&obj0,&obj1,&obj2,&obj3,&obj4)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__DayTime, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (short)(SWIG_As_short(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (short)(SWIG_As_short(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = (double)(SWIG_As_double(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    {
        arg5 = (gpstk::DayTime::TimeFrame)(SWIG_As_int(obj4)); 
        if (SWIG_arg_fail(5)) SWIG_fail;
    }
    try {
        {
            gpstk::DayTime &_result_ref = (arg1)->setYDoySod(arg2,arg3,arg4,arg5);
            result = (gpstk::DayTime *) &_result_ref;
        }
    }
    catch(DayTimeException &_e) {
        {
            DayTimeException * temp = new DayTimeException(_e);
            if (SWIGTYPE_p_DayTimeException->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_DayTimeException->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_DayTimeException,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"DayTimeException");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_DayTimeException,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__DayTime, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DayTime_setYDoySod__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::DayTime *arg1 = (gpstk::DayTime *) 0 ;
    short arg2 ;
    short arg3 ;
    double arg4 ;
    gpstk::DayTime *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:DayTime_setYDoySod",&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__DayTime, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (short)(SWIG_As_short(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (short)(SWIG_As_short(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = (double)(SWIG_As_double(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    try {
        {
            gpstk::DayTime &_result_ref = (arg1)->setYDoySod(arg2,arg3,arg4);
            result = (gpstk::DayTime *) &_result_ref;
        }
    }
    catch(DayTimeException &_e) {
        {
            DayTimeException * temp = new DayTimeException(_e);
            if (SWIGTYPE_p_DayTimeException->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_DayTimeException->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_DayTimeException,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"DayTimeException");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_DayTimeException,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__DayTime, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DayTime_setYDoySod(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[6];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 5); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 4) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_gpstk__DayTime, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_short(argv[1]);
            if (_v) {
                _v = SWIG_Check_short(argv[2]);
                if (_v) {
                    _v = SWIG_Check_double(argv[3]);
                    if (_v) {
                        return _wrap_DayTime_setYDoySod__SWIG_1(self,args);
                    }
                }
            }
        }
    }
    if (argc == 5) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_gpstk__DayTime, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_short(argv[1]);
            if (_v) {
                _v = SWIG_Check_short(argv[2]);
                if (_v) {
                    _v = SWIG_Check_double(argv[3]);
                    if (_v) {
                        _v = SWIG_Check_int(argv[4]);
                        if (_v) {
                            return _wrap_DayTime_setYDoySod__SWIG_0(self,args);
                        }
                    }
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'DayTime_setYDoySod'");
    return NULL;
}


static PyObject *_wrap_DayTime_setMJD__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::DayTime *arg1 = (gpstk::DayTime *) 0 ;
    long double arg2 ;
    gpstk::DayTime::TimeFrame arg3 ;
    gpstk::DayTime *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:DayTime_setMJD",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__DayTime, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        long double * argp;
        SWIG_Python_ConvertPtr(obj1, (void **)&argp, SWIGTYPE_p_long_double, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("long double");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *argp;
    }
    {
        arg3 = (gpstk::DayTime::TimeFrame)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    try {
        {
            gpstk::DayTime &_result_ref = (arg1)->setMJD(arg2,arg3);
            result = (gpstk::DayTime *) &_result_ref;
        }
    }
    catch(DayTimeException &_e) {
        {
            DayTimeException * temp = new DayTimeException(_e);
            if (SWIGTYPE_p_DayTimeException->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_DayTimeException->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_DayTimeException,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"DayTimeException");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_DayTimeException,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__DayTime, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DayTime_setMJD__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::DayTime *arg1 = (gpstk::DayTime *) 0 ;
    long double arg2 ;
    gpstk::DayTime *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:DayTime_setMJD",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__DayTime, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        long double * argp;
        SWIG_Python_ConvertPtr(obj1, (void **)&argp, SWIGTYPE_p_long_double, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("long double");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *argp;
    }
    try {
        {
            gpstk::DayTime &_result_ref = (arg1)->setMJD(arg2);
            result = (gpstk::DayTime *) &_result_ref;
        }
    }
    catch(DayTimeException &_e) {
        {
            DayTimeException * temp = new DayTimeException(_e);
            if (SWIGTYPE_p_DayTimeException->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_DayTimeException->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_DayTimeException,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"DayTimeException");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_DayTimeException,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__DayTime, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DayTime_setMJDdate__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::DayTime *arg1 = (gpstk::DayTime *) 0 ;
    long double arg2 ;
    gpstk::DayTime::TimeFrame arg3 ;
    gpstk::DayTime *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:DayTime_setMJDdate",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__DayTime, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        long double * argp;
        SWIG_Python_ConvertPtr(obj1, (void **)&argp, SWIGTYPE_p_long_double, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("long double");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *argp;
    }
    {
        arg3 = (gpstk::DayTime::TimeFrame)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    try {
        {
            gpstk::DayTime &_result_ref = (arg1)->setMJDdate(arg2,arg3);
            result = (gpstk::DayTime *) &_result_ref;
        }
    }
    catch(DayTimeException &_e) {
        {
            DayTimeException * temp = new DayTimeException(_e);
            if (SWIGTYPE_p_DayTimeException->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_DayTimeException->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_DayTimeException,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"DayTimeException");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_DayTimeException,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__DayTime, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DayTime_setMJDdate__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::DayTime *arg1 = (gpstk::DayTime *) 0 ;
    long double arg2 ;
    gpstk::DayTime *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:DayTime_setMJDdate",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__DayTime, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        long double * argp;
        SWIG_Python_ConvertPtr(obj1, (void **)&argp, SWIGTYPE_p_long_double, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("long double");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *argp;
    }
    try {
        {
            gpstk::DayTime &_result_ref = (arg1)->setMJDdate(arg2);
            result = (gpstk::DayTime *) &_result_ref;
        }
    }
    catch(DayTimeException &_e) {
        {
            DayTimeException * temp = new DayTimeException(_e);
            if (SWIGTYPE_p_DayTimeException->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_DayTimeException->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_DayTimeException,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"DayTimeException");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_DayTimeException,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__DayTime, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DayTime_setMJD__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::DayTime *arg1 = (gpstk::DayTime *) 0 ;
    double arg2 ;
    gpstk::DayTime::TimeFrame arg3 ;
    gpstk::DayTime *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:DayTime_setMJD",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__DayTime, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (gpstk::DayTime::TimeFrame)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    try {
        {
            gpstk::DayTime &_result_ref = (arg1)->setMJD(arg2,arg3);
            result = (gpstk::DayTime *) &_result_ref;
        }
    }
    catch(DayTimeException &_e) {
        {
            DayTimeException * temp = new DayTimeException(_e);
            if (SWIGTYPE_p_DayTimeException->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_DayTimeException->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_DayTimeException,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"DayTimeException");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_DayTimeException,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__DayTime, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DayTime_setMJD__SWIG_3(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::DayTime *arg1 = (gpstk::DayTime *) 0 ;
    double arg2 ;
    gpstk::DayTime *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:DayTime_setMJD",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__DayTime, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        {
            gpstk::DayTime &_result_ref = (arg1)->setMJD(arg2);
            result = (gpstk::DayTime *) &_result_ref;
        }
    }
    catch(DayTimeException &_e) {
        {
            DayTimeException * temp = new DayTimeException(_e);
            if (SWIGTYPE_p_DayTimeException->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_DayTimeException->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_DayTimeException,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"DayTimeException");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_DayTimeException,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__DayTime, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DayTime_setMJD(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[4];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_gpstk__DayTime, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_long_double, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_DayTime_setMJD__SWIG_1(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_gpstk__DayTime, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_double(argv[1]);
            if (_v) {
                return _wrap_DayTime_setMJD__SWIG_3(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_gpstk__DayTime, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_long_double, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                _v = SWIG_Check_int(argv[2]);
                if (_v) {
                    return _wrap_DayTime_setMJD__SWIG_0(self,args);
                }
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_gpstk__DayTime, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_double(argv[1]);
            if (_v) {
                _v = SWIG_Check_int(argv[2]);
                if (_v) {
                    return _wrap_DayTime_setMJD__SWIG_2(self,args);
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'DayTime_setMJD'");
    return NULL;
}


static PyObject *_wrap_DayTime_setMJDdate__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::DayTime *arg1 = (gpstk::DayTime *) 0 ;
    double arg2 ;
    gpstk::DayTime::TimeFrame arg3 ;
    gpstk::DayTime *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:DayTime_setMJDdate",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__DayTime, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (gpstk::DayTime::TimeFrame)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    try {
        {
            gpstk::DayTime &_result_ref = (arg1)->setMJDdate(arg2,arg3);
            result = (gpstk::DayTime *) &_result_ref;
        }
    }
    catch(DayTimeException &_e) {
        {
            DayTimeException * temp = new DayTimeException(_e);
            if (SWIGTYPE_p_DayTimeException->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_DayTimeException->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_DayTimeException,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"DayTimeException");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_DayTimeException,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__DayTime, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DayTime_setMJDdate__SWIG_3(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::DayTime *arg1 = (gpstk::DayTime *) 0 ;
    double arg2 ;
    gpstk::DayTime *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:DayTime_setMJDdate",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__DayTime, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        {
            gpstk::DayTime &_result_ref = (arg1)->setMJDdate(arg2);
            result = (gpstk::DayTime *) &_result_ref;
        }
    }
    catch(DayTimeException &_e) {
        {
            DayTimeException * temp = new DayTimeException(_e);
            if (SWIGTYPE_p_DayTimeException->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_DayTimeException->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_DayTimeException,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"DayTimeException");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_DayTimeException,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__DayTime, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DayTime_setMJDdate(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[4];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_gpstk__DayTime, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_long_double, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_DayTime_setMJDdate__SWIG_1(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_gpstk__DayTime, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_double(argv[1]);
            if (_v) {
                return _wrap_DayTime_setMJDdate__SWIG_3(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_gpstk__DayTime, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_long_double, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                _v = SWIG_Check_int(argv[2]);
                if (_v) {
                    return _wrap_DayTime_setMJDdate__SWIG_0(self,args);
                }
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_gpstk__DayTime, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_double(argv[1]);
            if (_v) {
                _v = SWIG_Check_int(argv[2]);
                if (_v) {
                    return _wrap_DayTime_setMJDdate__SWIG_2(self,args);
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'DayTime_setMJDdate'");
    return NULL;
}


static PyObject *_wrap_DayTime_setUnix__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::DayTime *arg1 = (gpstk::DayTime *) 0 ;
    timeval *arg2 = 0 ;
    gpstk::DayTime::TimeFrame arg3 ;
    gpstk::DayTime *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:DayTime_setUnix",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__DayTime, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_timeval, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("timeval");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (gpstk::DayTime::TimeFrame)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    try {
        {
            gpstk::DayTime &_result_ref = (arg1)->setUnix((timeval const &)*arg2,arg3);
            result = (gpstk::DayTime *) &_result_ref;
        }
    }
    catch(DayTimeException &_e) {
        {
            DayTimeException * temp = new DayTimeException(_e);
            if (SWIGTYPE_p_DayTimeException->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_DayTimeException->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_DayTimeException,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"DayTimeException");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_DayTimeException,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__DayTime, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DayTime_setUnix__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::DayTime *arg1 = (gpstk::DayTime *) 0 ;
    timeval *arg2 = 0 ;
    gpstk::DayTime *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:DayTime_setUnix",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__DayTime, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_timeval, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("timeval");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        {
            gpstk::DayTime &_result_ref = (arg1)->setUnix((timeval const &)*arg2);
            result = (gpstk::DayTime *) &_result_ref;
        }
    }
    catch(DayTimeException &_e) {
        {
            DayTimeException * temp = new DayTimeException(_e);
            if (SWIGTYPE_p_DayTimeException->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_DayTimeException->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_DayTimeException,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"DayTimeException");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_DayTimeException,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__DayTime, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DayTime_setUnix(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[4];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_gpstk__DayTime, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_timeval, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_DayTime_setUnix__SWIG_1(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_gpstk__DayTime, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_timeval, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                _v = SWIG_Check_int(argv[2]);
                if (_v) {
                    return _wrap_DayTime_setUnix__SWIG_0(self,args);
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'DayTime_setUnix'");
    return NULL;
}


static PyObject *_wrap_DayTime_setANSI__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::DayTime *arg1 = (gpstk::DayTime *) 0 ;
    time_t *arg2 = 0 ;
    gpstk::DayTime::TimeFrame arg3 ;
    gpstk::DayTime *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:DayTime_setANSI",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__DayTime, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_time_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("time_t");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (gpstk::DayTime::TimeFrame)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    try {
        {
            gpstk::DayTime &_result_ref = (arg1)->setANSI((time_t const &)*arg2,arg3);
            result = (gpstk::DayTime *) &_result_ref;
        }
    }
    catch(DayTimeException &_e) {
        {
            DayTimeException * temp = new DayTimeException(_e);
            if (SWIGTYPE_p_DayTimeException->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_DayTimeException->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_DayTimeException,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"DayTimeException");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_DayTimeException,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__DayTime, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DayTime_setANSI__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::DayTime *arg1 = (gpstk::DayTime *) 0 ;
    time_t *arg2 = 0 ;
    gpstk::DayTime *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:DayTime_setANSI",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__DayTime, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_time_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("time_t");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        {
            gpstk::DayTime &_result_ref = (arg1)->setANSI((time_t const &)*arg2);
            result = (gpstk::DayTime *) &_result_ref;
        }
    }
    catch(DayTimeException &_e) {
        {
            DayTimeException * temp = new DayTimeException(_e);
            if (SWIGTYPE_p_DayTimeException->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_DayTimeException->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_DayTimeException,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"DayTimeException");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_DayTimeException,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__DayTime, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DayTime_setANSI(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[4];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_gpstk__DayTime, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_time_t, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_DayTime_setANSI__SWIG_1(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_gpstk__DayTime, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_time_t, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                _v = SWIG_Check_int(argv[2]);
                if (_v) {
                    return _wrap_DayTime_setANSI__SWIG_0(self,args);
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'DayTime_setANSI'");
    return NULL;
}


static PyObject *_wrap_DayTime_setSystemTime(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::DayTime *arg1 = (gpstk::DayTime *) 0 ;
    gpstk::DayTime *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DayTime_setSystemTime",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__DayTime, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        {
            gpstk::DayTime &_result_ref = (arg1)->setSystemTime();
            result = (gpstk::DayTime *) &_result_ref;
        }
    }
    catch(DayTimeException &_e) {
        {
            DayTimeException * temp = new DayTimeException(_e);
            if (SWIGTYPE_p_DayTimeException->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_DayTimeException->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_DayTimeException,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"DayTimeException");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_DayTimeException,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__DayTime, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DayTime_setLocalTime(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::DayTime *arg1 = (gpstk::DayTime *) 0 ;
    gpstk::DayTime *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DayTime_setLocalTime",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__DayTime, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        {
            gpstk::DayTime &_result_ref = (arg1)->setLocalTime();
            result = (gpstk::DayTime *) &_result_ref;
        }
    }
    catch(DayTimeException &_e) {
        {
            DayTimeException * temp = new DayTimeException(_e);
            if (SWIGTYPE_p_DayTimeException->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_DayTimeException->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_DayTimeException,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"DayTimeException");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_DayTimeException,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__DayTime, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DayTime_setYMD__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::DayTime *arg1 = (gpstk::DayTime *) 0 ;
    int arg2 ;
    int arg3 ;
    int arg4 ;
    gpstk::DayTime::TimeFrame arg5 ;
    gpstk::DayTime *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOO:DayTime_setYMD",&obj0,&obj1,&obj2,&obj3,&obj4)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__DayTime, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (int)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = (int)(SWIG_As_int(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    {
        arg5 = (gpstk::DayTime::TimeFrame)(SWIG_As_int(obj4)); 
        if (SWIG_arg_fail(5)) SWIG_fail;
    }
    try {
        {
            gpstk::DayTime &_result_ref = (arg1)->setYMD(arg2,arg3,arg4,arg5);
            result = (gpstk::DayTime *) &_result_ref;
        }
    }
    catch(DayTimeException &_e) {
        {
            DayTimeException * temp = new DayTimeException(_e);
            if (SWIGTYPE_p_DayTimeException->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_DayTimeException->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_DayTimeException,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"DayTimeException");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_DayTimeException,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__DayTime, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DayTime_setYMD__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::DayTime *arg1 = (gpstk::DayTime *) 0 ;
    int arg2 ;
    int arg3 ;
    int arg4 ;
    gpstk::DayTime *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:DayTime_setYMD",&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__DayTime, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (int)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = (int)(SWIG_As_int(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    try {
        {
            gpstk::DayTime &_result_ref = (arg1)->setYMD(arg2,arg3,arg4);
            result = (gpstk::DayTime *) &_result_ref;
        }
    }
    catch(DayTimeException &_e) {
        {
            DayTimeException * temp = new DayTimeException(_e);
            if (SWIGTYPE_p_DayTimeException->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_DayTimeException->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_DayTimeException,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"DayTimeException");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_DayTimeException,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__DayTime, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DayTime_setYMD(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[6];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 5); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 4) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_gpstk__DayTime, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_int(argv[1]);
            if (_v) {
                _v = SWIG_Check_int(argv[2]);
                if (_v) {
                    _v = SWIG_Check_int(argv[3]);
                    if (_v) {
                        return _wrap_DayTime_setYMD__SWIG_1(self,args);
                    }
                }
            }
        }
    }
    if (argc == 5) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_gpstk__DayTime, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_int(argv[1]);
            if (_v) {
                _v = SWIG_Check_int(argv[2]);
                if (_v) {
                    _v = SWIG_Check_int(argv[3]);
                    if (_v) {
                        _v = SWIG_Check_int(argv[4]);
                        if (_v) {
                            return _wrap_DayTime_setYMD__SWIG_0(self,args);
                        }
                    }
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'DayTime_setYMD'");
    return NULL;
}


static PyObject *_wrap_DayTime_setHMS__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::DayTime *arg1 = (gpstk::DayTime *) 0 ;
    int arg2 ;
    int arg3 ;
    double arg4 ;
    gpstk::DayTime::TimeFrame arg5 ;
    gpstk::DayTime *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOO:DayTime_setHMS",&obj0,&obj1,&obj2,&obj3,&obj4)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__DayTime, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (int)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = (double)(SWIG_As_double(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    {
        arg5 = (gpstk::DayTime::TimeFrame)(SWIG_As_int(obj4)); 
        if (SWIG_arg_fail(5)) SWIG_fail;
    }
    try {
        {
            gpstk::DayTime &_result_ref = (arg1)->setHMS(arg2,arg3,arg4,arg5);
            result = (gpstk::DayTime *) &_result_ref;
        }
    }
    catch(DayTimeException &_e) {
        {
            DayTimeException * temp = new DayTimeException(_e);
            if (SWIGTYPE_p_DayTimeException->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_DayTimeException->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_DayTimeException,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"DayTimeException");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_DayTimeException,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__DayTime, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DayTime_setHMS__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::DayTime *arg1 = (gpstk::DayTime *) 0 ;
    int arg2 ;
    int arg3 ;
    double arg4 ;
    gpstk::DayTime *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:DayTime_setHMS",&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__DayTime, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (int)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = (double)(SWIG_As_double(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    try {
        {
            gpstk::DayTime &_result_ref = (arg1)->setHMS(arg2,arg3,arg4);
            result = (gpstk::DayTime *) &_result_ref;
        }
    }
    catch(DayTimeException &_e) {
        {
            DayTimeException * temp = new DayTimeException(_e);
            if (SWIGTYPE_p_DayTimeException->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_DayTimeException->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_DayTimeException,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"DayTimeException");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_DayTimeException,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__DayTime, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DayTime_setHMS(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[6];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 5); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 4) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_gpstk__DayTime, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_int(argv[1]);
            if (_v) {
                _v = SWIG_Check_int(argv[2]);
                if (_v) {
                    _v = SWIG_Check_double(argv[3]);
                    if (_v) {
                        return _wrap_DayTime_setHMS__SWIG_1(self,args);
                    }
                }
            }
        }
    }
    if (argc == 5) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_gpstk__DayTime, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_int(argv[1]);
            if (_v) {
                _v = SWIG_Check_int(argv[2]);
                if (_v) {
                    _v = SWIG_Check_double(argv[3]);
                    if (_v) {
                        _v = SWIG_Check_int(argv[4]);
                        if (_v) {
                            return _wrap_DayTime_setHMS__SWIG_0(self,args);
                        }
                    }
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'DayTime_setHMS'");
    return NULL;
}


static PyObject *_wrap_DayTime_setSecOfDay__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::DayTime *arg1 = (gpstk::DayTime *) 0 ;
    double arg2 ;
    gpstk::DayTime::TimeFrame arg3 ;
    gpstk::DayTime *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:DayTime_setSecOfDay",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__DayTime, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (gpstk::DayTime::TimeFrame)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    try {
        {
            gpstk::DayTime &_result_ref = (arg1)->setSecOfDay(arg2,arg3);
            result = (gpstk::DayTime *) &_result_ref;
        }
    }
    catch(DayTimeException &_e) {
        {
            DayTimeException * temp = new DayTimeException(_e);
            if (SWIGTYPE_p_DayTimeException->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_DayTimeException->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_DayTimeException,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"DayTimeException");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_DayTimeException,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__DayTime, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DayTime_setSecOfDay__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::DayTime *arg1 = (gpstk::DayTime *) 0 ;
    double arg2 ;
    gpstk::DayTime *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:DayTime_setSecOfDay",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__DayTime, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        {
            gpstk::DayTime &_result_ref = (arg1)->setSecOfDay(arg2);
            result = (gpstk::DayTime *) &_result_ref;
        }
    }
    catch(DayTimeException &_e) {
        {
            DayTimeException * temp = new DayTimeException(_e);
            if (SWIGTYPE_p_DayTimeException->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_DayTimeException->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_DayTimeException,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"DayTimeException");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_DayTimeException,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__DayTime, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DayTime_setSecOfDay(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[4];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_gpstk__DayTime, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_double(argv[1]);
            if (_v) {
                return _wrap_DayTime_setSecOfDay__SWIG_1(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_gpstk__DayTime, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_double(argv[1]);
            if (_v) {
                _v = SWIG_Check_int(argv[2]);
                if (_v) {
                    return _wrap_DayTime_setSecOfDay__SWIG_0(self,args);
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'DayTime_setSecOfDay'");
    return NULL;
}


static PyObject *_wrap_DayTime_setYDoy__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::DayTime *arg1 = (gpstk::DayTime *) 0 ;
    int arg2 ;
    int arg3 ;
    gpstk::DayTime::TimeFrame arg4 ;
    gpstk::DayTime *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:DayTime_setYDoy",&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__DayTime, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (int)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = (gpstk::DayTime::TimeFrame)(SWIG_As_int(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    try {
        {
            gpstk::DayTime &_result_ref = (arg1)->setYDoy(arg2,arg3,arg4);
            result = (gpstk::DayTime *) &_result_ref;
        }
    }
    catch(DayTimeException &_e) {
        {
            DayTimeException * temp = new DayTimeException(_e);
            if (SWIGTYPE_p_DayTimeException->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_DayTimeException->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_DayTimeException,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"DayTimeException");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_DayTimeException,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__DayTime, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DayTime_setYDoy__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::DayTime *arg1 = (gpstk::DayTime *) 0 ;
    int arg2 ;
    int arg3 ;
    gpstk::DayTime *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:DayTime_setYDoy",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__DayTime, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (int)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    try {
        {
            gpstk::DayTime &_result_ref = (arg1)->setYDoy(arg2,arg3);
            result = (gpstk::DayTime *) &_result_ref;
        }
    }
    catch(DayTimeException &_e) {
        {
            DayTimeException * temp = new DayTimeException(_e);
            if (SWIGTYPE_p_DayTimeException->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_DayTimeException->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_DayTimeException,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"DayTimeException");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_DayTimeException,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__DayTime, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DayTime_setYDoy(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[5];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 4); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_gpstk__DayTime, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_int(argv[1]);
            if (_v) {
                _v = SWIG_Check_int(argv[2]);
                if (_v) {
                    return _wrap_DayTime_setYDoy__SWIG_1(self,args);
                }
            }
        }
    }
    if (argc == 4) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_gpstk__DayTime, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_int(argv[1]);
            if (_v) {
                _v = SWIG_Check_int(argv[2]);
                if (_v) {
                    _v = SWIG_Check_int(argv[3]);
                    if (_v) {
                        return _wrap_DayTime_setYDoy__SWIG_0(self,args);
                    }
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'DayTime_setYDoy'");
    return NULL;
}


static PyObject *_wrap_DayTime_setToString(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::DayTime *arg1 = (gpstk::DayTime *) 0 ;
    std::string *arg2 = 0 ;
    std::string *arg3 = 0 ;
    gpstk::DayTime *result;
    int res2 = 0 ;
    int res3 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:DayTime_setToString",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__DayTime, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        std::string *ptr = (std::string *)0;
        res2 = SWIG_AsPtr_std_string(obj1, &ptr);
        if (!res2) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj1);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = ptr;
    }
    {
        std::string *ptr = (std::string *)0;
        res3 = SWIG_AsPtr_std_string(obj2, &ptr);
        if (!res3) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj2);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
        arg3 = ptr;
    }
    try {
        {
            gpstk::DayTime &_result_ref = (arg1)->setToString((std::string const &)*arg2,(std::string const &)*arg3);
            result = (gpstk::DayTime *) &_result_ref;
        }
    }
    catch(DayTimeException &_e) {
        {
            DayTimeException * temp = new DayTimeException(_e);
            if (SWIGTYPE_p_DayTimeException->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_DayTimeException->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_DayTimeException,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"DayTimeException");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_DayTimeException,1));
                    */
            }
            SWIG_fail;
        }
    }
    catch(FormatException &_e) {
        {
            FormatException * temp = new FormatException(_e);
            if (SWIGTYPE_p_FormatException->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_FormatException->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_FormatException,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"FormatException");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_FormatException,1));
                    */
            }
            SWIG_fail;
        }
    }
    catch(gpstk::StringUtils::StringException &_e) {
        {
            gpstk::StringUtils::StringException * temp = new gpstk::StringUtils::StringException(_e);
            if (SWIGTYPE_p_gpstk__StringUtils__StringException->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_gpstk__StringUtils__StringException->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__StringUtils__StringException,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"gpstk::StringUtils::StringException");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__StringUtils__StringException,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__DayTime, 0);
    if (res2 == SWIG_NEWOBJ) delete arg2;
    if (res3 == SWIG_NEWOBJ) delete arg3;
    return resultobj;
    fail:
    if (res2 == SWIG_NEWOBJ) delete arg2;
    if (res3 == SWIG_NEWOBJ) delete arg3;
    return NULL;
}


static PyObject *_wrap_DayTime_printf(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::DayTime *arg1 = (gpstk::DayTime *) 0 ;
    char *arg2 = (char *) 0 ;
    std::string result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:DayTime_printf",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__DayTime, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    if (!SWIG_AsCharPtr(obj1, (char**)&arg2)) {
        SWIG_arg_fail(2);SWIG_fail;
    }
    try {
        result = ((gpstk::DayTime const *)arg1)->printf((char const *)arg2);
    }
    catch(gpstk::StringUtils::StringException &_e) {
        {
            gpstk::StringUtils::StringException * temp = new gpstk::StringUtils::StringException(_e);
            if (SWIGTYPE_p_gpstk__StringUtils__StringException->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_gpstk__StringUtils__StringException->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__StringUtils__StringException,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"gpstk::StringUtils::StringException");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__StringUtils__StringException,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    {
        resultobj = SWIG_From_std_string((std::string)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DayTime_printf_std_string(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::DayTime *arg1 = (gpstk::DayTime *) 0 ;
    std::string *arg2 = 0 ;
    std::string result;
    int res2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:DayTime_printf_std_string",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__DayTime, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        std::string *ptr = (std::string *)0;
        res2 = SWIG_AsPtr_std_string(obj1, &ptr);
        if (!res2) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj1);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = ptr;
    }
    try {
        result = ((gpstk::DayTime const *)arg1)->printf((std::string const &)*arg2);
    }
    catch(gpstk::StringUtils::StringException &_e) {
        {
            gpstk::StringUtils::StringException * temp = new gpstk::StringUtils::StringException(_e);
            if (SWIGTYPE_p_gpstk__StringUtils__StringException->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_gpstk__StringUtils__StringException->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__StringUtils__StringException,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"gpstk::StringUtils::StringException");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__StringUtils__StringException,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    {
        resultobj = SWIG_From_std_string((std::string)(result)); 
    }
    if (res2 == SWIG_NEWOBJ) delete arg2;
    return resultobj;
    fail:
    if (res2 == SWIG_NEWOBJ) delete arg2;
    return NULL;
}


static PyObject *_wrap_DayTime_asString(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::DayTime *arg1 = (gpstk::DayTime *) 0 ;
    std::string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DayTime_asString",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__DayTime, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        result = ((gpstk::DayTime const *)arg1)->asString();
    }
    catch(gpstk::StringUtils::StringException &_e) {
        {
            gpstk::StringUtils::StringException * temp = new gpstk::StringUtils::StringException(_e);
            if (SWIGTYPE_p_gpstk__StringUtils__StringException->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_gpstk__StringUtils__StringException->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__StringUtils__StringException,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"gpstk::StringUtils::StringException");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_gpstk__StringUtils__StringException,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    {
        resultobj = SWIG_From_std_string((std::string)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DayTime_dump(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::DayTime *arg1 = (gpstk::DayTime *) 0 ;
    std::ostream *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:DayTime_dump",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__DayTime, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("std::ostream");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        ((gpstk::DayTime const *)arg1)->dump(*arg2);
    }
    catch(DayTimeException &_e) {
        {
            DayTimeException * temp = new DayTimeException(_e);
            if (SWIGTYPE_p_DayTimeException->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_DayTimeException->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_DayTimeException,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"DayTimeException");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_DayTimeException,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DayTime_convertJDtoCalendar(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    long arg1 ;
    int *arg2 = 0 ;
    int *arg3 = 0 ;
    int *arg4 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:DayTime_convertJDtoCalendar",&obj0,&obj1,&obj2,&obj3)) goto fail;
    {
        arg1 = (long)(SWIG_As_long(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_int, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("int");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_int, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (arg3 == NULL) {
            SWIG_null_ref("int");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj3, (void **)&arg4, SWIGTYPE_p_int, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(4)) SWIG_fail;
        if (arg4 == NULL) {
            SWIG_null_ref("int");
        }
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    gpstk::DayTime::convertJDtoCalendar(arg1,*arg2,*arg3,*arg4);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DayTime_convertCalendarToJD(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    int arg1 ;
    int arg2 ;
    int arg3 ;
    long result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:DayTime_convertCalendarToJD",&obj0,&obj1,&obj2)) goto fail;
    {
        arg1 = (int)(SWIG_As_int(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (int)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    result = (long)gpstk::DayTime::convertCalendarToJD(arg1,arg2,arg3);
    
    {
        resultobj = SWIG_From_long((long)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DayTime_convertSODtoTime(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    double arg1 ;
    int *arg2 = 0 ;
    int *arg3 = 0 ;
    double *arg4 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:DayTime_convertSODtoTime",&obj0,&obj1,&obj2,&obj3)) goto fail;
    {
        arg1 = (double)(SWIG_As_double(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_int, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("int");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_int, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (arg3 == NULL) {
            SWIG_null_ref("int");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj3, (void **)&arg4, SWIGTYPE_p_double, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(4)) SWIG_fail;
        if (arg4 == NULL) {
            SWIG_null_ref("double");
        }
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    gpstk::DayTime::convertSODtoTime(arg1,*arg2,*arg3,*arg4);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DayTime_convertTimeToSOD(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    int arg1 ;
    int arg2 ;
    double arg3 ;
    double result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:DayTime_convertTimeToSOD",&obj0,&obj1,&obj2)) goto fail;
    {
        arg1 = (int)(SWIG_As_int(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (double)(SWIG_As_double(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    result = (double)gpstk::DayTime::convertTimeToSOD(arg1,arg2,arg3);
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject * DayTime_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_gpstk__DayTime, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap___lshift____SWIG_5(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::ostream *arg1 = 0 ;
    gpstk::DayTime *arg2 = 0 ;
    std::ostream *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:__lshift__",&obj0,&obj1)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("std::ostream");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_gpstk__DayTime, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("gpstk::DayTime");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        std::ostream &_result_ref = gpstk::operator <<(*arg1,(gpstk::DayTime const &)*arg2);
        result = (std::ostream *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap___lshift__(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_gpstk__SatID, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap___lshift____SWIG_1(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_RinexObsType, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap___lshift____SWIG_2(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_gpstk__RinexPrn, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap___lshift____SWIG_3(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_gpstk__GPSZcount, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap___lshift____SWIG_4(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_gpstk__DayTime, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap___lshift____SWIG_5(self,args);
            }
        }
    }
    
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


static PyObject *_wrap_new_ObsRngDev__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::ObsRngDev *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_ObsRngDev")) goto fail;
    result = (gpstk::ObsRngDev *)new gpstk::ObsRngDev();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__ObsRngDev, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_ObsRngDev__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    double arg1 ;
    short arg2 ;
    gpstk::DayTime *arg3 = 0 ;
    gpstk::ECEF *arg4 = 0 ;
    gpstk::EphemerisStore *arg5 = 0 ;
    gpstk::GeoidModel *arg6 = 0 ;
    bool arg7 ;
    gpstk::ObsRngDev *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    PyObject * obj5 = 0 ;
    PyObject * obj6 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOOOO:new_ObsRngDev",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) goto fail;
    {
        arg1 = (double)(SWIG_As_double(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        arg2 = (short)(SWIG_As_short(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_gpstk__DayTime, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (arg3 == NULL) {
            SWIG_null_ref("gpstk::DayTime");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj3, (void **)&arg4, SWIGTYPE_p_gpstk__ECEF, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(4)) SWIG_fail;
        if (arg4 == NULL) {
            SWIG_null_ref("gpstk::ECEF");
        }
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj4, (void **)&arg5, SWIGTYPE_p_gpstk__EphemerisStore, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(5)) SWIG_fail;
        if (arg5 == NULL) {
            SWIG_null_ref("gpstk::EphemerisStore");
        }
        if (SWIG_arg_fail(5)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj5, (void **)&arg6, SWIGTYPE_p_gpstk__GeoidModel, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(6)) SWIG_fail;
        if (arg6 == NULL) {
            SWIG_null_ref("gpstk::GeoidModel");
        }
        if (SWIG_arg_fail(6)) SWIG_fail;
    }
    {
        arg7 = (bool)(SWIG_As_bool(obj6)); 
        if (SWIG_arg_fail(7)) SWIG_fail;
    }
    result = (gpstk::ObsRngDev *)new gpstk::ObsRngDev(arg1,arg2,(gpstk::DayTime const &)*arg3,(gpstk::ECEF const &)*arg4,(gpstk::EphemerisStore const &)*arg5,*arg6,arg7);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__ObsRngDev, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_ObsRngDev__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    double arg1 ;
    short arg2 ;
    gpstk::DayTime *arg3 = 0 ;
    gpstk::ECEF *arg4 = 0 ;
    gpstk::EphemerisStore *arg5 = 0 ;
    gpstk::GeoidModel *arg6 = 0 ;
    gpstk::ObsRngDev *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    PyObject * obj5 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOOO:new_ObsRngDev",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) goto fail;
    {
        arg1 = (double)(SWIG_As_double(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        arg2 = (short)(SWIG_As_short(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_gpstk__DayTime, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (arg3 == NULL) {
            SWIG_null_ref("gpstk::DayTime");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj3, (void **)&arg4, SWIGTYPE_p_gpstk__ECEF, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(4)) SWIG_fail;
        if (arg4 == NULL) {
            SWIG_null_ref("gpstk::ECEF");
        }
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj4, (void **)&arg5, SWIGTYPE_p_gpstk__EphemerisStore, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(5)) SWIG_fail;
        if (arg5 == NULL) {
            SWIG_null_ref("gpstk::EphemerisStore");
        }
        if (SWIG_arg_fail(5)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj5, (void **)&arg6, SWIGTYPE_p_gpstk__GeoidModel, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(6)) SWIG_fail;
        if (arg6 == NULL) {
            SWIG_null_ref("gpstk::GeoidModel");
        }
        if (SWIG_arg_fail(6)) SWIG_fail;
    }
    result = (gpstk::ObsRngDev *)new gpstk::ObsRngDev(arg1,arg2,(gpstk::DayTime const &)*arg3,(gpstk::ECEF const &)*arg4,(gpstk::EphemerisStore const &)*arg5,*arg6);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__ObsRngDev, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_ObsRngDev__SWIG_3(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    double arg1 ;
    short arg2 ;
    gpstk::DayTime *arg3 = 0 ;
    gpstk::ECEF *arg4 = 0 ;
    gpstk::EphemerisStore *arg5 = 0 ;
    gpstk::GeoidModel *arg6 = 0 ;
    gpstk::IonoModelStore *arg7 = 0 ;
    gpstk::IonoModel::Frequency arg8 ;
    bool arg9 ;
    gpstk::ObsRngDev *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    PyObject * obj5 = 0 ;
    PyObject * obj6 = 0 ;
    PyObject * obj7 = 0 ;
    PyObject * obj8 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOOOOOO:new_ObsRngDev",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8)) goto fail;
    {
        arg1 = (double)(SWIG_As_double(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        arg2 = (short)(SWIG_As_short(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_gpstk__DayTime, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (arg3 == NULL) {
            SWIG_null_ref("gpstk::DayTime");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj3, (void **)&arg4, SWIGTYPE_p_gpstk__ECEF, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(4)) SWIG_fail;
        if (arg4 == NULL) {
            SWIG_null_ref("gpstk::ECEF");
        }
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj4, (void **)&arg5, SWIGTYPE_p_gpstk__EphemerisStore, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(5)) SWIG_fail;
        if (arg5 == NULL) {
            SWIG_null_ref("gpstk::EphemerisStore");
        }
        if (SWIG_arg_fail(5)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj5, (void **)&arg6, SWIGTYPE_p_gpstk__GeoidModel, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(6)) SWIG_fail;
        if (arg6 == NULL) {
            SWIG_null_ref("gpstk::GeoidModel");
        }
        if (SWIG_arg_fail(6)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj6, (void **)&arg7, SWIGTYPE_p_gpstk__IonoModelStore, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(7)) SWIG_fail;
        if (arg7 == NULL) {
            SWIG_null_ref("gpstk::IonoModelStore");
        }
        if (SWIG_arg_fail(7)) SWIG_fail;
    }
    {
        arg8 = (gpstk::IonoModel::Frequency)(SWIG_As_int(obj7)); 
        if (SWIG_arg_fail(8)) SWIG_fail;
    }
    {
        arg9 = (bool)(SWIG_As_bool(obj8)); 
        if (SWIG_arg_fail(9)) SWIG_fail;
    }
    result = (gpstk::ObsRngDev *)new gpstk::ObsRngDev(arg1,arg2,(gpstk::DayTime const &)*arg3,(gpstk::ECEF const &)*arg4,(gpstk::EphemerisStore const &)*arg5,*arg6,(gpstk::IonoModelStore const &)*arg7,arg8,arg9);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__ObsRngDev, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_ObsRngDev__SWIG_4(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    double arg1 ;
    short arg2 ;
    gpstk::DayTime *arg3 = 0 ;
    gpstk::ECEF *arg4 = 0 ;
    gpstk::EphemerisStore *arg5 = 0 ;
    gpstk::GeoidModel *arg6 = 0 ;
    gpstk::IonoModelStore *arg7 = 0 ;
    gpstk::IonoModel::Frequency arg8 ;
    gpstk::ObsRngDev *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    PyObject * obj5 = 0 ;
    PyObject * obj6 = 0 ;
    PyObject * obj7 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOOOOO:new_ObsRngDev",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7)) goto fail;
    {
        arg1 = (double)(SWIG_As_double(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        arg2 = (short)(SWIG_As_short(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_gpstk__DayTime, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (arg3 == NULL) {
            SWIG_null_ref("gpstk::DayTime");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj3, (void **)&arg4, SWIGTYPE_p_gpstk__ECEF, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(4)) SWIG_fail;
        if (arg4 == NULL) {
            SWIG_null_ref("gpstk::ECEF");
        }
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj4, (void **)&arg5, SWIGTYPE_p_gpstk__EphemerisStore, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(5)) SWIG_fail;
        if (arg5 == NULL) {
            SWIG_null_ref("gpstk::EphemerisStore");
        }
        if (SWIG_arg_fail(5)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj5, (void **)&arg6, SWIGTYPE_p_gpstk__GeoidModel, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(6)) SWIG_fail;
        if (arg6 == NULL) {
            SWIG_null_ref("gpstk::GeoidModel");
        }
        if (SWIG_arg_fail(6)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj6, (void **)&arg7, SWIGTYPE_p_gpstk__IonoModelStore, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(7)) SWIG_fail;
        if (arg7 == NULL) {
            SWIG_null_ref("gpstk::IonoModelStore");
        }
        if (SWIG_arg_fail(7)) SWIG_fail;
    }
    {
        arg8 = (gpstk::IonoModel::Frequency)(SWIG_As_int(obj7)); 
        if (SWIG_arg_fail(8)) SWIG_fail;
    }
    result = (gpstk::ObsRngDev *)new gpstk::ObsRngDev(arg1,arg2,(gpstk::DayTime const &)*arg3,(gpstk::ECEF const &)*arg4,(gpstk::EphemerisStore const &)*arg5,*arg6,(gpstk::IonoModelStore const &)*arg7,arg8);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__ObsRngDev, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_ObsRngDev__SWIG_5(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    double arg1 ;
    short arg2 ;
    gpstk::DayTime *arg3 = 0 ;
    gpstk::ECEF *arg4 = 0 ;
    gpstk::EphemerisStore *arg5 = 0 ;
    gpstk::GeoidModel *arg6 = 0 ;
    gpstk::TropModel *arg7 = 0 ;
    bool arg8 ;
    gpstk::ObsRngDev *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    PyObject * obj5 = 0 ;
    PyObject * obj6 = 0 ;
    PyObject * obj7 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOOOOO:new_ObsRngDev",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7)) goto fail;
    {
        arg1 = (double)(SWIG_As_double(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        arg2 = (short)(SWIG_As_short(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_gpstk__DayTime, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (arg3 == NULL) {
            SWIG_null_ref("gpstk::DayTime");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj3, (void **)&arg4, SWIGTYPE_p_gpstk__ECEF, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(4)) SWIG_fail;
        if (arg4 == NULL) {
            SWIG_null_ref("gpstk::ECEF");
        }
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj4, (void **)&arg5, SWIGTYPE_p_gpstk__EphemerisStore, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(5)) SWIG_fail;
        if (arg5 == NULL) {
            SWIG_null_ref("gpstk::EphemerisStore");
        }
        if (SWIG_arg_fail(5)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj5, (void **)&arg6, SWIGTYPE_p_gpstk__GeoidModel, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(6)) SWIG_fail;
        if (arg6 == NULL) {
            SWIG_null_ref("gpstk::GeoidModel");
        }
        if (SWIG_arg_fail(6)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj6, (void **)&arg7, SWIGTYPE_p_gpstk__TropModel, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(7)) SWIG_fail;
        if (arg7 == NULL) {
            SWIG_null_ref("gpstk::TropModel");
        }
        if (SWIG_arg_fail(7)) SWIG_fail;
    }
    {
        arg8 = (bool)(SWIG_As_bool(obj7)); 
        if (SWIG_arg_fail(8)) SWIG_fail;
    }
    result = (gpstk::ObsRngDev *)new gpstk::ObsRngDev(arg1,arg2,(gpstk::DayTime const &)*arg3,(gpstk::ECEF const &)*arg4,(gpstk::EphemerisStore const &)*arg5,*arg6,(gpstk::TropModel const &)*arg7,arg8);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__ObsRngDev, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_ObsRngDev__SWIG_6(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    double arg1 ;
    short arg2 ;
    gpstk::DayTime *arg3 = 0 ;
    gpstk::ECEF *arg4 = 0 ;
    gpstk::EphemerisStore *arg5 = 0 ;
    gpstk::GeoidModel *arg6 = 0 ;
    gpstk::TropModel *arg7 = 0 ;
    gpstk::ObsRngDev *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    PyObject * obj5 = 0 ;
    PyObject * obj6 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOOOO:new_ObsRngDev",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) goto fail;
    {
        arg1 = (double)(SWIG_As_double(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        arg2 = (short)(SWIG_As_short(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_gpstk__DayTime, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (arg3 == NULL) {
            SWIG_null_ref("gpstk::DayTime");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj3, (void **)&arg4, SWIGTYPE_p_gpstk__ECEF, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(4)) SWIG_fail;
        if (arg4 == NULL) {
            SWIG_null_ref("gpstk::ECEF");
        }
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj4, (void **)&arg5, SWIGTYPE_p_gpstk__EphemerisStore, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(5)) SWIG_fail;
        if (arg5 == NULL) {
            SWIG_null_ref("gpstk::EphemerisStore");
        }
        if (SWIG_arg_fail(5)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj5, (void **)&arg6, SWIGTYPE_p_gpstk__GeoidModel, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(6)) SWIG_fail;
        if (arg6 == NULL) {
            SWIG_null_ref("gpstk::GeoidModel");
        }
        if (SWIG_arg_fail(6)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj6, (void **)&arg7, SWIGTYPE_p_gpstk__TropModel, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(7)) SWIG_fail;
        if (arg7 == NULL) {
            SWIG_null_ref("gpstk::TropModel");
        }
        if (SWIG_arg_fail(7)) SWIG_fail;
    }
    result = (gpstk::ObsRngDev *)new gpstk::ObsRngDev(arg1,arg2,(gpstk::DayTime const &)*arg3,(gpstk::ECEF const &)*arg4,(gpstk::EphemerisStore const &)*arg5,*arg6,(gpstk::TropModel const &)*arg7);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__ObsRngDev, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_ObsRngDev__SWIG_7(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    double arg1 ;
    short arg2 ;
    gpstk::DayTime *arg3 = 0 ;
    gpstk::ECEF *arg4 = 0 ;
    gpstk::EphemerisStore *arg5 = 0 ;
    gpstk::GeoidModel *arg6 = 0 ;
    gpstk::TropModel *arg7 = 0 ;
    gpstk::IonoModelStore *arg8 = 0 ;
    gpstk::IonoModel::Frequency arg9 ;
    bool arg10 ;
    gpstk::ObsRngDev *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    PyObject * obj5 = 0 ;
    PyObject * obj6 = 0 ;
    PyObject * obj7 = 0 ;
    PyObject * obj8 = 0 ;
    PyObject * obj9 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOOOOOOO:new_ObsRngDev",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8,&obj9)) goto fail;
    {
        arg1 = (double)(SWIG_As_double(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        arg2 = (short)(SWIG_As_short(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_gpstk__DayTime, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (arg3 == NULL) {
            SWIG_null_ref("gpstk::DayTime");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj3, (void **)&arg4, SWIGTYPE_p_gpstk__ECEF, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(4)) SWIG_fail;
        if (arg4 == NULL) {
            SWIG_null_ref("gpstk::ECEF");
        }
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj4, (void **)&arg5, SWIGTYPE_p_gpstk__EphemerisStore, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(5)) SWIG_fail;
        if (arg5 == NULL) {
            SWIG_null_ref("gpstk::EphemerisStore");
        }
        if (SWIG_arg_fail(5)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj5, (void **)&arg6, SWIGTYPE_p_gpstk__GeoidModel, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(6)) SWIG_fail;
        if (arg6 == NULL) {
            SWIG_null_ref("gpstk::GeoidModel");
        }
        if (SWIG_arg_fail(6)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj6, (void **)&arg7, SWIGTYPE_p_gpstk__TropModel, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(7)) SWIG_fail;
        if (arg7 == NULL) {
            SWIG_null_ref("gpstk::TropModel");
        }
        if (SWIG_arg_fail(7)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj7, (void **)&arg8, SWIGTYPE_p_gpstk__IonoModelStore, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(8)) SWIG_fail;
        if (arg8 == NULL) {
            SWIG_null_ref("gpstk::IonoModelStore");
        }
        if (SWIG_arg_fail(8)) SWIG_fail;
    }
    {
        arg9 = (gpstk::IonoModel::Frequency)(SWIG_As_int(obj8)); 
        if (SWIG_arg_fail(9)) SWIG_fail;
    }
    {
        arg10 = (bool)(SWIG_As_bool(obj9)); 
        if (SWIG_arg_fail(10)) SWIG_fail;
    }
    result = (gpstk::ObsRngDev *)new gpstk::ObsRngDev(arg1,arg2,(gpstk::DayTime const &)*arg3,(gpstk::ECEF const &)*arg4,(gpstk::EphemerisStore const &)*arg5,*arg6,(gpstk::TropModel const &)*arg7,(gpstk::IonoModelStore const &)*arg8,arg9,arg10);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__ObsRngDev, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_ObsRngDev__SWIG_8(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    double arg1 ;
    short arg2 ;
    gpstk::DayTime *arg3 = 0 ;
    gpstk::ECEF *arg4 = 0 ;
    gpstk::EphemerisStore *arg5 = 0 ;
    gpstk::GeoidModel *arg6 = 0 ;
    gpstk::TropModel *arg7 = 0 ;
    gpstk::IonoModelStore *arg8 = 0 ;
    gpstk::IonoModel::Frequency arg9 ;
    gpstk::ObsRngDev *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    PyObject * obj5 = 0 ;
    PyObject * obj6 = 0 ;
    PyObject * obj7 = 0 ;
    PyObject * obj8 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOOOOOO:new_ObsRngDev",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8)) goto fail;
    {
        arg1 = (double)(SWIG_As_double(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        arg2 = (short)(SWIG_As_short(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_gpstk__DayTime, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (arg3 == NULL) {
            SWIG_null_ref("gpstk::DayTime");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj3, (void **)&arg4, SWIGTYPE_p_gpstk__ECEF, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(4)) SWIG_fail;
        if (arg4 == NULL) {
            SWIG_null_ref("gpstk::ECEF");
        }
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj4, (void **)&arg5, SWIGTYPE_p_gpstk__EphemerisStore, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(5)) SWIG_fail;
        if (arg5 == NULL) {
            SWIG_null_ref("gpstk::EphemerisStore");
        }
        if (SWIG_arg_fail(5)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj5, (void **)&arg6, SWIGTYPE_p_gpstk__GeoidModel, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(6)) SWIG_fail;
        if (arg6 == NULL) {
            SWIG_null_ref("gpstk::GeoidModel");
        }
        if (SWIG_arg_fail(6)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj6, (void **)&arg7, SWIGTYPE_p_gpstk__TropModel, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(7)) SWIG_fail;
        if (arg7 == NULL) {
            SWIG_null_ref("gpstk::TropModel");
        }
        if (SWIG_arg_fail(7)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj7, (void **)&arg8, SWIGTYPE_p_gpstk__IonoModelStore, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(8)) SWIG_fail;
        if (arg8 == NULL) {
            SWIG_null_ref("gpstk::IonoModelStore");
        }
        if (SWIG_arg_fail(8)) SWIG_fail;
    }
    {
        arg9 = (gpstk::IonoModel::Frequency)(SWIG_As_int(obj8)); 
        if (SWIG_arg_fail(9)) SWIG_fail;
    }
    result = (gpstk::ObsRngDev *)new gpstk::ObsRngDev(arg1,arg2,(gpstk::DayTime const &)*arg3,(gpstk::ECEF const &)*arg4,(gpstk::EphemerisStore const &)*arg5,*arg6,(gpstk::TropModel const &)*arg7,(gpstk::IonoModelStore const &)*arg8,arg9);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__ObsRngDev, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_ObsRngDev__SWIG_9(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    double arg1 ;
    double arg2 ;
    short arg3 ;
    gpstk::DayTime *arg4 = 0 ;
    gpstk::ECEF *arg5 = 0 ;
    gpstk::EphemerisStore *arg6 = 0 ;
    gpstk::GeoidModel *arg7 = 0 ;
    bool arg8 ;
    gpstk::ObsRngDev *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    PyObject * obj5 = 0 ;
    PyObject * obj6 = 0 ;
    PyObject * obj7 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOOOOO:new_ObsRngDev",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7)) goto fail;
    {
        arg1 = (double)(SWIG_As_double(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (short)(SWIG_As_short(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj3, (void **)&arg4, SWIGTYPE_p_gpstk__DayTime, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(4)) SWIG_fail;
        if (arg4 == NULL) {
            SWIG_null_ref("gpstk::DayTime");
        }
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj4, (void **)&arg5, SWIGTYPE_p_gpstk__ECEF, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(5)) SWIG_fail;
        if (arg5 == NULL) {
            SWIG_null_ref("gpstk::ECEF");
        }
        if (SWIG_arg_fail(5)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj5, (void **)&arg6, SWIGTYPE_p_gpstk__EphemerisStore, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(6)) SWIG_fail;
        if (arg6 == NULL) {
            SWIG_null_ref("gpstk::EphemerisStore");
        }
        if (SWIG_arg_fail(6)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj6, (void **)&arg7, SWIGTYPE_p_gpstk__GeoidModel, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(7)) SWIG_fail;
        if (arg7 == NULL) {
            SWIG_null_ref("gpstk::GeoidModel");
        }
        if (SWIG_arg_fail(7)) SWIG_fail;
    }
    {
        arg8 = (bool)(SWIG_As_bool(obj7)); 
        if (SWIG_arg_fail(8)) SWIG_fail;
    }
    result = (gpstk::ObsRngDev *)new gpstk::ObsRngDev(arg1,arg2,arg3,(gpstk::DayTime const &)*arg4,(gpstk::ECEF const &)*arg5,(gpstk::EphemerisStore const &)*arg6,*arg7,arg8);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__ObsRngDev, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_ObsRngDev__SWIG_10(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    double arg1 ;
    double arg2 ;
    short arg3 ;
    gpstk::DayTime *arg4 = 0 ;
    gpstk::ECEF *arg5 = 0 ;
    gpstk::EphemerisStore *arg6 = 0 ;
    gpstk::GeoidModel *arg7 = 0 ;
    gpstk::ObsRngDev *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    PyObject * obj5 = 0 ;
    PyObject * obj6 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOOOO:new_ObsRngDev",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) goto fail;
    {
        arg1 = (double)(SWIG_As_double(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (short)(SWIG_As_short(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj3, (void **)&arg4, SWIGTYPE_p_gpstk__DayTime, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(4)) SWIG_fail;
        if (arg4 == NULL) {
            SWIG_null_ref("gpstk::DayTime");
        }
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj4, (void **)&arg5, SWIGTYPE_p_gpstk__ECEF, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(5)) SWIG_fail;
        if (arg5 == NULL) {
            SWIG_null_ref("gpstk::ECEF");
        }
        if (SWIG_arg_fail(5)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj5, (void **)&arg6, SWIGTYPE_p_gpstk__EphemerisStore, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(6)) SWIG_fail;
        if (arg6 == NULL) {
            SWIG_null_ref("gpstk::EphemerisStore");
        }
        if (SWIG_arg_fail(6)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj6, (void **)&arg7, SWIGTYPE_p_gpstk__GeoidModel, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(7)) SWIG_fail;
        if (arg7 == NULL) {
            SWIG_null_ref("gpstk::GeoidModel");
        }
        if (SWIG_arg_fail(7)) SWIG_fail;
    }
    result = (gpstk::ObsRngDev *)new gpstk::ObsRngDev(arg1,arg2,arg3,(gpstk::DayTime const &)*arg4,(gpstk::ECEF const &)*arg5,(gpstk::EphemerisStore const &)*arg6,*arg7);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__ObsRngDev, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_ObsRngDev__SWIG_11(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    double arg1 ;
    double arg2 ;
    short arg3 ;
    gpstk::DayTime *arg4 = 0 ;
    gpstk::ECEF *arg5 = 0 ;
    gpstk::EphemerisStore *arg6 = 0 ;
    gpstk::GeoidModel *arg7 = 0 ;
    gpstk::TropModel *arg8 = 0 ;
    bool arg9 ;
    gpstk::ObsRngDev *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    PyObject * obj5 = 0 ;
    PyObject * obj6 = 0 ;
    PyObject * obj7 = 0 ;
    PyObject * obj8 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOOOOOO:new_ObsRngDev",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8)) goto fail;
    {
        arg1 = (double)(SWIG_As_double(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (short)(SWIG_As_short(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj3, (void **)&arg4, SWIGTYPE_p_gpstk__DayTime, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(4)) SWIG_fail;
        if (arg4 == NULL) {
            SWIG_null_ref("gpstk::DayTime");
        }
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj4, (void **)&arg5, SWIGTYPE_p_gpstk__ECEF, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(5)) SWIG_fail;
        if (arg5 == NULL) {
            SWIG_null_ref("gpstk::ECEF");
        }
        if (SWIG_arg_fail(5)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj5, (void **)&arg6, SWIGTYPE_p_gpstk__EphemerisStore, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(6)) SWIG_fail;
        if (arg6 == NULL) {
            SWIG_null_ref("gpstk::EphemerisStore");
        }
        if (SWIG_arg_fail(6)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj6, (void **)&arg7, SWIGTYPE_p_gpstk__GeoidModel, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(7)) SWIG_fail;
        if (arg7 == NULL) {
            SWIG_null_ref("gpstk::GeoidModel");
        }
        if (SWIG_arg_fail(7)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj7, (void **)&arg8, SWIGTYPE_p_gpstk__TropModel, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(8)) SWIG_fail;
        if (arg8 == NULL) {
            SWIG_null_ref("gpstk::TropModel");
        }
        if (SWIG_arg_fail(8)) SWIG_fail;
    }
    {
        arg9 = (bool)(SWIG_As_bool(obj8)); 
        if (SWIG_arg_fail(9)) SWIG_fail;
    }
    result = (gpstk::ObsRngDev *)new gpstk::ObsRngDev(arg1,arg2,arg3,(gpstk::DayTime const &)*arg4,(gpstk::ECEF const &)*arg5,(gpstk::EphemerisStore const &)*arg6,(gpstk::GeoidModel const &)*arg7,(gpstk::TropModel const &)*arg8,arg9);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__ObsRngDev, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_ObsRngDev__SWIG_12(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    double arg1 ;
    double arg2 ;
    short arg3 ;
    gpstk::DayTime *arg4 = 0 ;
    gpstk::ECEF *arg5 = 0 ;
    gpstk::EphemerisStore *arg6 = 0 ;
    gpstk::GeoidModel *arg7 = 0 ;
    gpstk::TropModel *arg8 = 0 ;
    gpstk::ObsRngDev *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    PyObject * obj5 = 0 ;
    PyObject * obj6 = 0 ;
    PyObject * obj7 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOOOOO:new_ObsRngDev",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7)) goto fail;
    {
        arg1 = (double)(SWIG_As_double(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (short)(SWIG_As_short(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj3, (void **)&arg4, SWIGTYPE_p_gpstk__DayTime, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(4)) SWIG_fail;
        if (arg4 == NULL) {
            SWIG_null_ref("gpstk::DayTime");
        }
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj4, (void **)&arg5, SWIGTYPE_p_gpstk__ECEF, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(5)) SWIG_fail;
        if (arg5 == NULL) {
            SWIG_null_ref("gpstk::ECEF");
        }
        if (SWIG_arg_fail(5)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj5, (void **)&arg6, SWIGTYPE_p_gpstk__EphemerisStore, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(6)) SWIG_fail;
        if (arg6 == NULL) {
            SWIG_null_ref("gpstk::EphemerisStore");
        }
        if (SWIG_arg_fail(6)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj6, (void **)&arg7, SWIGTYPE_p_gpstk__GeoidModel, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(7)) SWIG_fail;
        if (arg7 == NULL) {
            SWIG_null_ref("gpstk::GeoidModel");
        }
        if (SWIG_arg_fail(7)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj7, (void **)&arg8, SWIGTYPE_p_gpstk__TropModel, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(8)) SWIG_fail;
        if (arg8 == NULL) {
            SWIG_null_ref("gpstk::TropModel");
        }
        if (SWIG_arg_fail(8)) SWIG_fail;
    }
    result = (gpstk::ObsRngDev *)new gpstk::ObsRngDev(arg1,arg2,arg3,(gpstk::DayTime const &)*arg4,(gpstk::ECEF const &)*arg5,(gpstk::EphemerisStore const &)*arg6,(gpstk::GeoidModel const &)*arg7,(gpstk::TropModel const &)*arg8);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__ObsRngDev, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_ObsRngDev(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[11];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 10); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_new_ObsRngDev__SWIG_0(self,args);
    }
    if (argc == 6) {
        int _v;
        _v = SWIG_Check_double(argv[0]);
        if (_v) {
            _v = SWIG_Check_short(argv[1]);
            if (_v) {
                {
                    void *ptr = 0;
                    if (SWIG_ConvertPtr(argv[2], &ptr, SWIGTYPE_p_gpstk__DayTime, 0) == -1) {
                        _v = 0;
                        PyErr_Clear();
                    } else {
                        _v = (ptr != 0);
                    }
                }
                if (_v) {
                    {
                        void *ptr = 0;
                        if (SWIG_ConvertPtr(argv[3], &ptr, SWIGTYPE_p_gpstk__ECEF, 0) == -1) {
                            _v = 0;
                            PyErr_Clear();
                        } else {
                            _v = (ptr != 0);
                        }
                    }
                    if (_v) {
                        {
                            void *ptr = 0;
                            if (SWIG_ConvertPtr(argv[4], &ptr, SWIGTYPE_p_gpstk__EphemerisStore, 0) == -1) {
                                _v = 0;
                                PyErr_Clear();
                            } else {
                                _v = (ptr != 0);
                            }
                        }
                        if (_v) {
                            {
                                void *ptr = 0;
                                if (SWIG_ConvertPtr(argv[5], &ptr, SWIGTYPE_p_gpstk__GeoidModel, 0) == -1) {
                                    _v = 0;
                                    PyErr_Clear();
                                } else {
                                    _v = (ptr != 0);
                                }
                            }
                            if (_v) {
                                return _wrap_new_ObsRngDev__SWIG_2(self,args);
                            }
                        }
                    }
                }
            }
        }
    }
    if (argc == 7) {
        int _v;
        _v = SWIG_Check_double(argv[0]);
        if (_v) {
            _v = SWIG_Check_short(argv[1]);
            if (_v) {
                {
                    void *ptr = 0;
                    if (SWIG_ConvertPtr(argv[2], &ptr, SWIGTYPE_p_gpstk__DayTime, 0) == -1) {
                        _v = 0;
                        PyErr_Clear();
                    } else {
                        _v = (ptr != 0);
                    }
                }
                if (_v) {
                    {
                        void *ptr = 0;
                        if (SWIG_ConvertPtr(argv[3], &ptr, SWIGTYPE_p_gpstk__ECEF, 0) == -1) {
                            _v = 0;
                            PyErr_Clear();
                        } else {
                            _v = (ptr != 0);
                        }
                    }
                    if (_v) {
                        {
                            void *ptr = 0;
                            if (SWIG_ConvertPtr(argv[4], &ptr, SWIGTYPE_p_gpstk__EphemerisStore, 0) == -1) {
                                _v = 0;
                                PyErr_Clear();
                            } else {
                                _v = (ptr != 0);
                            }
                        }
                        if (_v) {
                            {
                                void *ptr = 0;
                                if (SWIG_ConvertPtr(argv[5], &ptr, SWIGTYPE_p_gpstk__GeoidModel, 0) == -1) {
                                    _v = 0;
                                    PyErr_Clear();
                                } else {
                                    _v = (ptr != 0);
                                }
                            }
                            if (_v) {
                                {
                                    void *ptr = 0;
                                    if (SWIG_ConvertPtr(argv[6], &ptr, SWIGTYPE_p_gpstk__TropModel, 0) == -1) {
                                        _v = 0;
                                        PyErr_Clear();
                                    } else {
                                        _v = (ptr != 0);
                                    }
                                }
                                if (_v) {
                                    return _wrap_new_ObsRngDev__SWIG_6(self,args);
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    if (argc == 7) {
        int _v;
        _v = SWIG_Check_double(argv[0]);
        if (_v) {
            _v = SWIG_Check_short(argv[1]);
            if (_v) {
                {
                    void *ptr = 0;
                    if (SWIG_ConvertPtr(argv[2], &ptr, SWIGTYPE_p_gpstk__DayTime, 0) == -1) {
                        _v = 0;
                        PyErr_Clear();
                    } else {
                        _v = (ptr != 0);
                    }
                }
                if (_v) {
                    {
                        void *ptr = 0;
                        if (SWIG_ConvertPtr(argv[3], &ptr, SWIGTYPE_p_gpstk__ECEF, 0) == -1) {
                            _v = 0;
                            PyErr_Clear();
                        } else {
                            _v = (ptr != 0);
                        }
                    }
                    if (_v) {
                        {
                            void *ptr = 0;
                            if (SWIG_ConvertPtr(argv[4], &ptr, SWIGTYPE_p_gpstk__EphemerisStore, 0) == -1) {
                                _v = 0;
                                PyErr_Clear();
                            } else {
                                _v = (ptr != 0);
                            }
                        }
                        if (_v) {
                            {
                                void *ptr = 0;
                                if (SWIG_ConvertPtr(argv[5], &ptr, SWIGTYPE_p_gpstk__GeoidModel, 0) == -1) {
                                    _v = 0;
                                    PyErr_Clear();
                                } else {
                                    _v = (ptr != 0);
                                }
                            }
                            if (_v) {
                                _v = SWIG_Check_bool(argv[6]);
                                if (_v) {
                                    return _wrap_new_ObsRngDev__SWIG_1(self,args);
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    if (argc == 7) {
        int _v;
        _v = SWIG_Check_double(argv[0]);
        if (_v) {
            _v = SWIG_Check_double(argv[1]);
            if (_v) {
                _v = SWIG_Check_short(argv[2]);
                if (_v) {
                    {
                        void *ptr = 0;
                        if (SWIG_ConvertPtr(argv[3], &ptr, SWIGTYPE_p_gpstk__DayTime, 0) == -1) {
                            _v = 0;
                            PyErr_Clear();
                        } else {
                            _v = (ptr != 0);
                        }
                    }
                    if (_v) {
                        {
                            void *ptr = 0;
                            if (SWIG_ConvertPtr(argv[4], &ptr, SWIGTYPE_p_gpstk__ECEF, 0) == -1) {
                                _v = 0;
                                PyErr_Clear();
                            } else {
                                _v = (ptr != 0);
                            }
                        }
                        if (_v) {
                            {
                                void *ptr = 0;
                                if (SWIG_ConvertPtr(argv[5], &ptr, SWIGTYPE_p_gpstk__EphemerisStore, 0) == -1) {
                                    _v = 0;
                                    PyErr_Clear();
                                } else {
                                    _v = (ptr != 0);
                                }
                            }
                            if (_v) {
                                {
                                    void *ptr = 0;
                                    if (SWIG_ConvertPtr(argv[6], &ptr, SWIGTYPE_p_gpstk__GeoidModel, 0) == -1) {
                                        _v = 0;
                                        PyErr_Clear();
                                    } else {
                                        _v = (ptr != 0);
                                    }
                                }
                                if (_v) {
                                    return _wrap_new_ObsRngDev__SWIG_10(self,args);
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    if (argc == 8) {
        int _v;
        _v = SWIG_Check_double(argv[0]);
        if (_v) {
            _v = SWIG_Check_short(argv[1]);
            if (_v) {
                {
                    void *ptr = 0;
                    if (SWIG_ConvertPtr(argv[2], &ptr, SWIGTYPE_p_gpstk__DayTime, 0) == -1) {
                        _v = 0;
                        PyErr_Clear();
                    } else {
                        _v = (ptr != 0);
                    }
                }
                if (_v) {
                    {
                        void *ptr = 0;
                        if (SWIG_ConvertPtr(argv[3], &ptr, SWIGTYPE_p_gpstk__ECEF, 0) == -1) {
                            _v = 0;
                            PyErr_Clear();
                        } else {
                            _v = (ptr != 0);
                        }
                    }
                    if (_v) {
                        {
                            void *ptr = 0;
                            if (SWIG_ConvertPtr(argv[4], &ptr, SWIGTYPE_p_gpstk__EphemerisStore, 0) == -1) {
                                _v = 0;
                                PyErr_Clear();
                            } else {
                                _v = (ptr != 0);
                            }
                        }
                        if (_v) {
                            {
                                void *ptr = 0;
                                if (SWIG_ConvertPtr(argv[5], &ptr, SWIGTYPE_p_gpstk__GeoidModel, 0) == -1) {
                                    _v = 0;
                                    PyErr_Clear();
                                } else {
                                    _v = (ptr != 0);
                                }
                            }
                            if (_v) {
                                {
                                    void *ptr = 0;
                                    if (SWIG_ConvertPtr(argv[6], &ptr, SWIGTYPE_p_gpstk__IonoModelStore, 0) == -1) {
                                        _v = 0;
                                        PyErr_Clear();
                                    } else {
                                        _v = (ptr != 0);
                                    }
                                }
                                if (_v) {
                                    _v = SWIG_Check_int(argv[7]);
                                    if (_v) {
                                        return _wrap_new_ObsRngDev__SWIG_4(self,args);
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    if (argc == 8) {
        int _v;
        _v = SWIG_Check_double(argv[0]);
        if (_v) {
            _v = SWIG_Check_short(argv[1]);
            if (_v) {
                {
                    void *ptr = 0;
                    if (SWIG_ConvertPtr(argv[2], &ptr, SWIGTYPE_p_gpstk__DayTime, 0) == -1) {
                        _v = 0;
                        PyErr_Clear();
                    } else {
                        _v = (ptr != 0);
                    }
                }
                if (_v) {
                    {
                        void *ptr = 0;
                        if (SWIG_ConvertPtr(argv[3], &ptr, SWIGTYPE_p_gpstk__ECEF, 0) == -1) {
                            _v = 0;
                            PyErr_Clear();
                        } else {
                            _v = (ptr != 0);
                        }
                    }
                    if (_v) {
                        {
                            void *ptr = 0;
                            if (SWIG_ConvertPtr(argv[4], &ptr, SWIGTYPE_p_gpstk__EphemerisStore, 0) == -1) {
                                _v = 0;
                                PyErr_Clear();
                            } else {
                                _v = (ptr != 0);
                            }
                        }
                        if (_v) {
                            {
                                void *ptr = 0;
                                if (SWIG_ConvertPtr(argv[5], &ptr, SWIGTYPE_p_gpstk__GeoidModel, 0) == -1) {
                                    _v = 0;
                                    PyErr_Clear();
                                } else {
                                    _v = (ptr != 0);
                                }
                            }
                            if (_v) {
                                {
                                    void *ptr = 0;
                                    if (SWIG_ConvertPtr(argv[6], &ptr, SWIGTYPE_p_gpstk__TropModel, 0) == -1) {
                                        _v = 0;
                                        PyErr_Clear();
                                    } else {
                                        _v = (ptr != 0);
                                    }
                                }
                                if (_v) {
                                    _v = SWIG_Check_bool(argv[7]);
                                    if (_v) {
                                        return _wrap_new_ObsRngDev__SWIG_5(self,args);
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    if (argc == 8) {
        int _v;
        _v = SWIG_Check_double(argv[0]);
        if (_v) {
            _v = SWIG_Check_double(argv[1]);
            if (_v) {
                _v = SWIG_Check_short(argv[2]);
                if (_v) {
                    {
                        void *ptr = 0;
                        if (SWIG_ConvertPtr(argv[3], &ptr, SWIGTYPE_p_gpstk__DayTime, 0) == -1) {
                            _v = 0;
                            PyErr_Clear();
                        } else {
                            _v = (ptr != 0);
                        }
                    }
                    if (_v) {
                        {
                            void *ptr = 0;
                            if (SWIG_ConvertPtr(argv[4], &ptr, SWIGTYPE_p_gpstk__ECEF, 0) == -1) {
                                _v = 0;
                                PyErr_Clear();
                            } else {
                                _v = (ptr != 0);
                            }
                        }
                        if (_v) {
                            {
                                void *ptr = 0;
                                if (SWIG_ConvertPtr(argv[5], &ptr, SWIGTYPE_p_gpstk__EphemerisStore, 0) == -1) {
                                    _v = 0;
                                    PyErr_Clear();
                                } else {
                                    _v = (ptr != 0);
                                }
                            }
                            if (_v) {
                                {
                                    void *ptr = 0;
                                    if (SWIG_ConvertPtr(argv[6], &ptr, SWIGTYPE_p_gpstk__GeoidModel, 0) == -1) {
                                        _v = 0;
                                        PyErr_Clear();
                                    } else {
                                        _v = (ptr != 0);
                                    }
                                }
                                if (_v) {
                                    {
                                        void *ptr = 0;
                                        if (SWIG_ConvertPtr(argv[7], &ptr, SWIGTYPE_p_gpstk__TropModel, 0) == -1) {
                                            _v = 0;
                                            PyErr_Clear();
                                        } else {
                                            _v = (ptr != 0);
                                        }
                                    }
                                    if (_v) {
                                        return _wrap_new_ObsRngDev__SWIG_12(self,args);
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    if (argc == 8) {
        int _v;
        _v = SWIG_Check_double(argv[0]);
        if (_v) {
            _v = SWIG_Check_double(argv[1]);
            if (_v) {
                _v = SWIG_Check_short(argv[2]);
                if (_v) {
                    {
                        void *ptr = 0;
                        if (SWIG_ConvertPtr(argv[3], &ptr, SWIGTYPE_p_gpstk__DayTime, 0) == -1) {
                            _v = 0;
                            PyErr_Clear();
                        } else {
                            _v = (ptr != 0);
                        }
                    }
                    if (_v) {
                        {
                            void *ptr = 0;
                            if (SWIG_ConvertPtr(argv[4], &ptr, SWIGTYPE_p_gpstk__ECEF, 0) == -1) {
                                _v = 0;
                                PyErr_Clear();
                            } else {
                                _v = (ptr != 0);
                            }
                        }
                        if (_v) {
                            {
                                void *ptr = 0;
                                if (SWIG_ConvertPtr(argv[5], &ptr, SWIGTYPE_p_gpstk__EphemerisStore, 0) == -1) {
                                    _v = 0;
                                    PyErr_Clear();
                                } else {
                                    _v = (ptr != 0);
                                }
                            }
                            if (_v) {
                                {
                                    void *ptr = 0;
                                    if (SWIG_ConvertPtr(argv[6], &ptr, SWIGTYPE_p_gpstk__GeoidModel, 0) == -1) {
                                        _v = 0;
                                        PyErr_Clear();
                                    } else {
                                        _v = (ptr != 0);
                                    }
                                }
                                if (_v) {
                                    _v = SWIG_Check_bool(argv[7]);
                                    if (_v) {
                                        return _wrap_new_ObsRngDev__SWIG_9(self,args);
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    if (argc == 9) {
        int _v;
        _v = SWIG_Check_double(argv[0]);
        if (_v) {
            _v = SWIG_Check_short(argv[1]);
            if (_v) {
                {
                    void *ptr = 0;
                    if (SWIG_ConvertPtr(argv[2], &ptr, SWIGTYPE_p_gpstk__DayTime, 0) == -1) {
                        _v = 0;
                        PyErr_Clear();
                    } else {
                        _v = (ptr != 0);
                    }
                }
                if (_v) {
                    {
                        void *ptr = 0;
                        if (SWIG_ConvertPtr(argv[3], &ptr, SWIGTYPE_p_gpstk__ECEF, 0) == -1) {
                            _v = 0;
                            PyErr_Clear();
                        } else {
                            _v = (ptr != 0);
                        }
                    }
                    if (_v) {
                        {
                            void *ptr = 0;
                            if (SWIG_ConvertPtr(argv[4], &ptr, SWIGTYPE_p_gpstk__EphemerisStore, 0) == -1) {
                                _v = 0;
                                PyErr_Clear();
                            } else {
                                _v = (ptr != 0);
                            }
                        }
                        if (_v) {
                            {
                                void *ptr = 0;
                                if (SWIG_ConvertPtr(argv[5], &ptr, SWIGTYPE_p_gpstk__GeoidModel, 0) == -1) {
                                    _v = 0;
                                    PyErr_Clear();
                                } else {
                                    _v = (ptr != 0);
                                }
                            }
                            if (_v) {
                                {
                                    void *ptr = 0;
                                    if (SWIG_ConvertPtr(argv[6], &ptr, SWIGTYPE_p_gpstk__TropModel, 0) == -1) {
                                        _v = 0;
                                        PyErr_Clear();
                                    } else {
                                        _v = (ptr != 0);
                                    }
                                }
                                if (_v) {
                                    {
                                        void *ptr = 0;
                                        if (SWIG_ConvertPtr(argv[7], &ptr, SWIGTYPE_p_gpstk__IonoModelStore, 0) == -1) {
                                            _v = 0;
                                            PyErr_Clear();
                                        } else {
                                            _v = (ptr != 0);
                                        }
                                    }
                                    if (_v) {
                                        _v = SWIG_Check_int(argv[8]);
                                        if (_v) {
                                            return _wrap_new_ObsRngDev__SWIG_8(self,args);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    if (argc == 9) {
        int _v;
        _v = SWIG_Check_double(argv[0]);
        if (_v) {
            _v = SWIG_Check_short(argv[1]);
            if (_v) {
                {
                    void *ptr = 0;
                    if (SWIG_ConvertPtr(argv[2], &ptr, SWIGTYPE_p_gpstk__DayTime, 0) == -1) {
                        _v = 0;
                        PyErr_Clear();
                    } else {
                        _v = (ptr != 0);
                    }
                }
                if (_v) {
                    {
                        void *ptr = 0;
                        if (SWIG_ConvertPtr(argv[3], &ptr, SWIGTYPE_p_gpstk__ECEF, 0) == -1) {
                            _v = 0;
                            PyErr_Clear();
                        } else {
                            _v = (ptr != 0);
                        }
                    }
                    if (_v) {
                        {
                            void *ptr = 0;
                            if (SWIG_ConvertPtr(argv[4], &ptr, SWIGTYPE_p_gpstk__EphemerisStore, 0) == -1) {
                                _v = 0;
                                PyErr_Clear();
                            } else {
                                _v = (ptr != 0);
                            }
                        }
                        if (_v) {
                            {
                                void *ptr = 0;
                                if (SWIG_ConvertPtr(argv[5], &ptr, SWIGTYPE_p_gpstk__GeoidModel, 0) == -1) {
                                    _v = 0;
                                    PyErr_Clear();
                                } else {
                                    _v = (ptr != 0);
                                }
                            }
                            if (_v) {
                                {
                                    void *ptr = 0;
                                    if (SWIG_ConvertPtr(argv[6], &ptr, SWIGTYPE_p_gpstk__IonoModelStore, 0) == -1) {
                                        _v = 0;
                                        PyErr_Clear();
                                    } else {
                                        _v = (ptr != 0);
                                    }
                                }
                                if (_v) {
                                    _v = SWIG_Check_int(argv[7]);
                                    if (_v) {
                                        _v = SWIG_Check_bool(argv[8]);
                                        if (_v) {
                                            return _wrap_new_ObsRngDev__SWIG_3(self,args);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    if (argc == 9) {
        int _v;
        _v = SWIG_Check_double(argv[0]);
        if (_v) {
            _v = SWIG_Check_double(argv[1]);
            if (_v) {
                _v = SWIG_Check_short(argv[2]);
                if (_v) {
                    {
                        void *ptr = 0;
                        if (SWIG_ConvertPtr(argv[3], &ptr, SWIGTYPE_p_gpstk__DayTime, 0) == -1) {
                            _v = 0;
                            PyErr_Clear();
                        } else {
                            _v = (ptr != 0);
                        }
                    }
                    if (_v) {
                        {
                            void *ptr = 0;
                            if (SWIG_ConvertPtr(argv[4], &ptr, SWIGTYPE_p_gpstk__ECEF, 0) == -1) {
                                _v = 0;
                                PyErr_Clear();
                            } else {
                                _v = (ptr != 0);
                            }
                        }
                        if (_v) {
                            {
                                void *ptr = 0;
                                if (SWIG_ConvertPtr(argv[5], &ptr, SWIGTYPE_p_gpstk__EphemerisStore, 0) == -1) {
                                    _v = 0;
                                    PyErr_Clear();
                                } else {
                                    _v = (ptr != 0);
                                }
                            }
                            if (_v) {
                                {
                                    void *ptr = 0;
                                    if (SWIG_ConvertPtr(argv[6], &ptr, SWIGTYPE_p_gpstk__GeoidModel, 0) == -1) {
                                        _v = 0;
                                        PyErr_Clear();
                                    } else {
                                        _v = (ptr != 0);
                                    }
                                }
                                if (_v) {
                                    {
                                        void *ptr = 0;
                                        if (SWIG_ConvertPtr(argv[7], &ptr, SWIGTYPE_p_gpstk__TropModel, 0) == -1) {
                                            _v = 0;
                                            PyErr_Clear();
                                        } else {
                                            _v = (ptr != 0);
                                        }
                                    }
                                    if (_v) {
                                        _v = SWIG_Check_bool(argv[8]);
                                        if (_v) {
                                            return _wrap_new_ObsRngDev__SWIG_11(self,args);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    if (argc == 10) {
        int _v;
        _v = SWIG_Check_double(argv[0]);
        if (_v) {
            _v = SWIG_Check_short(argv[1]);
            if (_v) {
                {
                    void *ptr = 0;
                    if (SWIG_ConvertPtr(argv[2], &ptr, SWIGTYPE_p_gpstk__DayTime, 0) == -1) {
                        _v = 0;
                        PyErr_Clear();
                    } else {
                        _v = (ptr != 0);
                    }
                }
                if (_v) {
                    {
                        void *ptr = 0;
                        if (SWIG_ConvertPtr(argv[3], &ptr, SWIGTYPE_p_gpstk__ECEF, 0) == -1) {
                            _v = 0;
                            PyErr_Clear();
                        } else {
                            _v = (ptr != 0);
                        }
                    }
                    if (_v) {
                        {
                            void *ptr = 0;
                            if (SWIG_ConvertPtr(argv[4], &ptr, SWIGTYPE_p_gpstk__EphemerisStore, 0) == -1) {
                                _v = 0;
                                PyErr_Clear();
                            } else {
                                _v = (ptr != 0);
                            }
                        }
                        if (_v) {
                            {
                                void *ptr = 0;
                                if (SWIG_ConvertPtr(argv[5], &ptr, SWIGTYPE_p_gpstk__GeoidModel, 0) == -1) {
                                    _v = 0;
                                    PyErr_Clear();
                                } else {
                                    _v = (ptr != 0);
                                }
                            }
                            if (_v) {
                                {
                                    void *ptr = 0;
                                    if (SWIG_ConvertPtr(argv[6], &ptr, SWIGTYPE_p_gpstk__TropModel, 0) == -1) {
                                        _v = 0;
                                        PyErr_Clear();
                                    } else {
                                        _v = (ptr != 0);
                                    }
                                }
                                if (_v) {
                                    {
                                        void *ptr = 0;
                                        if (SWIG_ConvertPtr(argv[7], &ptr, SWIGTYPE_p_gpstk__IonoModelStore, 0) == -1) {
                                            _v = 0;
                                            PyErr_Clear();
                                        } else {
                                            _v = (ptr != 0);
                                        }
                                    }
                                    if (_v) {
                                        _v = SWIG_Check_int(argv[8]);
                                        if (_v) {
                                            _v = SWIG_Check_bool(argv[9]);
                                            if (_v) {
                                                return _wrap_new_ObsRngDev__SWIG_7(self,args);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'new_ObsRngDev'");
    return NULL;
}


static PyObject *_wrap_delete_ObsRngDev(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::ObsRngDev *arg1 = (gpstk::ObsRngDev *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_ObsRngDev",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__ObsRngDev, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ObsRngDev_getTime(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::ObsRngDev *arg1 = (gpstk::ObsRngDev *) 0 ;
    gpstk::DayTime *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ObsRngDev_getTime",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__ObsRngDev, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        gpstk::DayTime const &_result_ref = ((gpstk::ObsRngDev const *)arg1)->getTime();
        result = (gpstk::DayTime *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__DayTime, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ObsRngDev_getPRN(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::ObsRngDev *arg1 = (gpstk::ObsRngDev *) 0 ;
    short result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ObsRngDev_getPRN",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__ObsRngDev, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (short)((gpstk::ObsRngDev const *)arg1)->getPRN();
    
    {
        resultobj = SWIG_From_short((short)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ObsRngDev_getAzimuth(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::ObsRngDev *arg1 = (gpstk::ObsRngDev *) 0 ;
    SwigValueWrapper<gpstk::ValidType<float > > result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ObsRngDev_getAzimuth",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__ObsRngDev, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = ((gpstk::ObsRngDev const *)arg1)->getAzimuth();
    
    {
        gpstk::vfloat * resultptr;
        resultptr = new gpstk::vfloat((gpstk::vfloat &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_gpstk__ValidTypeTfloat_t, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ObsRngDev_getElevation(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::ObsRngDev *arg1 = (gpstk::ObsRngDev *) 0 ;
    SwigValueWrapper<gpstk::ValidType<float > > result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ObsRngDev_getElevation",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__ObsRngDev, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = ((gpstk::ObsRngDev const *)arg1)->getElevation();
    
    {
        gpstk::vfloat * resultptr;
        resultptr = new gpstk::vfloat((gpstk::vfloat &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_gpstk__ValidTypeTfloat_t, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ObsRngDev_getHealth(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::ObsRngDev *arg1 = (gpstk::ObsRngDev *) 0 ;
    SwigValueWrapper<gpstk::ValidType<short > > result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ObsRngDev_getHealth",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__ObsRngDev, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = ((gpstk::ObsRngDev const *)arg1)->getHealth();
    
    {
        gpstk::vshort * resultptr;
        resultptr = new gpstk::vshort((gpstk::vshort &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_gpstk__ValidTypeTshort_t, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ObsRngDev_getIODC(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::ObsRngDev *arg1 = (gpstk::ObsRngDev *) 0 ;
    SwigValueWrapper<gpstk::ValidType<short > > result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ObsRngDev_getIODC",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__ObsRngDev, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = ((gpstk::ObsRngDev const *)arg1)->getIODC();
    
    {
        gpstk::vshort * resultptr;
        resultptr = new gpstk::vshort((gpstk::vshort &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_gpstk__ValidTypeTshort_t, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ObsRngDev_getORD(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::ObsRngDev *arg1 = (gpstk::ObsRngDev *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ObsRngDev_getORD",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__ObsRngDev, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double)((gpstk::ObsRngDev const *)arg1)->getORD();
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ObsRngDev_getIono(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::ObsRngDev *arg1 = (gpstk::ObsRngDev *) 0 ;
    SwigValueWrapper<gpstk::ValidType<double > > result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ObsRngDev_getIono",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__ObsRngDev, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = ((gpstk::ObsRngDev const *)arg1)->getIono();
    
    {
        gpstk::vdouble * resultptr;
        resultptr = new gpstk::vdouble((gpstk::vdouble &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_gpstk__ValidTypeTdouble_t, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ObsRngDev_getTrop(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::ObsRngDev *arg1 = (gpstk::ObsRngDev *) 0 ;
    SwigValueWrapper<gpstk::ValidType<double > > result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ObsRngDev_getTrop",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__ObsRngDev, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = ((gpstk::ObsRngDev const *)arg1)->getTrop();
    
    {
        gpstk::vdouble * resultptr;
        resultptr = new gpstk::vdouble((gpstk::vdouble &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_gpstk__ValidTypeTdouble_t, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_streamRead__SWIG_14(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::ostream *arg1 = 0 ;
    gpstk::ObsRngDev *arg2 = 0 ;
    std::ostream *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:streamRead",&obj0,&obj1)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("std::ostream");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_gpstk__ObsRngDev, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("gpstk::ObsRngDev");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        std::ostream &_result_ref = operator <<(*arg1,(gpstk::ObsRngDev const &)*arg2);
        result = (std::ostream *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ObsRngDev_applyClockOffset(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::ObsRngDev *arg1 = (gpstk::ObsRngDev *) 0 ;
    double arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ObsRngDev_applyClockOffset",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__ObsRngDev, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    (arg1)->applyClockOffset(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * ObsRngDev_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_gpstk__ObsRngDev, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_ORDEpoch_removeORD(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::ORDEpoch *arg1 = (gpstk::ORDEpoch *) 0 ;
    short arg2 ;
    gpstk::ORDEpoch *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ORDEpoch_removeORD",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__ORDEpoch, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (short)(SWIG_As_short(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        gpstk::ORDEpoch &_result_ref = (arg1)->removeORD(arg2);
        result = (gpstk::ORDEpoch *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__ORDEpoch, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ORDEpoch_applyClockModel(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::ORDEpoch *arg1 = (gpstk::ORDEpoch *) 0 ;
    gpstk::ClockModel *arg2 = 0 ;
    gpstk::ORDEpoch *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ORDEpoch_applyClockModel",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__ORDEpoch, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_gpstk__ClockModel, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("gpstk::ClockModel");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        gpstk::ORDEpoch &_result_ref = (arg1)->applyClockModel((gpstk::ClockModel const &)*arg2);
        result = (gpstk::ORDEpoch *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__ORDEpoch, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ORDEpoch_clockOffset_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::ORDEpoch *arg1 = (gpstk::ORDEpoch *) 0 ;
    double arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ORDEpoch_clockOffset_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__ORDEpoch, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->clockOffset = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ORDEpoch_clockOffset_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::ORDEpoch *arg1 = (gpstk::ORDEpoch *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ORDEpoch_clockOffset_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__ORDEpoch, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double) ((arg1)->clockOffset);
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ORDEpoch_validClock_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::ORDEpoch *arg1 = (gpstk::ORDEpoch *) 0 ;
    bool arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ORDEpoch_validClock_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__ORDEpoch, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (bool)(SWIG_As_bool(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->validClock = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ORDEpoch_validClock_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::ORDEpoch *arg1 = (gpstk::ORDEpoch *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ORDEpoch_validClock_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__ORDEpoch, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool) ((arg1)->validClock);
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ORDEpoch_ords_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::ORDEpoch *arg1 = (gpstk::ORDEpoch *) 0 ;
    gpstk::ORDEpoch::ORDMap *arg2 = (gpstk::ORDEpoch::ORDMap *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ORDEpoch_ords_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__ORDEpoch, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__mapTshort_gpstk__ObsRngDev_std__lessTshort_t_std__allocatorTstd__pairTshort_const_gpstk__ObsRngDev_t_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->ords = *arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ORDEpoch_ords_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::ORDEpoch *arg1 = (gpstk::ORDEpoch *) 0 ;
    gpstk::ORDEpoch::ORDMap *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ORDEpoch_ords_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__ORDEpoch, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (gpstk::ORDEpoch::ORDMap *)& ((arg1)->ords);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__mapTshort_gpstk__ObsRngDev_std__lessTshort_t_std__allocatorTstd__pairTshort_const_gpstk__ObsRngDev_t_t_t, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ORDEpoch_time_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::ORDEpoch *arg1 = (gpstk::ORDEpoch *) 0 ;
    gpstk::DayTime *arg2 = (gpstk::DayTime *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ORDEpoch_time_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__ORDEpoch, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_gpstk__DayTime, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->time = *arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ORDEpoch_time_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::ORDEpoch *arg1 = (gpstk::ORDEpoch *) 0 ;
    gpstk::DayTime *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ORDEpoch_time_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__ORDEpoch, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (gpstk::DayTime *)& ((arg1)->time);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__DayTime, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_streamRead__SWIG_15(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::ostream *arg1 = 0 ;
    gpstk::ORDEpoch *arg2 = 0 ;
    std::ostream *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:streamRead",&obj0,&obj1)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("std::ostream");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_gpstk__ORDEpoch, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("gpstk::ORDEpoch");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        std::ostream &_result_ref = operator <<(*arg1,(gpstk::ORDEpoch const &)*arg2);
        result = (std::ostream *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_streamRead(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_gpstk__FFData, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_streamRead__SWIG_0(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_gpstk__InvalidValue, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_streamRead__SWIG_1(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_gpstk__Observation, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_streamRead__SWIG_2(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_gpstk__ObsEpoch, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_streamRead__SWIG_3(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_gpstk__RxObsData, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_streamRead__SWIG_4(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_gpstk__WxObservation, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_streamRead__SWIG_5(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_gpstk__LinearClockModel, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_streamRead__SWIG_7(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_gpstk__ObsClockModel, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_streamRead__SWIG_6(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_gpstk__FileHunterException, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_streamRead__SWIG_8(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_gpstk__WrongBlockNumber, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_streamRead__SWIG_9(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_gpstk__WrongBlockFormat, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_streamRead__SWIG_10(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_gpstk__Position, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_streamRead__SWIG_11(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_gpstk__NoGeoidException, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_streamRead__SWIG_12(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_gpstk__EngEphemeris, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_streamRead__SWIG_13(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_gpstk__ObsRngDev, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_streamRead__SWIG_14(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_gpstk__ORDEpoch, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_streamRead__SWIG_15(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'streamRead'");
    return NULL;
}


static PyObject *_wrap_new_ORDEpoch(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::ORDEpoch *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_ORDEpoch")) goto fail;
    result = (gpstk::ORDEpoch *)new gpstk::ORDEpoch();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_gpstk__ORDEpoch, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_ORDEpoch(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    gpstk::ORDEpoch *arg1 = (gpstk::ORDEpoch *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_ORDEpoch",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_gpstk__ORDEpoch, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * ORDEpoch_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_gpstk__ORDEpoch, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_DayTime_streamRead(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::ostream *arg1 = 0 ;
    gpstk::DayTime *arg2 = 0 ;
    std::ostream *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:DayTime_streamRead",&obj0,&obj1)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("std::ostream");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_gpstk__DayTime, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("gpstk::DayTime");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        std::ostream &_result_ref = DayTime_streamRead(*arg1,*arg2);
        result = (std::ostream *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyMethodDef SwigMethods[] = {
	 { (char *)"vectori_empty", _wrap_vectori_empty, METH_VARARGS, NULL},
	 { (char *)"vectori_size", _wrap_vectori_size, METH_VARARGS, NULL},
	 { (char *)"vectori_clear", _wrap_vectori_clear, METH_VARARGS, NULL},
	 { (char *)"vectori_swap", _wrap_vectori_swap, METH_VARARGS, NULL},
	 { (char *)"vectori_get_allocator", _wrap_vectori_get_allocator, METH_VARARGS, NULL},
	 { (char *)"vectori_pop_back", _wrap_vectori_pop_back, METH_VARARGS, NULL},
	 { (char *)"new_vectori", _wrap_new_vectori, METH_VARARGS, NULL},
	 { (char *)"vectori_push_back", _wrap_vectori_push_back, METH_VARARGS, NULL},
	 { (char *)"vectori_front", _wrap_vectori_front, METH_VARARGS, NULL},
	 { (char *)"vectori_back", _wrap_vectori_back, METH_VARARGS, NULL},
	 { (char *)"vectori_assign", _wrap_vectori_assign, METH_VARARGS, NULL},
	 { (char *)"vectori_resize", _wrap_vectori_resize, METH_VARARGS, NULL},
	 { (char *)"vectori_reserve", _wrap_vectori_reserve, METH_VARARGS, NULL},
	 { (char *)"vectori_capacity", _wrap_vectori_capacity, METH_VARARGS, NULL},
	 { (char *)"vectori___nonzero__", _wrap_vectori___nonzero__, METH_VARARGS, NULL},
	 { (char *)"vectori___len__", _wrap_vectori___len__, METH_VARARGS, NULL},
	 { (char *)"vectori_pop", _wrap_vectori_pop, METH_VARARGS, NULL},
	 { (char *)"vectori___getslice__", _wrap_vectori___getslice__, METH_VARARGS, NULL},
	 { (char *)"vectori___setslice__", _wrap_vectori___setslice__, METH_VARARGS, NULL},
	 { (char *)"vectori___delslice__", _wrap_vectori___delslice__, METH_VARARGS, NULL},
	 { (char *)"vectori___delitem__", _wrap_vectori___delitem__, METH_VARARGS, NULL},
	 { (char *)"vectori___getitem__", _wrap_vectori___getitem__, METH_VARARGS, NULL},
	 { (char *)"vectori___setitem__", _wrap_vectori___setitem__, METH_VARARGS, NULL},
	 { (char *)"vectori_append", _wrap_vectori_append, METH_VARARGS, NULL},
	 { (char *)"delete_vectori", _wrap_delete_vectori, METH_VARARGS, NULL},
	 { (char *)"vectori_swigregister", vectori_swigregister, METH_VARARGS, NULL},
	 { (char *)"vectord_empty", _wrap_vectord_empty, METH_VARARGS, NULL},
	 { (char *)"vectord_size", _wrap_vectord_size, METH_VARARGS, NULL},
	 { (char *)"vectord_clear", _wrap_vectord_clear, METH_VARARGS, NULL},
	 { (char *)"vectord_swap", _wrap_vectord_swap, METH_VARARGS, NULL},
	 { (char *)"vectord_get_allocator", _wrap_vectord_get_allocator, METH_VARARGS, NULL},
	 { (char *)"vectord_pop_back", _wrap_vectord_pop_back, METH_VARARGS, NULL},
	 { (char *)"new_vectord", _wrap_new_vectord, METH_VARARGS, NULL},
	 { (char *)"vectord_push_back", _wrap_vectord_push_back, METH_VARARGS, NULL},
	 { (char *)"vectord_front", _wrap_vectord_front, METH_VARARGS, NULL},
	 { (char *)"vectord_back", _wrap_vectord_back, METH_VARARGS, NULL},
	 { (char *)"vectord_assign", _wrap_vectord_assign, METH_VARARGS, NULL},
	 { (char *)"vectord_resize", _wrap_vectord_resize, METH_VARARGS, NULL},
	 { (char *)"vectord_reserve", _wrap_vectord_reserve, METH_VARARGS, NULL},
	 { (char *)"vectord_capacity", _wrap_vectord_capacity, METH_VARARGS, NULL},
	 { (char *)"vectord___nonzero__", _wrap_vectord___nonzero__, METH_VARARGS, NULL},
	 { (char *)"vectord___len__", _wrap_vectord___len__, METH_VARARGS, NULL},
	 { (char *)"vectord_pop", _wrap_vectord_pop, METH_VARARGS, NULL},
	 { (char *)"vectord___getslice__", _wrap_vectord___getslice__, METH_VARARGS, NULL},
	 { (char *)"vectord___setslice__", _wrap_vectord___setslice__, METH_VARARGS, NULL},
	 { (char *)"vectord___delslice__", _wrap_vectord___delslice__, METH_VARARGS, NULL},
	 { (char *)"vectord___delitem__", _wrap_vectord___delitem__, METH_VARARGS, NULL},
	 { (char *)"vectord___getitem__", _wrap_vectord___getitem__, METH_VARARGS, NULL},
	 { (char *)"vectord___setitem__", _wrap_vectord___setitem__, METH_VARARGS, NULL},
	 { (char *)"vectord_append", _wrap_vectord_append, METH_VARARGS, NULL},
	 { (char *)"delete_vectord", _wrap_delete_vectord, METH_VARARGS, NULL},
	 { (char *)"vectord_swigregister", vectord_swigregister, METH_VARARGS, NULL},
	 { (char *)"delete_exception", _wrap_delete_exception, METH_VARARGS, NULL},
	 { (char *)"exception_what", _wrap_exception_what, METH_VARARGS, NULL},
	 { (char *)"new_exception", _wrap_new_exception, METH_VARARGS, NULL},
	 { (char *)"exception_swigregister", exception_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_bad_exception", _wrap_new_bad_exception, METH_VARARGS, NULL},
	 { (char *)"delete_bad_exception", _wrap_delete_bad_exception, METH_VARARGS, NULL},
	 { (char *)"bad_exception_swigregister", bad_exception_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_logic_error", _wrap_new_logic_error, METH_VARARGS, NULL},
	 { (char *)"delete_logic_error", _wrap_delete_logic_error, METH_VARARGS, NULL},
	 { (char *)"logic_error_swigregister", logic_error_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_domain_error", _wrap_new_domain_error, METH_VARARGS, NULL},
	 { (char *)"delete_domain_error", _wrap_delete_domain_error, METH_VARARGS, NULL},
	 { (char *)"domain_error_swigregister", domain_error_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_invalid_argument", _wrap_new_invalid_argument, METH_VARARGS, NULL},
	 { (char *)"delete_invalid_argument", _wrap_delete_invalid_argument, METH_VARARGS, NULL},
	 { (char *)"invalid_argument_swigregister", invalid_argument_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_length_error", _wrap_new_length_error, METH_VARARGS, NULL},
	 { (char *)"delete_length_error", _wrap_delete_length_error, METH_VARARGS, NULL},
	 { (char *)"length_error_swigregister", length_error_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_out_of_range", _wrap_new_out_of_range, METH_VARARGS, NULL},
	 { (char *)"delete_out_of_range", _wrap_delete_out_of_range, METH_VARARGS, NULL},
	 { (char *)"out_of_range_swigregister", out_of_range_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_runtime_error", _wrap_new_runtime_error, METH_VARARGS, NULL},
	 { (char *)"delete_runtime_error", _wrap_delete_runtime_error, METH_VARARGS, NULL},
	 { (char *)"runtime_error_swigregister", runtime_error_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_range_error", _wrap_new_range_error, METH_VARARGS, NULL},
	 { (char *)"delete_range_error", _wrap_delete_range_error, METH_VARARGS, NULL},
	 { (char *)"range_error_swigregister", range_error_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_overflow_error", _wrap_new_overflow_error, METH_VARARGS, NULL},
	 { (char *)"delete_overflow_error", _wrap_delete_overflow_error, METH_VARARGS, NULL},
	 { (char *)"overflow_error_swigregister", overflow_error_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_underflow_error", _wrap_new_underflow_error, METH_VARARGS, NULL},
	 { (char *)"delete_underflow_error", _wrap_delete_underflow_error, METH_VARARGS, NULL},
	 { (char *)"underflow_error_swigregister", underflow_error_swigregister, METH_VARARGS, NULL},
	 { (char *)"ios_base_register_callback", _wrap_ios_base_register_callback, METH_VARARGS, NULL},
	 { (char *)"ios_base_flags", _wrap_ios_base_flags, METH_VARARGS, NULL},
	 { (char *)"ios_base_setf", _wrap_ios_base_setf, METH_VARARGS, NULL},
	 { (char *)"ios_base_unsetf", _wrap_ios_base_unsetf, METH_VARARGS, NULL},
	 { (char *)"ios_base_precision", _wrap_ios_base_precision, METH_VARARGS, NULL},
	 { (char *)"ios_base_width", _wrap_ios_base_width, METH_VARARGS, NULL},
	 { (char *)"ios_base_sync_with_stdio", _wrap_ios_base_sync_with_stdio, METH_VARARGS, NULL},
	 { (char *)"ios_base_imbue", _wrap_ios_base_imbue, METH_VARARGS, NULL},
	 { (char *)"ios_base_getloc", _wrap_ios_base_getloc, METH_VARARGS, NULL},
	 { (char *)"ios_base_xalloc", _wrap_ios_base_xalloc, METH_VARARGS, NULL},
	 { (char *)"ios_base_iword", _wrap_ios_base_iword, METH_VARARGS, NULL},
	 { (char *)"ios_base_pword", _wrap_ios_base_pword, METH_VARARGS, NULL},
	 { (char *)"delete_ios_base", _wrap_delete_ios_base, METH_VARARGS, NULL},
	 { (char *)"ios_base_swigregister", ios_base_swigregister, METH_VARARGS, NULL},
	 { (char *)"ios_rdstate", _wrap_ios_rdstate, METH_VARARGS, NULL},
	 { (char *)"ios_clear", _wrap_ios_clear, METH_VARARGS, NULL},
	 { (char *)"ios_setstate", _wrap_ios_setstate, METH_VARARGS, NULL},
	 { (char *)"ios_good", _wrap_ios_good, METH_VARARGS, NULL},
	 { (char *)"ios_eof", _wrap_ios_eof, METH_VARARGS, NULL},
	 { (char *)"ios_fail", _wrap_ios_fail, METH_VARARGS, NULL},
	 { (char *)"ios_bad", _wrap_ios_bad, METH_VARARGS, NULL},
	 { (char *)"ios_exceptions", _wrap_ios_exceptions, METH_VARARGS, NULL},
	 { (char *)"new_ios", _wrap_new_ios, METH_VARARGS, NULL},
	 { (char *)"delete_ios", _wrap_delete_ios, METH_VARARGS, NULL},
	 { (char *)"ios_tie", _wrap_ios_tie, METH_VARARGS, NULL},
	 { (char *)"ios_rdbuf", _wrap_ios_rdbuf, METH_VARARGS, NULL},
	 { (char *)"ios_copyfmt", _wrap_ios_copyfmt, METH_VARARGS, NULL},
	 { (char *)"ios_fill", _wrap_ios_fill, METH_VARARGS, NULL},
	 { (char *)"ios_imbue", _wrap_ios_imbue, METH_VARARGS, NULL},
	 { (char *)"ios_narrow", _wrap_ios_narrow, METH_VARARGS, NULL},
	 { (char *)"ios_widen", _wrap_ios_widen, METH_VARARGS, NULL},
	 { (char *)"ios_swigregister", ios_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_ostream", _wrap_new_ostream, METH_VARARGS, NULL},
	 { (char *)"delete_ostream", _wrap_delete_ostream, METH_VARARGS, NULL},
	 { (char *)"ostream___lshift__", _wrap_ostream___lshift__, METH_VARARGS, NULL},
	 { (char *)"ostream_put", _wrap_ostream_put, METH_VARARGS, NULL},
	 { (char *)"ostream_write", _wrap_ostream_write, METH_VARARGS, NULL},
	 { (char *)"ostream_flush", _wrap_ostream_flush, METH_VARARGS, NULL},
	 { (char *)"ostream_tellp", _wrap_ostream_tellp, METH_VARARGS, NULL},
	 { (char *)"ostream_seekp", _wrap_ostream_seekp, METH_VARARGS, NULL},
	 { (char *)"ostream_swigregister", ostream_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_istream", _wrap_new_istream, METH_VARARGS, NULL},
	 { (char *)"delete_istream", _wrap_delete_istream, METH_VARARGS, NULL},
	 { (char *)"istream___rshift__", _wrap_istream___rshift__, METH_VARARGS, NULL},
	 { (char *)"istream_gcount", _wrap_istream_gcount, METH_VARARGS, NULL},
	 { (char *)"istream_get", _wrap_istream_get, METH_VARARGS, NULL},
	 { (char *)"istream_getline", _wrap_istream_getline, METH_VARARGS, NULL},
	 { (char *)"istream_ignore", _wrap_istream_ignore, METH_VARARGS, NULL},
	 { (char *)"istream_peek", _wrap_istream_peek, METH_VARARGS, NULL},
	 { (char *)"istream_read", _wrap_istream_read, METH_VARARGS, NULL},
	 { (char *)"istream_readsome", _wrap_istream_readsome, METH_VARARGS, NULL},
	 { (char *)"istream_putback", _wrap_istream_putback, METH_VARARGS, NULL},
	 { (char *)"istream_unget", _wrap_istream_unget, METH_VARARGS, NULL},
	 { (char *)"istream_sync", _wrap_istream_sync, METH_VARARGS, NULL},
	 { (char *)"istream_tellg", _wrap_istream_tellg, METH_VARARGS, NULL},
	 { (char *)"istream_seekg", _wrap_istream_seekg, METH_VARARGS, NULL},
	 { (char *)"istream_swigregister", istream_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_iostream", _wrap_new_iostream, METH_VARARGS, NULL},
	 { (char *)"delete_iostream", _wrap_delete_iostream, METH_VARARGS, NULL},
	 { (char *)"iostream_swigregister", iostream_swigregister, METH_VARARGS, NULL},
	 { (char *)"endl", _wrap_endl, METH_VARARGS, (char *)"swig_ptr: endl_cb_ptr"},
	 { (char *)"ends", _wrap_ends, METH_VARARGS, (char *)"swig_ptr: ends_cb_ptr"},
	 { (char *)"flush", _wrap_flush, METH_VARARGS, (char *)"swig_ptr: flush_cb_ptr"},
	 { (char *)"accuracy2ura", _wrap_accuracy2ura, METH_VARARGS, NULL},
	 { (char *)"ura2accuracy", _wrap_ura2accuracy, METH_VARARGS, NULL},
	 { (char *)"ios_out", _wrap_ios_out, METH_VARARGS, NULL},
	 { (char *)"ios_in", _wrap_ios_in, METH_VARARGS, NULL},
	 { (char *)"ios_out_trunc", _wrap_ios_out_trunc, METH_VARARGS, NULL},
	 { (char *)"read", _wrap_read, METH_VARARGS, NULL},
	 { (char *)"write", _wrap_write, METH_VARARGS, NULL},
	 { (char *)"RinexPrnMap_find", _wrap_RinexPrnMap_find, METH_VARARGS, NULL},
	 { (char *)"RinexPrnMap_end", _wrap_RinexPrnMap_end, METH_VARARGS, NULL},
	 { (char *)"getPseudoRangeCode", _wrap_getPseudoRangeCode, METH_VARARGS, NULL},
	 { (char *)"RinexPrnMap_compare", _wrap_RinexPrnMap_compare, METH_VARARGS, NULL},
	 { (char *)"delete_FFData", _wrap_delete_FFData, METH_VARARGS, NULL},
	 { (char *)"FFData_putRecord", _wrap_FFData_putRecord, METH_VARARGS, NULL},
	 { (char *)"FFData_getRecord", _wrap_FFData_getRecord, METH_VARARGS, NULL},
	 { (char *)"FFData_dump", _wrap_FFData_dump, METH_VARARGS, NULL},
	 { (char *)"FFData_isHeader", _wrap_FFData_isHeader, METH_VARARGS, NULL},
	 { (char *)"FFData_isData", _wrap_FFData_isData, METH_VARARGS, NULL},
	 { (char *)"streamWrite", _wrap_streamWrite, METH_VARARGS, NULL},
	 { (char *)"FFData_swigregister", FFData_swigregister, METH_VARARGS, NULL},
	 { (char *)"delete_FFStream", _wrap_delete_FFStream, METH_VARARGS, NULL},
	 { (char *)"new_FFStream", _wrap_new_FFStream, METH_VARARGS, NULL},
	 { (char *)"FFStream_open", _wrap_FFStream_open, METH_VARARGS, NULL},
	 { (char *)"FFStream_conditionalThrow", _wrap_FFStream_conditionalThrow, METH_VARARGS, NULL},
	 { (char *)"FFStream_mostRecentException_set", _wrap_FFStream_mostRecentException_set, METH_VARARGS, NULL},
	 { (char *)"FFStream_mostRecentException_get", _wrap_FFStream_mostRecentException_get, METH_VARARGS, NULL},
	 { (char *)"FFStream_recordNumber_set", _wrap_FFStream_recordNumber_set, METH_VARARGS, NULL},
	 { (char *)"FFStream_recordNumber_get", _wrap_FFStream_recordNumber_get, METH_VARARGS, NULL},
	 { (char *)"FFStream_filename_set", _wrap_FFStream_filename_set, METH_VARARGS, NULL},
	 { (char *)"FFStream_filename_get", _wrap_FFStream_filename_get, METH_VARARGS, NULL},
	 { (char *)"FFStream_swigregister", FFStream_swigregister, METH_VARARGS, NULL},
	 { (char *)"delete_FFTextStream", _wrap_delete_FFTextStream, METH_VARARGS, NULL},
	 { (char *)"new_FFTextStream", _wrap_new_FFTextStream, METH_VARARGS, NULL},
	 { (char *)"FFTextStream_open", _wrap_FFTextStream_open, METH_VARARGS, NULL},
	 { (char *)"FFTextStream_lineNumber_set", _wrap_FFTextStream_lineNumber_set, METH_VARARGS, NULL},
	 { (char *)"FFTextStream_lineNumber_get", _wrap_FFTextStream_lineNumber_get, METH_VARARGS, NULL},
	 { (char *)"FFTextStream_formattedGetLine", _wrap_FFTextStream_formattedGetLine, METH_VARARGS, NULL},
	 { (char *)"FFTextStream_swigregister", FFTextStream_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_ExceptionLocation", _wrap_new_ExceptionLocation, METH_VARARGS, NULL},
	 { (char *)"delete_ExceptionLocation", _wrap_delete_ExceptionLocation, METH_VARARGS, NULL},
	 { (char *)"ExceptionLocation_getFileName", _wrap_ExceptionLocation_getFileName, METH_VARARGS, NULL},
	 { (char *)"ExceptionLocation_getFunctionName", _wrap_ExceptionLocation_getFunctionName, METH_VARARGS, NULL},
	 { (char *)"ExceptionLocation_getLineNumber", _wrap_ExceptionLocation_getLineNumber, METH_VARARGS, NULL},
	 { (char *)"ExceptionLocation_dump", _wrap_ExceptionLocation_dump, METH_VARARGS, NULL},
	 { (char *)"ExceptionLocation_swigregister", ExceptionLocation_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_Exception", _wrap_new_Exception, METH_VARARGS, NULL},
	 { (char *)"delete_Exception", _wrap_delete_Exception, METH_VARARGS, NULL},
	 { (char *)"Exception_class_operator_assignment", _wrap_Exception_class_operator_assignment, METH_VARARGS, NULL},
	 { (char *)"Exception_terminate", _wrap_Exception_terminate, METH_VARARGS, NULL},
	 { (char *)"Exception_getErrorId", _wrap_Exception_getErrorId, METH_VARARGS, NULL},
	 { (char *)"Exception_setErrorId", _wrap_Exception_setErrorId, METH_VARARGS, NULL},
	 { (char *)"Exception_addLocation", _wrap_Exception_addLocation, METH_VARARGS, NULL},
	 { (char *)"Exception_getLocation", _wrap_Exception_getLocation, METH_VARARGS, NULL},
	 { (char *)"Exception_getLocationCount", _wrap_Exception_getLocationCount, METH_VARARGS, NULL},
	 { (char *)"Exception_isRecoverable", _wrap_Exception_isRecoverable, METH_VARARGS, NULL},
	 { (char *)"Exception_setSeverity", _wrap_Exception_setSeverity, METH_VARARGS, NULL},
	 { (char *)"Exception_addText", _wrap_Exception_addText, METH_VARARGS, NULL},
	 { (char *)"Exception_getText", _wrap_Exception_getText, METH_VARARGS, NULL},
	 { (char *)"Exception_getTextCount", _wrap_Exception_getTextCount, METH_VARARGS, NULL},
	 { (char *)"Exception_getName", _wrap_Exception_getName, METH_VARARGS, NULL},
	 { (char *)"Exception_dump", _wrap_Exception_dump, METH_VARARGS, NULL},
	 { (char *)"Exception_swigregister", Exception_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_InvalidParameter", _wrap_new_InvalidParameter, METH_VARARGS, NULL},
	 { (char *)"delete_InvalidParameter", _wrap_delete_InvalidParameter, METH_VARARGS, NULL},
	 { (char *)"InvalidParameter_getName", _wrap_InvalidParameter_getName, METH_VARARGS, NULL},
	 { (char *)"InvalidParameter_class_operator_assignment", _wrap_InvalidParameter_class_operator_assignment, METH_VARARGS, NULL},
	 { (char *)"InvalidParameter_swigregister", InvalidParameter_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_InvalidRequest", _wrap_new_InvalidRequest, METH_VARARGS, NULL},
	 { (char *)"delete_InvalidRequest", _wrap_delete_InvalidRequest, METH_VARARGS, NULL},
	 { (char *)"InvalidRequest_getName", _wrap_InvalidRequest_getName, METH_VARARGS, NULL},
	 { (char *)"InvalidRequest_class_operator_assignment", _wrap_InvalidRequest_class_operator_assignment, METH_VARARGS, NULL},
	 { (char *)"InvalidRequest_swigregister", InvalidRequest_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_AssertionFailure", _wrap_new_AssertionFailure, METH_VARARGS, NULL},
	 { (char *)"delete_AssertionFailure", _wrap_delete_AssertionFailure, METH_VARARGS, NULL},
	 { (char *)"AssertionFailure_getName", _wrap_AssertionFailure_getName, METH_VARARGS, NULL},
	 { (char *)"AssertionFailure_class_operator_assignment", _wrap_AssertionFailure_class_operator_assignment, METH_VARARGS, NULL},
	 { (char *)"AssertionFailure_swigregister", AssertionFailure_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_AccessError", _wrap_new_AccessError, METH_VARARGS, NULL},
	 { (char *)"delete_AccessError", _wrap_delete_AccessError, METH_VARARGS, NULL},
	 { (char *)"AccessError_getName", _wrap_AccessError_getName, METH_VARARGS, NULL},
	 { (char *)"AccessError_class_operator_assignment", _wrap_AccessError_class_operator_assignment, METH_VARARGS, NULL},
	 { (char *)"AccessError_swigregister", AccessError_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_IndexOutOfBoundsException", _wrap_new_IndexOutOfBoundsException, METH_VARARGS, NULL},
	 { (char *)"delete_IndexOutOfBoundsException", _wrap_delete_IndexOutOfBoundsException, METH_VARARGS, NULL},
	 { (char *)"IndexOutOfBoundsException_getName", _wrap_IndexOutOfBoundsException_getName, METH_VARARGS, NULL},
	 { (char *)"IndexOutOfBoundsException_class_operator_assignment", _wrap_IndexOutOfBoundsException_class_operator_assignment, METH_VARARGS, NULL},
	 { (char *)"IndexOutOfBoundsException_swigregister", IndexOutOfBoundsException_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_InvalidArgumentException", _wrap_new_InvalidArgumentException, METH_VARARGS, NULL},
	 { (char *)"delete_InvalidArgumentException", _wrap_delete_InvalidArgumentException, METH_VARARGS, NULL},
	 { (char *)"InvalidArgumentException_getName", _wrap_InvalidArgumentException_getName, METH_VARARGS, NULL},
	 { (char *)"InvalidArgumentException_class_operator_assignment", _wrap_InvalidArgumentException_class_operator_assignment, METH_VARARGS, NULL},
	 { (char *)"InvalidArgumentException_swigregister", InvalidArgumentException_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_ConfigurationException", _wrap_new_ConfigurationException, METH_VARARGS, NULL},
	 { (char *)"delete_ConfigurationException", _wrap_delete_ConfigurationException, METH_VARARGS, NULL},
	 { (char *)"ConfigurationException_getName", _wrap_ConfigurationException_getName, METH_VARARGS, NULL},
	 { (char *)"ConfigurationException_class_operator_assignment", _wrap_ConfigurationException_class_operator_assignment, METH_VARARGS, NULL},
	 { (char *)"ConfigurationException_swigregister", ConfigurationException_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_FileMissingException", _wrap_new_FileMissingException, METH_VARARGS, NULL},
	 { (char *)"delete_FileMissingException", _wrap_delete_FileMissingException, METH_VARARGS, NULL},
	 { (char *)"FileMissingException_getName", _wrap_FileMissingException_getName, METH_VARARGS, NULL},
	 { (char *)"FileMissingException_class_operator_assignment", _wrap_FileMissingException_class_operator_assignment, METH_VARARGS, NULL},
	 { (char *)"FileMissingException_swigregister", FileMissingException_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_SystemSemaphoreException", _wrap_new_SystemSemaphoreException, METH_VARARGS, NULL},
	 { (char *)"delete_SystemSemaphoreException", _wrap_delete_SystemSemaphoreException, METH_VARARGS, NULL},
	 { (char *)"SystemSemaphoreException_getName", _wrap_SystemSemaphoreException_getName, METH_VARARGS, NULL},
	 { (char *)"SystemSemaphoreException_class_operator_assignment", _wrap_SystemSemaphoreException_class_operator_assignment, METH_VARARGS, NULL},
	 { (char *)"SystemSemaphoreException_swigregister", SystemSemaphoreException_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_SystemPipeException", _wrap_new_SystemPipeException, METH_VARARGS, NULL},
	 { (char *)"delete_SystemPipeException", _wrap_delete_SystemPipeException, METH_VARARGS, NULL},
	 { (char *)"SystemPipeException_getName", _wrap_SystemPipeException_getName, METH_VARARGS, NULL},
	 { (char *)"SystemPipeException_class_operator_assignment", _wrap_SystemPipeException_class_operator_assignment, METH_VARARGS, NULL},
	 { (char *)"SystemPipeException_swigregister", SystemPipeException_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_SystemQueueException", _wrap_new_SystemQueueException, METH_VARARGS, NULL},
	 { (char *)"delete_SystemQueueException", _wrap_delete_SystemQueueException, METH_VARARGS, NULL},
	 { (char *)"SystemQueueException_getName", _wrap_SystemQueueException_getName, METH_VARARGS, NULL},
	 { (char *)"SystemQueueException_class_operator_assignment", _wrap_SystemQueueException_class_operator_assignment, METH_VARARGS, NULL},
	 { (char *)"SystemQueueException_swigregister", SystemQueueException_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_OutOfMemory", _wrap_new_OutOfMemory, METH_VARARGS, NULL},
	 { (char *)"delete_OutOfMemory", _wrap_delete_OutOfMemory, METH_VARARGS, NULL},
	 { (char *)"OutOfMemory_getName", _wrap_OutOfMemory_getName, METH_VARARGS, NULL},
	 { (char *)"OutOfMemory_class_operator_assignment", _wrap_OutOfMemory_class_operator_assignment, METH_VARARGS, NULL},
	 { (char *)"OutOfMemory_swigregister", OutOfMemory_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_ObjectNotFound", _wrap_new_ObjectNotFound, METH_VARARGS, NULL},
	 { (char *)"delete_ObjectNotFound", _wrap_delete_ObjectNotFound, METH_VARARGS, NULL},
	 { (char *)"ObjectNotFound_getName", _wrap_ObjectNotFound_getName, METH_VARARGS, NULL},
	 { (char *)"ObjectNotFound_class_operator_assignment", _wrap_ObjectNotFound_class_operator_assignment, METH_VARARGS, NULL},
	 { (char *)"Exception_streamRead", _wrap_Exception_streamRead, METH_VARARGS, NULL},
	 { (char *)"ObjectNotFound_swigregister", ObjectNotFound_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_InvalidValue", _wrap_new_InvalidValue, METH_VARARGS, NULL},
	 { (char *)"delete_InvalidValue", _wrap_delete_InvalidValue, METH_VARARGS, NULL},
	 { (char *)"InvalidValue_getName", _wrap_InvalidValue_getName, METH_VARARGS, NULL},
	 { (char *)"InvalidValue_class_operator_assignment", _wrap_InvalidValue_class_operator_assignment, METH_VARARGS, NULL},
	 { (char *)"InvalidValue_swigregister", InvalidValue_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_X1Sequence", _wrap_new_X1Sequence, METH_VARARGS, NULL},
	 { (char *)"delete_X1Sequence", _wrap_delete_X1Sequence, METH_VARARGS, NULL},
	 { (char *)"X1Sequence_allocateMemory", _wrap_X1Sequence_allocateMemory, METH_VARARGS, NULL},
	 { (char *)"X1Sequence_deAllocateMemory", _wrap_X1Sequence_deAllocateMemory, METH_VARARGS, NULL},
	 { (char *)"X1Sequence_class_operator_bracket", _wrap_X1Sequence_class_operator_bracket, METH_VARARGS, NULL},
	 { (char *)"X1Sequence_swigregister", X1Sequence_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_X2Sequence", _wrap_new_X2Sequence, METH_VARARGS, NULL},
	 { (char *)"delete_X2Sequence", _wrap_delete_X2Sequence, METH_VARARGS, NULL},
	 { (char *)"X2Sequence_allocateMemory", _wrap_X2Sequence_allocateMemory, METH_VARARGS, NULL},
	 { (char *)"X2Sequence_deAllocateMemory", _wrap_X2Sequence_deAllocateMemory, METH_VARARGS, NULL},
	 { (char *)"X2Sequence_class_operator_bracket", _wrap_X2Sequence_class_operator_bracket, METH_VARARGS, NULL},
	 { (char *)"X2Sequence_setEOWX2Epoch", _wrap_X2Sequence_setEOWX2Epoch, METH_VARARGS, NULL},
	 { (char *)"X2Sequence_swigregister", X2Sequence_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_CodeBuffer", _wrap_new_CodeBuffer, METH_VARARGS, NULL},
	 { (char *)"delete_CodeBuffer", _wrap_delete_CodeBuffer, METH_VARARGS, NULL},
	 { (char *)"CodeBuffer_class_operator_assignment", _wrap_CodeBuffer_class_operator_assignment, METH_VARARGS, NULL},
	 { (char *)"CodeBuffer_updateBufferStatus", _wrap_CodeBuffer_updateBufferStatus, METH_VARARGS, NULL},
	 { (char *)"CodeBuffer_getCurrentTime", _wrap_CodeBuffer_getCurrentTime, METH_VARARGS, NULL},
	 { (char *)"CodeBuffer_getPYFlag", _wrap_CodeBuffer_getPYFlag, METH_VARARGS, NULL},
	 { (char *)"CodeBuffer_getPRNID", _wrap_CodeBuffer_getPRNID, METH_VARARGS, NULL},
	 { (char *)"CodeBuffer_class_operator_bracket", _wrap_CodeBuffer_class_operator_bracket, METH_VARARGS, NULL},
	 { (char *)"CodeBuffer_operator_bracket_const", _wrap_CodeBuffer_operator_bracket_const, METH_VARARGS, NULL},
	 { (char *)"CodeBuffer_getBit", _wrap_CodeBuffer_getBit, METH_VARARGS, NULL},
	 { (char *)"CodeBuffer___ixor__", _wrap_CodeBuffer___ixor__, METH_VARARGS, NULL},
	 { (char *)"CodeBuffer_swigregister", CodeBuffer_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_SatID", _wrap_new_SatID, METH_VARARGS, NULL},
	 { (char *)"SatID_setfill", _wrap_SatID_setfill, METH_VARARGS, NULL},
	 { (char *)"SatID_getfill", _wrap_SatID_getfill, METH_VARARGS, NULL},
	 { (char *)"SatID_systemCode", _wrap_SatID_systemCode, METH_VARARGS, NULL},
	 { (char *)"SatID___eq__", _wrap_SatID___eq__, METH_VARARGS, NULL},
	 { (char *)"SatID___ne__", _wrap_SatID___ne__, METH_VARARGS, NULL},
	 { (char *)"SatID___lt__", _wrap_SatID___lt__, METH_VARARGS, NULL},
	 { (char *)"SatID_id_set", _wrap_SatID_id_set, METH_VARARGS, NULL},
	 { (char *)"SatID_id_get", _wrap_SatID_id_get, METH_VARARGS, NULL},
	 { (char *)"SatID_system_set", _wrap_SatID_system_set, METH_VARARGS, NULL},
	 { (char *)"SatID_system_get", _wrap_SatID_system_get, METH_VARARGS, NULL},
	 { (char *)"delete_SatID", _wrap_delete_SatID, METH_VARARGS, NULL},
	 { (char *)"SatID_swigregister", SatID_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_GenXSequence", _wrap_new_GenXSequence, METH_VARARGS, NULL},
	 { (char *)"delete_GenXSequence", _wrap_delete_GenXSequence, METH_VARARGS, NULL},
	 { (char *)"GenXSequence_class_operator_bracket", _wrap_GenXSequence_class_operator_bracket, METH_VARARGS, NULL},
	 { (char *)"GenXSequence_setLengthOfSequence", _wrap_GenXSequence_setLengthOfSequence, METH_VARARGS, NULL},
	 { (char *)"GenXSequence_swigregister", GenXSequence_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_SVPCodeGen", _wrap_new_SVPCodeGen, METH_VARARGS, NULL},
	 { (char *)"delete_SVPCodeGen", _wrap_delete_SVPCodeGen, METH_VARARGS, NULL},
	 { (char *)"SVPCodeGen_getCurrentSixSeconds", _wrap_SVPCodeGen_getCurrentSixSeconds, METH_VARARGS, NULL},
	 { (char *)"SVPCodeGen_increment4ZCounts", _wrap_SVPCodeGen_increment4ZCounts, METH_VARARGS, NULL},
	 { (char *)"SVPCodeGen_getCurrentZCount", _wrap_SVPCodeGen_getCurrentZCount, METH_VARARGS, NULL},
	 { (char *)"SVPCodeGen_swigregister", SVPCodeGen_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_Observation", _wrap_new_Observation, METH_VARARGS, NULL},
	 { (char *)"Observation_range_set", _wrap_Observation_range_set, METH_VARARGS, NULL},
	 { (char *)"Observation_range_get", _wrap_Observation_range_get, METH_VARARGS, NULL},
	 { (char *)"Observation_phase_set", _wrap_Observation_phase_set, METH_VARARGS, NULL},
	 { (char *)"Observation_phase_get", _wrap_Observation_phase_get, METH_VARARGS, NULL},
	 { (char *)"Observation_doppler_set", _wrap_Observation_doppler_set, METH_VARARGS, NULL},
	 { (char *)"Observation_doppler_get", _wrap_Observation_doppler_get, METH_VARARGS, NULL},
	 { (char *)"Observation_SNR_set", _wrap_Observation_SNR_set, METH_VARARGS, NULL},
	 { (char *)"Observation_SNR_get", _wrap_Observation_SNR_get, METH_VARARGS, NULL},
	 { (char *)"Observation_channel_set", _wrap_Observation_channel_set, METH_VARARGS, NULL},
	 { (char *)"Observation_channel_get", _wrap_Observation_channel_get, METH_VARARGS, NULL},
	 { (char *)"Observation_code_set", _wrap_Observation_code_set, METH_VARARGS, NULL},
	 { (char *)"Observation_code_get", _wrap_Observation_code_get, METH_VARARGS, NULL},
	 { (char *)"Observation_carrier_set", _wrap_Observation_carrier_set, METH_VARARGS, NULL},
	 { (char *)"Observation_carrier_get", _wrap_Observation_carrier_get, METH_VARARGS, NULL},
	 { (char *)"delete_Observation", _wrap_delete_Observation, METH_VARARGS, NULL},
	 { (char *)"Observation_swigregister", Observation_swigregister, METH_VARARGS, NULL},
	 { (char *)"ObservationPlus_obs_set", _wrap_ObservationPlus_obs_set, METH_VARARGS, NULL},
	 { (char *)"ObservationPlus_obs_get", _wrap_ObservationPlus_obs_get, METH_VARARGS, NULL},
	 { (char *)"ObservationPlus_time_set", _wrap_ObservationPlus_time_set, METH_VARARGS, NULL},
	 { (char *)"ObservationPlus_time_get", _wrap_ObservationPlus_time_get, METH_VARARGS, NULL},
	 { (char *)"ObservationPlus_rxId_set", _wrap_ObservationPlus_rxId_set, METH_VARARGS, NULL},
	 { (char *)"ObservationPlus_rxId_get", _wrap_ObservationPlus_rxId_get, METH_VARARGS, NULL},
	 { (char *)"ObservationPlus_svId_set", _wrap_ObservationPlus_svId_set, METH_VARARGS, NULL},
	 { (char *)"ObservationPlus_svId_get", _wrap_ObservationPlus_svId_get, METH_VARARGS, NULL},
	 { (char *)"new_ObservationPlus", _wrap_new_ObservationPlus, METH_VARARGS, NULL},
	 { (char *)"delete_ObservationPlus", _wrap_delete_ObservationPlus, METH_VARARGS, NULL},
	 { (char *)"ObservationPlus_swigregister", ObservationPlus_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_ObsEpoch", _wrap_new_ObsEpoch, METH_VARARGS, NULL},
	 { (char *)"ObsEpoch_insertObservation", _wrap_ObsEpoch_insertObservation, METH_VARARGS, NULL},
	 { (char *)"ObsEpoch_t_set", _wrap_ObsEpoch_t_set, METH_VARARGS, NULL},
	 { (char *)"ObsEpoch_t_get", _wrap_ObsEpoch_t_get, METH_VARARGS, NULL},
	 { (char *)"ObsEpoch_dt_set", _wrap_ObsEpoch_dt_set, METH_VARARGS, NULL},
	 { (char *)"ObsEpoch_dt_get", _wrap_ObsEpoch_dt_get, METH_VARARGS, NULL},
	 { (char *)"ObsEpoch_obs_set", _wrap_ObsEpoch_obs_set, METH_VARARGS, NULL},
	 { (char *)"ObsEpoch_obs_get", _wrap_ObsEpoch_obs_get, METH_VARARGS, NULL},
	 { (char *)"delete_ObsEpoch", _wrap_delete_ObsEpoch, METH_VARARGS, NULL},
	 { (char *)"ObsEpoch_swigregister", ObsEpoch_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_RxObsData", _wrap_new_RxObsData, METH_VARARGS, NULL},
	 { (char *)"RxObsData_insertObservation", _wrap_RxObsData_insertObservation, METH_VARARGS, NULL},
	 { (char *)"RxObsData_insertEpoch", _wrap_RxObsData_insertEpoch, METH_VARARGS, NULL},
	 { (char *)"RxObsData_firstTime_set", _wrap_RxObsData_firstTime_set, METH_VARARGS, NULL},
	 { (char *)"RxObsData_firstTime_get", _wrap_RxObsData_firstTime_get, METH_VARARGS, NULL},
	 { (char *)"RxObsData_lastTime_set", _wrap_RxObsData_lastTime_set, METH_VARARGS, NULL},
	 { (char *)"RxObsData_lastTime_get", _wrap_RxObsData_lastTime_get, METH_VARARGS, NULL},
	 { (char *)"RxObsData_rxId_set", _wrap_RxObsData_rxId_set, METH_VARARGS, NULL},
	 { (char *)"RxObsData_rxId_get", _wrap_RxObsData_rxId_get, METH_VARARGS, NULL},
	 { (char *)"RxObsData_prnList_set", _wrap_RxObsData_prnList_set, METH_VARARGS, NULL},
	 { (char *)"RxObsData_prnList_get", _wrap_RxObsData_prnList_get, METH_VARARGS, NULL},
	 { (char *)"RxObsData_epochs_set", _wrap_RxObsData_epochs_set, METH_VARARGS, NULL},
	 { (char *)"RxObsData_epochs_get", _wrap_RxObsData_epochs_get, METH_VARARGS, NULL},
	 { (char *)"delete_RxObsData", _wrap_delete_RxObsData, METH_VARARGS, NULL},
	 { (char *)"RxObsData_swigregister", RxObsData_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_WxObservation", _wrap_new_WxObservation, METH_VARARGS, NULL},
	 { (char *)"WxObservation_t_set", _wrap_WxObservation_t_set, METH_VARARGS, NULL},
	 { (char *)"WxObservation_t_get", _wrap_WxObservation_t_get, METH_VARARGS, NULL},
	 { (char *)"WxObservation_temperature_set", _wrap_WxObservation_temperature_set, METH_VARARGS, NULL},
	 { (char *)"WxObservation_temperature_get", _wrap_WxObservation_temperature_get, METH_VARARGS, NULL},
	 { (char *)"WxObservation_pressure_set", _wrap_WxObservation_pressure_set, METH_VARARGS, NULL},
	 { (char *)"WxObservation_pressure_get", _wrap_WxObservation_pressure_get, METH_VARARGS, NULL},
	 { (char *)"WxObservation_humidity_set", _wrap_WxObservation_humidity_set, METH_VARARGS, NULL},
	 { (char *)"WxObservation_humidity_get", _wrap_WxObservation_humidity_get, METH_VARARGS, NULL},
	 { (char *)"WxObservation_temperatureSource_set", _wrap_WxObservation_temperatureSource_set, METH_VARARGS, NULL},
	 { (char *)"WxObservation_temperatureSource_get", _wrap_WxObservation_temperatureSource_get, METH_VARARGS, NULL},
	 { (char *)"WxObservation_pressureSource_set", _wrap_WxObservation_pressureSource_set, METH_VARARGS, NULL},
	 { (char *)"WxObservation_pressureSource_get", _wrap_WxObservation_pressureSource_get, METH_VARARGS, NULL},
	 { (char *)"WxObservation_humiditySource_set", _wrap_WxObservation_humiditySource_set, METH_VARARGS, NULL},
	 { (char *)"WxObservation_humiditySource_get", _wrap_WxObservation_humiditySource_get, METH_VARARGS, NULL},
	 { (char *)"WxObservation_isAllValid", _wrap_WxObservation_isAllValid, METH_VARARGS, NULL},
	 { (char *)"delete_WxObservation", _wrap_delete_WxObservation, METH_VARARGS, NULL},
	 { (char *)"WxObservation_swigregister", WxObservation_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_WxObsData", _wrap_new_WxObsData, METH_VARARGS, NULL},
	 { (char *)"WxObsData_firstTime_set", _wrap_WxObsData_firstTime_set, METH_VARARGS, NULL},
	 { (char *)"WxObsData_firstTime_get", _wrap_WxObsData_firstTime_get, METH_VARARGS, NULL},
	 { (char *)"WxObsData_lastTime_set", _wrap_WxObsData_lastTime_set, METH_VARARGS, NULL},
	 { (char *)"WxObsData_lastTime_get", _wrap_WxObsData_lastTime_get, METH_VARARGS, NULL},
	 { (char *)"WxObsData_rxId_set", _wrap_WxObsData_rxId_set, METH_VARARGS, NULL},
	 { (char *)"WxObsData_rxId_get", _wrap_WxObsData_rxId_get, METH_VARARGS, NULL},
	 { (char *)"WxObsData_obs_set", _wrap_WxObsData_obs_set, METH_VARARGS, NULL},
	 { (char *)"WxObsData_obs_get", _wrap_WxObsData_obs_get, METH_VARARGS, NULL},
	 { (char *)"WxObsData_getMostRecent", _wrap_WxObsData_getMostRecent, METH_VARARGS, NULL},
	 { (char *)"WxObsData_insertObservation", _wrap_WxObsData_insertObservation, METH_VARARGS, NULL},
	 { (char *)"WxObsData_flush", _wrap_WxObsData_flush, METH_VARARGS, NULL},
	 { (char *)"WxObsData_getWxObservation", _wrap_WxObsData_getWxObservation, METH_VARARGS, NULL},
	 { (char *)"delete_WxObsData", _wrap_delete_WxObsData, METH_VARARGS, NULL},
	 { (char *)"WxObsData_swigregister", WxObsData_swigregister, METH_VARARGS, NULL},
	 { (char *)"AlmanacStore_getPrnXvt", _wrap_AlmanacStore_getPrnXvt, METH_VARARGS, NULL},
	 { (char *)"AlmanacStore_getPrnHealth", _wrap_AlmanacStore_getPrnHealth, METH_VARARGS, NULL},
	 { (char *)"AlmanacStore_addAlmanac", _wrap_AlmanacStore_addAlmanac, METH_VARARGS, NULL},
	 { (char *)"AlmanacStore_findAlmanac", _wrap_AlmanacStore_findAlmanac, METH_VARARGS, NULL},
	 { (char *)"AlmanacStore_findAlmanacs", _wrap_AlmanacStore_findAlmanacs, METH_VARARGS, NULL},
	 { (char *)"AlmanacStore_size", _wrap_AlmanacStore_size, METH_VARARGS, NULL},
	 { (char *)"new_AlmanacStore", _wrap_new_AlmanacStore, METH_VARARGS, NULL},
	 { (char *)"delete_AlmanacStore", _wrap_delete_AlmanacStore, METH_VARARGS, NULL},
	 { (char *)"AlmanacStore_swigregister", AlmanacStore_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_AlmOrbit", _wrap_new_AlmOrbit, METH_VARARGS, NULL},
	 { (char *)"AlmOrbit_svXvt", _wrap_AlmOrbit_svXvt, METH_VARARGS, NULL},
	 { (char *)"AlmOrbit_getPRNID", _wrap_AlmOrbit_getPRNID, METH_VARARGS, NULL},
	 { (char *)"AlmOrbit_getFullWeek", _wrap_AlmOrbit_getFullWeek, METH_VARARGS, NULL},
	 { (char *)"AlmOrbit_getTransmitTime", _wrap_AlmOrbit_getTransmitTime, METH_VARARGS, NULL},
	 { (char *)"AlmOrbit_getToaTime", _wrap_AlmOrbit_getToaTime, METH_VARARGS, NULL},
	 { (char *)"AlmOrbit_getTimestamp", _wrap_AlmOrbit_getTimestamp, METH_VARARGS, NULL},
	 { (char *)"AlmOrbit_getSVHealth", _wrap_AlmOrbit_getSVHealth, METH_VARARGS, NULL},
	 { (char *)"delete_AlmOrbit", _wrap_delete_AlmOrbit, METH_VARARGS, NULL},
	 { (char *)"AlmOrbit_swigregister", AlmOrbit_swigregister, METH_VARARGS, NULL},
	 { (char *)"delete_IonoModel", _wrap_delete_IonoModel, METH_VARARGS, NULL},
	 { (char *)"new_IonoModel", _wrap_new_IonoModel, METH_VARARGS, NULL},
	 { (char *)"IonoModel_isValid", _wrap_IonoModel_isValid, METH_VARARGS, NULL},
	 { (char *)"IonoModel_getCorrection", _wrap_IonoModel_getCorrection, METH_VARARGS, NULL},
	 { (char *)"IonoModel___eq__", _wrap_IonoModel___eq__, METH_VARARGS, NULL},
	 { (char *)"IonoModel___ne__", _wrap_IonoModel___ne__, METH_VARARGS, NULL},
	 { (char *)"IonoModel_swigregister", IonoModel_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_IonoModelStore", _wrap_new_IonoModelStore, METH_VARARGS, NULL},
	 { (char *)"delete_IonoModelStore", _wrap_delete_IonoModelStore, METH_VARARGS, NULL},
	 { (char *)"IonoModelStore_getCorrection", _wrap_IonoModelStore_getCorrection, METH_VARARGS, NULL},
	 { (char *)"IonoModelStore_addIonoModel", _wrap_IonoModelStore_addIonoModel, METH_VARARGS, NULL},
	 { (char *)"IonoModelStore_swigregister", IonoModelStore_swigregister, METH_VARARGS, NULL},
	 { (char *)"delete_TropModel", _wrap_delete_TropModel, METH_VARARGS, NULL},
	 { (char *)"TropModel_isValid", _wrap_TropModel_isValid, METH_VARARGS, NULL},
	 { (char *)"TropModel_correction", _wrap_TropModel_correction, METH_VARARGS, NULL},
	 { (char *)"TropModel_dry_zenith_delay", _wrap_TropModel_dry_zenith_delay, METH_VARARGS, NULL},
	 { (char *)"TropModel_wet_zenith_delay", _wrap_TropModel_wet_zenith_delay, METH_VARARGS, NULL},
	 { (char *)"TropModel_dry_mapping_function", _wrap_TropModel_dry_mapping_function, METH_VARARGS, NULL},
	 { (char *)"TropModel_wet_mapping_function", _wrap_TropModel_wet_mapping_function, METH_VARARGS, NULL},
	 { (char *)"TropModel_setWeather", _wrap_TropModel_setWeather, METH_VARARGS, NULL},
	 { (char *)"TropModel_swigregister", TropModel_swigregister, METH_VARARGS, NULL},
	 { (char *)"ZeroTropModel_correction", _wrap_ZeroTropModel_correction, METH_VARARGS, NULL},
	 { (char *)"ZeroTropModel_dry_zenith_delay", _wrap_ZeroTropModel_dry_zenith_delay, METH_VARARGS, NULL},
	 { (char *)"ZeroTropModel_wet_zenith_delay", _wrap_ZeroTropModel_wet_zenith_delay, METH_VARARGS, NULL},
	 { (char *)"ZeroTropModel_dry_mapping_function", _wrap_ZeroTropModel_dry_mapping_function, METH_VARARGS, NULL},
	 { (char *)"ZeroTropModel_wet_mapping_function", _wrap_ZeroTropModel_wet_mapping_function, METH_VARARGS, NULL},
	 { (char *)"new_ZeroTropModel", _wrap_new_ZeroTropModel, METH_VARARGS, NULL},
	 { (char *)"delete_ZeroTropModel", _wrap_delete_ZeroTropModel, METH_VARARGS, NULL},
	 { (char *)"ZeroTropModel_swigregister", ZeroTropModel_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_SimpleTropModel", _wrap_new_SimpleTropModel, METH_VARARGS, NULL},
	 { (char *)"SimpleTropModel_dry_zenith_delay", _wrap_SimpleTropModel_dry_zenith_delay, METH_VARARGS, NULL},
	 { (char *)"SimpleTropModel_wet_zenith_delay", _wrap_SimpleTropModel_wet_zenith_delay, METH_VARARGS, NULL},
	 { (char *)"SimpleTropModel_dry_mapping_function", _wrap_SimpleTropModel_dry_mapping_function, METH_VARARGS, NULL},
	 { (char *)"SimpleTropModel_wet_mapping_function", _wrap_SimpleTropModel_wet_mapping_function, METH_VARARGS, NULL},
	 { (char *)"SimpleTropModel_setWeather", _wrap_SimpleTropModel_setWeather, METH_VARARGS, NULL},
	 { (char *)"delete_SimpleTropModel", _wrap_delete_SimpleTropModel, METH_VARARGS, NULL},
	 { (char *)"SimpleTropModel_swigregister", SimpleTropModel_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_GGTropModel", _wrap_new_GGTropModel, METH_VARARGS, NULL},
	 { (char *)"GGTropModel_dry_zenith_delay", _wrap_GGTropModel_dry_zenith_delay, METH_VARARGS, NULL},
	 { (char *)"GGTropModel_wet_zenith_delay", _wrap_GGTropModel_wet_zenith_delay, METH_VARARGS, NULL},
	 { (char *)"GGTropModel_dry_mapping_function", _wrap_GGTropModel_dry_mapping_function, METH_VARARGS, NULL},
	 { (char *)"GGTropModel_wet_mapping_function", _wrap_GGTropModel_wet_mapping_function, METH_VARARGS, NULL},
	 { (char *)"GGTropModel_setWeather", _wrap_GGTropModel_setWeather, METH_VARARGS, NULL},
	 { (char *)"delete_GGTropModel", _wrap_delete_GGTropModel, METH_VARARGS, NULL},
	 { (char *)"GGTropModel_swigregister", GGTropModel_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_GGHeightTropModel", _wrap_new_GGHeightTropModel, METH_VARARGS, NULL},
	 { (char *)"GGHeightTropModel_correction", _wrap_GGHeightTropModel_correction, METH_VARARGS, NULL},
	 { (char *)"GGHeightTropModel_dry_zenith_delay", _wrap_GGHeightTropModel_dry_zenith_delay, METH_VARARGS, NULL},
	 { (char *)"GGHeightTropModel_wet_zenith_delay", _wrap_GGHeightTropModel_wet_zenith_delay, METH_VARARGS, NULL},
	 { (char *)"GGHeightTropModel_dry_mapping_function", _wrap_GGHeightTropModel_dry_mapping_function, METH_VARARGS, NULL},
	 { (char *)"GGHeightTropModel_wet_mapping_function", _wrap_GGHeightTropModel_wet_mapping_function, METH_VARARGS, NULL},
	 { (char *)"GGHeightTropModel_setWeather", _wrap_GGHeightTropModel_setWeather, METH_VARARGS, NULL},
	 { (char *)"GGHeightTropModel_setHeights", _wrap_GGHeightTropModel_setHeights, METH_VARARGS, NULL},
	 { (char *)"GGHeightTropModel_setReceiverHeight", _wrap_GGHeightTropModel_setReceiverHeight, METH_VARARGS, NULL},
	 { (char *)"delete_GGHeightTropModel", _wrap_delete_GGHeightTropModel, METH_VARARGS, NULL},
	 { (char *)"GGHeightTropModel_swigregister", GGHeightTropModel_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_NBTropModel", _wrap_new_NBTropModel, METH_VARARGS, NULL},
	 { (char *)"NBTropModel_correction", _wrap_NBTropModel_correction, METH_VARARGS, NULL},
	 { (char *)"NBTropModel_dry_zenith_delay", _wrap_NBTropModel_dry_zenith_delay, METH_VARARGS, NULL},
	 { (char *)"NBTropModel_wet_zenith_delay", _wrap_NBTropModel_wet_zenith_delay, METH_VARARGS, NULL},
	 { (char *)"NBTropModel_dry_mapping_function", _wrap_NBTropModel_dry_mapping_function, METH_VARARGS, NULL},
	 { (char *)"NBTropModel_wet_mapping_function", _wrap_NBTropModel_wet_mapping_function, METH_VARARGS, NULL},
	 { (char *)"NBTropModel_setWeather", _wrap_NBTropModel_setWeather, METH_VARARGS, NULL},
	 { (char *)"NBTropModel_setReceiverHeight", _wrap_NBTropModel_setReceiverHeight, METH_VARARGS, NULL},
	 { (char *)"NBTropModel_setReceiverLatitude", _wrap_NBTropModel_setReceiverLatitude, METH_VARARGS, NULL},
	 { (char *)"NBTropModel_setDayOfYear", _wrap_NBTropModel_setDayOfYear, METH_VARARGS, NULL},
	 { (char *)"delete_NBTropModel", _wrap_delete_NBTropModel, METH_VARARGS, NULL},
	 { (char *)"NBTropModel_swigregister", NBTropModel_swigregister, METH_VARARGS, NULL},
	 { (char *)"ClockModel_getOffset", _wrap_ClockModel_getOffset, METH_VARARGS, NULL},
	 { (char *)"ClockModel_isOffsetValid", _wrap_ClockModel_isOffsetValid, METH_VARARGS, NULL},
	 { (char *)"delete_ClockModel", _wrap_delete_ClockModel, METH_VARARGS, NULL},
	 { (char *)"ClockModel_swigregister", ClockModel_swigregister, METH_VARARGS, NULL},
	 { (char *)"ObsClockModel_addEpoch", _wrap_ObsClockModel_addEpoch, METH_VARARGS, NULL},
	 { (char *)"ObsClockModel_setPRNModeMap", _wrap_ObsClockModel_setPRNModeMap, METH_VARARGS, NULL},
	 { (char *)"ObsClockModel_setPRNMode", _wrap_ObsClockModel_setPRNMode, METH_VARARGS, NULL},
	 { (char *)"ObsClockModel_setSigmaMultiplier", _wrap_ObsClockModel_setSigmaMultiplier, METH_VARARGS, NULL},
	 { (char *)"ObsClockModel_setElevationMask", _wrap_ObsClockModel_setElevationMask, METH_VARARGS, NULL},
	 { (char *)"ObsClockModel_getPRNStatusMap", _wrap_ObsClockModel_getPRNStatusMap, METH_VARARGS, NULL},
	 { (char *)"ObsClockModel_getPRNStatus", _wrap_ObsClockModel_getPRNStatus, METH_VARARGS, NULL},
	 { (char *)"ObsClockModel_getPRNModeMap", _wrap_ObsClockModel_getPRNModeMap, METH_VARARGS, NULL},
	 { (char *)"ObsClockModel_getPRNMode", _wrap_ObsClockModel_getPRNMode, METH_VARARGS, NULL},
	 { (char *)"ObsClockModel_getSigmaMultiplier", _wrap_ObsClockModel_getSigmaMultiplier, METH_VARARGS, NULL},
	 { (char *)"ObsClockModel_getElevationMask", _wrap_ObsClockModel_getElevationMask, METH_VARARGS, NULL},
	 { (char *)"ObsClockModel_simpleOrdClock", _wrap_ObsClockModel_simpleOrdClock, METH_VARARGS, NULL},
	 { (char *)"ObsClockModel_dump", _wrap_ObsClockModel_dump, METH_VARARGS, NULL},
	 { (char *)"delete_ObsClockModel", _wrap_delete_ObsClockModel, METH_VARARGS, NULL},
	 { (char *)"ObsClockModel_swigregister", ObsClockModel_swigregister, METH_VARARGS, NULL},
	 { (char *)"EpochClockModel_isOffsetValid", _wrap_EpochClockModel_isOffsetValid, METH_VARARGS, NULL},
	 { (char *)"EpochClockModel_addEpoch", _wrap_EpochClockModel_addEpoch, METH_VARARGS, NULL},
	 { (char *)"delete_EpochClockModel", _wrap_delete_EpochClockModel, METH_VARARGS, NULL},
	 { (char *)"EpochClockModel_swigregister", EpochClockModel_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_LinearClockModel", _wrap_new_LinearClockModel, METH_VARARGS, NULL},
	 { (char *)"LinearClockModel_getOffset", _wrap_LinearClockModel_getOffset, METH_VARARGS, NULL},
	 { (char *)"LinearClockModel_isOffsetValid", _wrap_LinearClockModel_isOffsetValid, METH_VARARGS, NULL},
	 { (char *)"LinearClockModel_addEpoch", _wrap_LinearClockModel_addEpoch, METH_VARARGS, NULL},
	 { (char *)"LinearClockModel_reset", _wrap_LinearClockModel_reset, METH_VARARGS, NULL},
	 { (char *)"LinearClockModel_dump", _wrap_LinearClockModel_dump, METH_VARARGS, NULL},
	 { (char *)"delete_LinearClockModel", _wrap_delete_LinearClockModel, METH_VARARGS, NULL},
	 { (char *)"LinearClockModel_swigregister", LinearClockModel_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_BCEphemerisStore", _wrap_new_BCEphemerisStore, METH_VARARGS, NULL},
	 { (char *)"delete_BCEphemerisStore", _wrap_delete_BCEphemerisStore, METH_VARARGS, NULL},
	 { (char *)"BCEphemerisStore_getPrnHealth", _wrap_BCEphemerisStore_getPrnHealth, METH_VARARGS, NULL},
	 { (char *)"BCEphemerisStore_dump", _wrap_BCEphemerisStore_dump, METH_VARARGS, NULL},
	 { (char *)"BCEphemerisStore_getInitialTime", _wrap_BCEphemerisStore_getInitialTime, METH_VARARGS, NULL},
	 { (char *)"BCEphemerisStore_getFinalTime", _wrap_BCEphemerisStore_getFinalTime, METH_VARARGS, NULL},
	 { (char *)"BCEphemerisStore_addEphemeris", _wrap_BCEphemerisStore_addEphemeris, METH_VARARGS, NULL},
	 { (char *)"BCEphemerisStore_wiper", _wrap_BCEphemerisStore_wiper, METH_VARARGS, NULL},
	 { (char *)"BCEphemerisStore_edit", _wrap_BCEphemerisStore_edit, METH_VARARGS, NULL},
	 { (char *)"BCEphemerisStore_clear", _wrap_BCEphemerisStore_clear, METH_VARARGS, NULL},
	 { (char *)"BCEphemerisStore_getPrnXvt", _wrap_BCEphemerisStore_getPrnXvt, METH_VARARGS, NULL},
	 { (char *)"BCEphemerisStore_ubeSize", _wrap_BCEphemerisStore_ubeSize, METH_VARARGS, NULL},
	 { (char *)"BCEphemerisStore_size", _wrap_BCEphemerisStore_size, METH_VARARGS, NULL},
	 { (char *)"BCEphemerisStore_findEphemeris", _wrap_BCEphemerisStore_findEphemeris, METH_VARARGS, NULL},
	 { (char *)"BCEphemerisStore_findUserEphemeris", _wrap_BCEphemerisStore_findUserEphemeris, METH_VARARGS, NULL},
	 { (char *)"BCEphemerisStore_findNearEphemeris", _wrap_BCEphemerisStore_findNearEphemeris, METH_VARARGS, NULL},
	 { (char *)"BCEphemerisStore_addToList", _wrap_BCEphemerisStore_addToList, METH_VARARGS, NULL},
	 { (char *)"BCEphemerisStore_SearchNear", _wrap_BCEphemerisStore_SearchNear, METH_VARARGS, NULL},
	 { (char *)"BCEphemerisStore_SearchPast", _wrap_BCEphemerisStore_SearchPast, METH_VARARGS, NULL},
	 { (char *)"BCEphemerisStore_swigregister", BCEphemerisStore_swigregister, METH_VARARGS, NULL},
	 { (char *)"delete_FileStore_RinexNavHeader", _wrap_delete_FileStore_RinexNavHeader, METH_VARARGS, NULL},
	 { (char *)"FileStore_RinexNavHeader_getFileNames", _wrap_FileStore_RinexNavHeader_getFileNames, METH_VARARGS, NULL},
	 { (char *)"FileStore_RinexNavHeader_addFile", _wrap_FileStore_RinexNavHeader_addFile, METH_VARARGS, NULL},
	 { (char *)"FileStore_RinexNavHeader_getHeader", _wrap_FileStore_RinexNavHeader_getHeader, METH_VARARGS, NULL},
	 { (char *)"FileStore_RinexNavHeader_loadFile", _wrap_FileStore_RinexNavHeader_loadFile, METH_VARARGS, NULL},
	 { (char *)"FileStore_RinexNavHeader_loadFiles", _wrap_FileStore_RinexNavHeader_loadFiles, METH_VARARGS, NULL},
	 { (char *)"FileStore_RinexNavHeader_size", _wrap_FileStore_RinexNavHeader_size, METH_VARARGS, NULL},
	 { (char *)"FileStore_RinexNavHeader_swigregister", FileStore_RinexNavHeader_swigregister, METH_VARARGS, NULL},
	 { (char *)"delete_FileStore_SP3Header", _wrap_delete_FileStore_SP3Header, METH_VARARGS, NULL},
	 { (char *)"FileStore_SP3Header_getFileNames", _wrap_FileStore_SP3Header_getFileNames, METH_VARARGS, NULL},
	 { (char *)"FileStore_SP3Header_addFile", _wrap_FileStore_SP3Header_addFile, METH_VARARGS, NULL},
	 { (char *)"FileStore_SP3Header_getHeader", _wrap_FileStore_SP3Header_getHeader, METH_VARARGS, NULL},
	 { (char *)"FileStore_SP3Header_loadFile", _wrap_FileStore_SP3Header_loadFile, METH_VARARGS, NULL},
	 { (char *)"FileStore_SP3Header_loadFiles", _wrap_FileStore_SP3Header_loadFiles, METH_VARARGS, NULL},
	 { (char *)"FileStore_SP3Header_size", _wrap_FileStore_SP3Header_size, METH_VARARGS, NULL},
	 { (char *)"FileStore_SP3Header_swigregister", FileStore_SP3Header_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_RinexEphemerisStore", _wrap_new_RinexEphemerisStore, METH_VARARGS, NULL},
	 { (char *)"delete_RinexEphemerisStore", _wrap_delete_RinexEphemerisStore, METH_VARARGS, NULL},
	 { (char *)"RinexEphemerisStore_dump", _wrap_RinexEphemerisStore_dump, METH_VARARGS, NULL},
	 { (char *)"RinexEphemerisStore_loadFile", _wrap_RinexEphemerisStore_loadFile, METH_VARARGS, NULL},
	 { (char *)"RinexEphemerisStore_swigregister", RinexEphemerisStore_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_SP3EphemerisStore", _wrap_new_SP3EphemerisStore, METH_VARARGS, NULL},
	 { (char *)"delete_SP3EphemerisStore", _wrap_delete_SP3EphemerisStore, METH_VARARGS, NULL},
	 { (char *)"SP3EphemerisStore_dump", _wrap_SP3EphemerisStore_dump, METH_VARARGS, NULL},
	 { (char *)"SP3EphemerisStore_loadFile", _wrap_SP3EphemerisStore_loadFile, METH_VARARGS, NULL},
	 { (char *)"SP3EphemerisStore_swigregister", SP3EphemerisStore_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_FileHunterException", _wrap_new_FileHunterException, METH_VARARGS, NULL},
	 { (char *)"delete_FileHunterException", _wrap_delete_FileHunterException, METH_VARARGS, NULL},
	 { (char *)"FileHunterException_getName", _wrap_FileHunterException_getName, METH_VARARGS, NULL},
	 { (char *)"FileHunterException_class_operator_assignment", _wrap_FileHunterException_class_operator_assignment, METH_VARARGS, NULL},
	 { (char *)"FileHunterException_swigregister", FileHunterException_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_FileHunter", _wrap_new_FileHunter, METH_VARARGS, NULL},
	 { (char *)"FileHunter_newHunt", _wrap_FileHunter_newHunt, METH_VARARGS, NULL},
	 { (char *)"FileHunter_setFilter", _wrap_FileHunter_setFilter, METH_VARARGS, NULL},
	 { (char *)"FileHunter_find", _wrap_FileHunter_find, METH_VARARGS, NULL},
	 { (char *)"FileHunter_dump", _wrap_FileHunter_dump, METH_VARARGS, NULL},
	 { (char *)"delete_FileHunter", _wrap_delete_FileHunter, METH_VARARGS, NULL},
	 { (char *)"FileHunter_swigregister", FileHunter_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_FICStream", _wrap_new_FICStream, METH_VARARGS, NULL},
	 { (char *)"delete_FICStream", _wrap_delete_FICStream, METH_VARARGS, NULL},
	 { (char *)"FICStream_open", _wrap_FICStream_open, METH_VARARGS, NULL},
	 { (char *)"FICStream_swigregister", FICStream_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_FICAStream", _wrap_new_FICAStream, METH_VARARGS, NULL},
	 { (char *)"delete_FICAStream", _wrap_delete_FICAStream, METH_VARARGS, NULL},
	 { (char *)"FICAStream_open", _wrap_FICAStream_open, METH_VARARGS, NULL},
	 { (char *)"FICAStream_swigregister", FICAStream_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_MSCStream", _wrap_new_MSCStream, METH_VARARGS, NULL},
	 { (char *)"delete_MSCStream", _wrap_delete_MSCStream, METH_VARARGS, NULL},
	 { (char *)"MSCStream_swigregister", MSCStream_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_RinexMetStream", _wrap_new_RinexMetStream, METH_VARARGS, NULL},
	 { (char *)"delete_RinexMetStream", _wrap_delete_RinexMetStream, METH_VARARGS, NULL},
	 { (char *)"RinexMetStream_open", _wrap_RinexMetStream_open, METH_VARARGS, NULL},
	 { (char *)"RinexMetStream_header_set", _wrap_RinexMetStream_header_set, METH_VARARGS, NULL},
	 { (char *)"RinexMetStream_header_get", _wrap_RinexMetStream_header_get, METH_VARARGS, NULL},
	 { (char *)"RinexMetStream_headerRead_set", _wrap_RinexMetStream_headerRead_set, METH_VARARGS, NULL},
	 { (char *)"RinexMetStream_headerRead_get", _wrap_RinexMetStream_headerRead_get, METH_VARARGS, NULL},
	 { (char *)"RinexMetStream_swigregister", RinexMetStream_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_RinexNavStream", _wrap_new_RinexNavStream, METH_VARARGS, NULL},
	 { (char *)"delete_RinexNavStream", _wrap_delete_RinexNavStream, METH_VARARGS, NULL},
	 { (char *)"RinexNavStream_open", _wrap_RinexNavStream_open, METH_VARARGS, NULL},
	 { (char *)"RinexNavStream_header_set", _wrap_RinexNavStream_header_set, METH_VARARGS, NULL},
	 { (char *)"RinexNavStream_header_get", _wrap_RinexNavStream_header_get, METH_VARARGS, NULL},
	 { (char *)"RinexNavStream_headerRead_set", _wrap_RinexNavStream_headerRead_set, METH_VARARGS, NULL},
	 { (char *)"RinexNavStream_headerRead_get", _wrap_RinexNavStream_headerRead_get, METH_VARARGS, NULL},
	 { (char *)"RinexNavStream_swigregister", RinexNavStream_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_SMODFStream", _wrap_new_SMODFStream, METH_VARARGS, NULL},
	 { (char *)"delete_SMODFStream", _wrap_delete_SMODFStream, METH_VARARGS, NULL},
	 { (char *)"SMODFStream_open", _wrap_SMODFStream_open, METH_VARARGS, NULL},
	 { (char *)"SMODFStream_format_set", _wrap_SMODFStream_format_set, METH_VARARGS, NULL},
	 { (char *)"SMODFStream_format_get", _wrap_SMODFStream_format_get, METH_VARARGS, NULL},
	 { (char *)"SMODFStream_swigregister", SMODFStream_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_SP3Stream", _wrap_new_SP3Stream, METH_VARARGS, NULL},
	 { (char *)"delete_SP3Stream", _wrap_delete_SP3Stream, METH_VARARGS, NULL},
	 { (char *)"SP3Stream_currentEpoch_set", _wrap_SP3Stream_currentEpoch_set, METH_VARARGS, NULL},
	 { (char *)"SP3Stream_currentEpoch_get", _wrap_SP3Stream_currentEpoch_get, METH_VARARGS, NULL},
	 { (char *)"SP3Stream_swigregister", SP3Stream_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_RinexObsStream", _wrap_new_RinexObsStream, METH_VARARGS, NULL},
	 { (char *)"delete_RinexObsStream", _wrap_delete_RinexObsStream, METH_VARARGS, NULL},
	 { (char *)"RinexObsStream_open", _wrap_RinexObsStream_open, METH_VARARGS, NULL},
	 { (char *)"RinexObsStream_headerRead_set", _wrap_RinexObsStream_headerRead_set, METH_VARARGS, NULL},
	 { (char *)"RinexObsStream_headerRead_get", _wrap_RinexObsStream_headerRead_get, METH_VARARGS, NULL},
	 { (char *)"RinexObsStream_header_set", _wrap_RinexObsStream_header_set, METH_VARARGS, NULL},
	 { (char *)"RinexObsStream_header_get", _wrap_RinexObsStream_header_get, METH_VARARGS, NULL},
	 { (char *)"RinexObsStream_swigregister", RinexObsStream_swigregister, METH_VARARGS, NULL},
	 { (char *)"delete_RinexObsBase", _wrap_delete_RinexObsBase, METH_VARARGS, NULL},
	 { (char *)"RinexObsBase_swigregister", RinexObsBase_swigregister, METH_VARARGS, NULL},
	 { (char *)"RinexObsType_type_set", _wrap_RinexObsType_type_set, METH_VARARGS, NULL},
	 { (char *)"RinexObsType_type_get", _wrap_RinexObsType_type_get, METH_VARARGS, NULL},
	 { (char *)"RinexObsType_description_set", _wrap_RinexObsType_description_set, METH_VARARGS, NULL},
	 { (char *)"RinexObsType_description_get", _wrap_RinexObsType_description_get, METH_VARARGS, NULL},
	 { (char *)"RinexObsType_units_set", _wrap_RinexObsType_units_set, METH_VARARGS, NULL},
	 { (char *)"RinexObsType_units_get", _wrap_RinexObsType_units_get, METH_VARARGS, NULL},
	 { (char *)"RinexObsType_depend_set", _wrap_RinexObsType_depend_set, METH_VARARGS, NULL},
	 { (char *)"RinexObsType_depend_get", _wrap_RinexObsType_depend_get, METH_VARARGS, NULL},
	 { (char *)"new_RinexObsType", _wrap_new_RinexObsType, METH_VARARGS, NULL},
	 { (char *)"delete_RinexObsType", _wrap_delete_RinexObsType, METH_VARARGS, NULL},
	 { (char *)"RinexObsType_swigregister", RinexObsType_swigregister, METH_VARARGS, NULL},
	 { (char *)"ExtraWaveFact_prnList_set", _wrap_ExtraWaveFact_prnList_set, METH_VARARGS, NULL},
	 { (char *)"ExtraWaveFact_prnList_get", _wrap_ExtraWaveFact_prnList_get, METH_VARARGS, NULL},
	 { (char *)"ExtraWaveFact_wavelengthFactor_set", _wrap_ExtraWaveFact_wavelengthFactor_set, METH_VARARGS, NULL},
	 { (char *)"ExtraWaveFact_wavelengthFactor_get", _wrap_ExtraWaveFact_wavelengthFactor_get, METH_VARARGS, NULL},
	 { (char *)"new_ExtraWaveFact", _wrap_new_ExtraWaveFact, METH_VARARGS, NULL},
	 { (char *)"delete_ExtraWaveFact", _wrap_delete_ExtraWaveFact, METH_VARARGS, NULL},
	 { (char *)"ExtraWaveFact_swigregister", ExtraWaveFact_swigregister, METH_VARARGS, NULL},
	 { (char *)"RinexPrn_prn_set", _wrap_RinexPrn_prn_set, METH_VARARGS, NULL},
	 { (char *)"RinexPrn_prn_get", _wrap_RinexPrn_prn_get, METH_VARARGS, NULL},
	 { (char *)"RinexPrn_system_set", _wrap_RinexPrn_system_set, METH_VARARGS, NULL},
	 { (char *)"RinexPrn_system_get", _wrap_RinexPrn_system_get, METH_VARARGS, NULL},
	 { (char *)"new_RinexPrn", _wrap_new_RinexPrn, METH_VARARGS, NULL},
	 { (char *)"RinexPrn_setfill", _wrap_RinexPrn_setfill, METH_VARARGS, NULL},
	 { (char *)"RinexPrn_getfill", _wrap_RinexPrn_getfill, METH_VARARGS, NULL},
	 { (char *)"RinexPrn_System", _wrap_RinexPrn_System, METH_VARARGS, NULL},
	 { (char *)"delete_RinexPrn", _wrap_delete_RinexPrn, METH_VARARGS, NULL},
	 { (char *)"RinexPrn_swigregister", RinexPrn_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_RinexObsHeader", _wrap_new_RinexObsHeader, METH_VARARGS, NULL},
	 { (char *)"RinexObsHeader_clear", _wrap_RinexObsHeader_clear, METH_VARARGS, NULL},
	 { (char *)"RinexObsHeader_version_set", _wrap_RinexObsHeader_version_set, METH_VARARGS, NULL},
	 { (char *)"RinexObsHeader_version_get", _wrap_RinexObsHeader_version_get, METH_VARARGS, NULL},
	 { (char *)"RinexObsHeader_fileType_set", _wrap_RinexObsHeader_fileType_set, METH_VARARGS, NULL},
	 { (char *)"RinexObsHeader_fileType_get", _wrap_RinexObsHeader_fileType_get, METH_VARARGS, NULL},
	 { (char *)"RinexObsHeader_system_set", _wrap_RinexObsHeader_system_set, METH_VARARGS, NULL},
	 { (char *)"RinexObsHeader_system_get", _wrap_RinexObsHeader_system_get, METH_VARARGS, NULL},
	 { (char *)"RinexObsHeader_fileProgram_set", _wrap_RinexObsHeader_fileProgram_set, METH_VARARGS, NULL},
	 { (char *)"RinexObsHeader_fileProgram_get", _wrap_RinexObsHeader_fileProgram_get, METH_VARARGS, NULL},
	 { (char *)"RinexObsHeader_fileAgency_set", _wrap_RinexObsHeader_fileAgency_set, METH_VARARGS, NULL},
	 { (char *)"RinexObsHeader_fileAgency_get", _wrap_RinexObsHeader_fileAgency_get, METH_VARARGS, NULL},
	 { (char *)"RinexObsHeader_date_set", _wrap_RinexObsHeader_date_set, METH_VARARGS, NULL},
	 { (char *)"RinexObsHeader_date_get", _wrap_RinexObsHeader_date_get, METH_VARARGS, NULL},
	 { (char *)"RinexObsHeader_commentList_set", _wrap_RinexObsHeader_commentList_set, METH_VARARGS, NULL},
	 { (char *)"RinexObsHeader_commentList_get", _wrap_RinexObsHeader_commentList_get, METH_VARARGS, NULL},
	 { (char *)"RinexObsHeader_markerName_set", _wrap_RinexObsHeader_markerName_set, METH_VARARGS, NULL},
	 { (char *)"RinexObsHeader_markerName_get", _wrap_RinexObsHeader_markerName_get, METH_VARARGS, NULL},
	 { (char *)"RinexObsHeader_markerNumber_set", _wrap_RinexObsHeader_markerNumber_set, METH_VARARGS, NULL},
	 { (char *)"RinexObsHeader_markerNumber_get", _wrap_RinexObsHeader_markerNumber_get, METH_VARARGS, NULL},
	 { (char *)"RinexObsHeader_observer_set", _wrap_RinexObsHeader_observer_set, METH_VARARGS, NULL},
	 { (char *)"RinexObsHeader_observer_get", _wrap_RinexObsHeader_observer_get, METH_VARARGS, NULL},
	 { (char *)"RinexObsHeader_agency_set", _wrap_RinexObsHeader_agency_set, METH_VARARGS, NULL},
	 { (char *)"RinexObsHeader_agency_get", _wrap_RinexObsHeader_agency_get, METH_VARARGS, NULL},
	 { (char *)"RinexObsHeader_recNo_set", _wrap_RinexObsHeader_recNo_set, METH_VARARGS, NULL},
	 { (char *)"RinexObsHeader_recNo_get", _wrap_RinexObsHeader_recNo_get, METH_VARARGS, NULL},
	 { (char *)"RinexObsHeader_recType_set", _wrap_RinexObsHeader_recType_set, METH_VARARGS, NULL},
	 { (char *)"RinexObsHeader_recType_get", _wrap_RinexObsHeader_recType_get, METH_VARARGS, NULL},
	 { (char *)"RinexObsHeader_recVers_set", _wrap_RinexObsHeader_recVers_set, METH_VARARGS, NULL},
	 { (char *)"RinexObsHeader_recVers_get", _wrap_RinexObsHeader_recVers_get, METH_VARARGS, NULL},
	 { (char *)"RinexObsHeader_antNo_set", _wrap_RinexObsHeader_antNo_set, METH_VARARGS, NULL},
	 { (char *)"RinexObsHeader_antNo_get", _wrap_RinexObsHeader_antNo_get, METH_VARARGS, NULL},
	 { (char *)"RinexObsHeader_antType_set", _wrap_RinexObsHeader_antType_set, METH_VARARGS, NULL},
	 { (char *)"RinexObsHeader_antType_get", _wrap_RinexObsHeader_antType_get, METH_VARARGS, NULL},
	 { (char *)"RinexObsHeader_antennaPosition_set", _wrap_RinexObsHeader_antennaPosition_set, METH_VARARGS, NULL},
	 { (char *)"RinexObsHeader_antennaPosition_get", _wrap_RinexObsHeader_antennaPosition_get, METH_VARARGS, NULL},
	 { (char *)"RinexObsHeader_antennaOffset_set", _wrap_RinexObsHeader_antennaOffset_set, METH_VARARGS, NULL},
	 { (char *)"RinexObsHeader_antennaOffset_get", _wrap_RinexObsHeader_antennaOffset_get, METH_VARARGS, NULL},
	 { (char *)"RinexObsHeader_wavelengthFactor_set", _wrap_RinexObsHeader_wavelengthFactor_set, METH_VARARGS, NULL},
	 { (char *)"RinexObsHeader_wavelengthFactor_get", _wrap_RinexObsHeader_wavelengthFactor_get, METH_VARARGS, NULL},
	 { (char *)"RinexObsHeader_extraWaveFactList_set", _wrap_RinexObsHeader_extraWaveFactList_set, METH_VARARGS, NULL},
	 { (char *)"RinexObsHeader_extraWaveFactList_get", _wrap_RinexObsHeader_extraWaveFactList_get, METH_VARARGS, NULL},
	 { (char *)"RinexObsHeader_obsTypeList_set", _wrap_RinexObsHeader_obsTypeList_set, METH_VARARGS, NULL},
	 { (char *)"RinexObsHeader_obsTypeList_get", _wrap_RinexObsHeader_obsTypeList_get, METH_VARARGS, NULL},
	 { (char *)"RinexObsHeader_interval_set", _wrap_RinexObsHeader_interval_set, METH_VARARGS, NULL},
	 { (char *)"RinexObsHeader_interval_get", _wrap_RinexObsHeader_interval_get, METH_VARARGS, NULL},
	 { (char *)"RinexObsHeader_firstObs_set", _wrap_RinexObsHeader_firstObs_set, METH_VARARGS, NULL},
	 { (char *)"RinexObsHeader_firstObs_get", _wrap_RinexObsHeader_firstObs_get, METH_VARARGS, NULL},
	 { (char *)"RinexObsHeader_firstSystem_set", _wrap_RinexObsHeader_firstSystem_set, METH_VARARGS, NULL},
	 { (char *)"RinexObsHeader_firstSystem_get", _wrap_RinexObsHeader_firstSystem_get, METH_VARARGS, NULL},
	 { (char *)"RinexObsHeader_lastObs_set", _wrap_RinexObsHeader_lastObs_set, METH_VARARGS, NULL},
	 { (char *)"RinexObsHeader_lastObs_get", _wrap_RinexObsHeader_lastObs_get, METH_VARARGS, NULL},
	 { (char *)"RinexObsHeader_lastSystem_set", _wrap_RinexObsHeader_lastSystem_set, METH_VARARGS, NULL},
	 { (char *)"RinexObsHeader_lastSystem_get", _wrap_RinexObsHeader_lastSystem_get, METH_VARARGS, NULL},
	 { (char *)"RinexObsHeader_receiverOffset_set", _wrap_RinexObsHeader_receiverOffset_set, METH_VARARGS, NULL},
	 { (char *)"RinexObsHeader_receiverOffset_get", _wrap_RinexObsHeader_receiverOffset_get, METH_VARARGS, NULL},
	 { (char *)"RinexObsHeader_leapSeconds_set", _wrap_RinexObsHeader_leapSeconds_set, METH_VARARGS, NULL},
	 { (char *)"RinexObsHeader_leapSeconds_get", _wrap_RinexObsHeader_leapSeconds_get, METH_VARARGS, NULL},
	 { (char *)"RinexObsHeader_numSVs_set", _wrap_RinexObsHeader_numSVs_set, METH_VARARGS, NULL},
	 { (char *)"RinexObsHeader_numSVs_get", _wrap_RinexObsHeader_numSVs_get, METH_VARARGS, NULL},
	 { (char *)"RinexObsHeader_numObsForPrn_set", _wrap_RinexObsHeader_numObsForPrn_set, METH_VARARGS, NULL},
	 { (char *)"RinexObsHeader_numObsForPrn_get", _wrap_RinexObsHeader_numObsForPrn_get, METH_VARARGS, NULL},
	 { (char *)"RinexObsHeader_valid_set", _wrap_RinexObsHeader_valid_set, METH_VARARGS, NULL},
	 { (char *)"RinexObsHeader_valid_get", _wrap_RinexObsHeader_valid_get, METH_VARARGS, NULL},
	 { (char *)"RinexObsHeader_numObs_set", _wrap_RinexObsHeader_numObs_set, METH_VARARGS, NULL},
	 { (char *)"RinexObsHeader_numObs_get", _wrap_RinexObsHeader_numObs_get, METH_VARARGS, NULL},
	 { (char *)"RinexObsHeader_lastPRN_set", _wrap_RinexObsHeader_lastPRN_set, METH_VARARGS, NULL},
	 { (char *)"RinexObsHeader_lastPRN_get", _wrap_RinexObsHeader_lastPRN_get, METH_VARARGS, NULL},
	 { (char *)"delete_RinexObsHeader", _wrap_delete_RinexObsHeader, METH_VARARGS, NULL},
	 { (char *)"RinexObsHeader_isHeader", _wrap_RinexObsHeader_isHeader, METH_VARARGS, NULL},
	 { (char *)"RinexObsHeader_dump", _wrap_RinexObsHeader_dump, METH_VARARGS, NULL},
	 { (char *)"RinexObsHeader_convertObsType", _wrap_RinexObsHeader_convertObsType, METH_VARARGS, NULL},
	 { (char *)"RinexObsHeader_ParseHeaderRecord", _wrap_RinexObsHeader_ParseHeaderRecord, METH_VARARGS, NULL},
	 { (char *)"RinexObsHeader_NumberHeaderRecordsToBeWritten", _wrap_RinexObsHeader_NumberHeaderRecordsToBeWritten, METH_VARARGS, NULL},
	 { (char *)"RinexObsHeader_WriteHeaderRecords", _wrap_RinexObsHeader_WriteHeaderRecords, METH_VARARGS, NULL},
	 { (char *)"RinexObsHeader_isValid", _wrap_RinexObsHeader_isValid, METH_VARARGS, NULL},
	 { (char *)"RinexObsHeader_swigregister", RinexObsHeader_swigregister, METH_VARARGS, NULL},
	 { (char *)"RegisterExtendedRinexObsType", _wrap_RegisterExtendedRinexObsType, METH_VARARGS, NULL},
	 { (char *)"__eq__", _wrap___eq__, METH_VARARGS, NULL},
	 { (char *)"__ne__", _wrap___ne__, METH_VARARGS, NULL},
	 { (char *)"__lt__", _wrap___lt__, METH_VARARGS, NULL},
	 { (char *)"__rshift__", _wrap___rshift__, METH_VARARGS, NULL},
	 { (char *)"DisplayExtendedRinexObsTypes", _wrap_DisplayExtendedRinexObsTypes, METH_VARARGS, NULL},
	 { (char *)"new_RinexDatum", _wrap_new_RinexDatum, METH_VARARGS, NULL},
	 { (char *)"RinexDatum_data_set", _wrap_RinexDatum_data_set, METH_VARARGS, NULL},
	 { (char *)"RinexDatum_data_get", _wrap_RinexDatum_data_get, METH_VARARGS, NULL},
	 { (char *)"RinexDatum_lli_set", _wrap_RinexDatum_lli_set, METH_VARARGS, NULL},
	 { (char *)"RinexDatum_lli_get", _wrap_RinexDatum_lli_get, METH_VARARGS, NULL},
	 { (char *)"RinexDatum_ssi_set", _wrap_RinexDatum_ssi_set, METH_VARARGS, NULL},
	 { (char *)"RinexDatum_ssi_get", _wrap_RinexDatum_ssi_get, METH_VARARGS, NULL},
	 { (char *)"delete_RinexDatum", _wrap_delete_RinexDatum, METH_VARARGS, NULL},
	 { (char *)"RinexDatum_swigregister", RinexDatum_swigregister, METH_VARARGS, NULL},
	 { (char *)"RinexObsData_time_set", _wrap_RinexObsData_time_set, METH_VARARGS, NULL},
	 { (char *)"RinexObsData_time_get", _wrap_RinexObsData_time_get, METH_VARARGS, NULL},
	 { (char *)"RinexObsData_epochFlag_set", _wrap_RinexObsData_epochFlag_set, METH_VARARGS, NULL},
	 { (char *)"RinexObsData_epochFlag_get", _wrap_RinexObsData_epochFlag_get, METH_VARARGS, NULL},
	 { (char *)"RinexObsData_numSvs_set", _wrap_RinexObsData_numSvs_set, METH_VARARGS, NULL},
	 { (char *)"RinexObsData_numSvs_get", _wrap_RinexObsData_numSvs_get, METH_VARARGS, NULL},
	 { (char *)"RinexObsData_clockOffset_set", _wrap_RinexObsData_clockOffset_set, METH_VARARGS, NULL},
	 { (char *)"RinexObsData_clockOffset_get", _wrap_RinexObsData_clockOffset_get, METH_VARARGS, NULL},
	 { (char *)"RinexObsData_obs_set", _wrap_RinexObsData_obs_set, METH_VARARGS, NULL},
	 { (char *)"RinexObsData_obs_get", _wrap_RinexObsData_obs_get, METH_VARARGS, NULL},
	 { (char *)"RinexObsData_auxHeader_set", _wrap_RinexObsData_auxHeader_set, METH_VARARGS, NULL},
	 { (char *)"RinexObsData_auxHeader_get", _wrap_RinexObsData_auxHeader_get, METH_VARARGS, NULL},
	 { (char *)"new_RinexObsData", _wrap_new_RinexObsData, METH_VARARGS, NULL},
	 { (char *)"delete_RinexObsData", _wrap_delete_RinexObsData, METH_VARARGS, NULL},
	 { (char *)"RinexObsData_isData", _wrap_RinexObsData_isData, METH_VARARGS, NULL},
	 { (char *)"RinexObsData_dump", _wrap_RinexObsData_dump, METH_VARARGS, NULL},
	 { (char *)"RinexObsData_swigregister", RinexObsData_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_RinexObsTypeMap", _wrap_new_RinexObsTypeMap, METH_VARARGS, NULL},
	 { (char *)"RinexObsTypeMap_empty", _wrap_RinexObsTypeMap_empty, METH_VARARGS, NULL},
	 { (char *)"RinexObsTypeMap_size", _wrap_RinexObsTypeMap_size, METH_VARARGS, NULL},
	 { (char *)"RinexObsTypeMap_clear", _wrap_RinexObsTypeMap_clear, METH_VARARGS, NULL},
	 { (char *)"RinexObsTypeMap_swap", _wrap_RinexObsTypeMap_swap, METH_VARARGS, NULL},
	 { (char *)"RinexObsTypeMap_get_allocator", _wrap_RinexObsTypeMap_get_allocator, METH_VARARGS, NULL},
	 { (char *)"RinexObsTypeMap_erase", _wrap_RinexObsTypeMap_erase, METH_VARARGS, NULL},
	 { (char *)"RinexObsTypeMap_count", _wrap_RinexObsTypeMap_count, METH_VARARGS, NULL},
	 { (char *)"RinexObsTypeMap___nonzero__", _wrap_RinexObsTypeMap___nonzero__, METH_VARARGS, NULL},
	 { (char *)"RinexObsTypeMap___len__", _wrap_RinexObsTypeMap___len__, METH_VARARGS, NULL},
	 { (char *)"RinexObsTypeMap___getitem__", _wrap_RinexObsTypeMap___getitem__, METH_VARARGS, NULL},
	 { (char *)"RinexObsTypeMap___setitem__", _wrap_RinexObsTypeMap___setitem__, METH_VARARGS, NULL},
	 { (char *)"RinexObsTypeMap___delitem__", _wrap_RinexObsTypeMap___delitem__, METH_VARARGS, NULL},
	 { (char *)"RinexObsTypeMap_has_key", _wrap_RinexObsTypeMap_has_key, METH_VARARGS, NULL},
	 { (char *)"RinexObsTypeMap_keys", _wrap_RinexObsTypeMap_keys, METH_VARARGS, NULL},
	 { (char *)"RinexObsTypeMap_values", _wrap_RinexObsTypeMap_values, METH_VARARGS, NULL},
	 { (char *)"RinexObsTypeMap_items", _wrap_RinexObsTypeMap_items, METH_VARARGS, NULL},
	 { (char *)"RinexObsTypeMap___contains__", _wrap_RinexObsTypeMap___contains__, METH_VARARGS, NULL},
	 { (char *)"RinexObsTypeMap___iter__", _wrap_RinexObsTypeMap___iter__, METH_VARARGS, NULL},
	 { (char *)"delete_RinexObsTypeMap", _wrap_delete_RinexObsTypeMap, METH_VARARGS, NULL},
	 { (char *)"RinexObsTypeMap_swigregister", RinexObsTypeMap_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_RinexPrnMap", _wrap_new_RinexPrnMap, METH_VARARGS, NULL},
	 { (char *)"RinexPrnMap_empty", _wrap_RinexPrnMap_empty, METH_VARARGS, NULL},
	 { (char *)"RinexPrnMap_size", _wrap_RinexPrnMap_size, METH_VARARGS, NULL},
	 { (char *)"RinexPrnMap_clear", _wrap_RinexPrnMap_clear, METH_VARARGS, NULL},
	 { (char *)"RinexPrnMap_swap", _wrap_RinexPrnMap_swap, METH_VARARGS, NULL},
	 { (char *)"RinexPrnMap_get_allocator", _wrap_RinexPrnMap_get_allocator, METH_VARARGS, NULL},
	 { (char *)"RinexPrnMap_erase", _wrap_RinexPrnMap_erase, METH_VARARGS, NULL},
	 { (char *)"RinexPrnMap_count", _wrap_RinexPrnMap_count, METH_VARARGS, NULL},
	 { (char *)"RinexPrnMap___nonzero__", _wrap_RinexPrnMap___nonzero__, METH_VARARGS, NULL},
	 { (char *)"RinexPrnMap___len__", _wrap_RinexPrnMap___len__, METH_VARARGS, NULL},
	 { (char *)"RinexPrnMap___getitem__", _wrap_RinexPrnMap___getitem__, METH_VARARGS, NULL},
	 { (char *)"RinexPrnMap___setitem__", _wrap_RinexPrnMap___setitem__, METH_VARARGS, NULL},
	 { (char *)"RinexPrnMap___delitem__", _wrap_RinexPrnMap___delitem__, METH_VARARGS, NULL},
	 { (char *)"RinexPrnMap_has_key", _wrap_RinexPrnMap_has_key, METH_VARARGS, NULL},
	 { (char *)"RinexPrnMap_keys", _wrap_RinexPrnMap_keys, METH_VARARGS, NULL},
	 { (char *)"RinexPrnMap_values", _wrap_RinexPrnMap_values, METH_VARARGS, NULL},
	 { (char *)"RinexPrnMap_items", _wrap_RinexPrnMap_items, METH_VARARGS, NULL},
	 { (char *)"RinexPrnMap___contains__", _wrap_RinexPrnMap___contains__, METH_VARARGS, NULL},
	 { (char *)"RinexPrnMap___iter__", _wrap_RinexPrnMap___iter__, METH_VARARGS, NULL},
	 { (char *)"delete_RinexPrnMap", _wrap_delete_RinexPrnMap, METH_VARARGS, NULL},
	 { (char *)"RinexPrnMap_swigregister", RinexPrnMap_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_BOGUS_TEMPLATE", _wrap_new_BOGUS_TEMPLATE, METH_VARARGS, NULL},
	 { (char *)"BOGUS_TEMPLATE_empty", _wrap_BOGUS_TEMPLATE_empty, METH_VARARGS, NULL},
	 { (char *)"BOGUS_TEMPLATE_size", _wrap_BOGUS_TEMPLATE_size, METH_VARARGS, NULL},
	 { (char *)"BOGUS_TEMPLATE_clear", _wrap_BOGUS_TEMPLATE_clear, METH_VARARGS, NULL},
	 { (char *)"BOGUS_TEMPLATE_swap", _wrap_BOGUS_TEMPLATE_swap, METH_VARARGS, NULL},
	 { (char *)"BOGUS_TEMPLATE_get_allocator", _wrap_BOGUS_TEMPLATE_get_allocator, METH_VARARGS, NULL},
	 { (char *)"BOGUS_TEMPLATE_erase", _wrap_BOGUS_TEMPLATE_erase, METH_VARARGS, NULL},
	 { (char *)"BOGUS_TEMPLATE_count", _wrap_BOGUS_TEMPLATE_count, METH_VARARGS, NULL},
	 { (char *)"BOGUS_TEMPLATE___nonzero__", _wrap_BOGUS_TEMPLATE___nonzero__, METH_VARARGS, NULL},
	 { (char *)"BOGUS_TEMPLATE___len__", _wrap_BOGUS_TEMPLATE___len__, METH_VARARGS, NULL},
	 { (char *)"BOGUS_TEMPLATE___getitem__", _wrap_BOGUS_TEMPLATE___getitem__, METH_VARARGS, NULL},
	 { (char *)"BOGUS_TEMPLATE___setitem__", _wrap_BOGUS_TEMPLATE___setitem__, METH_VARARGS, NULL},
	 { (char *)"BOGUS_TEMPLATE___delitem__", _wrap_BOGUS_TEMPLATE___delitem__, METH_VARARGS, NULL},
	 { (char *)"BOGUS_TEMPLATE_has_key", _wrap_BOGUS_TEMPLATE_has_key, METH_VARARGS, NULL},
	 { (char *)"BOGUS_TEMPLATE_keys", _wrap_BOGUS_TEMPLATE_keys, METH_VARARGS, NULL},
	 { (char *)"BOGUS_TEMPLATE_values", _wrap_BOGUS_TEMPLATE_values, METH_VARARGS, NULL},
	 { (char *)"BOGUS_TEMPLATE_items", _wrap_BOGUS_TEMPLATE_items, METH_VARARGS, NULL},
	 { (char *)"BOGUS_TEMPLATE___contains__", _wrap_BOGUS_TEMPLATE___contains__, METH_VARARGS, NULL},
	 { (char *)"BOGUS_TEMPLATE___iter__", _wrap_BOGUS_TEMPLATE___iter__, METH_VARARGS, NULL},
	 { (char *)"delete_BOGUS_TEMPLATE", _wrap_delete_BOGUS_TEMPLATE, METH_VARARGS, NULL},
	 { (char *)"BOGUS_TEMPLATE_swigregister", BOGUS_TEMPLATE_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_SP3Header", _wrap_new_SP3Header, METH_VARARGS, NULL},
	 { (char *)"delete_SP3Header", _wrap_delete_SP3Header, METH_VARARGS, NULL},
	 { (char *)"SP3Header_isHeader", _wrap_SP3Header_isHeader, METH_VARARGS, NULL},
	 { (char *)"SP3Header_dump", _wrap_SP3Header_dump, METH_VARARGS, NULL},
	 { (char *)"SP3Header_version_set", _wrap_SP3Header_version_set, METH_VARARGS, NULL},
	 { (char *)"SP3Header_version_get", _wrap_SP3Header_version_get, METH_VARARGS, NULL},
	 { (char *)"SP3Header_pvFlag_set", _wrap_SP3Header_pvFlag_set, METH_VARARGS, NULL},
	 { (char *)"SP3Header_pvFlag_get", _wrap_SP3Header_pvFlag_get, METH_VARARGS, NULL},
	 { (char *)"SP3Header_time_set", _wrap_SP3Header_time_set, METH_VARARGS, NULL},
	 { (char *)"SP3Header_time_get", _wrap_SP3Header_time_get, METH_VARARGS, NULL},
	 { (char *)"SP3Header_epochInterval_set", _wrap_SP3Header_epochInterval_set, METH_VARARGS, NULL},
	 { (char *)"SP3Header_epochInterval_get", _wrap_SP3Header_epochInterval_get, METH_VARARGS, NULL},
	 { (char *)"SP3Header_numberOfEpochs_set", _wrap_SP3Header_numberOfEpochs_set, METH_VARARGS, NULL},
	 { (char *)"SP3Header_numberOfEpochs_get", _wrap_SP3Header_numberOfEpochs_get, METH_VARARGS, NULL},
	 { (char *)"SP3Header_dataUsed_set", _wrap_SP3Header_dataUsed_set, METH_VARARGS, NULL},
	 { (char *)"SP3Header_dataUsed_get", _wrap_SP3Header_dataUsed_get, METH_VARARGS, NULL},
	 { (char *)"SP3Header_coordSystem_set", _wrap_SP3Header_coordSystem_set, METH_VARARGS, NULL},
	 { (char *)"SP3Header_coordSystem_get", _wrap_SP3Header_coordSystem_get, METH_VARARGS, NULL},
	 { (char *)"SP3Header_orbitType_set", _wrap_SP3Header_orbitType_set, METH_VARARGS, NULL},
	 { (char *)"SP3Header_orbitType_get", _wrap_SP3Header_orbitType_get, METH_VARARGS, NULL},
	 { (char *)"SP3Header_agency_set", _wrap_SP3Header_agency_set, METH_VARARGS, NULL},
	 { (char *)"SP3Header_agency_get", _wrap_SP3Header_agency_get, METH_VARARGS, NULL},
	 { (char *)"SP3Header_svList_set", _wrap_SP3Header_svList_set, METH_VARARGS, NULL},
	 { (char *)"SP3Header_svList_get", _wrap_SP3Header_svList_get, METH_VARARGS, NULL},
	 { (char *)"SP3Header_comments_set", _wrap_SP3Header_comments_set, METH_VARARGS, NULL},
	 { (char *)"SP3Header_comments_get", _wrap_SP3Header_comments_get, METH_VARARGS, NULL},
	 { (char *)"SP3Header_swigregister", SP3Header_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_RinexNavHeader", _wrap_new_RinexNavHeader, METH_VARARGS, NULL},
	 { (char *)"delete_RinexNavHeader", _wrap_delete_RinexNavHeader, METH_VARARGS, NULL},
	 { (char *)"RinexNavHeader_isHeader", _wrap_RinexNavHeader_isHeader, METH_VARARGS, NULL},
	 { (char *)"RinexNavHeader_dump", _wrap_RinexNavHeader_dump, METH_VARARGS, NULL},
	 { (char *)"RinexNavHeader_valid_set", _wrap_RinexNavHeader_valid_set, METH_VARARGS, NULL},
	 { (char *)"RinexNavHeader_valid_get", _wrap_RinexNavHeader_valid_get, METH_VARARGS, NULL},
	 { (char *)"RinexNavHeader_version_set", _wrap_RinexNavHeader_version_set, METH_VARARGS, NULL},
	 { (char *)"RinexNavHeader_version_get", _wrap_RinexNavHeader_version_get, METH_VARARGS, NULL},
	 { (char *)"RinexNavHeader_fileType_set", _wrap_RinexNavHeader_fileType_set, METH_VARARGS, NULL},
	 { (char *)"RinexNavHeader_fileType_get", _wrap_RinexNavHeader_fileType_get, METH_VARARGS, NULL},
	 { (char *)"RinexNavHeader_fileProgram_set", _wrap_RinexNavHeader_fileProgram_set, METH_VARARGS, NULL},
	 { (char *)"RinexNavHeader_fileProgram_get", _wrap_RinexNavHeader_fileProgram_get, METH_VARARGS, NULL},
	 { (char *)"RinexNavHeader_fileAgency_set", _wrap_RinexNavHeader_fileAgency_set, METH_VARARGS, NULL},
	 { (char *)"RinexNavHeader_fileAgency_get", _wrap_RinexNavHeader_fileAgency_get, METH_VARARGS, NULL},
	 { (char *)"RinexNavHeader_date_set", _wrap_RinexNavHeader_date_set, METH_VARARGS, NULL},
	 { (char *)"RinexNavHeader_date_get", _wrap_RinexNavHeader_date_get, METH_VARARGS, NULL},
	 { (char *)"RinexNavHeader_commentList_set", _wrap_RinexNavHeader_commentList_set, METH_VARARGS, NULL},
	 { (char *)"RinexNavHeader_commentList_get", _wrap_RinexNavHeader_commentList_get, METH_VARARGS, NULL},
	 { (char *)"RinexNavHeader_ionAlpha_set", _wrap_RinexNavHeader_ionAlpha_set, METH_VARARGS, NULL},
	 { (char *)"RinexNavHeader_ionAlpha_get", _wrap_RinexNavHeader_ionAlpha_get, METH_VARARGS, NULL},
	 { (char *)"RinexNavHeader_ionBeta_set", _wrap_RinexNavHeader_ionBeta_set, METH_VARARGS, NULL},
	 { (char *)"RinexNavHeader_ionBeta_get", _wrap_RinexNavHeader_ionBeta_get, METH_VARARGS, NULL},
	 { (char *)"RinexNavHeader_A0_set", _wrap_RinexNavHeader_A0_set, METH_VARARGS, NULL},
	 { (char *)"RinexNavHeader_A0_get", _wrap_RinexNavHeader_A0_get, METH_VARARGS, NULL},
	 { (char *)"RinexNavHeader_A1_set", _wrap_RinexNavHeader_A1_set, METH_VARARGS, NULL},
	 { (char *)"RinexNavHeader_A1_get", _wrap_RinexNavHeader_A1_get, METH_VARARGS, NULL},
	 { (char *)"RinexNavHeader_UTCRefTime_set", _wrap_RinexNavHeader_UTCRefTime_set, METH_VARARGS, NULL},
	 { (char *)"RinexNavHeader_UTCRefTime_get", _wrap_RinexNavHeader_UTCRefTime_get, METH_VARARGS, NULL},
	 { (char *)"RinexNavHeader_UTCRefWeek_set", _wrap_RinexNavHeader_UTCRefWeek_set, METH_VARARGS, NULL},
	 { (char *)"RinexNavHeader_UTCRefWeek_get", _wrap_RinexNavHeader_UTCRefWeek_get, METH_VARARGS, NULL},
	 { (char *)"RinexNavHeader_leapSeconds_set", _wrap_RinexNavHeader_leapSeconds_set, METH_VARARGS, NULL},
	 { (char *)"RinexNavHeader_leapSeconds_get", _wrap_RinexNavHeader_leapSeconds_get, METH_VARARGS, NULL},
	 { (char *)"RinexNavHeader_swigregister", RinexNavHeader_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_WrongBlockNumber", _wrap_new_WrongBlockNumber, METH_VARARGS, NULL},
	 { (char *)"delete_WrongBlockNumber", _wrap_delete_WrongBlockNumber, METH_VARARGS, NULL},
	 { (char *)"WrongBlockNumber_getName", _wrap_WrongBlockNumber_getName, METH_VARARGS, NULL},
	 { (char *)"WrongBlockNumber_class_operator_assignment", _wrap_WrongBlockNumber_class_operator_assignment, METH_VARARGS, NULL},
	 { (char *)"WrongBlockNumber_swigregister", WrongBlockNumber_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_WrongBlockFormat", _wrap_new_WrongBlockFormat, METH_VARARGS, NULL},
	 { (char *)"delete_WrongBlockFormat", _wrap_delete_WrongBlockFormat, METH_VARARGS, NULL},
	 { (char *)"WrongBlockFormat_getName", _wrap_WrongBlockFormat_getName, METH_VARARGS, NULL},
	 { (char *)"WrongBlockFormat_class_operator_assignment", _wrap_WrongBlockFormat_class_operator_assignment, METH_VARARGS, NULL},
	 { (char *)"WrongBlockFormat_swigregister", WrongBlockFormat_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_FICData", _wrap_new_FICData, METH_VARARGS, NULL},
	 { (char *)"delete_FICData", _wrap_delete_FICData, METH_VARARGS, NULL},
	 { (char *)"FICData_isValid", _wrap_FICData_isValid, METH_VARARGS, NULL},
	 { (char *)"FICData_isData", _wrap_FICData_isData, METH_VARARGS, NULL},
	 { (char *)"FICData_dump", _wrap_FICData_dump, METH_VARARGS, NULL},
	 { (char *)"FICData_prettyDump", _wrap_FICData_prettyDump, METH_VARARGS, NULL},
	 { (char *)"FICData_operator_EngEphemeris", _wrap_FICData_operator_EngEphemeris, METH_VARARGS, NULL},
	 { (char *)"FICData_operator_AlmOrbit", _wrap_FICData_operator_AlmOrbit, METH_VARARGS, NULL},
	 { (char *)"FICData_generateUniqueKey", _wrap_FICData_generateUniqueKey, METH_VARARGS, NULL},
	 { (char *)"FICData_blockNum_set", _wrap_FICData_blockNum_set, METH_VARARGS, NULL},
	 { (char *)"FICData_blockNum_get", _wrap_FICData_blockNum_get, METH_VARARGS, NULL},
	 { (char *)"FICData_f_set", _wrap_FICData_f_set, METH_VARARGS, NULL},
	 { (char *)"FICData_f_get", _wrap_FICData_f_get, METH_VARARGS, NULL},
	 { (char *)"FICData_i_set", _wrap_FICData_i_set, METH_VARARGS, NULL},
	 { (char *)"FICData_i_get", _wrap_FICData_i_get, METH_VARARGS, NULL},
	 { (char *)"FICData_c_set", _wrap_FICData_c_set, METH_VARARGS, NULL},
	 { (char *)"FICData_c_get", _wrap_FICData_c_get, METH_VARARGS, NULL},
	 { (char *)"FICData_swigregister", FICData_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_FICHeader", _wrap_new_FICHeader, METH_VARARGS, NULL},
	 { (char *)"delete_FICHeader", _wrap_delete_FICHeader, METH_VARARGS, NULL},
	 { (char *)"FICHeader_isHeader", _wrap_FICHeader_isHeader, METH_VARARGS, NULL},
	 { (char *)"FICHeader_dump", _wrap_FICHeader_dump, METH_VARARGS, NULL},
	 { (char *)"FICHeader_header_set", _wrap_FICHeader_header_set, METH_VARARGS, NULL},
	 { (char *)"FICHeader_header_get", _wrap_FICHeader_header_get, METH_VARARGS, NULL},
	 { (char *)"FICHeader_swigregister", FICHeader_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_RinexMetData", _wrap_new_RinexMetData, METH_VARARGS, NULL},
	 { (char *)"RinexMetData_isData", _wrap_RinexMetData_isData, METH_VARARGS, NULL},
	 { (char *)"RinexMetData_dump", _wrap_RinexMetData_dump, METH_VARARGS, NULL},
	 { (char *)"RinexMetData_time_set", _wrap_RinexMetData_time_set, METH_VARARGS, NULL},
	 { (char *)"RinexMetData_time_get", _wrap_RinexMetData_time_get, METH_VARARGS, NULL},
	 { (char *)"RinexMetData_data_set", _wrap_RinexMetData_data_set, METH_VARARGS, NULL},
	 { (char *)"RinexMetData_data_get", _wrap_RinexMetData_data_get, METH_VARARGS, NULL},
	 { (char *)"delete_RinexMetData", _wrap_delete_RinexMetData, METH_VARARGS, NULL},
	 { (char *)"RinexMetData_swigregister", RinexMetData_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_RinexMetHeader", _wrap_new_RinexMetHeader, METH_VARARGS, NULL},
	 { (char *)"delete_RinexMetHeader", _wrap_delete_RinexMetHeader, METH_VARARGS, NULL},
	 { (char *)"RinexMetHeader_isHeader", _wrap_RinexMetHeader_isHeader, METH_VARARGS, NULL},
	 { (char *)"RinexMetHeader_dump", _wrap_RinexMetHeader_dump, METH_VARARGS, NULL},
	 { (char *)"RinexMetHeader_convertObsType", _wrap_RinexMetHeader_convertObsType, METH_VARARGS, NULL},
	 { (char *)"RinexMetHeader_valid_set", _wrap_RinexMetHeader_valid_set, METH_VARARGS, NULL},
	 { (char *)"RinexMetHeader_valid_get", _wrap_RinexMetHeader_valid_get, METH_VARARGS, NULL},
	 { (char *)"RinexMetHeader_bitsAsString", _wrap_RinexMetHeader_bitsAsString, METH_VARARGS, NULL},
	 { (char *)"RinexMetHeader_bitString", _wrap_RinexMetHeader_bitString, METH_VARARGS, NULL},
	 { (char *)"RinexMetHeader_version_set", _wrap_RinexMetHeader_version_set, METH_VARARGS, NULL},
	 { (char *)"RinexMetHeader_version_get", _wrap_RinexMetHeader_version_get, METH_VARARGS, NULL},
	 { (char *)"RinexMetHeader_fileType_set", _wrap_RinexMetHeader_fileType_set, METH_VARARGS, NULL},
	 { (char *)"RinexMetHeader_fileType_get", _wrap_RinexMetHeader_fileType_get, METH_VARARGS, NULL},
	 { (char *)"RinexMetHeader_fileProgram_set", _wrap_RinexMetHeader_fileProgram_set, METH_VARARGS, NULL},
	 { (char *)"RinexMetHeader_fileProgram_get", _wrap_RinexMetHeader_fileProgram_get, METH_VARARGS, NULL},
	 { (char *)"RinexMetHeader_fileAgency_set", _wrap_RinexMetHeader_fileAgency_set, METH_VARARGS, NULL},
	 { (char *)"RinexMetHeader_fileAgency_get", _wrap_RinexMetHeader_fileAgency_get, METH_VARARGS, NULL},
	 { (char *)"RinexMetHeader_date_set", _wrap_RinexMetHeader_date_set, METH_VARARGS, NULL},
	 { (char *)"RinexMetHeader_date_get", _wrap_RinexMetHeader_date_get, METH_VARARGS, NULL},
	 { (char *)"RinexMetHeader_commentList_set", _wrap_RinexMetHeader_commentList_set, METH_VARARGS, NULL},
	 { (char *)"RinexMetHeader_commentList_get", _wrap_RinexMetHeader_commentList_get, METH_VARARGS, NULL},
	 { (char *)"RinexMetHeader_markerName_set", _wrap_RinexMetHeader_markerName_set, METH_VARARGS, NULL},
	 { (char *)"RinexMetHeader_markerName_get", _wrap_RinexMetHeader_markerName_get, METH_VARARGS, NULL},
	 { (char *)"RinexMetHeader_markerNumber_set", _wrap_RinexMetHeader_markerNumber_set, METH_VARARGS, NULL},
	 { (char *)"RinexMetHeader_markerNumber_get", _wrap_RinexMetHeader_markerNumber_get, METH_VARARGS, NULL},
	 { (char *)"RinexMetHeader_obsTypeList_set", _wrap_RinexMetHeader_obsTypeList_set, METH_VARARGS, NULL},
	 { (char *)"RinexMetHeader_obsTypeList_get", _wrap_RinexMetHeader_obsTypeList_get, METH_VARARGS, NULL},
	 { (char *)"RinexMetHeader_sensorTypeList_set", _wrap_RinexMetHeader_sensorTypeList_set, METH_VARARGS, NULL},
	 { (char *)"RinexMetHeader_sensorTypeList_get", _wrap_RinexMetHeader_sensorTypeList_get, METH_VARARGS, NULL},
	 { (char *)"RinexMetHeader_sensorPosList_set", _wrap_RinexMetHeader_sensorPosList_set, METH_VARARGS, NULL},
	 { (char *)"RinexMetHeader_sensorPosList_get", _wrap_RinexMetHeader_sensorPosList_get, METH_VARARGS, NULL},
	 { (char *)"RinexMetHeader_swigregister", RinexMetHeader_swigregister, METH_VARARGS, NULL},
	 { (char *)"sensorType_model_set", _wrap_sensorType_model_set, METH_VARARGS, NULL},
	 { (char *)"sensorType_model_get", _wrap_sensorType_model_get, METH_VARARGS, NULL},
	 { (char *)"sensorType_type_set", _wrap_sensorType_type_set, METH_VARARGS, NULL},
	 { (char *)"sensorType_type_get", _wrap_sensorType_type_get, METH_VARARGS, NULL},
	 { (char *)"sensorType_accuracy_set", _wrap_sensorType_accuracy_set, METH_VARARGS, NULL},
	 { (char *)"sensorType_accuracy_get", _wrap_sensorType_accuracy_get, METH_VARARGS, NULL},
	 { (char *)"sensorType_obsType_set", _wrap_sensorType_obsType_set, METH_VARARGS, NULL},
	 { (char *)"sensorType_obsType_get", _wrap_sensorType_obsType_get, METH_VARARGS, NULL},
	 { (char *)"new_sensorType", _wrap_new_sensorType, METH_VARARGS, NULL},
	 { (char *)"delete_sensorType", _wrap_delete_sensorType, METH_VARARGS, NULL},
	 { (char *)"sensorType_swigregister", sensorType_swigregister, METH_VARARGS, NULL},
	 { (char *)"sensorPosType_position_set", _wrap_sensorPosType_position_set, METH_VARARGS, NULL},
	 { (char *)"sensorPosType_position_get", _wrap_sensorPosType_position_get, METH_VARARGS, NULL},
	 { (char *)"sensorPosType_height_set", _wrap_sensorPosType_height_set, METH_VARARGS, NULL},
	 { (char *)"sensorPosType_height_get", _wrap_sensorPosType_height_get, METH_VARARGS, NULL},
	 { (char *)"sensorPosType_obsType_set", _wrap_sensorPosType_obsType_set, METH_VARARGS, NULL},
	 { (char *)"sensorPosType_obsType_get", _wrap_sensorPosType_obsType_get, METH_VARARGS, NULL},
	 { (char *)"new_sensorPosType", _wrap_new_sensorPosType, METH_VARARGS, NULL},
	 { (char *)"delete_sensorPosType", _wrap_delete_sensorPosType, METH_VARARGS, NULL},
	 { (char *)"sensorPosType_swigregister", sensorPosType_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_RinexNavData", _wrap_new_RinexNavData, METH_VARARGS, NULL},
	 { (char *)"delete_RinexNavData", _wrap_delete_RinexNavData, METH_VARARGS, NULL},
	 { (char *)"RinexNavData_isData", _wrap_RinexNavData_isData, METH_VARARGS, NULL},
	 { (char *)"RinexNavData_dump", _wrap_RinexNavData_dump, METH_VARARGS, NULL},
	 { (char *)"RinexNavData_operator_EngEphemeris", _wrap_RinexNavData_operator_EngEphemeris, METH_VARARGS, NULL},
	 { (char *)"RinexNavData_toList", _wrap_RinexNavData_toList, METH_VARARGS, NULL},
	 { (char *)"RinexNavData_time_set", _wrap_RinexNavData_time_set, METH_VARARGS, NULL},
	 { (char *)"RinexNavData_time_get", _wrap_RinexNavData_time_get, METH_VARARGS, NULL},
	 { (char *)"RinexNavData_PRNID_set", _wrap_RinexNavData_PRNID_set, METH_VARARGS, NULL},
	 { (char *)"RinexNavData_PRNID_get", _wrap_RinexNavData_PRNID_get, METH_VARARGS, NULL},
	 { (char *)"RinexNavData_HOWtime_set", _wrap_RinexNavData_HOWtime_set, METH_VARARGS, NULL},
	 { (char *)"RinexNavData_HOWtime_get", _wrap_RinexNavData_HOWtime_get, METH_VARARGS, NULL},
	 { (char *)"RinexNavData_weeknum_set", _wrap_RinexNavData_weeknum_set, METH_VARARGS, NULL},
	 { (char *)"RinexNavData_weeknum_get", _wrap_RinexNavData_weeknum_get, METH_VARARGS, NULL},
	 { (char *)"RinexNavData_codeflgs_set", _wrap_RinexNavData_codeflgs_set, METH_VARARGS, NULL},
	 { (char *)"RinexNavData_codeflgs_get", _wrap_RinexNavData_codeflgs_get, METH_VARARGS, NULL},
	 { (char *)"RinexNavData_accuracy_set", _wrap_RinexNavData_accuracy_set, METH_VARARGS, NULL},
	 { (char *)"RinexNavData_accuracy_get", _wrap_RinexNavData_accuracy_get, METH_VARARGS, NULL},
	 { (char *)"RinexNavData_health_set", _wrap_RinexNavData_health_set, METH_VARARGS, NULL},
	 { (char *)"RinexNavData_health_get", _wrap_RinexNavData_health_get, METH_VARARGS, NULL},
	 { (char *)"RinexNavData_L2Pdata_set", _wrap_RinexNavData_L2Pdata_set, METH_VARARGS, NULL},
	 { (char *)"RinexNavData_L2Pdata_get", _wrap_RinexNavData_L2Pdata_get, METH_VARARGS, NULL},
	 { (char *)"RinexNavData_IODC_set", _wrap_RinexNavData_IODC_set, METH_VARARGS, NULL},
	 { (char *)"RinexNavData_IODC_get", _wrap_RinexNavData_IODC_get, METH_VARARGS, NULL},
	 { (char *)"RinexNavData_IODE_set", _wrap_RinexNavData_IODE_set, METH_VARARGS, NULL},
	 { (char *)"RinexNavData_IODE_get", _wrap_RinexNavData_IODE_get, METH_VARARGS, NULL},
	 { (char *)"RinexNavData_Toc_set", _wrap_RinexNavData_Toc_set, METH_VARARGS, NULL},
	 { (char *)"RinexNavData_Toc_get", _wrap_RinexNavData_Toc_get, METH_VARARGS, NULL},
	 { (char *)"RinexNavData_af0_set", _wrap_RinexNavData_af0_set, METH_VARARGS, NULL},
	 { (char *)"RinexNavData_af0_get", _wrap_RinexNavData_af0_get, METH_VARARGS, NULL},
	 { (char *)"RinexNavData_af1_set", _wrap_RinexNavData_af1_set, METH_VARARGS, NULL},
	 { (char *)"RinexNavData_af1_get", _wrap_RinexNavData_af1_get, METH_VARARGS, NULL},
	 { (char *)"RinexNavData_af2_set", _wrap_RinexNavData_af2_set, METH_VARARGS, NULL},
	 { (char *)"RinexNavData_af2_get", _wrap_RinexNavData_af2_get, METH_VARARGS, NULL},
	 { (char *)"RinexNavData_Tgd_set", _wrap_RinexNavData_Tgd_set, METH_VARARGS, NULL},
	 { (char *)"RinexNavData_Tgd_get", _wrap_RinexNavData_Tgd_get, METH_VARARGS, NULL},
	 { (char *)"RinexNavData_Cuc_set", _wrap_RinexNavData_Cuc_set, METH_VARARGS, NULL},
	 { (char *)"RinexNavData_Cuc_get", _wrap_RinexNavData_Cuc_get, METH_VARARGS, NULL},
	 { (char *)"RinexNavData_Cus_set", _wrap_RinexNavData_Cus_set, METH_VARARGS, NULL},
	 { (char *)"RinexNavData_Cus_get", _wrap_RinexNavData_Cus_get, METH_VARARGS, NULL},
	 { (char *)"RinexNavData_Crc_set", _wrap_RinexNavData_Crc_set, METH_VARARGS, NULL},
	 { (char *)"RinexNavData_Crc_get", _wrap_RinexNavData_Crc_get, METH_VARARGS, NULL},
	 { (char *)"RinexNavData_Crs_set", _wrap_RinexNavData_Crs_set, METH_VARARGS, NULL},
	 { (char *)"RinexNavData_Crs_get", _wrap_RinexNavData_Crs_get, METH_VARARGS, NULL},
	 { (char *)"RinexNavData_Cic_set", _wrap_RinexNavData_Cic_set, METH_VARARGS, NULL},
	 { (char *)"RinexNavData_Cic_get", _wrap_RinexNavData_Cic_get, METH_VARARGS, NULL},
	 { (char *)"RinexNavData_Cis_set", _wrap_RinexNavData_Cis_set, METH_VARARGS, NULL},
	 { (char *)"RinexNavData_Cis_get", _wrap_RinexNavData_Cis_get, METH_VARARGS, NULL},
	 { (char *)"RinexNavData_Toe_set", _wrap_RinexNavData_Toe_set, METH_VARARGS, NULL},
	 { (char *)"RinexNavData_Toe_get", _wrap_RinexNavData_Toe_get, METH_VARARGS, NULL},
	 { (char *)"RinexNavData_M0_set", _wrap_RinexNavData_M0_set, METH_VARARGS, NULL},
	 { (char *)"RinexNavData_M0_get", _wrap_RinexNavData_M0_get, METH_VARARGS, NULL},
	 { (char *)"RinexNavData_dn_set", _wrap_RinexNavData_dn_set, METH_VARARGS, NULL},
	 { (char *)"RinexNavData_dn_get", _wrap_RinexNavData_dn_get, METH_VARARGS, NULL},
	 { (char *)"RinexNavData_ecc_set", _wrap_RinexNavData_ecc_set, METH_VARARGS, NULL},
	 { (char *)"RinexNavData_ecc_get", _wrap_RinexNavData_ecc_get, METH_VARARGS, NULL},
	 { (char *)"RinexNavData_Ahalf_set", _wrap_RinexNavData_Ahalf_set, METH_VARARGS, NULL},
	 { (char *)"RinexNavData_Ahalf_get", _wrap_RinexNavData_Ahalf_get, METH_VARARGS, NULL},
	 { (char *)"RinexNavData_OMEGA0_set", _wrap_RinexNavData_OMEGA0_set, METH_VARARGS, NULL},
	 { (char *)"RinexNavData_OMEGA0_get", _wrap_RinexNavData_OMEGA0_get, METH_VARARGS, NULL},
	 { (char *)"RinexNavData_i0_set", _wrap_RinexNavData_i0_set, METH_VARARGS, NULL},
	 { (char *)"RinexNavData_i0_get", _wrap_RinexNavData_i0_get, METH_VARARGS, NULL},
	 { (char *)"RinexNavData_w_set", _wrap_RinexNavData_w_set, METH_VARARGS, NULL},
	 { (char *)"RinexNavData_w_get", _wrap_RinexNavData_w_get, METH_VARARGS, NULL},
	 { (char *)"RinexNavData_OMEGAdot_set", _wrap_RinexNavData_OMEGAdot_set, METH_VARARGS, NULL},
	 { (char *)"RinexNavData_OMEGAdot_get", _wrap_RinexNavData_OMEGAdot_get, METH_VARARGS, NULL},
	 { (char *)"RinexNavData_idot_set", _wrap_RinexNavData_idot_set, METH_VARARGS, NULL},
	 { (char *)"RinexNavData_idot_get", _wrap_RinexNavData_idot_get, METH_VARARGS, NULL},
	 { (char *)"RinexNavData_fitint_set", _wrap_RinexNavData_fitint_set, METH_VARARGS, NULL},
	 { (char *)"RinexNavData_fitint_get", _wrap_RinexNavData_fitint_get, METH_VARARGS, NULL},
	 { (char *)"RinexNavData_swigregister", RinexNavData_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_SP3Data", _wrap_new_SP3Data, METH_VARARGS, NULL},
	 { (char *)"delete_SP3Data", _wrap_delete_SP3Data, METH_VARARGS, NULL},
	 { (char *)"SP3Data_isData", _wrap_SP3Data_isData, METH_VARARGS, NULL},
	 { (char *)"SP3Data_dump", _wrap_SP3Data_dump, METH_VARARGS, NULL},
	 { (char *)"SP3Data_flag_set", _wrap_SP3Data_flag_set, METH_VARARGS, NULL},
	 { (char *)"SP3Data_flag_get", _wrap_SP3Data_flag_get, METH_VARARGS, NULL},
	 { (char *)"SP3Data_id_set", _wrap_SP3Data_id_set, METH_VARARGS, NULL},
	 { (char *)"SP3Data_id_get", _wrap_SP3Data_id_get, METH_VARARGS, NULL},
	 { (char *)"SP3Data_x_set", _wrap_SP3Data_x_set, METH_VARARGS, NULL},
	 { (char *)"SP3Data_x_get", _wrap_SP3Data_x_get, METH_VARARGS, NULL},
	 { (char *)"SP3Data_clk_set", _wrap_SP3Data_clk_set, METH_VARARGS, NULL},
	 { (char *)"SP3Data_clk_get", _wrap_SP3Data_clk_get, METH_VARARGS, NULL},
	 { (char *)"SP3Data_time_set", _wrap_SP3Data_time_set, METH_VARARGS, NULL},
	 { (char *)"SP3Data_time_get", _wrap_SP3Data_time_get, METH_VARARGS, NULL},
	 { (char *)"SP3Data_swigregister", SP3Data_swigregister, METH_VARARGS, NULL},
	 { (char *)"RungeKutta4_integrateTo", _wrap_RungeKutta4_integrateTo, METH_VARARGS, NULL},
	 { (char *)"RungeKutta4_derivative", _wrap_RungeKutta4_derivative, METH_VARARGS, NULL},
	 { (char *)"RungeKutta4_getTime", _wrap_RungeKutta4_getTime, METH_VARARGS, NULL},
	 { (char *)"RungeKutta4_getState", _wrap_RungeKutta4_getState, METH_VARARGS, NULL},
	 { (char *)"delete_RungeKutta4", _wrap_delete_RungeKutta4, METH_VARARGS, NULL},
	 { (char *)"RungeKutta4_swigregister", RungeKutta4_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_GeometryException", _wrap_new_GeometryException, METH_VARARGS, NULL},
	 { (char *)"delete_GeometryException", _wrap_delete_GeometryException, METH_VARARGS, NULL},
	 { (char *)"GeometryException_getName", _wrap_GeometryException_getName, METH_VARARGS, NULL},
	 { (char *)"GeometryException_class_operator_assignment", _wrap_GeometryException_class_operator_assignment, METH_VARARGS, NULL},
	 { (char *)"GeometryException_swigregister", GeometryException_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_Triple", _wrap_new_Triple, METH_VARARGS, NULL},
	 { (char *)"delete_Triple", _wrap_delete_Triple, METH_VARARGS, NULL},
	 { (char *)"Triple_class_operator_assignment", _wrap_Triple_class_operator_assignment, METH_VARARGS, NULL},
	 { (char *)"Triple_dot", _wrap_Triple_dot, METH_VARARGS, NULL},
	 { (char *)"Triple_cross", _wrap_Triple_cross, METH_VARARGS, NULL},
	 { (char *)"Triple_mag", _wrap_Triple_mag, METH_VARARGS, NULL},
	 { (char *)"Triple_cosVector", _wrap_Triple_cosVector, METH_VARARGS, NULL},
	 { (char *)"Triple_slantRange", _wrap_Triple_slantRange, METH_VARARGS, NULL},
	 { (char *)"Triple_elvAngle", _wrap_Triple_elvAngle, METH_VARARGS, NULL},
	 { (char *)"Triple_azAngle", _wrap_Triple_azAngle, METH_VARARGS, NULL},
	 { (char *)"Triple_class_operator_bracket", _wrap_Triple_class_operator_bracket, METH_VARARGS, NULL},
	 { (char *)"Triple_operator_bracket_const", _wrap_Triple_operator_bracket_const, METH_VARARGS, NULL},
	 { (char *)"Triple___sub__", _wrap_Triple___sub__, METH_VARARGS, NULL},
	 { (char *)"Triple___add__", _wrap_Triple___add__, METH_VARARGS, NULL},
	 { (char *)"Triple_size", _wrap_Triple_size, METH_VARARGS, NULL},
	 { (char *)"Triple_streamRead", _wrap_Triple_streamRead, METH_VARARGS, NULL},
	 { (char *)"Triple_theArray_set", _wrap_Triple_theArray_set, METH_VARARGS, NULL},
	 { (char *)"Triple_theArray_get", _wrap_Triple_theArray_get, METH_VARARGS, NULL},
	 { (char *)"Triple_swigregister", Triple_swigregister, METH_VARARGS, NULL},
	 { (char *)"Position_getSystemName", _wrap_Position_getSystemName, METH_VARARGS, NULL},
	 { (char *)"Position_setPositionTolerance", _wrap_Position_setPositionTolerance, METH_VARARGS, NULL},
	 { (char *)"Position_getPositionTolerance", _wrap_Position_getPositionTolerance, METH_VARARGS, NULL},
	 { (char *)"Position_setTolerance", _wrap_Position_setTolerance, METH_VARARGS, NULL},
	 { (char *)"new_Position", _wrap_new_Position, METH_VARARGS, NULL},
	 { (char *)"delete_Position", _wrap_delete_Position, METH_VARARGS, NULL},
	 { (char *)"Position___sub__", _wrap_Position___sub__, METH_VARARGS, NULL},
	 { (char *)"Position___add__", _wrap_Position___add__, METH_VARARGS, NULL},
	 { (char *)"__mul__", _wrap___mul__, METH_VARARGS, NULL},
	 { (char *)"Position___eq__", _wrap_Position___eq__, METH_VARARGS, NULL},
	 { (char *)"Position___ne__", _wrap_Position___ne__, METH_VARARGS, NULL},
	 { (char *)"Position_transformTo", _wrap_Position_transformTo, METH_VARARGS, NULL},
	 { (char *)"Position_asGeodetic", _wrap_Position_asGeodetic, METH_VARARGS, NULL},
	 { (char *)"Position_asECEF", _wrap_Position_asECEF, METH_VARARGS, NULL},
	 { (char *)"Position_X", _wrap_Position_X, METH_VARARGS, NULL},
	 { (char *)"Position_Y", _wrap_Position_Y, METH_VARARGS, NULL},
	 { (char *)"Position_Z", _wrap_Position_Z, METH_VARARGS, NULL},
	 { (char *)"Position_geodeticLatitude", _wrap_Position_geodeticLatitude, METH_VARARGS, NULL},
	 { (char *)"Position_geocentricLatitude", _wrap_Position_geocentricLatitude, METH_VARARGS, NULL},
	 { (char *)"Position_theta", _wrap_Position_theta, METH_VARARGS, NULL},
	 { (char *)"Position_phi", _wrap_Position_phi, METH_VARARGS, NULL},
	 { (char *)"Position_longitude", _wrap_Position_longitude, METH_VARARGS, NULL},
	 { (char *)"Position_radius", _wrap_Position_radius, METH_VARARGS, NULL},
	 { (char *)"Position_height", _wrap_Position_height, METH_VARARGS, NULL},
	 { (char *)"Position_getCoordinateSystem", _wrap_Position_getCoordinateSystem, METH_VARARGS, NULL},
	 { (char *)"Position_getGeodeticLatitude", _wrap_Position_getGeodeticLatitude, METH_VARARGS, NULL},
	 { (char *)"Position_getGeocentricLatitude", _wrap_Position_getGeocentricLatitude, METH_VARARGS, NULL},
	 { (char *)"Position_getLongitude", _wrap_Position_getLongitude, METH_VARARGS, NULL},
	 { (char *)"Position_getAltitude", _wrap_Position_getAltitude, METH_VARARGS, NULL},
	 { (char *)"Position_getHeight", _wrap_Position_getHeight, METH_VARARGS, NULL},
	 { (char *)"Position_getX", _wrap_Position_getX, METH_VARARGS, NULL},
	 { (char *)"Position_getY", _wrap_Position_getY, METH_VARARGS, NULL},
	 { (char *)"Position_getZ", _wrap_Position_getZ, METH_VARARGS, NULL},
	 { (char *)"Position_getTheta", _wrap_Position_getTheta, METH_VARARGS, NULL},
	 { (char *)"Position_getPhi", _wrap_Position_getPhi, METH_VARARGS, NULL},
	 { (char *)"Position_getRadius", _wrap_Position_getRadius, METH_VARARGS, NULL},
	 { (char *)"Position_setGeoidModel", _wrap_Position_setGeoidModel, METH_VARARGS, NULL},
	 { (char *)"Position_setGeodetic", _wrap_Position_setGeodetic, METH_VARARGS, NULL},
	 { (char *)"Position_setGeocentric", _wrap_Position_setGeocentric, METH_VARARGS, NULL},
	 { (char *)"Position_setSpherical", _wrap_Position_setSpherical, METH_VARARGS, NULL},
	 { (char *)"Position_setECEF", _wrap_Position_setECEF, METH_VARARGS, NULL},
	 { (char *)"Position_setToString", _wrap_Position_setToString, METH_VARARGS, NULL},
	 { (char *)"Position_printf", _wrap_Position_printf, METH_VARARGS, NULL},
	 { (char *)"Position_printf_const", _wrap_Position_printf_const, METH_VARARGS, NULL},
	 { (char *)"Position_asString", _wrap_Position_asString, METH_VARARGS, NULL},
	 { (char *)"Position_convertSphericalToCartesian", _wrap_Position_convertSphericalToCartesian, METH_VARARGS, NULL},
	 { (char *)"Position_convertCartesianToSpherical", _wrap_Position_convertCartesianToSpherical, METH_VARARGS, NULL},
	 { (char *)"Position_convertCartesianToGeodetic", _wrap_Position_convertCartesianToGeodetic, METH_VARARGS, NULL},
	 { (char *)"Position_convertGeodeticToCartesian", _wrap_Position_convertGeodeticToCartesian, METH_VARARGS, NULL},
	 { (char *)"Position_convertCartesianToGeocentric", _wrap_Position_convertCartesianToGeocentric, METH_VARARGS, NULL},
	 { (char *)"Position_convertGeocentricToCartesian", _wrap_Position_convertGeocentricToCartesian, METH_VARARGS, NULL},
	 { (char *)"Position_convertGeocentricToGeodetic", _wrap_Position_convertGeocentricToGeodetic, METH_VARARGS, NULL},
	 { (char *)"Position_convertGeodeticToGeocentric", _wrap_Position_convertGeodeticToGeocentric, METH_VARARGS, NULL},
	 { (char *)"range", _wrap_range, METH_VARARGS, NULL},
	 { (char *)"Position_radiusEarth", _wrap_Position_radiusEarth, METH_VARARGS, NULL},
	 { (char *)"Position_elevation", _wrap_Position_elevation, METH_VARARGS, NULL},
	 { (char *)"Position_azimuth", _wrap_Position_azimuth, METH_VARARGS, NULL},
	 { (char *)"Position_getIonosphericPiercePoint", _wrap_Position_getIonosphericPiercePoint, METH_VARARGS, NULL},
	 { (char *)"Position_swigregister", Position_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_ECEF", _wrap_new_ECEF, METH_VARARGS, NULL},
	 { (char *)"delete_ECEF", _wrap_delete_ECEF, METH_VARARGS, NULL},
	 { (char *)"ECEF_class_operator_assignment", _wrap_ECEF_class_operator_assignment, METH_VARARGS, NULL},
	 { (char *)"ECEF_asGeodetic", _wrap_ECEF_asGeodetic, METH_VARARGS, NULL},
	 { (char *)"ECEF_swigregister", ECEF_swigregister, METH_VARARGS, NULL},
	 { (char *)"GeoidModel_a", _wrap_GeoidModel_a, METH_VARARGS, NULL},
	 { (char *)"GeoidModel_a_km", _wrap_GeoidModel_a_km, METH_VARARGS, NULL},
	 { (char *)"GeoidModel_flattening", _wrap_GeoidModel_flattening, METH_VARARGS, NULL},
	 { (char *)"GeoidModel_eccentricity", _wrap_GeoidModel_eccentricity, METH_VARARGS, NULL},
	 { (char *)"GeoidModel_eccSquared", _wrap_GeoidModel_eccSquared, METH_VARARGS, NULL},
	 { (char *)"GeoidModel_angVelocity", _wrap_GeoidModel_angVelocity, METH_VARARGS, NULL},
	 { (char *)"GeoidModel_gm", _wrap_GeoidModel_gm, METH_VARARGS, NULL},
	 { (char *)"GeoidModel_gm_km", _wrap_GeoidModel_gm_km, METH_VARARGS, NULL},
	 { (char *)"GeoidModel_c", _wrap_GeoidModel_c, METH_VARARGS, NULL},
	 { (char *)"GeoidModel_c_km", _wrap_GeoidModel_c_km, METH_VARARGS, NULL},
	 { (char *)"delete_GeoidModel", _wrap_delete_GeoidModel, METH_VARARGS, NULL},
	 { (char *)"GeoidModel_swigregister", GeoidModel_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_Xvt", _wrap_new_Xvt, METH_VARARGS, NULL},
	 { (char *)"Xvt_x_set", _wrap_Xvt_x_set, METH_VARARGS, NULL},
	 { (char *)"Xvt_x_get", _wrap_Xvt_x_get, METH_VARARGS, NULL},
	 { (char *)"Xvt_v_set", _wrap_Xvt_v_set, METH_VARARGS, NULL},
	 { (char *)"Xvt_v_get", _wrap_Xvt_v_get, METH_VARARGS, NULL},
	 { (char *)"Xvt_dtime_set", _wrap_Xvt_dtime_set, METH_VARARGS, NULL},
	 { (char *)"Xvt_dtime_get", _wrap_Xvt_dtime_get, METH_VARARGS, NULL},
	 { (char *)"Xvt_ddtime_set", _wrap_Xvt_ddtime_set, METH_VARARGS, NULL},
	 { (char *)"Xvt_ddtime_get", _wrap_Xvt_ddtime_get, METH_VARARGS, NULL},
	 { (char *)"Xvt_preciseRho", _wrap_Xvt_preciseRho, METH_VARARGS, NULL},
	 { (char *)"delete_Xvt", _wrap_delete_Xvt, METH_VARARGS, NULL},
	 { (char *)"Xvt_swigregister", Xvt_swigregister, METH_VARARGS, NULL},
	 { (char *)"Xvt_streamRead", _wrap_Xvt_streamRead, METH_VARARGS, NULL},
	 { (char *)"new_NoGeoidException", _wrap_new_NoGeoidException, METH_VARARGS, NULL},
	 { (char *)"delete_NoGeoidException", _wrap_delete_NoGeoidException, METH_VARARGS, NULL},
	 { (char *)"NoGeoidException_getName", _wrap_NoGeoidException_getName, METH_VARARGS, NULL},
	 { (char *)"NoGeoidException_class_operator_assignment", _wrap_NoGeoidException_class_operator_assignment, METH_VARARGS, NULL},
	 { (char *)"NoGeoidException_swigregister", NoGeoidException_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_Geodetic", _wrap_new_Geodetic, METH_VARARGS, NULL},
	 { (char *)"delete_Geodetic", _wrap_delete_Geodetic, METH_VARARGS, NULL},
	 { (char *)"Geodetic_class_operator_assignment", _wrap_Geodetic_class_operator_assignment, METH_VARARGS, NULL},
	 { (char *)"Geodetic_asECEF", _wrap_Geodetic_asECEF, METH_VARARGS, NULL},
	 { (char *)"Geodetic_getLatitude", _wrap_Geodetic_getLatitude, METH_VARARGS, NULL},
	 { (char *)"Geodetic_getLongitude", _wrap_Geodetic_getLongitude, METH_VARARGS, NULL},
	 { (char *)"Geodetic_getAltitude", _wrap_Geodetic_getAltitude, METH_VARARGS, NULL},
	 { (char *)"Geodetic_swigregister", Geodetic_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_RAIMSolution", _wrap_new_RAIMSolution, METH_VARARGS, NULL},
	 { (char *)"RAIMSolution_Compute", _wrap_RAIMSolution_Compute, METH_VARARGS, NULL},
	 { (char *)"RAIMSolution_isValid", _wrap_RAIMSolution_isValid, METH_VARARGS, NULL},
	 { (char *)"RAIMSolution_RMSLimit_set", _wrap_RAIMSolution_RMSLimit_set, METH_VARARGS, NULL},
	 { (char *)"RAIMSolution_RMSLimit_get", _wrap_RAIMSolution_RMSLimit_get, METH_VARARGS, NULL},
	 { (char *)"RAIMSolution_SlopeLimit_set", _wrap_RAIMSolution_SlopeLimit_set, METH_VARARGS, NULL},
	 { (char *)"RAIMSolution_SlopeLimit_get", _wrap_RAIMSolution_SlopeLimit_get, METH_VARARGS, NULL},
	 { (char *)"RAIMSolution_Algebraic_set", _wrap_RAIMSolution_Algebraic_set, METH_VARARGS, NULL},
	 { (char *)"RAIMSolution_Algebraic_get", _wrap_RAIMSolution_Algebraic_get, METH_VARARGS, NULL},
	 { (char *)"RAIMSolution_ResidualCriterion_set", _wrap_RAIMSolution_ResidualCriterion_set, METH_VARARGS, NULL},
	 { (char *)"RAIMSolution_ResidualCriterion_get", _wrap_RAIMSolution_ResidualCriterion_get, METH_VARARGS, NULL},
	 { (char *)"RAIMSolution_ReturnAtOnce_set", _wrap_RAIMSolution_ReturnAtOnce_set, METH_VARARGS, NULL},
	 { (char *)"RAIMSolution_ReturnAtOnce_get", _wrap_RAIMSolution_ReturnAtOnce_get, METH_VARARGS, NULL},
	 { (char *)"RAIMSolution_NSatsReject_set", _wrap_RAIMSolution_NSatsReject_set, METH_VARARGS, NULL},
	 { (char *)"RAIMSolution_NSatsReject_get", _wrap_RAIMSolution_NSatsReject_get, METH_VARARGS, NULL},
	 { (char *)"RAIMSolution_Debug_set", _wrap_RAIMSolution_Debug_set, METH_VARARGS, NULL},
	 { (char *)"RAIMSolution_Debug_get", _wrap_RAIMSolution_Debug_get, METH_VARARGS, NULL},
	 { (char *)"RAIMSolution_pDebugStream_set", _wrap_RAIMSolution_pDebugStream_set, METH_VARARGS, NULL},
	 { (char *)"RAIMSolution_pDebugStream_get", _wrap_RAIMSolution_pDebugStream_get, METH_VARARGS, NULL},
	 { (char *)"RAIMSolution_MaxNIterations_set", _wrap_RAIMSolution_MaxNIterations_set, METH_VARARGS, NULL},
	 { (char *)"RAIMSolution_MaxNIterations_get", _wrap_RAIMSolution_MaxNIterations_get, METH_VARARGS, NULL},
	 { (char *)"RAIMSolution_ConvergenceLimit_set", _wrap_RAIMSolution_ConvergenceLimit_set, METH_VARARGS, NULL},
	 { (char *)"RAIMSolution_ConvergenceLimit_get", _wrap_RAIMSolution_ConvergenceLimit_get, METH_VARARGS, NULL},
	 { (char *)"RAIMSolution_Valid_set", _wrap_RAIMSolution_Valid_set, METH_VARARGS, NULL},
	 { (char *)"RAIMSolution_Valid_get", _wrap_RAIMSolution_Valid_get, METH_VARARGS, NULL},
	 { (char *)"RAIMSolution_Solution_set", _wrap_RAIMSolution_Solution_set, METH_VARARGS, NULL},
	 { (char *)"RAIMSolution_Solution_get", _wrap_RAIMSolution_Solution_get, METH_VARARGS, NULL},
	 { (char *)"RAIMSolution_Covariance_set", _wrap_RAIMSolution_Covariance_set, METH_VARARGS, NULL},
	 { (char *)"RAIMSolution_Covariance_get", _wrap_RAIMSolution_Covariance_get, METH_VARARGS, NULL},
	 { (char *)"RAIMSolution_RMSResidual_set", _wrap_RAIMSolution_RMSResidual_set, METH_VARARGS, NULL},
	 { (char *)"RAIMSolution_RMSResidual_get", _wrap_RAIMSolution_RMSResidual_get, METH_VARARGS, NULL},
	 { (char *)"RAIMSolution_MaxSlope_set", _wrap_RAIMSolution_MaxSlope_set, METH_VARARGS, NULL},
	 { (char *)"RAIMSolution_MaxSlope_get", _wrap_RAIMSolution_MaxSlope_get, METH_VARARGS, NULL},
	 { (char *)"RAIMSolution_NIterations_set", _wrap_RAIMSolution_NIterations_set, METH_VARARGS, NULL},
	 { (char *)"RAIMSolution_NIterations_get", _wrap_RAIMSolution_NIterations_get, METH_VARARGS, NULL},
	 { (char *)"RAIMSolution_Convergence_set", _wrap_RAIMSolution_Convergence_set, METH_VARARGS, NULL},
	 { (char *)"RAIMSolution_Convergence_get", _wrap_RAIMSolution_Convergence_get, METH_VARARGS, NULL},
	 { (char *)"RAIMSolution_Nsvs_set", _wrap_RAIMSolution_Nsvs_set, METH_VARARGS, NULL},
	 { (char *)"RAIMSolution_Nsvs_get", _wrap_RAIMSolution_Nsvs_get, METH_VARARGS, NULL},
	 { (char *)"delete_RAIMSolution", _wrap_delete_RAIMSolution, METH_VARARGS, NULL},
	 { (char *)"RAIMSolution_swigregister", RAIMSolution_swigregister, METH_VARARGS, NULL},
	 { (char *)"PrepareAutonomousSolution", _wrap_PrepareAutonomousSolution, METH_VARARGS, NULL},
	 { (char *)"AutonomousPRSolution", _wrap_AutonomousPRSolution, METH_VARARGS, NULL},
	 { (char *)"new_CorrectedEphemerisRange", _wrap_new_CorrectedEphemerisRange, METH_VARARGS, NULL},
	 { (char *)"CorrectedEphemerisRange_ComputeAtReceiveTime", _wrap_CorrectedEphemerisRange_ComputeAtReceiveTime, METH_VARARGS, NULL},
	 { (char *)"CorrectedEphemerisRange_ComputeAtTransmitTime", _wrap_CorrectedEphemerisRange_ComputeAtTransmitTime, METH_VARARGS, NULL},
	 { (char *)"CorrectedEphemerisRange_rawrange_set", _wrap_CorrectedEphemerisRange_rawrange_set, METH_VARARGS, NULL},
	 { (char *)"CorrectedEphemerisRange_rawrange_get", _wrap_CorrectedEphemerisRange_rawrange_get, METH_VARARGS, NULL},
	 { (char *)"CorrectedEphemerisRange_svclkbias_set", _wrap_CorrectedEphemerisRange_svclkbias_set, METH_VARARGS, NULL},
	 { (char *)"CorrectedEphemerisRange_svclkbias_get", _wrap_CorrectedEphemerisRange_svclkbias_get, METH_VARARGS, NULL},
	 { (char *)"CorrectedEphemerisRange_svclkdrift_set", _wrap_CorrectedEphemerisRange_svclkdrift_set, METH_VARARGS, NULL},
	 { (char *)"CorrectedEphemerisRange_svclkdrift_get", _wrap_CorrectedEphemerisRange_svclkdrift_get, METH_VARARGS, NULL},
	 { (char *)"CorrectedEphemerisRange_relativity_set", _wrap_CorrectedEphemerisRange_relativity_set, METH_VARARGS, NULL},
	 { (char *)"CorrectedEphemerisRange_relativity_get", _wrap_CorrectedEphemerisRange_relativity_get, METH_VARARGS, NULL},
	 { (char *)"CorrectedEphemerisRange_elevation_set", _wrap_CorrectedEphemerisRange_elevation_set, METH_VARARGS, NULL},
	 { (char *)"CorrectedEphemerisRange_elevation_get", _wrap_CorrectedEphemerisRange_elevation_get, METH_VARARGS, NULL},
	 { (char *)"CorrectedEphemerisRange_azimuth_set", _wrap_CorrectedEphemerisRange_azimuth_set, METH_VARARGS, NULL},
	 { (char *)"CorrectedEphemerisRange_azimuth_get", _wrap_CorrectedEphemerisRange_azimuth_get, METH_VARARGS, NULL},
	 { (char *)"CorrectedEphemerisRange_transmit_set", _wrap_CorrectedEphemerisRange_transmit_set, METH_VARARGS, NULL},
	 { (char *)"CorrectedEphemerisRange_transmit_get", _wrap_CorrectedEphemerisRange_transmit_get, METH_VARARGS, NULL},
	 { (char *)"CorrectedEphemerisRange_cosines_set", _wrap_CorrectedEphemerisRange_cosines_set, METH_VARARGS, NULL},
	 { (char *)"CorrectedEphemerisRange_cosines_get", _wrap_CorrectedEphemerisRange_cosines_get, METH_VARARGS, NULL},
	 { (char *)"CorrectedEphemerisRange_svPosVel_set", _wrap_CorrectedEphemerisRange_svPosVel_set, METH_VARARGS, NULL},
	 { (char *)"CorrectedEphemerisRange_svPosVel_get", _wrap_CorrectedEphemerisRange_svPosVel_get, METH_VARARGS, NULL},
	 { (char *)"delete_CorrectedEphemerisRange", _wrap_delete_CorrectedEphemerisRange, METH_VARARGS, NULL},
	 { (char *)"CorrectedEphemerisRange_swigregister", CorrectedEphemerisRange_swigregister, METH_VARARGS, NULL},
	 { (char *)"RelativityCorrection", _wrap_RelativityCorrection, METH_VARARGS, NULL},
	 { (char *)"new_EngNav", _wrap_new_EngNav, METH_VARARGS, NULL},
	 { (char *)"delete_EngNav", _wrap_delete_EngNav, METH_VARARGS, NULL},
	 { (char *)"EngNav_subframeParity", _wrap_EngNav_subframeParity, METH_VARARGS, NULL},
	 { (char *)"EngNav_subframeConvert", _wrap_EngNav_subframeConvert, METH_VARARGS, NULL},
	 { (char *)"EngNav_convert8bit", _wrap_EngNav_convert8bit, METH_VARARGS, NULL},
	 { (char *)"EngNav_convert10bit", _wrap_EngNav_convert10bit, METH_VARARGS, NULL},
	 { (char *)"EngNav_getSubframePattern", _wrap_EngNav_getSubframePattern, METH_VARARGS, NULL},
	 { (char *)"EngNav_swigregister", EngNav_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_EngAlmanac", _wrap_new_EngAlmanac, METH_VARARGS, NULL},
	 { (char *)"delete_EngAlmanac", _wrap_delete_EngAlmanac, METH_VARARGS, NULL},
	 { (char *)"EngAlmanac_addSubframe", _wrap_EngAlmanac_addSubframe, METH_VARARGS, NULL},
	 { (char *)"EngAlmanac_isData", _wrap_EngAlmanac_isData, METH_VARARGS, NULL},
	 { (char *)"EngAlmanac_getEcc", _wrap_EngAlmanac_getEcc, METH_VARARGS, NULL},
	 { (char *)"EngAlmanac_getIOffset", _wrap_EngAlmanac_getIOffset, METH_VARARGS, NULL},
	 { (char *)"EngAlmanac_getOmegadot", _wrap_EngAlmanac_getOmegadot, METH_VARARGS, NULL},
	 { (char *)"EngAlmanac_getSVHealth", _wrap_EngAlmanac_getSVHealth, METH_VARARGS, NULL},
	 { (char *)"EngAlmanac_getAhalf", _wrap_EngAlmanac_getAhalf, METH_VARARGS, NULL},
	 { (char *)"EngAlmanac_getA", _wrap_EngAlmanac_getA, METH_VARARGS, NULL},
	 { (char *)"EngAlmanac_getOmega0", _wrap_EngAlmanac_getOmega0, METH_VARARGS, NULL},
	 { (char *)"EngAlmanac_getW", _wrap_EngAlmanac_getW, METH_VARARGS, NULL},
	 { (char *)"EngAlmanac_getM0", _wrap_EngAlmanac_getM0, METH_VARARGS, NULL},
	 { (char *)"EngAlmanac_getAf0", _wrap_EngAlmanac_getAf0, METH_VARARGS, NULL},
	 { (char *)"EngAlmanac_getAf1", _wrap_EngAlmanac_getAf1, METH_VARARGS, NULL},
	 { (char *)"EngAlmanac_getToa", _wrap_EngAlmanac_getToa, METH_VARARGS, NULL},
	 { (char *)"EngAlmanac_getXmitTime", _wrap_EngAlmanac_getXmitTime, METH_VARARGS, NULL},
	 { (char *)"EngAlmanac_getFullWeek", _wrap_EngAlmanac_getFullWeek, METH_VARARGS, NULL},
	 { (char *)"EngAlmanac_getIon", _wrap_EngAlmanac_getIon, METH_VARARGS, NULL},
	 { (char *)"EngAlmanac_getUTC", _wrap_EngAlmanac_getUTC, METH_VARARGS, NULL},
	 { (char *)"EngAlmanac_getAlmWeek", _wrap_EngAlmanac_getAlmWeek, METH_VARARGS, NULL},
	 { (char *)"EngAlmanac_getAlmOrbElem", _wrap_EngAlmanac_getAlmOrbElem, METH_VARARGS, NULL},
	 { (char *)"EngAlmanac_getAlmOrbElems", _wrap_EngAlmanac_getAlmOrbElems, METH_VARARGS, NULL},
	 { (char *)"EngAlmanac_svXvt", _wrap_EngAlmanac_svXvt, METH_VARARGS, NULL},
	 { (char *)"EngAlmanac_swigregister", EngAlmanac_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_EngEphemeris", _wrap_new_EngEphemeris, METH_VARARGS, NULL},
	 { (char *)"delete_EngEphemeris", _wrap_delete_EngEphemeris, METH_VARARGS, NULL},
	 { (char *)"EngEphemeris_addSubframe", _wrap_EngEphemeris_addSubframe, METH_VARARGS, NULL},
	 { (char *)"EngEphemeris_isData", _wrap_EngEphemeris_isData, METH_VARARGS, NULL},
	 { (char *)"EngEphemeris_setAccuracy", _wrap_EngEphemeris_setAccuracy, METH_VARARGS, NULL},
	 { (char *)"EngEphemeris_getFitInterval", _wrap_EngEphemeris_getFitInterval, METH_VARARGS, NULL},
	 { (char *)"EngEphemeris_getTLMPreamble", _wrap_EngEphemeris_getTLMPreamble, METH_VARARGS, NULL},
	 { (char *)"EngEphemeris_getTLMMessage", _wrap_EngEphemeris_getTLMMessage, METH_VARARGS, NULL},
	 { (char *)"EngEphemeris_getEphemerisEpoch", _wrap_EngEphemeris_getEphemerisEpoch, METH_VARARGS, NULL},
	 { (char *)"EngEphemeris_getEpochTime", _wrap_EngEphemeris_getEpochTime, METH_VARARGS, NULL},
	 { (char *)"EngEphemeris_getTransmitTime", _wrap_EngEphemeris_getTransmitTime, METH_VARARGS, NULL},
	 { (char *)"EngEphemeris_getTimestamp", _wrap_EngEphemeris_getTimestamp, METH_VARARGS, NULL},
	 { (char *)"EngEphemeris_getPRNID", _wrap_EngEphemeris_getPRNID, METH_VARARGS, NULL},
	 { (char *)"EngEphemeris_getTracker", _wrap_EngEphemeris_getTracker, METH_VARARGS, NULL},
	 { (char *)"EngEphemeris_getHOWTime", _wrap_EngEphemeris_getHOWTime, METH_VARARGS, NULL},
	 { (char *)"EngEphemeris_getASAlert", _wrap_EngEphemeris_getASAlert, METH_VARARGS, NULL},
	 { (char *)"EngEphemeris_getFullWeek", _wrap_EngEphemeris_getFullWeek, METH_VARARGS, NULL},
	 { (char *)"EngEphemeris_getCodeFlags", _wrap_EngEphemeris_getCodeFlags, METH_VARARGS, NULL},
	 { (char *)"EngEphemeris_getAccuracy", _wrap_EngEphemeris_getAccuracy, METH_VARARGS, NULL},
	 { (char *)"EngEphemeris_getAccFlag", _wrap_EngEphemeris_getAccFlag, METH_VARARGS, NULL},
	 { (char *)"EngEphemeris_getHealth", _wrap_EngEphemeris_getHealth, METH_VARARGS, NULL},
	 { (char *)"EngEphemeris_getL2Pdata", _wrap_EngEphemeris_getL2Pdata, METH_VARARGS, NULL},
	 { (char *)"EngEphemeris_getIODC", _wrap_EngEphemeris_getIODC, METH_VARARGS, NULL},
	 { (char *)"EngEphemeris_getIODE", _wrap_EngEphemeris_getIODE, METH_VARARGS, NULL},
	 { (char *)"EngEphemeris_getToc", _wrap_EngEphemeris_getToc, METH_VARARGS, NULL},
	 { (char *)"EngEphemeris_getAf0", _wrap_EngEphemeris_getAf0, METH_VARARGS, NULL},
	 { (char *)"EngEphemeris_getAf1", _wrap_EngEphemeris_getAf1, METH_VARARGS, NULL},
	 { (char *)"EngEphemeris_getAf2", _wrap_EngEphemeris_getAf2, METH_VARARGS, NULL},
	 { (char *)"EngEphemeris_getTgd", _wrap_EngEphemeris_getTgd, METH_VARARGS, NULL},
	 { (char *)"EngEphemeris_getCus", _wrap_EngEphemeris_getCus, METH_VARARGS, NULL},
	 { (char *)"EngEphemeris_getCrs", _wrap_EngEphemeris_getCrs, METH_VARARGS, NULL},
	 { (char *)"EngEphemeris_getCis", _wrap_EngEphemeris_getCis, METH_VARARGS, NULL},
	 { (char *)"EngEphemeris_getCrc", _wrap_EngEphemeris_getCrc, METH_VARARGS, NULL},
	 { (char *)"EngEphemeris_getCuc", _wrap_EngEphemeris_getCuc, METH_VARARGS, NULL},
	 { (char *)"EngEphemeris_getCic", _wrap_EngEphemeris_getCic, METH_VARARGS, NULL},
	 { (char *)"EngEphemeris_getToe", _wrap_EngEphemeris_getToe, METH_VARARGS, NULL},
	 { (char *)"EngEphemeris_getM0", _wrap_EngEphemeris_getM0, METH_VARARGS, NULL},
	 { (char *)"EngEphemeris_getDn", _wrap_EngEphemeris_getDn, METH_VARARGS, NULL},
	 { (char *)"EngEphemeris_getEcc", _wrap_EngEphemeris_getEcc, METH_VARARGS, NULL},
	 { (char *)"EngEphemeris_getAhalf", _wrap_EngEphemeris_getAhalf, METH_VARARGS, NULL},
	 { (char *)"EngEphemeris_getA", _wrap_EngEphemeris_getA, METH_VARARGS, NULL},
	 { (char *)"EngEphemeris_getOmega0", _wrap_EngEphemeris_getOmega0, METH_VARARGS, NULL},
	 { (char *)"EngEphemeris_getI0", _wrap_EngEphemeris_getI0, METH_VARARGS, NULL},
	 { (char *)"EngEphemeris_getW", _wrap_EngEphemeris_getW, METH_VARARGS, NULL},
	 { (char *)"EngEphemeris_getOmegaDot", _wrap_EngEphemeris_getOmegaDot, METH_VARARGS, NULL},
	 { (char *)"EngEphemeris_getIDot", _wrap_EngEphemeris_getIDot, METH_VARARGS, NULL},
	 { (char *)"EngEphemeris_svXvt", _wrap_EngEphemeris_svXvt, METH_VARARGS, NULL},
	 { (char *)"EngEphemeris_svRelativity", _wrap_EngEphemeris_svRelativity, METH_VARARGS, NULL},
	 { (char *)"EngEphemeris_svClockBias", _wrap_EngEphemeris_svClockBias, METH_VARARGS, NULL},
	 { (char *)"EngEphemeris_svClockDrift", _wrap_EngEphemeris_svClockDrift, METH_VARARGS, NULL},
	 { (char *)"EngEphemeris_getFitInt", _wrap_EngEphemeris_getFitInt, METH_VARARGS, NULL},
	 { (char *)"EngEphemeris_getTot", _wrap_EngEphemeris_getTot, METH_VARARGS, NULL},
	 { (char *)"EngEphemeris_setSF1", _wrap_EngEphemeris_setSF1, METH_VARARGS, NULL},
	 { (char *)"EngEphemeris_setSF2", _wrap_EngEphemeris_setSF2, METH_VARARGS, NULL},
	 { (char *)"EngEphemeris_setSF3", _wrap_EngEphemeris_setSF3, METH_VARARGS, NULL},
	 { (char *)"EngEphemeris_dump", _wrap_EngEphemeris_dump, METH_VARARGS, NULL},
	 { (char *)"EngEphemeris_swigregister", EngEphemeris_swigregister, METH_VARARGS, NULL},
	 { (char *)"delete_GPSZcount", _wrap_delete_GPSZcount, METH_VARARGS, NULL},
	 { (char *)"new_GPSZcount", _wrap_new_GPSZcount, METH_VARARGS, NULL},
	 { (char *)"GPSZcount_getWeek", _wrap_GPSZcount_getWeek, METH_VARARGS, NULL},
	 { (char *)"GPSZcount_getZcount", _wrap_GPSZcount_getZcount, METH_VARARGS, NULL},
	 { (char *)"GPSZcount_getFullZcount", _wrap_GPSZcount_getFullZcount, METH_VARARGS, NULL},
	 { (char *)"GPSZcount_getTotalZcounts", _wrap_GPSZcount_getTotalZcounts, METH_VARARGS, NULL},
	 { (char *)"GPSZcount_setWeek", _wrap_GPSZcount_setWeek, METH_VARARGS, NULL},
	 { (char *)"GPSZcount_setZcount", _wrap_GPSZcount_setZcount, METH_VARARGS, NULL},
	 { (char *)"GPSZcount_setFullZcount", _wrap_GPSZcount_setFullZcount, METH_VARARGS, NULL},
	 { (char *)"GPSZcount_addWeeks", _wrap_GPSZcount_addWeeks, METH_VARARGS, NULL},
	 { (char *)"GPSZcount_addZcounts", _wrap_GPSZcount_addZcounts, METH_VARARGS, NULL},
	 { (char *)"GPSZcount___add__", _wrap_GPSZcount___add__, METH_VARARGS, NULL},
	 { (char *)"GPSZcount___sub__", _wrap_GPSZcount___sub__, METH_VARARGS, NULL},
	 { (char *)"GPSZcount___iadd__", _wrap_GPSZcount___iadd__, METH_VARARGS, NULL},
	 { (char *)"GPSZcount___isub__", _wrap_GPSZcount___isub__, METH_VARARGS, NULL},
	 { (char *)"GPSZcount_class_operator_assignment", _wrap_GPSZcount_class_operator_assignment, METH_VARARGS, NULL},
	 { (char *)"GPSZcount___lt__", _wrap_GPSZcount___lt__, METH_VARARGS, NULL},
	 { (char *)"GPSZcount___gt__", _wrap_GPSZcount___gt__, METH_VARARGS, NULL},
	 { (char *)"GPSZcount___eq__", _wrap_GPSZcount___eq__, METH_VARARGS, NULL},
	 { (char *)"GPSZcount___ne__", _wrap_GPSZcount___ne__, METH_VARARGS, NULL},
	 { (char *)"GPSZcount___le__", _wrap_GPSZcount___le__, METH_VARARGS, NULL},
	 { (char *)"GPSZcount___ge__", _wrap_GPSZcount___ge__, METH_VARARGS, NULL},
	 { (char *)"GPSZcount_operator_std_string", _wrap_GPSZcount_operator_std_string, METH_VARARGS, NULL},
	 { (char *)"GPSZcount_inSameTimeBlock", _wrap_GPSZcount_inSameTimeBlock, METH_VARARGS, NULL},
	 { (char *)"GPSZcount_dump", _wrap_GPSZcount_dump, METH_VARARGS, NULL},
	 { (char *)"GPSZcount_swigregister", GPSZcount_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_DayTimeException", _wrap_new_DayTimeException, METH_VARARGS, NULL},
	 { (char *)"delete_DayTimeException", _wrap_delete_DayTimeException, METH_VARARGS, NULL},
	 { (char *)"DayTimeException_getName", _wrap_DayTimeException_getName, METH_VARARGS, NULL},
	 { (char *)"DayTimeException_class_operator_assignment", _wrap_DayTimeException_class_operator_assignment, METH_VARARGS, NULL},
	 { (char *)"DayTimeException_swigregister", DayTimeException_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_FormatException", _wrap_new_FormatException, METH_VARARGS, NULL},
	 { (char *)"delete_FormatException", _wrap_delete_FormatException, METH_VARARGS, NULL},
	 { (char *)"FormatException_getName", _wrap_FormatException_getName, METH_VARARGS, NULL},
	 { (char *)"FormatException_class_operator_assignment", _wrap_FormatException_class_operator_assignment, METH_VARARGS, NULL},
	 { (char *)"DayTimeException_streamRead", _wrap_DayTimeException_streamRead, METH_VARARGS, NULL},
	 { (char *)"FormatException_swigregister", FormatException_swigregister, METH_VARARGS, NULL},
	 { (char *)"DayTime_setDayTimeTolerance", _wrap_DayTime_setDayTimeTolerance, METH_VARARGS, NULL},
	 { (char *)"DayTime_getDayTimeTolerance", _wrap_DayTime_getDayTimeTolerance, METH_VARARGS, NULL},
	 { (char *)"DayTime_setTolerance", _wrap_DayTime_setTolerance, METH_VARARGS, NULL},
	 { (char *)"DayTime_getTolerance", _wrap_DayTime_getTolerance, METH_VARARGS, NULL},
	 { (char *)"delete_DayTime", _wrap_delete_DayTime, METH_VARARGS, NULL},
	 { (char *)"new_DayTime", _wrap_new_DayTime, METH_VARARGS, NULL},
	 { (char *)"DayTime_class_operator_assignment", _wrap_DayTime_class_operator_assignment, METH_VARARGS, NULL},
	 { (char *)"DayTime___add__", _wrap_DayTime___add__, METH_VARARGS, NULL},
	 { (char *)"DayTime___sub__", _wrap_DayTime___sub__, METH_VARARGS, NULL},
	 { (char *)"DayTime___iadd__", _wrap_DayTime___iadd__, METH_VARARGS, NULL},
	 { (char *)"DayTime___isub__", _wrap_DayTime___isub__, METH_VARARGS, NULL},
	 { (char *)"DayTime_addSeconds", _wrap_DayTime_addSeconds, METH_VARARGS, NULL},
	 { (char *)"DayTime_addMilliSeconds", _wrap_DayTime_addMilliSeconds, METH_VARARGS, NULL},
	 { (char *)"DayTime_addMicroSeconds", _wrap_DayTime_addMicroSeconds, METH_VARARGS, NULL},
	 { (char *)"DayTime___eq__", _wrap_DayTime___eq__, METH_VARARGS, NULL},
	 { (char *)"DayTime___ne__", _wrap_DayTime___ne__, METH_VARARGS, NULL},
	 { (char *)"DayTime___lt__", _wrap_DayTime___lt__, METH_VARARGS, NULL},
	 { (char *)"DayTime___gt__", _wrap_DayTime___gt__, METH_VARARGS, NULL},
	 { (char *)"DayTime___le__", _wrap_DayTime___le__, METH_VARARGS, NULL},
	 { (char *)"DayTime___ge__", _wrap_DayTime___ge__, METH_VARARGS, NULL},
	 { (char *)"DayTime_setAllButTimeFrame", _wrap_DayTime_setAllButTimeFrame, METH_VARARGS, NULL},
	 { (char *)"DayTime_setTimeFrame", _wrap_DayTime_setTimeFrame, METH_VARARGS, NULL},
	 { (char *)"DayTime_getTimeFrame", _wrap_DayTime_getTimeFrame, METH_VARARGS, NULL},
	 { (char *)"DayTime_JD", _wrap_DayTime_JD, METH_VARARGS, NULL},
	 { (char *)"DayTime_MJD", _wrap_DayTime_MJD, METH_VARARGS, NULL},
	 { (char *)"DayTime_year", _wrap_DayTime_year, METH_VARARGS, NULL},
	 { (char *)"DayTime_month", _wrap_DayTime_month, METH_VARARGS, NULL},
	 { (char *)"DayTime_day", _wrap_DayTime_day, METH_VARARGS, NULL},
	 { (char *)"DayTime_dayOfWeek", _wrap_DayTime_dayOfWeek, METH_VARARGS, NULL},
	 { (char *)"DayTime_getYMD", _wrap_DayTime_getYMD, METH_VARARGS, NULL},
	 { (char *)"DayTime_hour", _wrap_DayTime_hour, METH_VARARGS, NULL},
	 { (char *)"DayTime_minute", _wrap_DayTime_minute, METH_VARARGS, NULL},
	 { (char *)"DayTime_second", _wrap_DayTime_second, METH_VARARGS, NULL},
	 { (char *)"DayTime_secOfDay", _wrap_DayTime_secOfDay, METH_VARARGS, NULL},
	 { (char *)"DayTime_GPS10bitweek", _wrap_DayTime_GPS10bitweek, METH_VARARGS, NULL},
	 { (char *)"DayTime_GPSzcount", _wrap_DayTime_GPSzcount, METH_VARARGS, NULL},
	 { (char *)"DayTime_GPSzcountFloor", _wrap_DayTime_GPSzcountFloor, METH_VARARGS, NULL},
	 { (char *)"DayTime_GPSsecond", _wrap_DayTime_GPSsecond, METH_VARARGS, NULL},
	 { (char *)"DayTime_GPSsow", _wrap_DayTime_GPSsow, METH_VARARGS, NULL},
	 { (char *)"DayTime_GPSday", _wrap_DayTime_GPSday, METH_VARARGS, NULL},
	 { (char *)"DayTime_GPSfullweek", _wrap_DayTime_GPSfullweek, METH_VARARGS, NULL},
	 { (char *)"DayTime_GPSyear", _wrap_DayTime_GPSyear, METH_VARARGS, NULL},
	 { (char *)"DayTime_DOYyear", _wrap_DayTime_DOYyear, METH_VARARGS, NULL},
	 { (char *)"DayTime_DOYday", _wrap_DayTime_DOYday, METH_VARARGS, NULL},
	 { (char *)"DayTime_DOY", _wrap_DayTime_DOY, METH_VARARGS, NULL},
	 { (char *)"DayTime_DOYsecond", _wrap_DayTime_DOYsecond, METH_VARARGS, NULL},
	 { (char *)"DayTime_MJDdate", _wrap_DayTime_MJDdate, METH_VARARGS, NULL},
	 { (char *)"DayTime_getMJDasLongDouble", _wrap_DayTime_getMJDasLongDouble, METH_VARARGS, NULL},
	 { (char *)"DayTime_unixTime", _wrap_DayTime_unixTime, METH_VARARGS, NULL},
	 { (char *)"DayTime_fullZcount", _wrap_DayTime_fullZcount, METH_VARARGS, NULL},
	 { (char *)"DayTime_fullZcountFloor", _wrap_DayTime_fullZcountFloor, METH_VARARGS, NULL},
	 { (char *)"DayTime_Operator_GPSZcount", _wrap_DayTime_Operator_GPSZcount, METH_VARARGS, NULL},
	 { (char *)"DayTime_setYMDHMS", _wrap_DayTime_setYMDHMS, METH_VARARGS, NULL},
	 { (char *)"DayTime_setGPS", _wrap_DayTime_setGPS, METH_VARARGS, NULL},
	 { (char *)"DayTime_setGPSfullweek", _wrap_DayTime_setGPSfullweek, METH_VARARGS, NULL},
	 { (char *)"DayTime_setGPSZcount", _wrap_DayTime_setGPSZcount, METH_VARARGS, NULL},
	 { (char *)"DayTime_setYDoySod", _wrap_DayTime_setYDoySod, METH_VARARGS, NULL},
	 { (char *)"DayTime_setMJD", _wrap_DayTime_setMJD, METH_VARARGS, NULL},
	 { (char *)"DayTime_setMJDdate", _wrap_DayTime_setMJDdate, METH_VARARGS, NULL},
	 { (char *)"DayTime_setUnix", _wrap_DayTime_setUnix, METH_VARARGS, NULL},
	 { (char *)"DayTime_setANSI", _wrap_DayTime_setANSI, METH_VARARGS, NULL},
	 { (char *)"DayTime_setSystemTime", _wrap_DayTime_setSystemTime, METH_VARARGS, NULL},
	 { (char *)"DayTime_setLocalTime", _wrap_DayTime_setLocalTime, METH_VARARGS, NULL},
	 { (char *)"DayTime_setYMD", _wrap_DayTime_setYMD, METH_VARARGS, NULL},
	 { (char *)"DayTime_setHMS", _wrap_DayTime_setHMS, METH_VARARGS, NULL},
	 { (char *)"DayTime_setSecOfDay", _wrap_DayTime_setSecOfDay, METH_VARARGS, NULL},
	 { (char *)"DayTime_setYDoy", _wrap_DayTime_setYDoy, METH_VARARGS, NULL},
	 { (char *)"DayTime_setToString", _wrap_DayTime_setToString, METH_VARARGS, NULL},
	 { (char *)"DayTime_printf", _wrap_DayTime_printf, METH_VARARGS, NULL},
	 { (char *)"DayTime_printf_std_string", _wrap_DayTime_printf_std_string, METH_VARARGS, NULL},
	 { (char *)"DayTime_asString", _wrap_DayTime_asString, METH_VARARGS, NULL},
	 { (char *)"DayTime_dump", _wrap_DayTime_dump, METH_VARARGS, NULL},
	 { (char *)"DayTime_convertJDtoCalendar", _wrap_DayTime_convertJDtoCalendar, METH_VARARGS, NULL},
	 { (char *)"DayTime_convertCalendarToJD", _wrap_DayTime_convertCalendarToJD, METH_VARARGS, NULL},
	 { (char *)"DayTime_convertSODtoTime", _wrap_DayTime_convertSODtoTime, METH_VARARGS, NULL},
	 { (char *)"DayTime_convertTimeToSOD", _wrap_DayTime_convertTimeToSOD, METH_VARARGS, NULL},
	 { (char *)"DayTime_swigregister", DayTime_swigregister, METH_VARARGS, NULL},
	 { (char *)"__lshift__", _wrap___lshift__, METH_VARARGS, NULL},
	 { (char *)"new_ObsRngDev", _wrap_new_ObsRngDev, METH_VARARGS, NULL},
	 { (char *)"delete_ObsRngDev", _wrap_delete_ObsRngDev, METH_VARARGS, NULL},
	 { (char *)"ObsRngDev_getTime", _wrap_ObsRngDev_getTime, METH_VARARGS, NULL},
	 { (char *)"ObsRngDev_getPRN", _wrap_ObsRngDev_getPRN, METH_VARARGS, NULL},
	 { (char *)"ObsRngDev_getAzimuth", _wrap_ObsRngDev_getAzimuth, METH_VARARGS, NULL},
	 { (char *)"ObsRngDev_getElevation", _wrap_ObsRngDev_getElevation, METH_VARARGS, NULL},
	 { (char *)"ObsRngDev_getHealth", _wrap_ObsRngDev_getHealth, METH_VARARGS, NULL},
	 { (char *)"ObsRngDev_getIODC", _wrap_ObsRngDev_getIODC, METH_VARARGS, NULL},
	 { (char *)"ObsRngDev_getORD", _wrap_ObsRngDev_getORD, METH_VARARGS, NULL},
	 { (char *)"ObsRngDev_getIono", _wrap_ObsRngDev_getIono, METH_VARARGS, NULL},
	 { (char *)"ObsRngDev_getTrop", _wrap_ObsRngDev_getTrop, METH_VARARGS, NULL},
	 { (char *)"ObsRngDev_applyClockOffset", _wrap_ObsRngDev_applyClockOffset, METH_VARARGS, NULL},
	 { (char *)"ObsRngDev_swigregister", ObsRngDev_swigregister, METH_VARARGS, NULL},
	 { (char *)"ORDEpoch_removeORD", _wrap_ORDEpoch_removeORD, METH_VARARGS, NULL},
	 { (char *)"ORDEpoch_applyClockModel", _wrap_ORDEpoch_applyClockModel, METH_VARARGS, NULL},
	 { (char *)"ORDEpoch_clockOffset_set", _wrap_ORDEpoch_clockOffset_set, METH_VARARGS, NULL},
	 { (char *)"ORDEpoch_clockOffset_get", _wrap_ORDEpoch_clockOffset_get, METH_VARARGS, NULL},
	 { (char *)"ORDEpoch_validClock_set", _wrap_ORDEpoch_validClock_set, METH_VARARGS, NULL},
	 { (char *)"ORDEpoch_validClock_get", _wrap_ORDEpoch_validClock_get, METH_VARARGS, NULL},
	 { (char *)"ORDEpoch_ords_set", _wrap_ORDEpoch_ords_set, METH_VARARGS, NULL},
	 { (char *)"ORDEpoch_ords_get", _wrap_ORDEpoch_ords_get, METH_VARARGS, NULL},
	 { (char *)"ORDEpoch_time_set", _wrap_ORDEpoch_time_set, METH_VARARGS, NULL},
	 { (char *)"ORDEpoch_time_get", _wrap_ORDEpoch_time_get, METH_VARARGS, NULL},
	 { (char *)"streamRead", _wrap_streamRead, METH_VARARGS, NULL},
	 { (char *)"new_ORDEpoch", _wrap_new_ORDEpoch, METH_VARARGS, NULL},
	 { (char *)"delete_ORDEpoch", _wrap_delete_ORDEpoch, METH_VARARGS, NULL},
	 { (char *)"ORDEpoch_swigregister", ORDEpoch_swigregister, METH_VARARGS, NULL},
	 { (char *)"DayTime_streamRead", _wrap_DayTime_streamRead, METH_VARARGS, NULL},
	 { NULL, NULL, 0, NULL }
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_gpstk__RinexObsHeaderTo_p_gpstk__RinexObsBase(void *x) {
    return (void *)((gpstk::RinexObsBase *)  ((gpstk::RinexObsHeader *) x));
}
static void *_p_gpstk__RinexObsDataTo_p_gpstk__RinexObsBase(void *x) {
    return (void *)((gpstk::RinexObsBase *)  ((gpstk::RinexObsData *) x));
}
static void *_p_gpstk__ECEFTo_p_gpstk__Triple(void *x) {
    return (void *)((gpstk::Triple *)  ((gpstk::ECEF *) x));
}
static void *_p_gpstk__PositionTo_p_gpstk__Triple(void *x) {
    return (void *)((gpstk::Triple *)  ((gpstk::Position *) x));
}
static void *_p_gpstk__GeodeticTo_p_gpstk__Triple(void *x) {
    return (void *)((gpstk::Triple *)  ((gpstk::Geodetic *) x));
}
static void *_p_gpstk__FICDataTo_p_gpstk__FFData(void *x) {
    return (void *)((gpstk::FFData *) (gpstk::FICBase *) ((gpstk::FICData *) x));
}
static void *_p_gpstk__RinexNavBaseTo_p_gpstk__FFData(void *x) {
    return (void *)((gpstk::FFData *)  ((gpstk::RinexNavBase *) x));
}
static void *_p_gpstk__FICBaseTo_p_gpstk__FFData(void *x) {
    return (void *)((gpstk::FFData *)  ((gpstk::FICBase *) x));
}
static void *_p_gpstk__RinexObsDataTo_p_gpstk__FFData(void *x) {
    return (void *)((gpstk::FFData *) (gpstk::RinexObsBase *) ((gpstk::RinexObsData *) x));
}
static void *_p_gpstk__FICHeaderTo_p_gpstk__FFData(void *x) {
    return (void *)((gpstk::FFData *) (gpstk::FICBase *) ((gpstk::FICHeader *) x));
}
static void *_p_gpstk__SP3HeaderTo_p_gpstk__FFData(void *x) {
    return (void *)((gpstk::FFData *) (gpstk::SP3Base *) ((gpstk::SP3Header *) x));
}
static void *_p_gpstk__RinexObsHeaderTo_p_gpstk__FFData(void *x) {
    return (void *)((gpstk::FFData *) (gpstk::RinexObsBase *) ((gpstk::RinexObsHeader *) x));
}
static void *_p_gpstk__SP3DataTo_p_gpstk__FFData(void *x) {
    return (void *)((gpstk::FFData *) (gpstk::SP3Base *) ((gpstk::SP3Data *) x));
}
static void *_p_gpstk__RinexObsBaseTo_p_gpstk__FFData(void *x) {
    return (void *)((gpstk::FFData *)  ((gpstk::RinexObsBase *) x));
}
static void *_p_gpstk__RinexMetDataTo_p_gpstk__FFData(void *x) {
    return (void *)((gpstk::FFData *) (gpstk::RinexMetBase *) ((gpstk::RinexMetData *) x));
}
static void *_p_gpstk__RinexMetHeaderTo_p_gpstk__FFData(void *x) {
    return (void *)((gpstk::FFData *) (gpstk::RinexMetBase *) ((gpstk::RinexMetHeader *) x));
}
static void *_p_gpstk__RinexNavHeaderTo_p_gpstk__FFData(void *x) {
    return (void *)((gpstk::FFData *) (gpstk::RinexNavBase *) ((gpstk::RinexNavHeader *) x));
}
static void *_p_gpstk__RinexNavDataTo_p_gpstk__FFData(void *x) {
    return (void *)((gpstk::FFData *) (gpstk::RinexNavBase *) ((gpstk::RinexNavData *) x));
}
static void *_p_gpstk__SP3BaseTo_p_gpstk__FFData(void *x) {
    return (void *)((gpstk::FFData *)  ((gpstk::SP3Base *) x));
}
static void *_p_gpstk__RinexMetBaseTo_p_gpstk__FFData(void *x) {
    return (void *)((gpstk::FFData *)  ((gpstk::RinexMetBase *) x));
}
static void *_p_gpstk__ZeroTropModelTo_p_gpstk__TropModel(void *x) {
    return (void *)((gpstk::TropModel *)  ((gpstk::ZeroTropModel *) x));
}
static void *_p_gpstk__SimpleTropModelTo_p_gpstk__TropModel(void *x) {
    return (void *)((gpstk::TropModel *)  ((gpstk::SimpleTropModel *) x));
}
static void *_p_gpstk__GGTropModelTo_p_gpstk__TropModel(void *x) {
    return (void *)((gpstk::TropModel *)  ((gpstk::GGTropModel *) x));
}
static void *_p_gpstk__GGHeightTropModelTo_p_gpstk__TropModel(void *x) {
    return (void *)((gpstk::TropModel *)  ((gpstk::GGHeightTropModel *) x));
}
static void *_p_gpstk__NBTropModelTo_p_gpstk__TropModel(void *x) {
    return (void *)((gpstk::TropModel *)  ((gpstk::NBTropModel *) x));
}
static void *_p_gpstk__AccessErrorTo_p_std__ios_base(void *x) {
    return (void *)((std::ios_base *) (std::basic_ios<char > *)(std::basic_ostream<char > *)(gpstk::Exception *) ((gpstk::AccessError *) x));
}
static void *_p_std__basic_iostreamTchar_std__char_traitsTchar_t_tTo_p_std__ios_base(void *x) {
    return (void *)((std::ios_base *) (std::basic_ios<char > *)(std::basic_istream<char > *) ((std::basic_iostream<char,std::char_traits<char > > *) x));
}
static void *_p_gpstk__InvalidParameterTo_p_std__ios_base(void *x) {
    return (void *)((std::ios_base *) (std::basic_ios<char > *)(std::basic_ostream<char > *)(gpstk::Exception *) ((gpstk::InvalidParameter *) x));
}
static void *_p_gpstk__OutOfMemoryTo_p_std__ios_base(void *x) {
    return (void *)((std::ios_base *) (std::basic_ios<char > *)(std::basic_ostream<char > *)(gpstk::Exception *) ((gpstk::OutOfMemory *) x));
}
static void *_p_gpstk__WrongBlockNumberTo_p_std__ios_base(void *x) {
    return (void *)((std::ios_base *) (std::basic_ios<char > *)(std::basic_ostream<char > *)(gpstk::Exception *) ((gpstk::WrongBlockNumber *) x));
}
static void *_p_std__basic_iosTchar_std__char_traitsTchar_t_tTo_p_std__ios_base(void *x) {
    return (void *)((std::ios_base *)  ((std::basic_ios<char,std::char_traits<char > > *) x));
}
static void *_p_std__basic_istreamTchar_std__char_traitsTchar_t_tTo_p_std__ios_base(void *x) {
    return (void *)((std::ios_base *) (std::basic_ios<char > *) ((std::basic_istream<char,std::char_traits<char > > *) x));
}
static void *_p_std__basic_ostreamTchar_std__char_traitsTchar_t_tTo_p_std__ios_base(void *x) {
    return (void *)((std::ios_base *) (std::basic_ios<char > *) ((std::basic_ostream<char,std::char_traits<char > > *) x));
}
static void *_p_gpstk__InvalidValueTo_p_std__ios_base(void *x) {
    return (void *)((std::ios_base *) (std::basic_ios<char > *)(std::basic_ostream<char > *)(gpstk::Exception *) ((gpstk::InvalidValue *) x));
}
static void *_p_gpstk__WrongBlockFormatTo_p_std__ios_base(void *x) {
    return (void *)((std::ios_base *) (std::basic_ios<char > *)(std::basic_ostream<char > *)(gpstk::Exception *) ((gpstk::WrongBlockFormat *) x));
}
static void *_p_gpstk__ObjectNotFoundTo_p_std__ios_base(void *x) {
    return (void *)((std::ios_base *) (std::basic_ios<char > *)(std::basic_ostream<char > *)(gpstk::Exception *)(gpstk::AccessError *) ((gpstk::ObjectNotFound *) x));
}
static void *_p_gpstk__SystemSemaphoreExceptionTo_p_std__ios_base(void *x) {
    return (void *)((std::ios_base *) (std::basic_ios<char > *)(std::basic_ostream<char > *)(gpstk::Exception *) ((gpstk::SystemSemaphoreException *) x));
}
static void *_p_gpstk__FileMissingExceptionTo_p_std__ios_base(void *x) {
    return (void *)((std::ios_base *) (std::basic_ios<char > *)(std::basic_ostream<char > *)(gpstk::Exception *) ((gpstk::FileMissingException *) x));
}
static void *_p_gpstk__ConfigurationExceptionTo_p_std__ios_base(void *x) {
    return (void *)((std::ios_base *) (std::basic_ios<char > *)(std::basic_ostream<char > *)(gpstk::Exception *) ((gpstk::ConfigurationException *) x));
}
static void *_p_gpstk__InvalidArgumentExceptionTo_p_std__ios_base(void *x) {
    return (void *)((std::ios_base *) (std::basic_ios<char > *)(std::basic_ostream<char > *)(gpstk::Exception *) ((gpstk::InvalidArgumentException *) x));
}
static void *_p_gpstk__IndexOutOfBoundsExceptionTo_p_std__ios_base(void *x) {
    return (void *)((std::ios_base *) (std::basic_ios<char > *)(std::basic_ostream<char > *)(gpstk::Exception *) ((gpstk::IndexOutOfBoundsException *) x));
}
static void *_p_gpstk__ExceptionTo_p_std__ios_base(void *x) {
    return (void *)((std::ios_base *) (std::basic_ios<char > *)(std::basic_ostream<char > *) ((gpstk::Exception *) x));
}
static void *_p_gpstk__SystemPipeExceptionTo_p_std__ios_base(void *x) {
    return (void *)((std::ios_base *) (std::basic_ios<char > *)(std::basic_ostream<char > *)(gpstk::Exception *) ((gpstk::SystemPipeException *) x));
}
static void *_p_gpstk__SystemQueueExceptionTo_p_std__ios_base(void *x) {
    return (void *)((std::ios_base *) (std::basic_ios<char > *)(std::basic_ostream<char > *)(gpstk::Exception *) ((gpstk::SystemQueueException *) x));
}
static void *_p_gpstk__FileHunterExceptionTo_p_std__ios_base(void *x) {
    return (void *)((std::ios_base *) (std::basic_ios<char > *)(std::basic_ostream<char > *)(gpstk::Exception *) ((gpstk::FileHunterException *) x));
}
static void *_p_gpstk__GeometryExceptionTo_p_std__ios_base(void *x) {
    return (void *)((std::ios_base *) (std::basic_ios<char > *)(std::basic_ostream<char > *)(gpstk::Exception *) ((gpstk::GeometryException *) x));
}
static void *_p_gpstk__NoGeoidExceptionTo_p_std__ios_base(void *x) {
    return (void *)((std::ios_base *) (std::basic_ios<char > *)(std::basic_ostream<char > *)(gpstk::Exception *) ((gpstk::NoGeoidException *) x));
}
static void *_p_DayTimeExceptionTo_p_std__ios_base(void *x) {
    return (void *)((std::ios_base *) (std::basic_ios<char > *)(std::basic_ostream<char > *)(gpstk::Exception *) ((DayTimeException *) x));
}
static void *_p_FormatExceptionTo_p_std__ios_base(void *x) {
    return (void *)((std::ios_base *) (std::basic_ios<char > *)(std::basic_ostream<char > *)(gpstk::Exception *) ((FormatException *) x));
}
static void *_p_gpstk__InvalidRequestTo_p_std__ios_base(void *x) {
    return (void *)((std::ios_base *) (std::basic_ios<char > *)(std::basic_ostream<char > *)(gpstk::Exception *) ((gpstk::InvalidRequest *) x));
}
static void *_p_gpstk__AssertionFailureTo_p_std__ios_base(void *x) {
    return (void *)((std::ios_base *) (std::basic_ios<char > *)(std::basic_ostream<char > *)(gpstk::Exception *) ((gpstk::AssertionFailure *) x));
}
static void *_p_f_r_std__ios_base__r_gpstk__AccessErrorTo_p_f_r_std__ios_base__r_std__ios_base(void *x) {
    return (void *)((std::ios_base &(*)(std::ios_base &)) (std::basic_ios<char > *)(std::basic_ostream<char > *)(gpstk::Exception *) ((gpstk::AccessError &(*)(std::ios_base &)) x));
}
static void *_p_f_r_std__ios_base__r_std__basic_iostreamTchar_std__char_traitsTchar_t_tTo_p_f_r_std__ios_base__r_std__ios_base(void *x) {
    return (void *)((std::ios_base &(*)(std::ios_base &)) (std::basic_ios<char > *)(std::basic_istream<char > *) ((std::basic_iostream<char,std::char_traits<char > > &(*)(std::ios_base &)) x));
}
static void *_p_f_r_std__ios_base__r_gpstk__InvalidParameterTo_p_f_r_std__ios_base__r_std__ios_base(void *x) {
    return (void *)((std::ios_base &(*)(std::ios_base &)) (std::basic_ios<char > *)(std::basic_ostream<char > *)(gpstk::Exception *) ((gpstk::InvalidParameter &(*)(std::ios_base &)) x));
}
static void *_p_f_r_std__ios_base__r_gpstk__OutOfMemoryTo_p_f_r_std__ios_base__r_std__ios_base(void *x) {
    return (void *)((std::ios_base &(*)(std::ios_base &)) (std::basic_ios<char > *)(std::basic_ostream<char > *)(gpstk::Exception *) ((gpstk::OutOfMemory &(*)(std::ios_base &)) x));
}
static void *_p_f_r_std__ios_base__r_gpstk__WrongBlockNumberTo_p_f_r_std__ios_base__r_std__ios_base(void *x) {
    return (void *)((std::ios_base &(*)(std::ios_base &)) (std::basic_ios<char > *)(std::basic_ostream<char > *)(gpstk::Exception *) ((gpstk::WrongBlockNumber &(*)(std::ios_base &)) x));
}
static void *_p_f_r_std__ios_base__r_std__basic_iosTchar_std__char_traitsTchar_t_tTo_p_f_r_std__ios_base__r_std__ios_base(void *x) {
    return (void *)((std::ios_base &(*)(std::ios_base &))  ((std::basic_ios<char,std::char_traits<char > > &(*)(std::ios_base &)) x));
}
static void *_p_f_r_std__ios_base__r_std__basic_istreamTchar_std__char_traitsTchar_t_tTo_p_f_r_std__ios_base__r_std__ios_base(void *x) {
    return (void *)((std::ios_base &(*)(std::ios_base &)) (std::basic_ios<char > *) ((std::basic_istream<char,std::char_traits<char > > &(*)(std::ios_base &)) x));
}
static void *_p_f_r_std__ios_base__r_std__basic_ostreamTchar_std__char_traitsTchar_t_tTo_p_f_r_std__ios_base__r_std__ios_base(void *x) {
    return (void *)((std::ios_base &(*)(std::ios_base &)) (std::basic_ios<char > *) ((std::basic_ostream<char,std::char_traits<char > > &(*)(std::ios_base &)) x));
}
static void *_p_f_r_std__ios_base__r_gpstk__InvalidValueTo_p_f_r_std__ios_base__r_std__ios_base(void *x) {
    return (void *)((std::ios_base &(*)(std::ios_base &)) (std::basic_ios<char > *)(std::basic_ostream<char > *)(gpstk::Exception *) ((gpstk::InvalidValue &(*)(std::ios_base &)) x));
}
static void *_p_f_r_std__ios_base__r_gpstk__WrongBlockFormatTo_p_f_r_std__ios_base__r_std__ios_base(void *x) {
    return (void *)((std::ios_base &(*)(std::ios_base &)) (std::basic_ios<char > *)(std::basic_ostream<char > *)(gpstk::Exception *) ((gpstk::WrongBlockFormat &(*)(std::ios_base &)) x));
}
static void *_p_f_r_std__ios_base__r_gpstk__ObjectNotFoundTo_p_f_r_std__ios_base__r_std__ios_base(void *x) {
    return (void *)((std::ios_base &(*)(std::ios_base &)) (std::basic_ios<char > *)(std::basic_ostream<char > *)(gpstk::Exception *)(gpstk::AccessError *) ((gpstk::ObjectNotFound &(*)(std::ios_base &)) x));
}
static void *_p_f_r_std__ios_base__r_gpstk__SystemSemaphoreExceptionTo_p_f_r_std__ios_base__r_std__ios_base(void *x) {
    return (void *)((std::ios_base &(*)(std::ios_base &)) (std::basic_ios<char > *)(std::basic_ostream<char > *)(gpstk::Exception *) ((gpstk::SystemSemaphoreException &(*)(std::ios_base &)) x));
}
static void *_p_f_r_std__ios_base__r_gpstk__FileMissingExceptionTo_p_f_r_std__ios_base__r_std__ios_base(void *x) {
    return (void *)((std::ios_base &(*)(std::ios_base &)) (std::basic_ios<char > *)(std::basic_ostream<char > *)(gpstk::Exception *) ((gpstk::FileMissingException &(*)(std::ios_base &)) x));
}
static void *_p_f_r_std__ios_base__r_gpstk__ConfigurationExceptionTo_p_f_r_std__ios_base__r_std__ios_base(void *x) {
    return (void *)((std::ios_base &(*)(std::ios_base &)) (std::basic_ios<char > *)(std::basic_ostream<char > *)(gpstk::Exception *) ((gpstk::ConfigurationException &(*)(std::ios_base &)) x));
}
static void *_p_f_r_std__ios_base__r_gpstk__InvalidArgumentExceptionTo_p_f_r_std__ios_base__r_std__ios_base(void *x) {
    return (void *)((std::ios_base &(*)(std::ios_base &)) (std::basic_ios<char > *)(std::basic_ostream<char > *)(gpstk::Exception *) ((gpstk::InvalidArgumentException &(*)(std::ios_base &)) x));
}
static void *_p_f_r_std__ios_base__r_gpstk__IndexOutOfBoundsExceptionTo_p_f_r_std__ios_base__r_std__ios_base(void *x) {
    return (void *)((std::ios_base &(*)(std::ios_base &)) (std::basic_ios<char > *)(std::basic_ostream<char > *)(gpstk::Exception *) ((gpstk::IndexOutOfBoundsException &(*)(std::ios_base &)) x));
}
static void *_p_f_r_std__ios_base__r_gpstk__ExceptionTo_p_f_r_std__ios_base__r_std__ios_base(void *x) {
    return (void *)((std::ios_base &(*)(std::ios_base &)) (std::basic_ios<char > *)(std::basic_ostream<char > *) ((gpstk::Exception &(*)(std::ios_base &)) x));
}
static void *_p_f_r_std__ios_base__r_gpstk__SystemPipeExceptionTo_p_f_r_std__ios_base__r_std__ios_base(void *x) {
    return (void *)((std::ios_base &(*)(std::ios_base &)) (std::basic_ios<char > *)(std::basic_ostream<char > *)(gpstk::Exception *) ((gpstk::SystemPipeException &(*)(std::ios_base &)) x));
}
static void *_p_f_r_std__ios_base__r_gpstk__SystemQueueExceptionTo_p_f_r_std__ios_base__r_std__ios_base(void *x) {
    return (void *)((std::ios_base &(*)(std::ios_base &)) (std::basic_ios<char > *)(std::basic_ostream<char > *)(gpstk::Exception *) ((gpstk::SystemQueueException &(*)(std::ios_base &)) x));
}
static void *_p_f_r_std__ios_base__r_gpstk__FileHunterExceptionTo_p_f_r_std__ios_base__r_std__ios_base(void *x) {
    return (void *)((std::ios_base &(*)(std::ios_base &)) (std::basic_ios<char > *)(std::basic_ostream<char > *)(gpstk::Exception *) ((gpstk::FileHunterException &(*)(std::ios_base &)) x));
}
static void *_p_f_r_std__ios_base__r_gpstk__GeometryExceptionTo_p_f_r_std__ios_base__r_std__ios_base(void *x) {
    return (void *)((std::ios_base &(*)(std::ios_base &)) (std::basic_ios<char > *)(std::basic_ostream<char > *)(gpstk::Exception *) ((gpstk::GeometryException &(*)(std::ios_base &)) x));
}
static void *_p_f_r_std__ios_base__r_gpstk__NoGeoidExceptionTo_p_f_r_std__ios_base__r_std__ios_base(void *x) {
    return (void *)((std::ios_base &(*)(std::ios_base &)) (std::basic_ios<char > *)(std::basic_ostream<char > *)(gpstk::Exception *) ((gpstk::NoGeoidException &(*)(std::ios_base &)) x));
}
static void *_p_f_r_std__ios_base__r_DayTimeExceptionTo_p_f_r_std__ios_base__r_std__ios_base(void *x) {
    return (void *)((std::ios_base &(*)(std::ios_base &)) (std::basic_ios<char > *)(std::basic_ostream<char > *)(gpstk::Exception *) ((DayTimeException &(*)(std::ios_base &)) x));
}
static void *_p_f_r_std__ios_base__r_FormatExceptionTo_p_f_r_std__ios_base__r_std__ios_base(void *x) {
    return (void *)((std::ios_base &(*)(std::ios_base &)) (std::basic_ios<char > *)(std::basic_ostream<char > *)(gpstk::Exception *) ((FormatException &(*)(std::ios_base &)) x));
}
static void *_p_f_r_std__ios_base__r_gpstk__InvalidRequestTo_p_f_r_std__ios_base__r_std__ios_base(void *x) {
    return (void *)((std::ios_base &(*)(std::ios_base &)) (std::basic_ios<char > *)(std::basic_ostream<char > *)(gpstk::Exception *) ((gpstk::InvalidRequest &(*)(std::ios_base &)) x));
}
static void *_p_f_r_std__ios_base__r_gpstk__AssertionFailureTo_p_f_r_std__ios_base__r_std__ios_base(void *x) {
    return (void *)((std::ios_base &(*)(std::ios_base &)) (std::basic_ios<char > *)(std::basic_ostream<char > *)(gpstk::Exception *) ((gpstk::AssertionFailure &(*)(std::ios_base &)) x));
}
static void *_p_gpstk__AccessErrorTo_p_gpstk__Exception(void *x) {
    return (void *)((gpstk::Exception *)  ((gpstk::AccessError *) x));
}
static void *_p_gpstk__InvalidParameterTo_p_gpstk__Exception(void *x) {
    return (void *)((gpstk::Exception *)  ((gpstk::InvalidParameter *) x));
}
static void *_p_gpstk__OutOfMemoryTo_p_gpstk__Exception(void *x) {
    return (void *)((gpstk::Exception *)  ((gpstk::OutOfMemory *) x));
}
static void *_p_gpstk__WrongBlockNumberTo_p_gpstk__Exception(void *x) {
    return (void *)((gpstk::Exception *)  ((gpstk::WrongBlockNumber *) x));
}
static void *_p_gpstk__InvalidValueTo_p_gpstk__Exception(void *x) {
    return (void *)((gpstk::Exception *)  ((gpstk::InvalidValue *) x));
}
static void *_p_gpstk__WrongBlockFormatTo_p_gpstk__Exception(void *x) {
    return (void *)((gpstk::Exception *)  ((gpstk::WrongBlockFormat *) x));
}
static void *_p_gpstk__ObjectNotFoundTo_p_gpstk__Exception(void *x) {
    return (void *)((gpstk::Exception *) (gpstk::AccessError *) ((gpstk::ObjectNotFound *) x));
}
static void *_p_gpstk__SystemQueueExceptionTo_p_gpstk__Exception(void *x) {
    return (void *)((gpstk::Exception *)  ((gpstk::SystemQueueException *) x));
}
static void *_p_gpstk__SystemPipeExceptionTo_p_gpstk__Exception(void *x) {
    return (void *)((gpstk::Exception *)  ((gpstk::SystemPipeException *) x));
}
static void *_p_gpstk__SystemSemaphoreExceptionTo_p_gpstk__Exception(void *x) {
    return (void *)((gpstk::Exception *)  ((gpstk::SystemSemaphoreException *) x));
}
static void *_p_gpstk__FileMissingExceptionTo_p_gpstk__Exception(void *x) {
    return (void *)((gpstk::Exception *)  ((gpstk::FileMissingException *) x));
}
static void *_p_gpstk__ConfigurationExceptionTo_p_gpstk__Exception(void *x) {
    return (void *)((gpstk::Exception *)  ((gpstk::ConfigurationException *) x));
}
static void *_p_gpstk__InvalidArgumentExceptionTo_p_gpstk__Exception(void *x) {
    return (void *)((gpstk::Exception *)  ((gpstk::InvalidArgumentException *) x));
}
static void *_p_gpstk__IndexOutOfBoundsExceptionTo_p_gpstk__Exception(void *x) {
    return (void *)((gpstk::Exception *)  ((gpstk::IndexOutOfBoundsException *) x));
}
static void *_p_gpstk__FileHunterExceptionTo_p_gpstk__Exception(void *x) {
    return (void *)((gpstk::Exception *)  ((gpstk::FileHunterException *) x));
}
static void *_p_gpstk__GeometryExceptionTo_p_gpstk__Exception(void *x) {
    return (void *)((gpstk::Exception *)  ((gpstk::GeometryException *) x));
}
static void *_p_gpstk__NoGeoidExceptionTo_p_gpstk__Exception(void *x) {
    return (void *)((gpstk::Exception *)  ((gpstk::NoGeoidException *) x));
}
static void *_p_DayTimeExceptionTo_p_gpstk__Exception(void *x) {
    return (void *)((gpstk::Exception *)  ((DayTimeException *) x));
}
static void *_p_FormatExceptionTo_p_gpstk__Exception(void *x) {
    return (void *)((gpstk::Exception *)  ((FormatException *) x));
}
static void *_p_gpstk__InvalidRequestTo_p_gpstk__Exception(void *x) {
    return (void *)((gpstk::Exception *)  ((gpstk::InvalidRequest *) x));
}
static void *_p_gpstk__AssertionFailureTo_p_gpstk__Exception(void *x) {
    return (void *)((gpstk::Exception *)  ((gpstk::AssertionFailure *) x));
}
static void *_p_std__logic_errorTo_p_std__exception(void *x) {
    return (void *)((std::exception *)  ((std::logic_error *) x));
}
static void *_p_std__runtime_errorTo_p_std__exception(void *x) {
    return (void *)((std::exception *)  ((std::runtime_error *) x));
}
static void *_p_std__range_errorTo_p_std__exception(void *x) {
    return (void *)((std::exception *) (std::runtime_error *) ((std::range_error *) x));
}
static void *_p_std__overflow_errorTo_p_std__exception(void *x) {
    return (void *)((std::exception *) (std::runtime_error *) ((std::overflow_error *) x));
}
static void *_p_std__underflow_errorTo_p_std__exception(void *x) {
    return (void *)((std::exception *) (std::runtime_error *) ((std::underflow_error *) x));
}
static void *_p_std__bad_exceptionTo_p_std__exception(void *x) {
    return (void *)((std::exception *)  ((std::bad_exception *) x));
}
static void *_p_std__domain_errorTo_p_std__exception(void *x) {
    return (void *)((std::exception *) (std::logic_error *) ((std::domain_error *) x));
}
static void *_p_std__length_errorTo_p_std__exception(void *x) {
    return (void *)((std::exception *) (std::logic_error *) ((std::length_error *) x));
}
static void *_p_std__out_of_rangeTo_p_std__exception(void *x) {
    return (void *)((std::exception *) (std::logic_error *) ((std::out_of_range *) x));
}
static void *_p_std__invalid_argumentTo_p_std__exception(void *x) {
    return (void *)((std::exception *) (std::logic_error *) ((std::invalid_argument *) x));
}
static void *_p_f_r_std__basic_ostream__char_std__char_traits__char______r_gpstk__AccessErrorTo_p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_ostreamTchar_std__char_traitsTchar_t_t(void *x) {
    return (void *)((std::basic_ostream<char,std::char_traits<char > > &(*)(std::basic_ostream<char,std::char_traits<char > > &)) (gpstk::Exception *) ((gpstk::AccessError &(*)(std::basic_ostream<char,std::char_traits<char > > &)) x));
}
static void *_p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_iostreamTchar_std__char_traitsTchar_t_tTo_p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_ostreamTchar_std__char_traitsTchar_t_t(void *x) {
    return (void *)((std::basic_ostream<char,std::char_traits<char > > &(*)(std::basic_ostream<char,std::char_traits<char > > &))  ((std::basic_iostream<char,std::char_traits<char > > &(*)(std::basic_ostream<char,std::char_traits<char > > &)) x));
}
static void *_p_f_r_std__basic_ostream__char_std__char_traits__char______r_gpstk__InvalidParameterTo_p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_ostreamTchar_std__char_traitsTchar_t_t(void *x) {
    return (void *)((std::basic_ostream<char,std::char_traits<char > > &(*)(std::basic_ostream<char,std::char_traits<char > > &)) (gpstk::Exception *) ((gpstk::InvalidParameter &(*)(std::basic_ostream<char,std::char_traits<char > > &)) x));
}
static void *_p_f_r_std__basic_ostream__char_std__char_traits__char______r_gpstk__OutOfMemoryTo_p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_ostreamTchar_std__char_traitsTchar_t_t(void *x) {
    return (void *)((std::basic_ostream<char,std::char_traits<char > > &(*)(std::basic_ostream<char,std::char_traits<char > > &)) (gpstk::Exception *) ((gpstk::OutOfMemory &(*)(std::basic_ostream<char,std::char_traits<char > > &)) x));
}
static void *_p_f_r_std__basic_ostream__char_std__char_traits__char______r_gpstk__WrongBlockNumberTo_p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_ostreamTchar_std__char_traitsTchar_t_t(void *x) {
    return (void *)((std::basic_ostream<char,std::char_traits<char > > &(*)(std::basic_ostream<char,std::char_traits<char > > &)) (gpstk::Exception *) ((gpstk::WrongBlockNumber &(*)(std::basic_ostream<char,std::char_traits<char > > &)) x));
}
static void *_p_f_r_std__basic_ostream__char_std__char_traits__char______r_gpstk__InvalidValueTo_p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_ostreamTchar_std__char_traitsTchar_t_t(void *x) {
    return (void *)((std::basic_ostream<char,std::char_traits<char > > &(*)(std::basic_ostream<char,std::char_traits<char > > &)) (gpstk::Exception *) ((gpstk::InvalidValue &(*)(std::basic_ostream<char,std::char_traits<char > > &)) x));
}
static void *_p_f_r_std__basic_ostream__char_std__char_traits__char______r_gpstk__WrongBlockFormatTo_p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_ostreamTchar_std__char_traitsTchar_t_t(void *x) {
    return (void *)((std::basic_ostream<char,std::char_traits<char > > &(*)(std::basic_ostream<char,std::char_traits<char > > &)) (gpstk::Exception *) ((gpstk::WrongBlockFormat &(*)(std::basic_ostream<char,std::char_traits<char > > &)) x));
}
static void *_p_f_r_std__basic_ostream__char_std__char_traits__char______r_gpstk__ObjectNotFoundTo_p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_ostreamTchar_std__char_traitsTchar_t_t(void *x) {
    return (void *)((std::basic_ostream<char,std::char_traits<char > > &(*)(std::basic_ostream<char,std::char_traits<char > > &)) (gpstk::Exception *)(gpstk::AccessError *) ((gpstk::ObjectNotFound &(*)(std::basic_ostream<char,std::char_traits<char > > &)) x));
}
static void *_p_f_r_std__basic_ostream__char_std__char_traits__char______r_gpstk__SystemQueueExceptionTo_p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_ostreamTchar_std__char_traitsTchar_t_t(void *x) {
    return (void *)((std::basic_ostream<char,std::char_traits<char > > &(*)(std::basic_ostream<char,std::char_traits<char > > &)) (gpstk::Exception *) ((gpstk::SystemQueueException &(*)(std::basic_ostream<char,std::char_traits<char > > &)) x));
}
static void *_p_f_r_std__basic_ostream__char_std__char_traits__char______r_gpstk__SystemPipeExceptionTo_p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_ostreamTchar_std__char_traitsTchar_t_t(void *x) {
    return (void *)((std::basic_ostream<char,std::char_traits<char > > &(*)(std::basic_ostream<char,std::char_traits<char > > &)) (gpstk::Exception *) ((gpstk::SystemPipeException &(*)(std::basic_ostream<char,std::char_traits<char > > &)) x));
}
static void *_p_f_r_std__basic_ostream__char_std__char_traits__char______r_gpstk__SystemSemaphoreExceptionTo_p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_ostreamTchar_std__char_traitsTchar_t_t(void *x) {
    return (void *)((std::basic_ostream<char,std::char_traits<char > > &(*)(std::basic_ostream<char,std::char_traits<char > > &)) (gpstk::Exception *) ((gpstk::SystemSemaphoreException &(*)(std::basic_ostream<char,std::char_traits<char > > &)) x));
}
static void *_p_f_r_std__basic_ostream__char_std__char_traits__char______r_gpstk__FileMissingExceptionTo_p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_ostreamTchar_std__char_traitsTchar_t_t(void *x) {
    return (void *)((std::basic_ostream<char,std::char_traits<char > > &(*)(std::basic_ostream<char,std::char_traits<char > > &)) (gpstk::Exception *) ((gpstk::FileMissingException &(*)(std::basic_ostream<char,std::char_traits<char > > &)) x));
}
static void *_p_f_r_std__basic_ostream__char_std__char_traits__char______r_gpstk__ConfigurationExceptionTo_p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_ostreamTchar_std__char_traitsTchar_t_t(void *x) {
    return (void *)((std::basic_ostream<char,std::char_traits<char > > &(*)(std::basic_ostream<char,std::char_traits<char > > &)) (gpstk::Exception *) ((gpstk::ConfigurationException &(*)(std::basic_ostream<char,std::char_traits<char > > &)) x));
}
static void *_p_f_r_std__basic_ostream__char_std__char_traits__char______r_gpstk__InvalidArgumentExceptionTo_p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_ostreamTchar_std__char_traitsTchar_t_t(void *x) {
    return (void *)((std::basic_ostream<char,std::char_traits<char > > &(*)(std::basic_ostream<char,std::char_traits<char > > &)) (gpstk::Exception *) ((gpstk::InvalidArgumentException &(*)(std::basic_ostream<char,std::char_traits<char > > &)) x));
}
static void *_p_f_r_std__basic_ostream__char_std__char_traits__char______r_gpstk__IndexOutOfBoundsExceptionTo_p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_ostreamTchar_std__char_traitsTchar_t_t(void *x) {
    return (void *)((std::basic_ostream<char,std::char_traits<char > > &(*)(std::basic_ostream<char,std::char_traits<char > > &)) (gpstk::Exception *) ((gpstk::IndexOutOfBoundsException &(*)(std::basic_ostream<char,std::char_traits<char > > &)) x));
}
static void *_p_f_r_std__basic_ostream__char_std__char_traits__char______r_gpstk__ExceptionTo_p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_ostreamTchar_std__char_traitsTchar_t_t(void *x) {
    return (void *)((std::basic_ostream<char,std::char_traits<char > > &(*)(std::basic_ostream<char,std::char_traits<char > > &))  ((gpstk::Exception &(*)(std::basic_ostream<char,std::char_traits<char > > &)) x));
}
static void *_p_f_r_std__basic_ostream__char_std__char_traits__char______r_gpstk__FileHunterExceptionTo_p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_ostreamTchar_std__char_traitsTchar_t_t(void *x) {
    return (void *)((std::basic_ostream<char,std::char_traits<char > > &(*)(std::basic_ostream<char,std::char_traits<char > > &)) (gpstk::Exception *) ((gpstk::FileHunterException &(*)(std::basic_ostream<char,std::char_traits<char > > &)) x));
}
static void *_p_f_r_std__basic_ostream__char_std__char_traits__char______r_gpstk__GeometryExceptionTo_p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_ostreamTchar_std__char_traitsTchar_t_t(void *x) {
    return (void *)((std::basic_ostream<char,std::char_traits<char > > &(*)(std::basic_ostream<char,std::char_traits<char > > &)) (gpstk::Exception *) ((gpstk::GeometryException &(*)(std::basic_ostream<char,std::char_traits<char > > &)) x));
}
static void *_p_f_r_std__basic_ostream__char_std__char_traits__char______r_gpstk__NoGeoidExceptionTo_p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_ostreamTchar_std__char_traitsTchar_t_t(void *x) {
    return (void *)((std::basic_ostream<char,std::char_traits<char > > &(*)(std::basic_ostream<char,std::char_traits<char > > &)) (gpstk::Exception *) ((gpstk::NoGeoidException &(*)(std::basic_ostream<char,std::char_traits<char > > &)) x));
}
static void *_p_f_r_std__basic_ostream__char_std__char_traits__char______r_DayTimeExceptionTo_p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_ostreamTchar_std__char_traitsTchar_t_t(void *x) {
    return (void *)((std::basic_ostream<char,std::char_traits<char > > &(*)(std::basic_ostream<char,std::char_traits<char > > &)) (gpstk::Exception *) ((DayTimeException &(*)(std::basic_ostream<char,std::char_traits<char > > &)) x));
}
static void *_p_f_r_std__basic_ostream__char_std__char_traits__char______r_FormatExceptionTo_p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_ostreamTchar_std__char_traitsTchar_t_t(void *x) {
    return (void *)((std::basic_ostream<char,std::char_traits<char > > &(*)(std::basic_ostream<char,std::char_traits<char > > &)) (gpstk::Exception *) ((FormatException &(*)(std::basic_ostream<char,std::char_traits<char > > &)) x));
}
static void *_p_f_r_std__basic_ostream__char_std__char_traits__char______r_gpstk__InvalidRequestTo_p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_ostreamTchar_std__char_traitsTchar_t_t(void *x) {
    return (void *)((std::basic_ostream<char,std::char_traits<char > > &(*)(std::basic_ostream<char,std::char_traits<char > > &)) (gpstk::Exception *) ((gpstk::InvalidRequest &(*)(std::basic_ostream<char,std::char_traits<char > > &)) x));
}
static void *_p_f_r_std__basic_ostream__char_std__char_traits__char______r_gpstk__AssertionFailureTo_p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_ostreamTchar_std__char_traitsTchar_t_t(void *x) {
    return (void *)((std::basic_ostream<char,std::char_traits<char > > &(*)(std::basic_ostream<char,std::char_traits<char > > &)) (gpstk::Exception *) ((gpstk::AssertionFailure &(*)(std::basic_ostream<char,std::char_traits<char > > &)) x));
}
static void *_p_f_r_std__basic_istream__char_std__char_traits__char______r_std__basic_iostreamTchar_std__char_traitsTchar_t_tTo_p_f_r_std__basic_istream__char_std__char_traits__char______r_std__basic_istreamTchar_std__char_traitsTchar_t_t(void *x) {
    return (void *)((std::basic_istream<char,std::char_traits<char > > &(*)(std::basic_istream<char,std::char_traits<char > > &))  ((std::basic_iostream<char,std::char_traits<char > > &(*)(std::basic_istream<char,std::char_traits<char > > &)) x));
}
static void *_p_gpstk__TabularEphemerisStoreTo_p_gpstk__EphemerisStore(void *x) {
    return (void *)((gpstk::EphemerisStore *)  ((gpstk::TabularEphemerisStore *) x));
}
static void *_p_gpstk__BCEphemerisStoreTo_p_gpstk__EphemerisStore(void *x) {
    return (void *)((gpstk::EphemerisStore *)  ((gpstk::BCEphemerisStore *) x));
}
static void *_p_gpstk__RinexEphemerisStoreTo_p_gpstk__EphemerisStore(void *x) {
    return (void *)((gpstk::EphemerisStore *) (gpstk::BCEphemerisStore *) ((gpstk::RinexEphemerisStore *) x));
}
static void *_p_gpstk__SP3EphemerisStoreTo_p_gpstk__EphemerisStore(void *x) {
    return (void *)((gpstk::EphemerisStore *) (gpstk::TabularEphemerisStore *) ((gpstk::SP3EphemerisStore *) x));
}
static void *_p_gpstk__RinexEphemerisStoreTo_p_gpstk__BCEphemerisStore(void *x) {
    return (void *)((gpstk::BCEphemerisStore *)  ((gpstk::RinexEphemerisStore *) x));
}
static void *_p_gpstk__SP3EphemerisStoreTo_p_gpstk__TabularEphemerisStore(void *x) {
    return (void *)((gpstk::TabularEphemerisStore *)  ((gpstk::SP3EphemerisStore *) x));
}
static void *_p_gpstk__AccessErrorTo_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t(void *x) {
    return (void *)((std::basic_ostream<char,std::char_traits<char > > *) (gpstk::Exception *) ((gpstk::AccessError *) x));
}
static void *_p_std__basic_iostreamTchar_std__char_traitsTchar_t_tTo_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t(void *x) {
    return (void *)((std::basic_ostream<char,std::char_traits<char > > *)  ((std::basic_iostream<char,std::char_traits<char > > *) x));
}
static void *_p_gpstk__InvalidParameterTo_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t(void *x) {
    return (void *)((std::basic_ostream<char,std::char_traits<char > > *) (gpstk::Exception *) ((gpstk::InvalidParameter *) x));
}
static void *_p_gpstk__OutOfMemoryTo_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t(void *x) {
    return (void *)((std::basic_ostream<char,std::char_traits<char > > *) (gpstk::Exception *) ((gpstk::OutOfMemory *) x));
}
static void *_p_gpstk__WrongBlockNumberTo_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t(void *x) {
    return (void *)((std::basic_ostream<char,std::char_traits<char > > *) (gpstk::Exception *) ((gpstk::WrongBlockNumber *) x));
}
static void *_p_gpstk__InvalidValueTo_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t(void *x) {
    return (void *)((std::basic_ostream<char,std::char_traits<char > > *) (gpstk::Exception *) ((gpstk::InvalidValue *) x));
}
static void *_p_gpstk__WrongBlockFormatTo_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t(void *x) {
    return (void *)((std::basic_ostream<char,std::char_traits<char > > *) (gpstk::Exception *) ((gpstk::WrongBlockFormat *) x));
}
static void *_p_gpstk__ObjectNotFoundTo_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t(void *x) {
    return (void *)((std::basic_ostream<char,std::char_traits<char > > *) (gpstk::Exception *)(gpstk::AccessError *) ((gpstk::ObjectNotFound *) x));
}
static void *_p_gpstk__SystemQueueExceptionTo_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t(void *x) {
    return (void *)((std::basic_ostream<char,std::char_traits<char > > *) (gpstk::Exception *) ((gpstk::SystemQueueException *) x));
}
static void *_p_gpstk__SystemPipeExceptionTo_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t(void *x) {
    return (void *)((std::basic_ostream<char,std::char_traits<char > > *) (gpstk::Exception *) ((gpstk::SystemPipeException *) x));
}
static void *_p_gpstk__SystemSemaphoreExceptionTo_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t(void *x) {
    return (void *)((std::basic_ostream<char,std::char_traits<char > > *) (gpstk::Exception *) ((gpstk::SystemSemaphoreException *) x));
}
static void *_p_gpstk__FileMissingExceptionTo_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t(void *x) {
    return (void *)((std::basic_ostream<char,std::char_traits<char > > *) (gpstk::Exception *) ((gpstk::FileMissingException *) x));
}
static void *_p_gpstk__ConfigurationExceptionTo_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t(void *x) {
    return (void *)((std::basic_ostream<char,std::char_traits<char > > *) (gpstk::Exception *) ((gpstk::ConfigurationException *) x));
}
static void *_p_gpstk__InvalidArgumentExceptionTo_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t(void *x) {
    return (void *)((std::basic_ostream<char,std::char_traits<char > > *) (gpstk::Exception *) ((gpstk::InvalidArgumentException *) x));
}
static void *_p_gpstk__IndexOutOfBoundsExceptionTo_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t(void *x) {
    return (void *)((std::basic_ostream<char,std::char_traits<char > > *) (gpstk::Exception *) ((gpstk::IndexOutOfBoundsException *) x));
}
static void *_p_gpstk__ExceptionTo_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t(void *x) {
    return (void *)((std::basic_ostream<char,std::char_traits<char > > *)  ((gpstk::Exception *) x));
}
static void *_p_gpstk__FileHunterExceptionTo_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t(void *x) {
    return (void *)((std::basic_ostream<char,std::char_traits<char > > *) (gpstk::Exception *) ((gpstk::FileHunterException *) x));
}
static void *_p_gpstk__GeometryExceptionTo_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t(void *x) {
    return (void *)((std::basic_ostream<char,std::char_traits<char > > *) (gpstk::Exception *) ((gpstk::GeometryException *) x));
}
static void *_p_gpstk__NoGeoidExceptionTo_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t(void *x) {
    return (void *)((std::basic_ostream<char,std::char_traits<char > > *) (gpstk::Exception *) ((gpstk::NoGeoidException *) x));
}
static void *_p_DayTimeExceptionTo_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t(void *x) {
    return (void *)((std::basic_ostream<char,std::char_traits<char > > *) (gpstk::Exception *) ((DayTimeException *) x));
}
static void *_p_FormatExceptionTo_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t(void *x) {
    return (void *)((std::basic_ostream<char,std::char_traits<char > > *) (gpstk::Exception *) ((FormatException *) x));
}
static void *_p_gpstk__InvalidRequestTo_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t(void *x) {
    return (void *)((std::basic_ostream<char,std::char_traits<char > > *) (gpstk::Exception *) ((gpstk::InvalidRequest *) x));
}
static void *_p_gpstk__AssertionFailureTo_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t(void *x) {
    return (void *)((std::basic_ostream<char,std::char_traits<char > > *) (gpstk::Exception *) ((gpstk::AssertionFailure *) x));
}
static void *_p_std__basic_iostreamTchar_std__char_traitsTchar_t_tTo_p_std__basic_istreamTchar_std__char_traitsTchar_t_t(void *x) {
    return (void *)((std::basic_istream<char,std::char_traits<char > > *)  ((std::basic_iostream<char,std::char_traits<char > > *) x));
}
static void *_p_f_r_std__basic_ios__char_std__char_traits__char______r_gpstk__AccessErrorTo_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iosTchar_std__char_traitsTchar_t_t(void *x) {
    return (void *)((std::basic_ios<char,std::char_traits<char > > &(*)(std::basic_ios<char,std::char_traits<char > > &)) (std::basic_ostream<char > *)(gpstk::Exception *) ((gpstk::AccessError &(*)(std::basic_ios<char,std::char_traits<char > > &)) x));
}
static void *_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iostreamTchar_std__char_traitsTchar_t_tTo_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iosTchar_std__char_traitsTchar_t_t(void *x) {
    return (void *)((std::basic_ios<char,std::char_traits<char > > &(*)(std::basic_ios<char,std::char_traits<char > > &)) (std::basic_istream<char > *) ((std::basic_iostream<char,std::char_traits<char > > &(*)(std::basic_ios<char,std::char_traits<char > > &)) x));
}
static void *_p_f_r_std__basic_ios__char_std__char_traits__char______r_gpstk__InvalidParameterTo_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iosTchar_std__char_traitsTchar_t_t(void *x) {
    return (void *)((std::basic_ios<char,std::char_traits<char > > &(*)(std::basic_ios<char,std::char_traits<char > > &)) (std::basic_ostream<char > *)(gpstk::Exception *) ((gpstk::InvalidParameter &(*)(std::basic_ios<char,std::char_traits<char > > &)) x));
}
static void *_p_f_r_std__basic_ios__char_std__char_traits__char______r_gpstk__OutOfMemoryTo_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iosTchar_std__char_traitsTchar_t_t(void *x) {
    return (void *)((std::basic_ios<char,std::char_traits<char > > &(*)(std::basic_ios<char,std::char_traits<char > > &)) (std::basic_ostream<char > *)(gpstk::Exception *) ((gpstk::OutOfMemory &(*)(std::basic_ios<char,std::char_traits<char > > &)) x));
}
static void *_p_f_r_std__basic_ios__char_std__char_traits__char______r_gpstk__WrongBlockNumberTo_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iosTchar_std__char_traitsTchar_t_t(void *x) {
    return (void *)((std::basic_ios<char,std::char_traits<char > > &(*)(std::basic_ios<char,std::char_traits<char > > &)) (std::basic_ostream<char > *)(gpstk::Exception *) ((gpstk::WrongBlockNumber &(*)(std::basic_ios<char,std::char_traits<char > > &)) x));
}
static void *_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_istreamTchar_std__char_traitsTchar_t_tTo_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iosTchar_std__char_traitsTchar_t_t(void *x) {
    return (void *)((std::basic_ios<char,std::char_traits<char > > &(*)(std::basic_ios<char,std::char_traits<char > > &))  ((std::basic_istream<char,std::char_traits<char > > &(*)(std::basic_ios<char,std::char_traits<char > > &)) x));
}
static void *_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_ostreamTchar_std__char_traitsTchar_t_tTo_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iosTchar_std__char_traitsTchar_t_t(void *x) {
    return (void *)((std::basic_ios<char,std::char_traits<char > > &(*)(std::basic_ios<char,std::char_traits<char > > &))  ((std::basic_ostream<char,std::char_traits<char > > &(*)(std::basic_ios<char,std::char_traits<char > > &)) x));
}
static void *_p_f_r_std__basic_ios__char_std__char_traits__char______r_gpstk__InvalidValueTo_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iosTchar_std__char_traitsTchar_t_t(void *x) {
    return (void *)((std::basic_ios<char,std::char_traits<char > > &(*)(std::basic_ios<char,std::char_traits<char > > &)) (std::basic_ostream<char > *)(gpstk::Exception *) ((gpstk::InvalidValue &(*)(std::basic_ios<char,std::char_traits<char > > &)) x));
}
static void *_p_f_r_std__basic_ios__char_std__char_traits__char______r_gpstk__WrongBlockFormatTo_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iosTchar_std__char_traitsTchar_t_t(void *x) {
    return (void *)((std::basic_ios<char,std::char_traits<char > > &(*)(std::basic_ios<char,std::char_traits<char > > &)) (std::basic_ostream<char > *)(gpstk::Exception *) ((gpstk::WrongBlockFormat &(*)(std::basic_ios<char,std::char_traits<char > > &)) x));
}
static void *_p_f_r_std__basic_ios__char_std__char_traits__char______r_gpstk__ObjectNotFoundTo_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iosTchar_std__char_traitsTchar_t_t(void *x) {
    return (void *)((std::basic_ios<char,std::char_traits<char > > &(*)(std::basic_ios<char,std::char_traits<char > > &)) (std::basic_ostream<char > *)(gpstk::Exception *)(gpstk::AccessError *) ((gpstk::ObjectNotFound &(*)(std::basic_ios<char,std::char_traits<char > > &)) x));
}
static void *_p_f_r_std__basic_ios__char_std__char_traits__char______r_gpstk__SystemPipeExceptionTo_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iosTchar_std__char_traitsTchar_t_t(void *x) {
    return (void *)((std::basic_ios<char,std::char_traits<char > > &(*)(std::basic_ios<char,std::char_traits<char > > &)) (std::basic_ostream<char > *)(gpstk::Exception *) ((gpstk::SystemPipeException &(*)(std::basic_ios<char,std::char_traits<char > > &)) x));
}
static void *_p_f_r_std__basic_ios__char_std__char_traits__char______r_gpstk__SystemSemaphoreExceptionTo_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iosTchar_std__char_traitsTchar_t_t(void *x) {
    return (void *)((std::basic_ios<char,std::char_traits<char > > &(*)(std::basic_ios<char,std::char_traits<char > > &)) (std::basic_ostream<char > *)(gpstk::Exception *) ((gpstk::SystemSemaphoreException &(*)(std::basic_ios<char,std::char_traits<char > > &)) x));
}
static void *_p_f_r_std__basic_ios__char_std__char_traits__char______r_gpstk__FileMissingExceptionTo_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iosTchar_std__char_traitsTchar_t_t(void *x) {
    return (void *)((std::basic_ios<char,std::char_traits<char > > &(*)(std::basic_ios<char,std::char_traits<char > > &)) (std::basic_ostream<char > *)(gpstk::Exception *) ((gpstk::FileMissingException &(*)(std::basic_ios<char,std::char_traits<char > > &)) x));
}
static void *_p_f_r_std__basic_ios__char_std__char_traits__char______r_gpstk__ConfigurationExceptionTo_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iosTchar_std__char_traitsTchar_t_t(void *x) {
    return (void *)((std::basic_ios<char,std::char_traits<char > > &(*)(std::basic_ios<char,std::char_traits<char > > &)) (std::basic_ostream<char > *)(gpstk::Exception *) ((gpstk::ConfigurationException &(*)(std::basic_ios<char,std::char_traits<char > > &)) x));
}
static void *_p_f_r_std__basic_ios__char_std__char_traits__char______r_gpstk__InvalidArgumentExceptionTo_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iosTchar_std__char_traitsTchar_t_t(void *x) {
    return (void *)((std::basic_ios<char,std::char_traits<char > > &(*)(std::basic_ios<char,std::char_traits<char > > &)) (std::basic_ostream<char > *)(gpstk::Exception *) ((gpstk::InvalidArgumentException &(*)(std::basic_ios<char,std::char_traits<char > > &)) x));
}
static void *_p_f_r_std__basic_ios__char_std__char_traits__char______r_gpstk__IndexOutOfBoundsExceptionTo_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iosTchar_std__char_traitsTchar_t_t(void *x) {
    return (void *)((std::basic_ios<char,std::char_traits<char > > &(*)(std::basic_ios<char,std::char_traits<char > > &)) (std::basic_ostream<char > *)(gpstk::Exception *) ((gpstk::IndexOutOfBoundsException &(*)(std::basic_ios<char,std::char_traits<char > > &)) x));
}
static void *_p_f_r_std__basic_ios__char_std__char_traits__char______r_gpstk__ExceptionTo_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iosTchar_std__char_traitsTchar_t_t(void *x) {
    return (void *)((std::basic_ios<char,std::char_traits<char > > &(*)(std::basic_ios<char,std::char_traits<char > > &)) (std::basic_ostream<char > *) ((gpstk::Exception &(*)(std::basic_ios<char,std::char_traits<char > > &)) x));
}
static void *_p_f_r_std__basic_ios__char_std__char_traits__char______r_gpstk__SystemQueueExceptionTo_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iosTchar_std__char_traitsTchar_t_t(void *x) {
    return (void *)((std::basic_ios<char,std::char_traits<char > > &(*)(std::basic_ios<char,std::char_traits<char > > &)) (std::basic_ostream<char > *)(gpstk::Exception *) ((gpstk::SystemQueueException &(*)(std::basic_ios<char,std::char_traits<char > > &)) x));
}
static void *_p_f_r_std__basic_ios__char_std__char_traits__char______r_gpstk__FileHunterExceptionTo_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iosTchar_std__char_traitsTchar_t_t(void *x) {
    return (void *)((std::basic_ios<char,std::char_traits<char > > &(*)(std::basic_ios<char,std::char_traits<char > > &)) (std::basic_ostream<char > *)(gpstk::Exception *) ((gpstk::FileHunterException &(*)(std::basic_ios<char,std::char_traits<char > > &)) x));
}
static void *_p_f_r_std__basic_ios__char_std__char_traits__char______r_gpstk__GeometryExceptionTo_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iosTchar_std__char_traitsTchar_t_t(void *x) {
    return (void *)((std::basic_ios<char,std::char_traits<char > > &(*)(std::basic_ios<char,std::char_traits<char > > &)) (std::basic_ostream<char > *)(gpstk::Exception *) ((gpstk::GeometryException &(*)(std::basic_ios<char,std::char_traits<char > > &)) x));
}
static void *_p_f_r_std__basic_ios__char_std__char_traits__char______r_gpstk__NoGeoidExceptionTo_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iosTchar_std__char_traitsTchar_t_t(void *x) {
    return (void *)((std::basic_ios<char,std::char_traits<char > > &(*)(std::basic_ios<char,std::char_traits<char > > &)) (std::basic_ostream<char > *)(gpstk::Exception *) ((gpstk::NoGeoidException &(*)(std::basic_ios<char,std::char_traits<char > > &)) x));
}
static void *_p_f_r_std__basic_ios__char_std__char_traits__char______r_DayTimeExceptionTo_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iosTchar_std__char_traitsTchar_t_t(void *x) {
    return (void *)((std::basic_ios<char,std::char_traits<char > > &(*)(std::basic_ios<char,std::char_traits<char > > &)) (std::basic_ostream<char > *)(gpstk::Exception *) ((DayTimeException &(*)(std::basic_ios<char,std::char_traits<char > > &)) x));
}
static void *_p_f_r_std__basic_ios__char_std__char_traits__char______r_FormatExceptionTo_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iosTchar_std__char_traitsTchar_t_t(void *x) {
    return (void *)((std::basic_ios<char,std::char_traits<char > > &(*)(std::basic_ios<char,std::char_traits<char > > &)) (std::basic_ostream<char > *)(gpstk::Exception *) ((FormatException &(*)(std::basic_ios<char,std::char_traits<char > > &)) x));
}
static void *_p_f_r_std__basic_ios__char_std__char_traits__char______r_gpstk__InvalidRequestTo_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iosTchar_std__char_traitsTchar_t_t(void *x) {
    return (void *)((std::basic_ios<char,std::char_traits<char > > &(*)(std::basic_ios<char,std::char_traits<char > > &)) (std::basic_ostream<char > *)(gpstk::Exception *) ((gpstk::InvalidRequest &(*)(std::basic_ios<char,std::char_traits<char > > &)) x));
}
static void *_p_f_r_std__basic_ios__char_std__char_traits__char______r_gpstk__AssertionFailureTo_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iosTchar_std__char_traitsTchar_t_t(void *x) {
    return (void *)((std::basic_ios<char,std::char_traits<char > > &(*)(std::basic_ios<char,std::char_traits<char > > &)) (std::basic_ostream<char > *)(gpstk::Exception *) ((gpstk::AssertionFailure &(*)(std::basic_ios<char,std::char_traits<char > > &)) x));
}
static void *_p_gpstk__EngEphemerisTo_p_gpstk__EngNav(void *x) {
    return (void *)((gpstk::EngNav *)  ((gpstk::EngEphemeris *) x));
}
static void *_p_gpstk__EngAlmanacTo_p_gpstk__EngNav(void *x) {
    return (void *)((gpstk::EngNav *)  ((gpstk::EngAlmanac *) x));
}
static void *_p_gpstk__RinexMetDataTo_p_gpstk__RinexMetBase(void *x) {
    return (void *)((gpstk::RinexMetBase *)  ((gpstk::RinexMetData *) x));
}
static void *_p_gpstk__RinexMetHeaderTo_p_gpstk__RinexMetBase(void *x) {
    return (void *)((gpstk::RinexMetBase *)  ((gpstk::RinexMetHeader *) x));
}
static void *_p_gpstk__EpochClockModelTo_p_gpstk__ObsClockModel(void *x) {
    return (void *)((gpstk::ObsClockModel *)  ((gpstk::EpochClockModel *) x));
}
static void *_p_gpstk__LinearClockModelTo_p_gpstk__ObsClockModel(void *x) {
    return (void *)((gpstk::ObsClockModel *)  ((gpstk::LinearClockModel *) x));
}
static void *_p_gpstk__ObsClockModelTo_p_gpstk__ClockModel(void *x) {
    return (void *)((gpstk::ClockModel *)  ((gpstk::ObsClockModel *) x));
}
static void *_p_gpstk__EpochClockModelTo_p_gpstk__ClockModel(void *x) {
    return (void *)((gpstk::ClockModel *) (gpstk::ObsClockModel *) ((gpstk::EpochClockModel *) x));
}
static void *_p_gpstk__LinearClockModelTo_p_gpstk__ClockModel(void *x) {
    return (void *)((gpstk::ClockModel *) (gpstk::ObsClockModel *) ((gpstk::LinearClockModel *) x));
}
static void *_p_gpstk__FICStreamTo_p_gpstk__FICStreamBase(void *x) {
    return (void *)((gpstk::FICStreamBase *)  ((gpstk::FICStream *) x));
}
static void *_p_gpstk__FICAStreamTo_p_gpstk__FICStreamBase(void *x) {
    return (void *)((gpstk::FICStreamBase *)  ((gpstk::FICAStream *) x));
}
static void *_p_gpstk__AccessErrorTo_p_std__basic_iosTchar_std__char_traitsTchar_t_t(void *x) {
    return (void *)((std::basic_ios<char,std::char_traits<char > > *) (std::basic_ostream<char > *)(gpstk::Exception *) ((gpstk::AccessError *) x));
}
static void *_p_std__basic_iostreamTchar_std__char_traitsTchar_t_tTo_p_std__basic_iosTchar_std__char_traitsTchar_t_t(void *x) {
    return (void *)((std::basic_ios<char,std::char_traits<char > > *) (std::basic_istream<char > *) ((std::basic_iostream<char,std::char_traits<char > > *) x));
}
static void *_p_gpstk__InvalidParameterTo_p_std__basic_iosTchar_std__char_traitsTchar_t_t(void *x) {
    return (void *)((std::basic_ios<char,std::char_traits<char > > *) (std::basic_ostream<char > *)(gpstk::Exception *) ((gpstk::InvalidParameter *) x));
}
static void *_p_gpstk__OutOfMemoryTo_p_std__basic_iosTchar_std__char_traitsTchar_t_t(void *x) {
    return (void *)((std::basic_ios<char,std::char_traits<char > > *) (std::basic_ostream<char > *)(gpstk::Exception *) ((gpstk::OutOfMemory *) x));
}
static void *_p_gpstk__WrongBlockNumberTo_p_std__basic_iosTchar_std__char_traitsTchar_t_t(void *x) {
    return (void *)((std::basic_ios<char,std::char_traits<char > > *) (std::basic_ostream<char > *)(gpstk::Exception *) ((gpstk::WrongBlockNumber *) x));
}
static void *_p_std__basic_istreamTchar_std__char_traitsTchar_t_tTo_p_std__basic_iosTchar_std__char_traitsTchar_t_t(void *x) {
    return (void *)((std::basic_ios<char,std::char_traits<char > > *)  ((std::basic_istream<char,std::char_traits<char > > *) x));
}
static void *_p_std__basic_ostreamTchar_std__char_traitsTchar_t_tTo_p_std__basic_iosTchar_std__char_traitsTchar_t_t(void *x) {
    return (void *)((std::basic_ios<char,std::char_traits<char > > *)  ((std::basic_ostream<char,std::char_traits<char > > *) x));
}
static void *_p_gpstk__InvalidValueTo_p_std__basic_iosTchar_std__char_traitsTchar_t_t(void *x) {
    return (void *)((std::basic_ios<char,std::char_traits<char > > *) (std::basic_ostream<char > *)(gpstk::Exception *) ((gpstk::InvalidValue *) x));
}
static void *_p_gpstk__WrongBlockFormatTo_p_std__basic_iosTchar_std__char_traitsTchar_t_t(void *x) {
    return (void *)((std::basic_ios<char,std::char_traits<char > > *) (std::basic_ostream<char > *)(gpstk::Exception *) ((gpstk::WrongBlockFormat *) x));
}
static void *_p_gpstk__ObjectNotFoundTo_p_std__basic_iosTchar_std__char_traitsTchar_t_t(void *x) {
    return (void *)((std::basic_ios<char,std::char_traits<char > > *) (std::basic_ostream<char > *)(gpstk::Exception *)(gpstk::AccessError *) ((gpstk::ObjectNotFound *) x));
}
static void *_p_gpstk__SystemPipeExceptionTo_p_std__basic_iosTchar_std__char_traitsTchar_t_t(void *x) {
    return (void *)((std::basic_ios<char,std::char_traits<char > > *) (std::basic_ostream<char > *)(gpstk::Exception *) ((gpstk::SystemPipeException *) x));
}
static void *_p_gpstk__SystemSemaphoreExceptionTo_p_std__basic_iosTchar_std__char_traitsTchar_t_t(void *x) {
    return (void *)((std::basic_ios<char,std::char_traits<char > > *) (std::basic_ostream<char > *)(gpstk::Exception *) ((gpstk::SystemSemaphoreException *) x));
}
static void *_p_gpstk__FileMissingExceptionTo_p_std__basic_iosTchar_std__char_traitsTchar_t_t(void *x) {
    return (void *)((std::basic_ios<char,std::char_traits<char > > *) (std::basic_ostream<char > *)(gpstk::Exception *) ((gpstk::FileMissingException *) x));
}
static void *_p_gpstk__ConfigurationExceptionTo_p_std__basic_iosTchar_std__char_traitsTchar_t_t(void *x) {
    return (void *)((std::basic_ios<char,std::char_traits<char > > *) (std::basic_ostream<char > *)(gpstk::Exception *) ((gpstk::ConfigurationException *) x));
}
static void *_p_gpstk__InvalidArgumentExceptionTo_p_std__basic_iosTchar_std__char_traitsTchar_t_t(void *x) {
    return (void *)((std::basic_ios<char,std::char_traits<char > > *) (std::basic_ostream<char > *)(gpstk::Exception *) ((gpstk::InvalidArgumentException *) x));
}
static void *_p_gpstk__IndexOutOfBoundsExceptionTo_p_std__basic_iosTchar_std__char_traitsTchar_t_t(void *x) {
    return (void *)((std::basic_ios<char,std::char_traits<char > > *) (std::basic_ostream<char > *)(gpstk::Exception *) ((gpstk::IndexOutOfBoundsException *) x));
}
static void *_p_gpstk__ExceptionTo_p_std__basic_iosTchar_std__char_traitsTchar_t_t(void *x) {
    return (void *)((std::basic_ios<char,std::char_traits<char > > *) (std::basic_ostream<char > *) ((gpstk::Exception *) x));
}
static void *_p_gpstk__SystemQueueExceptionTo_p_std__basic_iosTchar_std__char_traitsTchar_t_t(void *x) {
    return (void *)((std::basic_ios<char,std::char_traits<char > > *) (std::basic_ostream<char > *)(gpstk::Exception *) ((gpstk::SystemQueueException *) x));
}
static void *_p_gpstk__FileHunterExceptionTo_p_std__basic_iosTchar_std__char_traitsTchar_t_t(void *x) {
    return (void *)((std::basic_ios<char,std::char_traits<char > > *) (std::basic_ostream<char > *)(gpstk::Exception *) ((gpstk::FileHunterException *) x));
}
static void *_p_gpstk__GeometryExceptionTo_p_std__basic_iosTchar_std__char_traitsTchar_t_t(void *x) {
    return (void *)((std::basic_ios<char,std::char_traits<char > > *) (std::basic_ostream<char > *)(gpstk::Exception *) ((gpstk::GeometryException *) x));
}
static void *_p_gpstk__NoGeoidExceptionTo_p_std__basic_iosTchar_std__char_traitsTchar_t_t(void *x) {
    return (void *)((std::basic_ios<char,std::char_traits<char > > *) (std::basic_ostream<char > *)(gpstk::Exception *) ((gpstk::NoGeoidException *) x));
}
static void *_p_DayTimeExceptionTo_p_std__basic_iosTchar_std__char_traitsTchar_t_t(void *x) {
    return (void *)((std::basic_ios<char,std::char_traits<char > > *) (std::basic_ostream<char > *)(gpstk::Exception *) ((DayTimeException *) x));
}
static void *_p_FormatExceptionTo_p_std__basic_iosTchar_std__char_traitsTchar_t_t(void *x) {
    return (void *)((std::basic_ios<char,std::char_traits<char > > *) (std::basic_ostream<char > *)(gpstk::Exception *) ((FormatException *) x));
}
static void *_p_gpstk__InvalidRequestTo_p_std__basic_iosTchar_std__char_traitsTchar_t_t(void *x) {
    return (void *)((std::basic_ios<char,std::char_traits<char > > *) (std::basic_ostream<char > *)(gpstk::Exception *) ((gpstk::InvalidRequest *) x));
}
static void *_p_gpstk__AssertionFailureTo_p_std__basic_iosTchar_std__char_traitsTchar_t_t(void *x) {
    return (void *)((std::basic_ios<char,std::char_traits<char > > *) (std::basic_ostream<char > *)(gpstk::Exception *) ((gpstk::AssertionFailure *) x));
}
static void *_p_std__range_errorTo_p_std__runtime_error(void *x) {
    return (void *)((std::runtime_error *)  ((std::range_error *) x));
}
static void *_p_std__overflow_errorTo_p_std__runtime_error(void *x) {
    return (void *)((std::runtime_error *)  ((std::overflow_error *) x));
}
static void *_p_std__underflow_errorTo_p_std__runtime_error(void *x) {
    return (void *)((std::runtime_error *)  ((std::underflow_error *) x));
}
static void *_p_std__domain_errorTo_p_std__logic_error(void *x) {
    return (void *)((std::logic_error *)  ((std::domain_error *) x));
}
static void *_p_std__length_errorTo_p_std__logic_error(void *x) {
    return (void *)((std::logic_error *)  ((std::length_error *) x));
}
static void *_p_std__out_of_rangeTo_p_std__logic_error(void *x) {
    return (void *)((std::logic_error *)  ((std::out_of_range *) x));
}
static void *_p_std__invalid_argumentTo_p_std__logic_error(void *x) {
    return (void *)((std::logic_error *)  ((std::invalid_argument *) x));
}
static void *_p_gpstk__RinexEphemerisStoreTo_p_gpstk__FileStoreTgpstk__RinexNavHeader_t(void *x) {
    return (void *)((gpstk::FileStore<gpstk::RinexNavHeader > *)  ((gpstk::RinexEphemerisStore *) x));
}
static void *_p_gpstk__SP3EphemerisStoreTo_p_gpstk__FileStoreTgpstk__SP3Header_t(void *x) {
    return (void *)((gpstk::FileStore<gpstk::SP3Header > *)  ((gpstk::SP3EphemerisStore *) x));
}
static void *_p_gpstk__RinexNavHeaderTo_p_gpstk__RinexNavBase(void *x) {
    return (void *)((gpstk::RinexNavBase *)  ((gpstk::RinexNavHeader *) x));
}
static void *_p_gpstk__RinexNavDataTo_p_gpstk__RinexNavBase(void *x) {
    return (void *)((gpstk::RinexNavBase *)  ((gpstk::RinexNavData *) x));
}
static void *_p_gpstk__FFBinaryStreamTo_p_gpstk__FFStream(void *x) {
    return (void *)((gpstk::FFStream *)  ((gpstk::FFBinaryStream *) x));
}
static void *_p_gpstk__FICStreamTo_p_gpstk__FFStream(void *x) {
    return (void *)((gpstk::FFStream *) (gpstk::FFBinaryStream *) ((gpstk::FICStream *) x));
}
static void *_p_gpstk__FICAStreamTo_p_gpstk__FFStream(void *x) {
    return (void *)((gpstk::FFStream *) (gpstk::FFTextStream *) ((gpstk::FICAStream *) x));
}
static void *_p_gpstk__MSCStreamTo_p_gpstk__FFStream(void *x) {
    return (void *)((gpstk::FFStream *) (gpstk::FFTextStream *) ((gpstk::MSCStream *) x));
}
static void *_p_gpstk__SP3StreamTo_p_gpstk__FFStream(void *x) {
    return (void *)((gpstk::FFStream *) (gpstk::FFTextStream *) ((gpstk::SP3Stream *) x));
}
static void *_p_gpstk__RinexObsStreamTo_p_gpstk__FFStream(void *x) {
    return (void *)((gpstk::FFStream *) (gpstk::FFTextStream *) ((gpstk::RinexObsStream *) x));
}
static void *_p_gpstk__FFTextStreamTo_p_gpstk__FFStream(void *x) {
    return (void *)((gpstk::FFStream *)  ((gpstk::FFTextStream *) x));
}
static void *_p_gpstk__RinexMetStreamTo_p_gpstk__FFStream(void *x) {
    return (void *)((gpstk::FFStream *) (gpstk::FFTextStream *) ((gpstk::RinexMetStream *) x));
}
static void *_p_gpstk__RinexNavStreamTo_p_gpstk__FFStream(void *x) {
    return (void *)((gpstk::FFStream *) (gpstk::FFTextStream *) ((gpstk::RinexNavStream *) x));
}
static void *_p_gpstk__SMODFStreamTo_p_gpstk__FFStream(void *x) {
    return (void *)((gpstk::FFStream *) (gpstk::FFTextStream *) ((gpstk::SMODFStream *) x));
}
static void *_p_gpstk__FICAStreamTo_p_gpstk__FFTextStream(void *x) {
    return (void *)((gpstk::FFTextStream *)  ((gpstk::FICAStream *) x));
}
static void *_p_gpstk__MSCStreamTo_p_gpstk__FFTextStream(void *x) {
    return (void *)((gpstk::FFTextStream *)  ((gpstk::MSCStream *) x));
}
static void *_p_gpstk__SP3StreamTo_p_gpstk__FFTextStream(void *x) {
    return (void *)((gpstk::FFTextStream *)  ((gpstk::SP3Stream *) x));
}
static void *_p_gpstk__RinexObsStreamTo_p_gpstk__FFTextStream(void *x) {
    return (void *)((gpstk::FFTextStream *)  ((gpstk::RinexObsStream *) x));
}
static void *_p_gpstk__RinexMetStreamTo_p_gpstk__FFTextStream(void *x) {
    return (void *)((gpstk::FFTextStream *)  ((gpstk::RinexMetStream *) x));
}
static void *_p_gpstk__RinexNavStreamTo_p_gpstk__FFTextStream(void *x) {
    return (void *)((gpstk::FFTextStream *)  ((gpstk::RinexNavStream *) x));
}
static void *_p_gpstk__SMODFStreamTo_p_gpstk__FFTextStream(void *x) {
    return (void *)((gpstk::FFTextStream *)  ((gpstk::SMODFStream *) x));
}
static void *_p_gpstk__FICStreamTo_p_gpstk__FFBinaryStream(void *x) {
    return (void *)((gpstk::FFBinaryStream *)  ((gpstk::FICStream *) x));
}
static void *_p_gpstk__SP3DataTo_p_gpstk__SP3Base(void *x) {
    return (void *)((gpstk::SP3Base *)  ((gpstk::SP3Data *) x));
}
static void *_p_gpstk__SP3HeaderTo_p_gpstk__SP3Base(void *x) {
    return (void *)((gpstk::SP3Base *)  ((gpstk::SP3Header *) x));
}
static void *_p_gpstk__ObjectNotFoundTo_p_gpstk__AccessError(void *x) {
    return (void *)((gpstk::AccessError *)  ((gpstk::ObjectNotFound *) x));
}
static void *_p_gpstk__FICDataTo_p_gpstk__FICBase(void *x) {
    return (void *)((gpstk::FICBase *)  ((gpstk::FICData *) x));
}
static void *_p_gpstk__FICHeaderTo_p_gpstk__FICBase(void *x) {
    return (void *)((gpstk::FICBase *)  ((gpstk::FICHeader *) x));
}
static swig_type_info _swigt__p_DayTimeException = {"_p_DayTimeException", "DayTimeException *", 0, 0, 0};
static swig_type_info _swigt__p_EndOfFile = {"_p_EndOfFile", "EndOfFile *", 0, 0, 0};
static swig_type_info _swigt__p_ExtraWaveFact = {"_p_ExtraWaveFact", "ExtraWaveFact *", 0, 0, 0};
static swig_type_info _swigt__p_FFStreamError = {"_p_FFStreamError", "FFStreamError *", 0, 0, 0};
static swig_type_info _swigt__p_FileSpec = {"_p_FileSpec", "FileSpec *", 0, 0, 0};
static swig_type_info _swigt__p_FileSpec__FileSpecSortType = {"_p_FileSpec__FileSpecSortType", "FileSpec::FileSpecSortType *", 0, 0, 0};
static swig_type_info _swigt__p_FileSpec__FileSpecType = {"_p_FileSpec__FileSpecType", "FileSpec::FileSpecType *", 0, 0, 0};
static swig_type_info _swigt__p_FilterPair = {"_p_FilterPair", "FilterPair *", 0, 0, 0};
static swig_type_info _swigt__p_FormatException = {"_p_FormatException", "FormatException *", 0, 0, 0};
static swig_type_info _swigt__p_InvalidIonoModel = {"_p_InvalidIonoModel", "InvalidIonoModel *", 0, 0, 0};
static swig_type_info _swigt__p_InvalidTropModel = {"_p_InvalidTropModel", "InvalidTropModel *", 0, 0, 0};
static swig_type_info _swigt__p_MatrixTdouble_t = {"_p_MatrixTdouble_t", "Matrix<double > *", 0, 0, 0};
static swig_type_info _swigt__p_NoAlmanacFound = {"_p_NoAlmanacFound", "NoAlmanacFound *", 0, 0, 0};
static swig_type_info _swigt__p_NoEphemerisFound = {"_p_NoEphemerisFound", "NoEphemerisFound *", 0, 0, 0};
static swig_type_info _swigt__p_NoIonoModelFound = {"_p_NoIonoModelFound", "NoIonoModelFound *", 0, 0, 0};
static swig_type_info _swigt__p_ORDMap = {"_p_ORDMap", "ORDMap *", 0, 0, 0};
static swig_type_info _swigt__p_PRNModeMap = {"_p_PRNModeMap", "PRNModeMap *", 0, 0, 0};
static swig_type_info _swigt__p_PRNStatusMap = {"_p_PRNStatusMap", "PRNStatusMap *", 0, 0, 0};
static swig_type_info _swigt__p_RinexDatum = {"_p_RinexDatum", "RinexDatum *", 0, 0, 0};
static swig_type_info _swigt__p_RinexMetMap = {"_p_RinexMetMap", "RinexMetMap *", 0, 0, 0};
static swig_type_info _swigt__p_RinexMetType = {"_p_RinexMetType", "RinexMetType *", 0, 0, 0};
static swig_type_info _swigt__p_RinexObsType = {"_p_RinexObsType", "RinexObsType *|gpstk::RinexObsHeader::RinexObsType *", 0, 0, 0};
static swig_type_info _swigt__p_RinexObsTypeMap = {"_p_RinexObsTypeMap", "RinexObsTypeMap *", 0, 0, 0};
static swig_type_info _swigt__p_RinexPrnMap = {"_p_RinexPrnMap", "RinexPrnMap *", 0, 0, 0};
static swig_type_info _swigt__p_SVBitsMap = {"_p_SVBitsMap", "SVBitsMap *", 0, 0, 0};
static swig_type_info _swigt__p_SVNotPresentException = {"_p_SVNotPresentException", "SVNotPresentException *", 0, 0, 0};
static swig_type_info _swigt__p_StatsTdouble_t = {"_p_StatsTdouble_t", "Stats<double > *", 0, 0, 0};
static swig_type_info _swigt__p_StringUtils__StringException = {"_p_StringUtils__StringException", "StringUtils::StringException *", 0, 0, 0};
static swig_type_info _swigt__p_VectorTbool_t = {"_p_VectorTbool_t", "Vector<bool > *", 0, 0, 0};
static swig_type_info _swigt__p_VectorTdouble_t = {"_p_VectorTdouble_t", "Vector<double > *", 0, 0, 0};
static swig_type_info _swigt__p_allocator_type = {"_p_allocator_type", "allocator_type *", 0, 0, 0};
static swig_type_info _swigt__p_bool = {"_p_bool", "bool *", 0, 0, 0};
static swig_type_info _swigt__p_char = {"_p_char", "char *", 0, 0, 0};
static swig_type_info _swigt__p_char_type = {"_p_char_type", "char_type *", 0, 0, 0};
static swig_type_info _swigt__p_codeType = {"_p_codeType", "codeType *", 0, 0, 0};
static swig_type_info _swigt__p_difference_type = {"_p_difference_type", "difference_type *", 0, 0, 0};
static swig_type_info _swigt__p_double = {"_p_double", "double *", 0, 0, 0};
static swig_type_info _swigt__p_f_enum_std__ios_base__event_r_std__ios_base_int__void = {"_p_f_enum_std__ios_base__event_r_std__ios_base_int__void", "void (*)(enum std::ios_base::event,std::ios_base &,int)|std::ios_base::event_callback", 0, 0, 0};
static swig_type_info _swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iosTchar_std__char_traitsTchar_t_t = {"_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iosTchar_std__char_traitsTchar_t_t", "std::basic_ios<char,std::char_traits<char > > &(*)(std::basic_ios<char,std::char_traits<char > > &)", 0, 0, 0};
static swig_type_info _swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_gpstk__AccessError = {"_p_f_r_std__basic_ios__char_std__char_traits__char______r_gpstk__AccessError", 0, 0, 0, 0};
static swig_type_info _swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iostreamTchar_std__char_traitsTchar_t_t = {"_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iostreamTchar_std__char_traitsTchar_t_t", 0, 0, 0, 0};
static swig_type_info _swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_gpstk__InvalidParameter = {"_p_f_r_std__basic_ios__char_std__char_traits__char______r_gpstk__InvalidParameter", 0, 0, 0, 0};
static swig_type_info _swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_gpstk__OutOfMemory = {"_p_f_r_std__basic_ios__char_std__char_traits__char______r_gpstk__OutOfMemory", 0, 0, 0, 0};
static swig_type_info _swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_gpstk__WrongBlockNumber = {"_p_f_r_std__basic_ios__char_std__char_traits__char______r_gpstk__WrongBlockNumber", 0, 0, 0, 0};
static swig_type_info _swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_istreamTchar_std__char_traitsTchar_t_t = {"_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_istreamTchar_std__char_traitsTchar_t_t", 0, 0, 0, 0};
static swig_type_info _swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_ostreamTchar_std__char_traitsTchar_t_t = {"_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_ostreamTchar_std__char_traitsTchar_t_t", 0, 0, 0, 0};
static swig_type_info _swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_gpstk__InvalidValue = {"_p_f_r_std__basic_ios__char_std__char_traits__char______r_gpstk__InvalidValue", 0, 0, 0, 0};
static swig_type_info _swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_gpstk__WrongBlockFormat = {"_p_f_r_std__basic_ios__char_std__char_traits__char______r_gpstk__WrongBlockFormat", 0, 0, 0, 0};
static swig_type_info _swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_gpstk__ObjectNotFound = {"_p_f_r_std__basic_ios__char_std__char_traits__char______r_gpstk__ObjectNotFound", 0, 0, 0, 0};
static swig_type_info _swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_gpstk__SystemPipeException = {"_p_f_r_std__basic_ios__char_std__char_traits__char______r_gpstk__SystemPipeException", 0, 0, 0, 0};
static swig_type_info _swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_gpstk__SystemSemaphoreException = {"_p_f_r_std__basic_ios__char_std__char_traits__char______r_gpstk__SystemSemaphoreException", 0, 0, 0, 0};
static swig_type_info _swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_gpstk__FileMissingException = {"_p_f_r_std__basic_ios__char_std__char_traits__char______r_gpstk__FileMissingException", 0, 0, 0, 0};
static swig_type_info _swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_gpstk__ConfigurationException = {"_p_f_r_std__basic_ios__char_std__char_traits__char______r_gpstk__ConfigurationException", 0, 0, 0, 0};
static swig_type_info _swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_gpstk__InvalidArgumentException = {"_p_f_r_std__basic_ios__char_std__char_traits__char______r_gpstk__InvalidArgumentException", 0, 0, 0, 0};
static swig_type_info _swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_gpstk__IndexOutOfBoundsException = {"_p_f_r_std__basic_ios__char_std__char_traits__char______r_gpstk__IndexOutOfBoundsException", 0, 0, 0, 0};
static swig_type_info _swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_gpstk__Exception = {"_p_f_r_std__basic_ios__char_std__char_traits__char______r_gpstk__Exception", 0, 0, 0, 0};
static swig_type_info _swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_gpstk__SystemQueueException = {"_p_f_r_std__basic_ios__char_std__char_traits__char______r_gpstk__SystemQueueException", 0, 0, 0, 0};
static swig_type_info _swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_gpstk__FileHunterException = {"_p_f_r_std__basic_ios__char_std__char_traits__char______r_gpstk__FileHunterException", 0, 0, 0, 0};
static swig_type_info _swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_gpstk__GeometryException = {"_p_f_r_std__basic_ios__char_std__char_traits__char______r_gpstk__GeometryException", 0, 0, 0, 0};
static swig_type_info _swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_gpstk__NoGeoidException = {"_p_f_r_std__basic_ios__char_std__char_traits__char______r_gpstk__NoGeoidException", 0, 0, 0, 0};
static swig_type_info _swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_DayTimeException = {"_p_f_r_std__basic_ios__char_std__char_traits__char______r_DayTimeException", 0, 0, 0, 0};
static swig_type_info _swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_FormatException = {"_p_f_r_std__basic_ios__char_std__char_traits__char______r_FormatException", 0, 0, 0, 0};
static swig_type_info _swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_gpstk__InvalidRequest = {"_p_f_r_std__basic_ios__char_std__char_traits__char______r_gpstk__InvalidRequest", 0, 0, 0, 0};
static swig_type_info _swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_gpstk__AssertionFailure = {"_p_f_r_std__basic_ios__char_std__char_traits__char______r_gpstk__AssertionFailure", 0, 0, 0, 0};
static swig_type_info _swigt__p_f_r_std__basic_istream__char_std__char_traits__char______r_std__basic_istreamTchar_std__char_traitsTchar_t_t = {"_p_f_r_std__basic_istream__char_std__char_traits__char______r_std__basic_istreamTchar_std__char_traitsTchar_t_t", "std::basic_istream<char,std::char_traits<char > > &(*)(std::basic_istream<char,std::char_traits<char > > &)", 0, 0, 0};
static swig_type_info _swigt__p_f_r_std__basic_istream__char_std__char_traits__char______r_std__basic_iostreamTchar_std__char_traitsTchar_t_t = {"_p_f_r_std__basic_istream__char_std__char_traits__char______r_std__basic_iostreamTchar_std__char_traitsTchar_t_t", 0, 0, 0, 0};
static swig_type_info _swigt__p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_ostreamTchar_std__char_traitsTchar_t_t = {"_p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_ostreamTchar_std__char_traitsTchar_t_t", "std::basic_ostream<char,std::char_traits<char > > &(*)(std::basic_ostream<char,std::char_traits<char > > &)", 0, 0, 0};
static swig_type_info _swigt__p_f_r_std__basic_ostream__char_std__char_traits__char______r_gpstk__AccessError = {"_p_f_r_std__basic_ostream__char_std__char_traits__char______r_gpstk__AccessError", 0, 0, 0, 0};
static swig_type_info _swigt__p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_iostreamTchar_std__char_traitsTchar_t_t = {"_p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_iostreamTchar_std__char_traitsTchar_t_t", 0, 0, 0, 0};
static swig_type_info _swigt__p_f_r_std__basic_ostream__char_std__char_traits__char______r_gpstk__InvalidParameter = {"_p_f_r_std__basic_ostream__char_std__char_traits__char______r_gpstk__InvalidParameter", 0, 0, 0, 0};
static swig_type_info _swigt__p_f_r_std__basic_ostream__char_std__char_traits__char______r_gpstk__OutOfMemory = {"_p_f_r_std__basic_ostream__char_std__char_traits__char______r_gpstk__OutOfMemory", 0, 0, 0, 0};
static swig_type_info _swigt__p_f_r_std__basic_ostream__char_std__char_traits__char______r_gpstk__WrongBlockNumber = {"_p_f_r_std__basic_ostream__char_std__char_traits__char______r_gpstk__WrongBlockNumber", 0, 0, 0, 0};
static swig_type_info _swigt__p_f_r_std__basic_ostream__char_std__char_traits__char______r_gpstk__InvalidValue = {"_p_f_r_std__basic_ostream__char_std__char_traits__char______r_gpstk__InvalidValue", 0, 0, 0, 0};
static swig_type_info _swigt__p_f_r_std__basic_ostream__char_std__char_traits__char______r_gpstk__WrongBlockFormat = {"_p_f_r_std__basic_ostream__char_std__char_traits__char______r_gpstk__WrongBlockFormat", 0, 0, 0, 0};
static swig_type_info _swigt__p_f_r_std__basic_ostream__char_std__char_traits__char______r_gpstk__ObjectNotFound = {"_p_f_r_std__basic_ostream__char_std__char_traits__char______r_gpstk__ObjectNotFound", 0, 0, 0, 0};
static swig_type_info _swigt__p_f_r_std__basic_ostream__char_std__char_traits__char______r_gpstk__SystemQueueException = {"_p_f_r_std__basic_ostream__char_std__char_traits__char______r_gpstk__SystemQueueException", 0, 0, 0, 0};
static swig_type_info _swigt__p_f_r_std__basic_ostream__char_std__char_traits__char______r_gpstk__SystemPipeException = {"_p_f_r_std__basic_ostream__char_std__char_traits__char______r_gpstk__SystemPipeException", 0, 0, 0, 0};
static swig_type_info _swigt__p_f_r_std__basic_ostream__char_std__char_traits__char______r_gpstk__SystemSemaphoreException = {"_p_f_r_std__basic_ostream__char_std__char_traits__char______r_gpstk__SystemSemaphoreException", 0, 0, 0, 0};
static swig_type_info _swigt__p_f_r_std__basic_ostream__char_std__char_traits__char______r_gpstk__FileMissingException = {"_p_f_r_std__basic_ostream__char_std__char_traits__char______r_gpstk__FileMissingException", 0, 0, 0, 0};
static swig_type_info _swigt__p_f_r_std__basic_ostream__char_std__char_traits__char______r_gpstk__ConfigurationException = {"_p_f_r_std__basic_ostream__char_std__char_traits__char______r_gpstk__ConfigurationException", 0, 0, 0, 0};
static swig_type_info _swigt__p_f_r_std__basic_ostream__char_std__char_traits__char______r_gpstk__InvalidArgumentException = {"_p_f_r_std__basic_ostream__char_std__char_traits__char______r_gpstk__InvalidArgumentException", 0, 0, 0, 0};
static swig_type_info _swigt__p_f_r_std__basic_ostream__char_std__char_traits__char______r_gpstk__IndexOutOfBoundsException = {"_p_f_r_std__basic_ostream__char_std__char_traits__char______r_gpstk__IndexOutOfBoundsException", 0, 0, 0, 0};
static swig_type_info _swigt__p_f_r_std__basic_ostream__char_std__char_traits__char______r_gpstk__Exception = {"_p_f_r_std__basic_ostream__char_std__char_traits__char______r_gpstk__Exception", 0, 0, 0, 0};
static swig_type_info _swigt__p_f_r_std__basic_ostream__char_std__char_traits__char______r_gpstk__FileHunterException = {"_p_f_r_std__basic_ostream__char_std__char_traits__char______r_gpstk__FileHunterException", 0, 0, 0, 0};
static swig_type_info _swigt__p_f_r_std__basic_ostream__char_std__char_traits__char______r_gpstk__GeometryException = {"_p_f_r_std__basic_ostream__char_std__char_traits__char______r_gpstk__GeometryException", 0, 0, 0, 0};
static swig_type_info _swigt__p_f_r_std__basic_ostream__char_std__char_traits__char______r_gpstk__NoGeoidException = {"_p_f_r_std__basic_ostream__char_std__char_traits__char______r_gpstk__NoGeoidException", 0, 0, 0, 0};
static swig_type_info _swigt__p_f_r_std__basic_ostream__char_std__char_traits__char______r_DayTimeException = {"_p_f_r_std__basic_ostream__char_std__char_traits__char______r_DayTimeException", 0, 0, 0, 0};
static swig_type_info _swigt__p_f_r_std__basic_ostream__char_std__char_traits__char______r_FormatException = {"_p_f_r_std__basic_ostream__char_std__char_traits__char______r_FormatException", 0, 0, 0, 0};
static swig_type_info _swigt__p_f_r_std__basic_ostream__char_std__char_traits__char______r_gpstk__InvalidRequest = {"_p_f_r_std__basic_ostream__char_std__char_traits__char______r_gpstk__InvalidRequest", 0, 0, 0, 0};
static swig_type_info _swigt__p_f_r_std__basic_ostream__char_std__char_traits__char______r_gpstk__AssertionFailure = {"_p_f_r_std__basic_ostream__char_std__char_traits__char______r_gpstk__AssertionFailure", 0, 0, 0, 0};
static swig_type_info _swigt__p_f_r_std__ios_base__r_std__ios_base = {"_p_f_r_std__ios_base__r_std__ios_base", "std::ios_base &(*)(std::ios_base &)", 0, 0, 0};
static swig_type_info _swigt__p_f_r_std__ios_base__r_gpstk__AccessError = {"_p_f_r_std__ios_base__r_gpstk__AccessError", 0, 0, 0, 0};
static swig_type_info _swigt__p_f_r_std__ios_base__r_gpstk__InvalidParameter = {"_p_f_r_std__ios_base__r_gpstk__InvalidParameter", 0, 0, 0, 0};
static swig_type_info _swigt__p_f_r_std__ios_base__r_gpstk__WrongBlockNumber = {"_p_f_r_std__ios_base__r_gpstk__WrongBlockNumber", 0, 0, 0, 0};
static swig_type_info _swigt__p_f_r_std__ios_base__r_gpstk__OutOfMemory = {"_p_f_r_std__ios_base__r_gpstk__OutOfMemory", 0, 0, 0, 0};
static swig_type_info _swigt__p_f_r_std__ios_base__r_std__basic_istreamTchar_std__char_traitsTchar_t_t = {"_p_f_r_std__ios_base__r_std__basic_istreamTchar_std__char_traitsTchar_t_t", 0, 0, 0, 0};
static swig_type_info _swigt__p_f_r_std__ios_base__r_std__basic_ostreamTchar_std__char_traitsTchar_t_t = {"_p_f_r_std__ios_base__r_std__basic_ostreamTchar_std__char_traitsTchar_t_t", 0, 0, 0, 0};
static swig_type_info _swigt__p_f_r_std__ios_base__r_gpstk__SystemSemaphoreException = {"_p_f_r_std__ios_base__r_gpstk__SystemSemaphoreException", 0, 0, 0, 0};
static swig_type_info _swigt__p_f_r_std__ios_base__r_gpstk__WrongBlockFormat = {"_p_f_r_std__ios_base__r_gpstk__WrongBlockFormat", 0, 0, 0, 0};
static swig_type_info _swigt__p_f_r_std__ios_base__r_gpstk__ConfigurationException = {"_p_f_r_std__ios_base__r_gpstk__ConfigurationException", 0, 0, 0, 0};
static swig_type_info _swigt__p_f_r_std__ios_base__r_std__basic_iosTchar_std__char_traitsTchar_t_t = {"_p_f_r_std__ios_base__r_std__basic_iosTchar_std__char_traitsTchar_t_t", 0, 0, 0, 0};
static swig_type_info _swigt__p_f_r_std__ios_base__r_gpstk__InvalidValue = {"_p_f_r_std__ios_base__r_gpstk__InvalidValue", 0, 0, 0, 0};
static swig_type_info _swigt__p_f_r_std__ios_base__r_gpstk__ObjectNotFound = {"_p_f_r_std__ios_base__r_gpstk__ObjectNotFound", 0, 0, 0, 0};
static swig_type_info _swigt__p_f_r_std__ios_base__r_gpstk__Exception = {"_p_f_r_std__ios_base__r_gpstk__Exception", 0, 0, 0, 0};
static swig_type_info _swigt__p_f_r_std__ios_base__r_gpstk__SystemPipeException = {"_p_f_r_std__ios_base__r_gpstk__SystemPipeException", 0, 0, 0, 0};
static swig_type_info _swigt__p_f_r_std__ios_base__r_gpstk__FileHunterException = {"_p_f_r_std__ios_base__r_gpstk__FileHunterException", 0, 0, 0, 0};
static swig_type_info _swigt__p_f_r_std__ios_base__r_gpstk__GeometryException = {"_p_f_r_std__ios_base__r_gpstk__GeometryException", 0, 0, 0, 0};
static swig_type_info _swigt__p_f_r_std__ios_base__r_gpstk__NoGeoidException = {"_p_f_r_std__ios_base__r_gpstk__NoGeoidException", 0, 0, 0, 0};
static swig_type_info _swigt__p_f_r_std__ios_base__r_DayTimeException = {"_p_f_r_std__ios_base__r_DayTimeException", 0, 0, 0, 0};
static swig_type_info _swigt__p_f_r_std__ios_base__r_FormatException = {"_p_f_r_std__ios_base__r_FormatException", 0, 0, 0, 0};
static swig_type_info _swigt__p_f_r_std__ios_base__r_gpstk__IndexOutOfBoundsException = {"_p_f_r_std__ios_base__r_gpstk__IndexOutOfBoundsException", 0, 0, 0, 0};
static swig_type_info _swigt__p_f_r_std__ios_base__r_gpstk__InvalidRequest = {"_p_f_r_std__ios_base__r_gpstk__InvalidRequest", 0, 0, 0, 0};
static swig_type_info _swigt__p_f_r_std__ios_base__r_std__basic_iostreamTchar_std__char_traitsTchar_t_t = {"_p_f_r_std__ios_base__r_std__basic_iostreamTchar_std__char_traitsTchar_t_t", 0, 0, 0, 0};
static swig_type_info _swigt__p_f_r_std__ios_base__r_gpstk__InvalidArgumentException = {"_p_f_r_std__ios_base__r_gpstk__InvalidArgumentException", 0, 0, 0, 0};
static swig_type_info _swigt__p_f_r_std__ios_base__r_gpstk__FileMissingException = {"_p_f_r_std__ios_base__r_gpstk__FileMissingException", 0, 0, 0, 0};
static swig_type_info _swigt__p_f_r_std__ios_base__r_gpstk__SystemQueueException = {"_p_f_r_std__ios_base__r_gpstk__SystemQueueException", 0, 0, 0, 0};
static swig_type_info _swigt__p_f_r_std__ios_base__r_gpstk__AssertionFailure = {"_p_f_r_std__ios_base__r_gpstk__AssertionFailure", 0, 0, 0, 0};
static swig_type_info _swigt__p_first_type = {"_p_first_type", "first_type *", 0, 0, 0};
static swig_type_info _swigt__p_float = {"_p_float", "float *", 0, 0, 0};
static swig_type_info _swigt__p_fmtflags = {"_p_fmtflags", "fmtflags *", 0, 0, 0};
static swig_type_info _swigt__p_gpstk__AccessError = {"_p_gpstk__AccessError", "gpstk::AccessError *", 0, 0, 0};
static swig_type_info _swigt__p_gpstk__AlmOrbit = {"_p_gpstk__AlmOrbit", "gpstk::AlmOrbit *", 0, 0, 0};
static swig_type_info _swigt__p_gpstk__AlmanacStore = {"_p_gpstk__AlmanacStore", "gpstk::AlmanacStore *", 0, 0, 0};
static swig_type_info _swigt__p_gpstk__AssertionFailure = {"_p_gpstk__AssertionFailure", "gpstk::AssertionFailure *", 0, 0, 0};
static swig_type_info _swigt__p_gpstk__BCEphemerisStore = {"_p_gpstk__BCEphemerisStore", "gpstk::BCEphemerisStore *", 0, 0, 0};
static swig_type_info _swigt__p_gpstk__ClockModel = {"_p_gpstk__ClockModel", "gpstk::ClockModel *", 0, 0, 0};
static swig_type_info _swigt__p_gpstk__CodeBuffer = {"_p_gpstk__CodeBuffer", "gpstk::CodeBuffer *", 0, 0, 0};
static swig_type_info _swigt__p_gpstk__ConfigurationException = {"_p_gpstk__ConfigurationException", "gpstk::ConfigurationException *", 0, 0, 0};
static swig_type_info _swigt__p_gpstk__CorrectedEphemerisRange = {"_p_gpstk__CorrectedEphemerisRange", "gpstk::CorrectedEphemerisRange *", 0, 0, 0};
static swig_type_info _swigt__p_gpstk__DayTime = {"_p_gpstk__DayTime", "gpstk::DayTime *", 0, 0, 0};
static swig_type_info _swigt__p_gpstk__ECEF = {"_p_gpstk__ECEF", "gpstk::ECEF *", 0, 0, 0};
static swig_type_info _swigt__p_gpstk__EngAlmanac = {"_p_gpstk__EngAlmanac", "gpstk::EngAlmanac *", 0, 0, 0};
static swig_type_info _swigt__p_gpstk__EngEphemeris = {"_p_gpstk__EngEphemeris", "gpstk::EngEphemeris *", 0, 0, 0};
static swig_type_info _swigt__p_gpstk__EngNav = {"_p_gpstk__EngNav", "gpstk::EngNav *", 0, 0, 0};
static swig_type_info _swigt__p_gpstk__EphemerisStore = {"_p_gpstk__EphemerisStore", "gpstk::EphemerisStore *", 0, 0, 0};
static swig_type_info _swigt__p_gpstk__EpochClockModel = {"_p_gpstk__EpochClockModel", "gpstk::EpochClockModel *", 0, 0, 0};
static swig_type_info _swigt__p_gpstk__Exception = {"_p_gpstk__Exception", "gpstk::Exception *", 0, 0, 0};
static swig_type_info _swigt__p_gpstk__ExceptionLocation = {"_p_gpstk__ExceptionLocation", "gpstk::ExceptionLocation *", 0, 0, 0};
static swig_type_info _swigt__p_gpstk__FFBinaryStream = {"_p_gpstk__FFBinaryStream", "gpstk::FFBinaryStream *", 0, 0, 0};
static swig_type_info _swigt__p_gpstk__FFData = {"_p_gpstk__FFData", "gpstk::FFData *", 0, 0, 0};
static swig_type_info _swigt__p_gpstk__FFStream = {"_p_gpstk__FFStream", "gpstk::FFStream *", 0, 0, 0};
static swig_type_info _swigt__p_gpstk__FFTextStream = {"_p_gpstk__FFTextStream", "gpstk::FFTextStream *", 0, 0, 0};
static swig_type_info _swigt__p_gpstk__FICAStream = {"_p_gpstk__FICAStream", "gpstk::FICAStream *", 0, 0, 0};
static swig_type_info _swigt__p_gpstk__FICBase = {"_p_gpstk__FICBase", "gpstk::FICBase *", 0, 0, 0};
static swig_type_info _swigt__p_gpstk__FICData = {"_p_gpstk__FICData", "gpstk::FICData *", 0, 0, 0};
static swig_type_info _swigt__p_gpstk__FICHeader = {"_p_gpstk__FICHeader", "gpstk::FICHeader *", 0, 0, 0};
static swig_type_info _swigt__p_gpstk__FICStream = {"_p_gpstk__FICStream", "gpstk::FICStream *", 0, 0, 0};
static swig_type_info _swigt__p_gpstk__FICStreamBase = {"_p_gpstk__FICStreamBase", "gpstk::FICStreamBase *", 0, 0, 0};
static swig_type_info _swigt__p_gpstk__FileHunter = {"_p_gpstk__FileHunter", "gpstk::FileHunter *", 0, 0, 0};
static swig_type_info _swigt__p_gpstk__FileHunterException = {"_p_gpstk__FileHunterException", "gpstk::FileHunterException *", 0, 0, 0};
static swig_type_info _swigt__p_gpstk__FileMissingException = {"_p_gpstk__FileMissingException", "gpstk::FileMissingException *", 0, 0, 0};
static swig_type_info _swigt__p_gpstk__FileStoreTgpstk__RinexNavHeader_t = {"_p_gpstk__FileStoreTgpstk__RinexNavHeader_t", "gpstk::FileStore<RinexNavHeader > *", 0, 0, 0};
static swig_type_info _swigt__p_gpstk__FileStoreTgpstk__SP3Header_t = {"_p_gpstk__FileStoreTgpstk__SP3Header_t", "gpstk::FileStore<SP3Header > *", 0, 0, 0};
static swig_type_info _swigt__p_gpstk__GGHeightTropModel = {"_p_gpstk__GGHeightTropModel", "gpstk::GGHeightTropModel *", 0, 0, 0};
static swig_type_info _swigt__p_gpstk__GGTropModel = {"_p_gpstk__GGTropModel", "gpstk::GGTropModel *", 0, 0, 0};
static swig_type_info _swigt__p_gpstk__GPSZcount = {"_p_gpstk__GPSZcount", "gpstk::GPSZcount *", 0, 0, 0};
static swig_type_info _swigt__p_gpstk__GenXSequence = {"_p_gpstk__GenXSequence", "gpstk::GenXSequence *", 0, 0, 0};
static swig_type_info _swigt__p_gpstk__Geodetic = {"_p_gpstk__Geodetic", "gpstk::Geodetic *", 0, 0, 0};
static swig_type_info _swigt__p_gpstk__GeoidModel = {"_p_gpstk__GeoidModel", "gpstk::GeoidModel *", 0, 0, 0};
static swig_type_info _swigt__p_gpstk__GeometryException = {"_p_gpstk__GeometryException", "gpstk::GeometryException *", 0, 0, 0};
static swig_type_info _swigt__p_gpstk__IndexOutOfBoundsException = {"_p_gpstk__IndexOutOfBoundsException", "gpstk::IndexOutOfBoundsException *", 0, 0, 0};
static swig_type_info _swigt__p_gpstk__InvalidArgumentException = {"_p_gpstk__InvalidArgumentException", "gpstk::InvalidArgumentException *", 0, 0, 0};
static swig_type_info _swigt__p_gpstk__InvalidParameter = {"_p_gpstk__InvalidParameter", "gpstk::InvalidParameter *", 0, 0, 0};
static swig_type_info _swigt__p_gpstk__InvalidRequest = {"_p_gpstk__InvalidRequest", "gpstk::InvalidRequest *", 0, 0, 0};
static swig_type_info _swigt__p_gpstk__InvalidValue = {"_p_gpstk__InvalidValue", "gpstk::InvalidValue *", 0, 0, 0};
static swig_type_info _swigt__p_gpstk__IonoModel = {"_p_gpstk__IonoModel", "gpstk::IonoModel *", 0, 0, 0};
static swig_type_info _swigt__p_gpstk__IonoModelStore = {"_p_gpstk__IonoModelStore", "gpstk::IonoModelStore *", 0, 0, 0};
static swig_type_info _swigt__p_gpstk__LinearClockModel = {"_p_gpstk__LinearClockModel", "gpstk::LinearClockModel *", 0, 0, 0};
static swig_type_info _swigt__p_gpstk__MSCStream = {"_p_gpstk__MSCStream", "gpstk::MSCStream *", 0, 0, 0};
static swig_type_info _swigt__p_gpstk__MatrixTdouble_t = {"_p_gpstk__MatrixTdouble_t", "gpstk::Matrix<double > *", 0, 0, 0};
static swig_type_info _swigt__p_gpstk__NBTropModel = {"_p_gpstk__NBTropModel", "gpstk::NBTropModel *", 0, 0, 0};
static swig_type_info _swigt__p_gpstk__NoGeoidException = {"_p_gpstk__NoGeoidException", "gpstk::NoGeoidException *", 0, 0, 0};
static swig_type_info _swigt__p_gpstk__ORDEpoch = {"_p_gpstk__ORDEpoch", "gpstk::ORDEpoch *", 0, 0, 0};
static swig_type_info _swigt__p_gpstk__ObjectNotFound = {"_p_gpstk__ObjectNotFound", "gpstk::ObjectNotFound *", 0, 0, 0};
static swig_type_info _swigt__p_gpstk__ObsClockModel = {"_p_gpstk__ObsClockModel", "gpstk::ObsClockModel *", 0, 0, 0};
static swig_type_info _swigt__p_gpstk__ObsEpoch = {"_p_gpstk__ObsEpoch", "gpstk::ObsEpoch *", 0, 0, 0};
static swig_type_info _swigt__p_gpstk__ObsRngDev = {"_p_gpstk__ObsRngDev", "gpstk::ObsRngDev *", 0, 0, 0};
static swig_type_info _swigt__p_gpstk__Observation = {"_p_gpstk__Observation", "gpstk::Observation *", 0, 0, 0};
static swig_type_info _swigt__p_gpstk__ObservationPlus = {"_p_gpstk__ObservationPlus", "gpstk::ObservationPlus *", 0, 0, 0};
static swig_type_info _swigt__p_gpstk__OutOfMemory = {"_p_gpstk__OutOfMemory", "gpstk::OutOfMemory *", 0, 0, 0};
static swig_type_info _swigt__p_gpstk__Position = {"_p_gpstk__Position", "gpstk::Position *", 0, 0, 0};
static swig_type_info _swigt__p_gpstk__RAIMSolution = {"_p_gpstk__RAIMSolution", "gpstk::RAIMSolution *", 0, 0, 0};
static swig_type_info _swigt__p_gpstk__RinexEphemerisStore = {"_p_gpstk__RinexEphemerisStore", "gpstk::RinexEphemerisStore *", 0, 0, 0};
static swig_type_info _swigt__p_gpstk__RinexMetBase = {"_p_gpstk__RinexMetBase", "gpstk::RinexMetBase *", 0, 0, 0};
static swig_type_info _swigt__p_gpstk__RinexMetData = {"_p_gpstk__RinexMetData", "gpstk::RinexMetData *", 0, 0, 0};
static swig_type_info _swigt__p_gpstk__RinexMetHeader = {"_p_gpstk__RinexMetHeader", "gpstk::RinexMetHeader *", 0, 0, 0};
static swig_type_info _swigt__p_gpstk__RinexMetStream = {"_p_gpstk__RinexMetStream", "gpstk::RinexMetStream *", 0, 0, 0};
static swig_type_info _swigt__p_gpstk__RinexNavBase = {"_p_gpstk__RinexNavBase", "gpstk::RinexNavBase *", 0, 0, 0};
static swig_type_info _swigt__p_gpstk__RinexNavData = {"_p_gpstk__RinexNavData", "gpstk::RinexNavData *", 0, 0, 0};
static swig_type_info _swigt__p_gpstk__RinexNavHeader = {"_p_gpstk__RinexNavHeader", "gpstk::RinexNavHeader *", 0, 0, 0};
static swig_type_info _swigt__p_gpstk__RinexNavStream = {"_p_gpstk__RinexNavStream", "gpstk::RinexNavStream *", 0, 0, 0};
static swig_type_info _swigt__p_gpstk__RinexObsBase = {"_p_gpstk__RinexObsBase", "gpstk::RinexObsBase *", 0, 0, 0};
static swig_type_info _swigt__p_gpstk__RinexObsData = {"_p_gpstk__RinexObsData", "gpstk::RinexObsData *", 0, 0, 0};
static swig_type_info _swigt__p_gpstk__RinexObsData__RinexPrnMap__iterator = {"_p_gpstk__RinexObsData__RinexPrnMap__iterator", "RinexObsData::RinexPrnMap::iterator *", 0, 0, 0};
static swig_type_info _swigt__p_gpstk__RinexObsHeader = {"_p_gpstk__RinexObsHeader", "gpstk::RinexObsHeader *", 0, 0, 0};
static swig_type_info _swigt__p_gpstk__RinexObsStream = {"_p_gpstk__RinexObsStream", "gpstk::RinexObsStream *", 0, 0, 0};
static swig_type_info _swigt__p_gpstk__RinexPrn = {"_p_gpstk__RinexPrn", "gpstk::RinexPrn *", 0, 0, 0};
static swig_type_info _swigt__p_gpstk__RungeKutta4 = {"_p_gpstk__RungeKutta4", "gpstk::RungeKutta4 *", 0, 0, 0};
static swig_type_info _swigt__p_gpstk__RxObsData = {"_p_gpstk__RxObsData", "gpstk::RxObsData *", 0, 0, 0};
static swig_type_info _swigt__p_gpstk__SMODFStream = {"_p_gpstk__SMODFStream", "gpstk::SMODFStream *", 0, 0, 0};
static swig_type_info _swigt__p_gpstk__SP3Base = {"_p_gpstk__SP3Base", "gpstk::SP3Base *", 0, 0, 0};
static swig_type_info _swigt__p_gpstk__SP3Data = {"_p_gpstk__SP3Data", "gpstk::SP3Data *", 0, 0, 0};
static swig_type_info _swigt__p_gpstk__SP3EphemerisStore = {"_p_gpstk__SP3EphemerisStore", "gpstk::SP3EphemerisStore *", 0, 0, 0};
static swig_type_info _swigt__p_gpstk__SP3Header = {"_p_gpstk__SP3Header", "gpstk::SP3Header *", 0, 0, 0};
static swig_type_info _swigt__p_gpstk__SP3Stream = {"_p_gpstk__SP3Stream", "gpstk::SP3Stream *", 0, 0, 0};
static swig_type_info _swigt__p_gpstk__SVPCodeGen = {"_p_gpstk__SVPCodeGen", "gpstk::SVPCodeGen *", 0, 0, 0};
static swig_type_info _swigt__p_gpstk__SatID = {"_p_gpstk__SatID", "gpstk::SatID *", 0, 0, 0};
static swig_type_info _swigt__p_gpstk__SimpleTropModel = {"_p_gpstk__SimpleTropModel", "gpstk::SimpleTropModel *", 0, 0, 0};
static swig_type_info _swigt__p_gpstk__StringUtils__StringException = {"_p_gpstk__StringUtils__StringException", "gpstk::StringUtils::StringException *", 0, 0, 0};
static swig_type_info _swigt__p_gpstk__SystemPipeException = {"_p_gpstk__SystemPipeException", "gpstk::SystemPipeException *", 0, 0, 0};
static swig_type_info _swigt__p_gpstk__SystemQueueException = {"_p_gpstk__SystemQueueException", "gpstk::SystemQueueException *", 0, 0, 0};
static swig_type_info _swigt__p_gpstk__SystemSemaphoreException = {"_p_gpstk__SystemSemaphoreException", "gpstk::SystemSemaphoreException *", 0, 0, 0};
static swig_type_info _swigt__p_gpstk__TabularEphemerisStore = {"_p_gpstk__TabularEphemerisStore", "gpstk::TabularEphemerisStore *", 0, 0, 0};
static swig_type_info _swigt__p_gpstk__Triple = {"_p_gpstk__Triple", "gpstk::Triple *", 0, 0, 0};
static swig_type_info _swigt__p_gpstk__TropModel = {"_p_gpstk__TropModel", "gpstk::TropModel *", 0, 0, 0};
static swig_type_info _swigt__p_gpstk__ValidTypeTchar_t = {"_p_gpstk__ValidTypeTchar_t", "gpstk::ValidType<char > *|gpstk::vchar *", 0, 0, 0};
static swig_type_info _swigt__p_gpstk__ValidTypeTdouble_t = {"_p_gpstk__ValidTypeTdouble_t", "gpstk::ValidType<double > *|gpstk::vdouble *", 0, 0, 0};
static swig_type_info _swigt__p_gpstk__ValidTypeTfloat_t = {"_p_gpstk__ValidTypeTfloat_t", "gpstk::ValidType<float > *|gpstk::vfloat *", 0, 0, 0};
static swig_type_info _swigt__p_gpstk__ValidTypeTint_t = {"_p_gpstk__ValidTypeTint_t", "gpstk::ValidType<int > *|gpstk::vint *", 0, 0, 0};
static swig_type_info _swigt__p_gpstk__ValidTypeTlong_t = {"_p_gpstk__ValidTypeTlong_t", "gpstk::ValidType<long > *|gpstk::vlong *", 0, 0, 0};
static swig_type_info _swigt__p_gpstk__ValidTypeTshort_t = {"_p_gpstk__ValidTypeTshort_t", "gpstk::ValidType<short > *|gpstk::vshort *", 0, 0, 0};
static swig_type_info _swigt__p_gpstk__ValidTypeTunsigned_char_t = {"_p_gpstk__ValidTypeTunsigned_char_t", "gpstk::ValidType<unsigned char > *|gpstk::vuchar *", 0, 0, 0};
static swig_type_info _swigt__p_gpstk__ValidTypeTunsigned_int_t = {"_p_gpstk__ValidTypeTunsigned_int_t", "gpstk::ValidType<unsigned int > *|gpstk::vuint *", 0, 0, 0};
static swig_type_info _swigt__p_gpstk__ValidTypeTunsigned_long_t = {"_p_gpstk__ValidTypeTunsigned_long_t", "gpstk::ValidType<unsigned long > *|gpstk::vulong *", 0, 0, 0};
static swig_type_info _swigt__p_gpstk__ValidTypeTunsigned_short_t = {"_p_gpstk__ValidTypeTunsigned_short_t", "gpstk::ValidType<unsigned short > *|gpstk::vushort *", 0, 0, 0};
static swig_type_info _swigt__p_gpstk__WrongBlockFormat = {"_p_gpstk__WrongBlockFormat", "gpstk::WrongBlockFormat *", 0, 0, 0};
static swig_type_info _swigt__p_gpstk__WrongBlockNumber = {"_p_gpstk__WrongBlockNumber", "gpstk::WrongBlockNumber *", 0, 0, 0};
static swig_type_info _swigt__p_gpstk__WxObsData = {"_p_gpstk__WxObsData", "gpstk::WxObsData *", 0, 0, 0};
static swig_type_info _swigt__p_gpstk__WxObservation = {"_p_gpstk__WxObservation", "gpstk::WxObservation *", 0, 0, 0};
static swig_type_info _swigt__p_gpstk__X1Sequence = {"_p_gpstk__X1Sequence", "gpstk::X1Sequence *", 0, 0, 0};
static swig_type_info _swigt__p_gpstk__X2Sequence = {"_p_gpstk__X2Sequence", "gpstk::X2Sequence *", 0, 0, 0};
static swig_type_info _swigt__p_gpstk__Xvt = {"_p_gpstk__Xvt", "gpstk::Xvt *", 0, 0, 0};
static swig_type_info _swigt__p_gpstk__ZeroTropModel = {"_p_gpstk__ZeroTropModel", "gpstk::ZeroTropModel *", 0, 0, 0};
static swig_type_info _swigt__p_int = {"_p_int", "int *", 0, 0, 0};
static swig_type_info _swigt__p_int_type = {"_p_int_type", "int_type *", 0, 0, 0};
static swig_type_info _swigt__p_iostate = {"_p_iostate", "iostate *", 0, 0, 0};
static swig_type_info _swigt__p_key_type = {"_p_key_type", "key_type *", 0, 0, 0};
static swig_type_info _swigt__p_long = {"_p_long", "long *", 0, 0, 0};
static swig_type_info _swigt__p_long_double = {"_p_long_double", "long double *", 0, 0, 0};
static swig_type_info _swigt__p_long_long = {"_p_long_long", "long long *", 0, 0, 0};
static swig_type_info _swigt__p_mapped_type = {"_p_mapped_type", "mapped_type *", 0, 0, 0};
static swig_type_info _swigt__p_off_type = {"_p_off_type", "off_type *", 0, 0, 0};
static swig_type_info _swigt__p_openmode = {"_p_openmode", "openmode *", 0, 0, 0};
static swig_type_info _swigt__p_p_void = {"_p_p_void", "void **", 0, 0, 0};
static swig_type_info _swigt__p_pos_type = {"_p_pos_type", "pos_type *", 0, 0, 0};
static swig_type_info _swigt__p_second_type = {"_p_second_type", "second_type *", 0, 0, 0};
static swig_type_info _swigt__p_seekdir = {"_p_seekdir", "seekdir *", 0, 0, 0};
static swig_type_info _swigt__p_sensorPosType = {"_p_sensorPosType", "sensorPosType *", 0, 0, 0};
static swig_type_info _swigt__p_sensorType = {"_p_sensorType", "sensorType *", 0, 0, 0};
static swig_type_info _swigt__p_short = {"_p_short", "short *", 0, 0, 0};
static swig_type_info _swigt__p_size_t = {"_p_size_t", "size_t *|std::streamsize *", 0, 0, 0};
static swig_type_info _swigt__p_size_type = {"_p_size_type", "size_type *", 0, 0, 0};
static swig_type_info _swigt__p_state_type = {"_p_state_type", "state_type *", 0, 0, 0};
static swig_type_info _swigt__p_std__bad_exception = {"_p_std__bad_exception", "std::bad_exception *", 0, 0, 0};
static swig_type_info _swigt__p_std__basic_iosTchar_std__char_traitsTchar_t_t = {"_p_std__basic_iosTchar_std__char_traitsTchar_t_t", "std::basic_ios<char > *", 0, 0, 0};
static swig_type_info _swigt__p_std__basic_iostreamTchar_std__char_traitsTchar_t_t = {"_p_std__basic_iostreamTchar_std__char_traitsTchar_t_t", "std::basic_iostream<char > *", 0, 0, 0};
static swig_type_info _swigt__p_std__basic_istreamTchar_std__char_traitsTchar_t_t = {"_p_std__basic_istreamTchar_std__char_traitsTchar_t_t", "std::basic_istream<char,std::char_traits<char > > *|std::istream *", 0, 0, 0};
static swig_type_info _swigt__p_std__basic_istreamTchar_std__char_traitsTchar_t_t__char_type = {"_p_std__basic_istreamTchar_std__char_traitsTchar_t_t__char_type", "char *|std::basic_istream<char >::char_type *", 0, 0, 0};
static swig_type_info _swigt__p_std__basic_istreamTchar_std__char_traitsTchar_t_t__off_type = {"_p_std__basic_istreamTchar_std__char_traitsTchar_t_t__off_type", "streamoff *|std::basic_istream<char >::off_type *", 0, 0, 0};
static swig_type_info _swigt__p_std__basic_istreamTchar_std__char_traitsTchar_t_t__pos_type = {"_p_std__basic_istreamTchar_std__char_traitsTchar_t_t__pos_type", "streampos *|std::basic_istream<char >::pos_type *", 0, 0, 0};
static swig_type_info _swigt__p_std__basic_ostreamTchar_std__char_traitsTchar_t_t = {"_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t", "std::basic_ostream<char,std::char_traits<char > > *|std::ostream *", 0, 0, 0};
static swig_type_info _swigt__p_std__basic_ostreamTchar_std__char_traitsTchar_t_t__off_type = {"_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t__off_type", "streamoff *|std::basic_ostream<char >::off_type *", 0, 0, 0};
static swig_type_info _swigt__p_std__basic_ostreamTchar_std__char_traitsTchar_t_t__pos_type = {"_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t__pos_type", "streampos *|std::basic_ostream<char >::pos_type *", 0, 0, 0};
static swig_type_info _swigt__p_std__basic_streambufTchar_std__char_traitsTchar_t_t = {"_p_std__basic_streambufTchar_std__char_traitsTchar_t_t", "std::basic_streambuf<char,std::char_traits<char > > *", 0, 0, 0};
static swig_type_info _swigt__p_std__basic_stringTchar_std__char_traitsTchar_t_std__allocatorTchar_t_t = {"_p_std__basic_stringTchar_std__char_traitsTchar_t_std__allocatorTchar_t_t", "std::basic_string<char,std::char_traits<char >,std::allocator<char > > *", 0, 0, 0};
static swig_type_info _swigt__p_std__domain_error = {"_p_std__domain_error", "std::domain_error *", 0, 0, 0};
static swig_type_info _swigt__p_std__exception = {"_p_std__exception", "std::exception *", 0, 0, 0};
static swig_type_info _swigt__p_std__invalid_argument = {"_p_std__invalid_argument", "std::invalid_argument *", 0, 0, 0};
static swig_type_info _swigt__p_std__ios__openmode = {"_p_std__ios__openmode", "std::ios::openmode *", 0, 0, 0};
static swig_type_info _swigt__p_std__ios_base = {"_p_std__ios_base", "std::ios_base *", 0, 0, 0};
static swig_type_info _swigt__p_std__length_error = {"_p_std__length_error", "std::length_error *", 0, 0, 0};
static swig_type_info _swigt__p_std__listTdouble_t = {"_p_std__listTdouble_t", "std::list<double > *", 0, 0, 0};
static swig_type_info _swigt__p_std__listTgpstk__EngEphemeris_t = {"_p_std__listTgpstk__EngEphemeris_t", "std::list<EngEphemeris > *", 0, 0, 0};
static swig_type_info _swigt__p_std__locale = {"_p_std__locale", "std::locale *", 0, 0, 0};
static swig_type_info _swigt__p_std__logic_error = {"_p_std__logic_error", "std::logic_error *", 0, 0, 0};
static swig_type_info _swigt__p_std__mapTRinexObsType_RinexDatum_std__lessTRinexObsType_t_std__allocatorTstd__pairTRinexObsType_const_RinexDatum_t_t_t = {"_p_std__mapTRinexObsType_RinexDatum_std__lessTRinexObsType_t_std__allocatorTstd__pairTRinexObsType_const_RinexDatum_t_t_t", "std::map<RinexObsType,RinexDatum > *", 0, 0, 0};
static swig_type_info _swigt__p_std__mapTRinexObsType_RinexDatum_std__lessTRinexObsType_t_std__allocatorTstd__pairTRinexObsType_const_RinexDatum_t_t_t__allocator_type = {"_p_std__mapTRinexObsType_RinexDatum_std__lessTRinexObsType_t_std__allocatorTstd__pairTRinexObsType_const_RinexDatum_t_t_t__allocator_type", "std::allocator<std::pair<RinexObsType const,RinexDatum > > *|std::map<RinexObsType,RinexDatum >::allocator_type *", 0, 0, 0};
static swig_type_info _swigt__p_std__mapTRinexObsType_RinexDatum_std__lessTRinexObsType_t_std__allocatorTstd__pairTRinexObsType_const_RinexDatum_t_t_t__key_type = {"_p_std__mapTRinexObsType_RinexDatum_std__lessTRinexObsType_t_std__allocatorTstd__pairTRinexObsType_const_RinexDatum_t_t_t__key_type", "RinexObsType *|std::map<RinexObsType,RinexDatum >::key_type *", 0, 0, 0};
static swig_type_info _swigt__p_std__mapTRinexObsType_RinexDatum_std__lessTRinexObsType_t_std__allocatorTstd__pairTRinexObsType_const_RinexDatum_t_t_t__mapped_type = {"_p_std__mapTRinexObsType_RinexDatum_std__lessTRinexObsType_t_std__allocatorTstd__pairTRinexObsType_const_RinexDatum_t_t_t__mapped_type", "RinexDatum *|std::map<RinexObsType,RinexDatum >::mapped_type *", 0, 0, 0};
static swig_type_info _swigt__p_std__mapTgpstk__DayTime_gpstk__ObsEpoch_std__lessTgpstk__DayTime_t_std__allocatorTstd__pairTgpstk__DayTime_const_gpstk__ObsEpoch_t_t_t = {"_p_std__mapTgpstk__DayTime_gpstk__ObsEpoch_std__lessTgpstk__DayTime_t_std__allocatorTstd__pairTgpstk__DayTime_const_gpstk__ObsEpoch_t_t_t", "std::map<gpstk::DayTime,gpstk::ObsEpoch,std::less<gpstk::DayTime >,std::allocator<std::pair<gpstk::DayTime const,gpstk::ObsEpoch > > > *|gpstk::ObsEpochMap *", 0, 0, 0};
static swig_type_info _swigt__p_std__mapTgpstk__DayTime_gpstk__WxObservation_std__lessTgpstk__DayTime_t_std__allocatorTstd__pairTgpstk__DayTime_const_gpstk__WxObservation_t_t_t = {"_p_std__mapTgpstk__DayTime_gpstk__WxObservation_std__lessTgpstk__DayTime_t_std__allocatorTstd__pairTgpstk__DayTime_const_gpstk__WxObservation_t_t_t", "std::map<gpstk::DayTime,gpstk::WxObservation,std::less<gpstk::DayTime >,std::allocator<std::pair<gpstk::DayTime const,gpstk::WxObservation > > > *|gpstk::WxObsMap *", 0, 0, 0};
static swig_type_info _swigt__p_std__mapTgpstk__RinexMetHeader__RinexMetType_double_std__lessTgpstk__RinexMetHeader__RinexMetType_t_std__allocatorTstd__pairTgpstk__RinexMetHeader__RinexMetType_const_double_t_t_t = {"_p_std__mapTgpstk__RinexMetHeader__RinexMetType_double_std__lessTgpstk__RinexMetHeader__RinexMetType_t_std__allocatorTstd__pairTgpstk__RinexMetHeader__RinexMetType_const_double_t_t_t", "std::map<enum gpstk::RinexMetHeader::RinexMetType,double,std::less<enum gpstk::RinexMetHeader::RinexMetType >,std::allocator<std::pair<enum gpstk::RinexMetHeader::RinexMetType const,double > > > *|gpstk::RinexMetData::RinexMetMap *", 0, 0, 0};
static swig_type_info _swigt__p_std__mapTgpstk__RinexPrn_gpstk__RinexObsData__RinexObsTypeMap_std__lessTgpstk__RinexPrn_t_std__allocatorTstd__pairTgpstk__RinexPrn_const_gpstk__RinexObsData__RinexObsTypeMap_t_t_t__allocator_type = {"_p_std__mapTgpstk__RinexPrn_gpstk__RinexObsData__RinexObsTypeMap_std__lessTgpstk__RinexPrn_t_std__allocatorTstd__pairTgpstk__RinexPrn_const_gpstk__RinexObsData__RinexObsTypeMap_t_t_t__allocator_type", "std::allocator<std::pair<gpstk::RinexPrn const,std::map<RinexObsType,RinexDatum,std::less<RinexObsType >,std::allocator<std::pair<RinexObsType const,RinexDatum > > > > > *|std::map<RinexPrn,RinexObsData::RinexObsTypeMap >::allocator_type *", 0, 0, 0};
static swig_type_info _swigt__p_std__mapTgpstk__RinexPrn_gpstk__RinexObsData__RinexObsTypeMap_std__lessTgpstk__RinexPrn_t_std__allocatorTstd__pairTgpstk__RinexPrn_const_gpstk__RinexObsData__RinexObsTypeMap_t_t_t__key_type = {"_p_std__mapTgpstk__RinexPrn_gpstk__RinexObsData__RinexObsTypeMap_std__lessTgpstk__RinexPrn_t_std__allocatorTstd__pairTgpstk__RinexPrn_const_gpstk__RinexObsData__RinexObsTypeMap_t_t_t__key_type", "gpstk::RinexPrn *|std::map<RinexPrn,RinexObsData::RinexObsTypeMap >::key_type *", 0, 0, 0};
static swig_type_info _swigt__p_std__mapTgpstk__RinexPrn_int_std__lessTgpstk__RinexPrn_t_std__allocatorTstd__pairTgpstk__RinexPrn_const_int_t_t_t = {"_p_std__mapTgpstk__RinexPrn_int_std__lessTgpstk__RinexPrn_t_std__allocatorTstd__pairTgpstk__RinexPrn_const_int_t_t_t", "std::map<RinexPrn,int > *", 0, 0, 0};
static swig_type_info _swigt__p_std__mapTgpstk__RinexPrn_int_std__lessTgpstk__RinexPrn_t_std__allocatorTstd__pairTgpstk__RinexPrn_const_int_t_t_t__allocator_type = {"_p_std__mapTgpstk__RinexPrn_int_std__lessTgpstk__RinexPrn_t_std__allocatorTstd__pairTgpstk__RinexPrn_const_int_t_t_t__allocator_type", "std::allocator<std::pair<gpstk::RinexPrn const,int > > *|std::map<RinexPrn,int >::allocator_type *", 0, 0, 0};
static swig_type_info _swigt__p_std__mapTgpstk__RinexPrn_int_std__lessTgpstk__RinexPrn_t_std__allocatorTstd__pairTgpstk__RinexPrn_const_int_t_t_t__key_type = {"_p_std__mapTgpstk__RinexPrn_int_std__lessTgpstk__RinexPrn_t_std__allocatorTstd__pairTgpstk__RinexPrn_const_int_t_t_t__key_type", "gpstk::RinexPrn *|std::map<RinexPrn,int >::key_type *", 0, 0, 0};
static swig_type_info _swigt__p_std__mapTgpstk__RinexPrn_std__mapTRinexObsType_RinexDatum_std__lessTRinexObsType_t_std__allocatorTstd__pairTRinexObsType_const_RinexDatum_t_t_t_std__lessTgpstk__RinexPrn_t_std__allocatorTstd__pairTgpstk__RinexPrn_const_std__mapTRinexObsType_RinexDatum_std__lessTRinexObsType_t_std__allocatorTstd__pairTRinexObsType_const_RinexDatum_t_t_t_t_t_t = {"_p_std__mapTgpstk__RinexPrn_std__mapTRinexObsType_RinexDatum_std__lessTRinexObsType_t_std__allocatorTstd__pairTRinexObsType_const_RinexDatum_t_t_t_std__lessTgpstk__RinexPrn_t_std__allocatorTstd__pairTgpstk__RinexPrn_const_std__mapTRinexObsType_RinexDatum_std__lessTRinexObsType_t_std__allocatorTstd__pairTRinexObsType_const_RinexDatum_t_t_t_t_t_t", "std::map<RinexPrn,RinexObsData::RinexObsTypeMap > *", 0, 0, 0};
static swig_type_info _swigt__p_std__mapTgpstk__RinexPrn_std__vectorTint_std__allocatorTint_t_t_std__lessTgpstk__RinexPrn_t_std__allocatorTstd__pairTgpstk__RinexPrn_const_std__vectorTint_std__allocatorTint_t_t_t_t_t = {"_p_std__mapTgpstk__RinexPrn_std__vectorTint_std__allocatorTint_t_t_std__lessTgpstk__RinexPrn_t_std__allocatorTstd__pairTgpstk__RinexPrn_const_std__vectorTint_std__allocatorTint_t_t_t_t_t", "std::map<gpstk::RinexPrn,std::vector<int,std::allocator<int > >,std::less<gpstk::RinexPrn >,std::allocator<std::pair<gpstk::RinexPrn const,std::vector<int,std::allocator<int > > > > > *", 0, 0, 0};
static swig_type_info _swigt__p_std__mapTshort_gpstk__AlmOrbit_std__lessTshort_t_std__allocatorTstd__pairTshort_const_gpstk__AlmOrbit_t_t_t = {"_p_std__mapTshort_gpstk__AlmOrbit_std__lessTshort_t_std__allocatorTstd__pairTshort_const_gpstk__AlmOrbit_t_t_t", "std::map<short,gpstk::AlmOrbit,std::less<short >,std::allocator<std::pair<short const,gpstk::AlmOrbit > > > *|gpstk::AlmOrbits *", 0, 0, 0};
static swig_type_info _swigt__p_std__mapTshort_gpstk__ObsClockModel__PRNMode_std__lessTshort_t_std__allocatorTstd__pairTshort_const_gpstk__ObsClockModel__PRNMode_t_t_t = {"_p_std__mapTshort_gpstk__ObsClockModel__PRNMode_std__lessTshort_t_std__allocatorTstd__pairTshort_const_gpstk__ObsClockModel__PRNMode_t_t_t", "std::map<short,enum gpstk::ObsClockModel::PRNMode,std::less<short >,std::allocator<std::pair<short const,enum gpstk::ObsClockModel::PRNMode > > > *|gpstk::ObsClockModel::PRNModeMap *", 0, 0, 0};
static swig_type_info _swigt__p_std__mapTshort_gpstk__ObsClockModel__PRNStatus_std__lessTshort_t_std__allocatorTstd__pairTshort_const_gpstk__ObsClockModel__PRNStatus_t_t_t = {"_p_std__mapTshort_gpstk__ObsClockModel__PRNStatus_std__lessTshort_t_std__allocatorTstd__pairTshort_const_gpstk__ObsClockModel__PRNStatus_t_t_t", "std::map<short,enum gpstk::ObsClockModel::PRNStatus,std::less<short >,std::allocator<std::pair<short const,enum gpstk::ObsClockModel::PRNStatus > > > *|gpstk::ObsClockModel::PRNStatusMap *", 0, 0, 0};
static swig_type_info _swigt__p_std__mapTshort_gpstk__ObsRngDev_std__lessTshort_t_std__allocatorTstd__pairTshort_const_gpstk__ObsRngDev_t_t_t = {"_p_std__mapTshort_gpstk__ObsRngDev_std__lessTshort_t_std__allocatorTstd__pairTshort_const_gpstk__ObsRngDev_t_t_t", "std::map<short,gpstk::ObsRngDev,std::less<short >,std::allocator<std::pair<short const,gpstk::ObsRngDev > > > *|gpstk::ORDEpoch::ORDMap *", 0, 0, 0};
static swig_type_info _swigt__p_std__mapTshort_gpstk__Observation_std__lessTshort_t_std__allocatorTstd__pairTshort_const_gpstk__Observation_t_t_t = {"_p_std__mapTshort_gpstk__Observation_std__lessTshort_t_std__allocatorTstd__pairTshort_const_gpstk__Observation_t_t_t", "std::map<short,gpstk::Observation,std::less<short >,std::allocator<std::pair<short const,gpstk::Observation > > > *|gpstk::ObsMap *", 0, 0, 0};
static swig_type_info _swigt__p_std__mapTshort_short_std__lessTshort_t_std__allocatorTstd__pairTshort_const_short_t_t_t = {"_p_std__mapTshort_short_std__lessTshort_t_std__allocatorTstd__pairTshort_const_short_t_t_t", "std::map<short,short,std::less<short >,std::allocator<std::pair<short const,short > > > *", 0, 0, 0};
static swig_type_info _swigt__p_std__out_of_range = {"_p_std__out_of_range", "std::out_of_range *", 0, 0, 0};
static swig_type_info _swigt__p_std__overflow_error = {"_p_std__overflow_error", "std::overflow_error *", 0, 0, 0};
static swig_type_info _swigt__p_std__range_error = {"_p_std__range_error", "std::range_error *", 0, 0, 0};
static swig_type_info _swigt__p_std__runtime_error = {"_p_std__runtime_error", "std::runtime_error *", 0, 0, 0};
static swig_type_info _swigt__p_std__setTshort_t = {"_p_std__setTshort_t", "std::set<short > *", 0, 0, 0};
static swig_type_info _swigt__p_std__string = {"_p_std__string", "std::string *", 0, 0, 0};
static swig_type_info _swigt__p_std__underflow_error = {"_p_std__underflow_error", "std::underflow_error *", 0, 0, 0};
static swig_type_info _swigt__p_std__valarrayTdouble_t = {"_p_std__valarrayTdouble_t", "std::valarray<double > *", 0, 0, 0};
static swig_type_info _swigt__p_std__vectorTExtraWaveFact_std__allocatorTExtraWaveFact_t_t = {"_p_std__vectorTExtraWaveFact_std__allocatorTExtraWaveFact_t_t", "std::vector<ExtraWaveFact,std::allocator<ExtraWaveFact > > *", 0, 0, 0};
static swig_type_info _swigt__p_std__vectorTRinexObsType_std__allocatorTRinexObsType_t_t = {"_p_std__vectorTRinexObsType_std__allocatorTRinexObsType_t_t", "std::vector<RinexObsType,std::allocator<RinexObsType > > *", 0, 0, 0};
static swig_type_info _swigt__p_std__vectorTchar_std__allocatorTchar_t_t = {"_p_std__vectorTchar_std__allocatorTchar_t_t", "std::vector<char,std::allocator<char > > *", 0, 0, 0};
static swig_type_info _swigt__p_std__vectorTdouble_std__allocatorTdouble_t_t = {"_p_std__vectorTdouble_std__allocatorTdouble_t_t", "std::vector<double > *", 0, 0, 0};
static swig_type_info _swigt__p_std__vectorTdouble_std__allocatorTdouble_t_t__allocator_type = {"_p_std__vectorTdouble_std__allocatorTdouble_t_t__allocator_type", "std::allocator<double > *|std::vector<double >::allocator_type *", 0, 0, 0};
static swig_type_info _swigt__p_std__vectorTgpstk__RinexMetHeader__RinexMetType_std__allocatorTgpstk__RinexMetHeader__RinexMetType_t_t = {"_p_std__vectorTgpstk__RinexMetHeader__RinexMetType_std__allocatorTgpstk__RinexMetHeader__RinexMetType_t_t", "std::vector<enum gpstk::RinexMetHeader::RinexMetType,std::allocator<enum gpstk::RinexMetHeader::RinexMetType > > *|std::vector<gpstk::RinexMetHeader::RinexMetType,std::allocator<gpstk::RinexMetHeader::RinexMetType > > *", 0, 0, 0};
static swig_type_info _swigt__p_std__vectorTgpstk__RinexPrn_std__allocatorTgpstk__RinexPrn_t_t = {"_p_std__vectorTgpstk__RinexPrn_std__allocatorTgpstk__RinexPrn_t_t", "std::vector<gpstk::RinexPrn > *", 0, 0, 0};
static swig_type_info _swigt__p_std__vectorTint_std__allocatorTint_t_t = {"_p_std__vectorTint_std__allocatorTint_t_t", "std::vector<int > *", 0, 0, 0};
static swig_type_info _swigt__p_std__vectorTint_std__allocatorTint_t_t__allocator_type = {"_p_std__vectorTint_std__allocatorTint_t_t__allocator_type", "std::allocator<int > *|std::vector<int >::allocator_type *", 0, 0, 0};
static swig_type_info _swigt__p_std__vectorTlong_std__allocatorTlong_t_t = {"_p_std__vectorTlong_std__allocatorTlong_t_t", "std::vector<long,std::allocator<long > > *", 0, 0, 0};
static swig_type_info _swigt__p_std__vectorTsensorPosType_std__allocatorTsensorPosType_t_t = {"_p_std__vectorTsensorPosType_std__allocatorTsensorPosType_t_t", "std::vector<sensorPosType,std::allocator<sensorPosType > > *", 0, 0, 0};
static swig_type_info _swigt__p_std__vectorTsensorType_std__allocatorTsensorType_t_t = {"_p_std__vectorTsensorType_std__allocatorTsensorType_t_t", "std::vector<sensorType,std::allocator<sensorType > > *", 0, 0, 0};
static swig_type_info _swigt__p_std__vectorTstd__string_std__allocatorTstd__string_t_t = {"_p_std__vectorTstd__string_std__allocatorTstd__string_t_t", "std::vector<std::string,std::allocator<std::string > > *", 0, 0, 0};
static swig_type_info _swigt__p_time_t = {"_p_time_t", "time_t *", 0, 0, 0};
static swig_type_info _swigt__p_timeval = {"_p_timeval", "timeval *", 0, 0, 0};
static swig_type_info _swigt__p_traits_type = {"_p_traits_type", "traits_type *", 0, 0, 0};
static swig_type_info _swigt__p_unsigned_int = {"_p_unsigned_int", "unsigned int *", 0, 0, 0};
static swig_type_info _swigt__p_unsigned_long = {"_p_unsigned_long", "unsigned long *", 0, 0, 0};
static swig_type_info _swigt__p_unsigned_long_long = {"_p_unsigned_long_long", "unsigned long long *", 0, 0, 0};
static swig_type_info _swigt__p_unsigned_short = {"_p_unsigned_short", "unsigned short *", 0, 0, 0};
static swig_type_info _swigt__p_value_type = {"_p_value_type", "value_type *", 0, 0, 0};
static swig_type_info _swigt__ptrdiff_t = {"_ptrdiff_t", "ptrdiff_t", 0, 0, 0};
static swig_type_info _swigt__size_t = {"_size_t", "size_t", 0, 0, 0};
static swig_type_info _swigt__std__ptrdiff_t = {"_std__ptrdiff_t", "std::ptrdiff_t", 0, 0, 0};
static swig_type_info _swigt__std__size_t = {"_std__size_t", "std::size_t", 0, 0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_DayTimeException,
  &_swigt__p_EndOfFile,
  &_swigt__p_ExtraWaveFact,
  &_swigt__p_FFStreamError,
  &_swigt__p_FileSpec,
  &_swigt__p_FileSpec__FileSpecSortType,
  &_swigt__p_FileSpec__FileSpecType,
  &_swigt__p_FilterPair,
  &_swigt__p_FormatException,
  &_swigt__p_InvalidIonoModel,
  &_swigt__p_InvalidTropModel,
  &_swigt__p_MatrixTdouble_t,
  &_swigt__p_NoAlmanacFound,
  &_swigt__p_NoEphemerisFound,
  &_swigt__p_NoIonoModelFound,
  &_swigt__p_ORDMap,
  &_swigt__p_PRNModeMap,
  &_swigt__p_PRNStatusMap,
  &_swigt__p_RinexDatum,
  &_swigt__p_RinexMetMap,
  &_swigt__p_RinexMetType,
  &_swigt__p_RinexObsType,
  &_swigt__p_RinexObsTypeMap,
  &_swigt__p_RinexPrnMap,
  &_swigt__p_SVBitsMap,
  &_swigt__p_SVNotPresentException,
  &_swigt__p_StatsTdouble_t,
  &_swigt__p_StringUtils__StringException,
  &_swigt__p_VectorTbool_t,
  &_swigt__p_VectorTdouble_t,
  &_swigt__p_allocator_type,
  &_swigt__p_bool,
  &_swigt__p_char,
  &_swigt__p_char_type,
  &_swigt__p_codeType,
  &_swigt__p_difference_type,
  &_swigt__p_double,
  &_swigt__p_f_enum_std__ios_base__event_r_std__ios_base_int__void,
  &_swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iosTchar_std__char_traitsTchar_t_t,
  &_swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_gpstk__AccessError,
  &_swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iostreamTchar_std__char_traitsTchar_t_t,
  &_swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_gpstk__InvalidParameter,
  &_swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_gpstk__OutOfMemory,
  &_swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_gpstk__WrongBlockNumber,
  &_swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_istreamTchar_std__char_traitsTchar_t_t,
  &_swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_ostreamTchar_std__char_traitsTchar_t_t,
  &_swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_gpstk__InvalidValue,
  &_swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_gpstk__WrongBlockFormat,
  &_swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_gpstk__ObjectNotFound,
  &_swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_gpstk__SystemPipeException,
  &_swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_gpstk__SystemSemaphoreException,
  &_swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_gpstk__FileMissingException,
  &_swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_gpstk__ConfigurationException,
  &_swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_gpstk__InvalidArgumentException,
  &_swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_gpstk__IndexOutOfBoundsException,
  &_swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_gpstk__Exception,
  &_swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_gpstk__SystemQueueException,
  &_swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_gpstk__FileHunterException,
  &_swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_gpstk__GeometryException,
  &_swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_gpstk__NoGeoidException,
  &_swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_DayTimeException,
  &_swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_FormatException,
  &_swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_gpstk__InvalidRequest,
  &_swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_gpstk__AssertionFailure,
  &_swigt__p_f_r_std__basic_istream__char_std__char_traits__char______r_std__basic_istreamTchar_std__char_traitsTchar_t_t,
  &_swigt__p_f_r_std__basic_istream__char_std__char_traits__char______r_std__basic_iostreamTchar_std__char_traitsTchar_t_t,
  &_swigt__p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_ostreamTchar_std__char_traitsTchar_t_t,
  &_swigt__p_f_r_std__basic_ostream__char_std__char_traits__char______r_gpstk__AccessError,
  &_swigt__p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_iostreamTchar_std__char_traitsTchar_t_t,
  &_swigt__p_f_r_std__basic_ostream__char_std__char_traits__char______r_gpstk__InvalidParameter,
  &_swigt__p_f_r_std__basic_ostream__char_std__char_traits__char______r_gpstk__OutOfMemory,
  &_swigt__p_f_r_std__basic_ostream__char_std__char_traits__char______r_gpstk__WrongBlockNumber,
  &_swigt__p_f_r_std__basic_ostream__char_std__char_traits__char______r_gpstk__InvalidValue,
  &_swigt__p_f_r_std__basic_ostream__char_std__char_traits__char______r_gpstk__WrongBlockFormat,
  &_swigt__p_f_r_std__basic_ostream__char_std__char_traits__char______r_gpstk__ObjectNotFound,
  &_swigt__p_f_r_std__basic_ostream__char_std__char_traits__char______r_gpstk__SystemQueueException,
  &_swigt__p_f_r_std__basic_ostream__char_std__char_traits__char______r_gpstk__SystemPipeException,
  &_swigt__p_f_r_std__basic_ostream__char_std__char_traits__char______r_gpstk__SystemSemaphoreException,
  &_swigt__p_f_r_std__basic_ostream__char_std__char_traits__char______r_gpstk__FileMissingException,
  &_swigt__p_f_r_std__basic_ostream__char_std__char_traits__char______r_gpstk__ConfigurationException,
  &_swigt__p_f_r_std__basic_ostream__char_std__char_traits__char______r_gpstk__InvalidArgumentException,
  &_swigt__p_f_r_std__basic_ostream__char_std__char_traits__char______r_gpstk__IndexOutOfBoundsException,
  &_swigt__p_f_r_std__basic_ostream__char_std__char_traits__char______r_gpstk__Exception,
  &_swigt__p_f_r_std__basic_ostream__char_std__char_traits__char______r_gpstk__FileHunterException,
  &_swigt__p_f_r_std__basic_ostream__char_std__char_traits__char______r_gpstk__GeometryException,
  &_swigt__p_f_r_std__basic_ostream__char_std__char_traits__char______r_gpstk__NoGeoidException,
  &_swigt__p_f_r_std__basic_ostream__char_std__char_traits__char______r_DayTimeException,
  &_swigt__p_f_r_std__basic_ostream__char_std__char_traits__char______r_FormatException,
  &_swigt__p_f_r_std__basic_ostream__char_std__char_traits__char______r_gpstk__InvalidRequest,
  &_swigt__p_f_r_std__basic_ostream__char_std__char_traits__char______r_gpstk__AssertionFailure,
  &_swigt__p_f_r_std__ios_base__r_std__ios_base,
  &_swigt__p_f_r_std__ios_base__r_gpstk__AccessError,
  &_swigt__p_f_r_std__ios_base__r_gpstk__InvalidParameter,
  &_swigt__p_f_r_std__ios_base__r_gpstk__WrongBlockNumber,
  &_swigt__p_f_r_std__ios_base__r_gpstk__OutOfMemory,
  &_swigt__p_f_r_std__ios_base__r_std__basic_istreamTchar_std__char_traitsTchar_t_t,
  &_swigt__p_f_r_std__ios_base__r_std__basic_ostreamTchar_std__char_traitsTchar_t_t,
  &_swigt__p_f_r_std__ios_base__r_gpstk__SystemSemaphoreException,
  &_swigt__p_f_r_std__ios_base__r_gpstk__WrongBlockFormat,
  &_swigt__p_f_r_std__ios_base__r_gpstk__ConfigurationException,
  &_swigt__p_f_r_std__ios_base__r_std__basic_iosTchar_std__char_traitsTchar_t_t,
  &_swigt__p_f_r_std__ios_base__r_gpstk__InvalidValue,
  &_swigt__p_f_r_std__ios_base__r_gpstk__ObjectNotFound,
  &_swigt__p_f_r_std__ios_base__r_gpstk__Exception,
  &_swigt__p_f_r_std__ios_base__r_gpstk__SystemPipeException,
  &_swigt__p_f_r_std__ios_base__r_gpstk__FileHunterException,
  &_swigt__p_f_r_std__ios_base__r_gpstk__GeometryException,
  &_swigt__p_f_r_std__ios_base__r_gpstk__NoGeoidException,
  &_swigt__p_f_r_std__ios_base__r_DayTimeException,
  &_swigt__p_f_r_std__ios_base__r_FormatException,
  &_swigt__p_f_r_std__ios_base__r_gpstk__IndexOutOfBoundsException,
  &_swigt__p_f_r_std__ios_base__r_gpstk__InvalidRequest,
  &_swigt__p_f_r_std__ios_base__r_std__basic_iostreamTchar_std__char_traitsTchar_t_t,
  &_swigt__p_f_r_std__ios_base__r_gpstk__InvalidArgumentException,
  &_swigt__p_f_r_std__ios_base__r_gpstk__FileMissingException,
  &_swigt__p_f_r_std__ios_base__r_gpstk__SystemQueueException,
  &_swigt__p_f_r_std__ios_base__r_gpstk__AssertionFailure,
  &_swigt__p_first_type,
  &_swigt__p_float,
  &_swigt__p_fmtflags,
  &_swigt__p_gpstk__AccessError,
  &_swigt__p_gpstk__AlmOrbit,
  &_swigt__p_gpstk__AlmanacStore,
  &_swigt__p_gpstk__AssertionFailure,
  &_swigt__p_gpstk__BCEphemerisStore,
  &_swigt__p_gpstk__ClockModel,
  &_swigt__p_gpstk__CodeBuffer,
  &_swigt__p_gpstk__ConfigurationException,
  &_swigt__p_gpstk__CorrectedEphemerisRange,
  &_swigt__p_gpstk__DayTime,
  &_swigt__p_gpstk__ECEF,
  &_swigt__p_gpstk__EngAlmanac,
  &_swigt__p_gpstk__EngEphemeris,
  &_swigt__p_gpstk__EngNav,
  &_swigt__p_gpstk__EphemerisStore,
  &_swigt__p_gpstk__EpochClockModel,
  &_swigt__p_gpstk__Exception,
  &_swigt__p_gpstk__ExceptionLocation,
  &_swigt__p_gpstk__FFBinaryStream,
  &_swigt__p_gpstk__FFData,
  &_swigt__p_gpstk__FFStream,
  &_swigt__p_gpstk__FFTextStream,
  &_swigt__p_gpstk__FICAStream,
  &_swigt__p_gpstk__FICBase,
  &_swigt__p_gpstk__FICData,
  &_swigt__p_gpstk__FICHeader,
  &_swigt__p_gpstk__FICStream,
  &_swigt__p_gpstk__FICStreamBase,
  &_swigt__p_gpstk__FileHunter,
  &_swigt__p_gpstk__FileHunterException,
  &_swigt__p_gpstk__FileMissingException,
  &_swigt__p_gpstk__FileStoreTgpstk__RinexNavHeader_t,
  &_swigt__p_gpstk__FileStoreTgpstk__SP3Header_t,
  &_swigt__p_gpstk__GGHeightTropModel,
  &_swigt__p_gpstk__GGTropModel,
  &_swigt__p_gpstk__GPSZcount,
  &_swigt__p_gpstk__GenXSequence,
  &_swigt__p_gpstk__Geodetic,
  &_swigt__p_gpstk__GeoidModel,
  &_swigt__p_gpstk__GeometryException,
  &_swigt__p_gpstk__IndexOutOfBoundsException,
  &_swigt__p_gpstk__InvalidArgumentException,
  &_swigt__p_gpstk__InvalidParameter,
  &_swigt__p_gpstk__InvalidRequest,
  &_swigt__p_gpstk__InvalidValue,
  &_swigt__p_gpstk__IonoModel,
  &_swigt__p_gpstk__IonoModelStore,
  &_swigt__p_gpstk__LinearClockModel,
  &_swigt__p_gpstk__MSCStream,
  &_swigt__p_gpstk__MatrixTdouble_t,
  &_swigt__p_gpstk__NBTropModel,
  &_swigt__p_gpstk__NoGeoidException,
  &_swigt__p_gpstk__ORDEpoch,
  &_swigt__p_gpstk__ObjectNotFound,
  &_swigt__p_gpstk__ObsClockModel,
  &_swigt__p_gpstk__ObsEpoch,
  &_swigt__p_gpstk__ObsRngDev,
  &_swigt__p_gpstk__Observation,
  &_swigt__p_gpstk__ObservationPlus,
  &_swigt__p_gpstk__OutOfMemory,
  &_swigt__p_gpstk__Position,
  &_swigt__p_gpstk__RAIMSolution,
  &_swigt__p_gpstk__RinexEphemerisStore,
  &_swigt__p_gpstk__RinexMetBase,
  &_swigt__p_gpstk__RinexMetData,
  &_swigt__p_gpstk__RinexMetHeader,
  &_swigt__p_gpstk__RinexMetStream,
  &_swigt__p_gpstk__RinexNavBase,
  &_swigt__p_gpstk__RinexNavData,
  &_swigt__p_gpstk__RinexNavHeader,
  &_swigt__p_gpstk__RinexNavStream,
  &_swigt__p_gpstk__RinexObsBase,
  &_swigt__p_gpstk__RinexObsData,
  &_swigt__p_gpstk__RinexObsData__RinexPrnMap__iterator,
  &_swigt__p_gpstk__RinexObsHeader,
  &_swigt__p_gpstk__RinexObsStream,
  &_swigt__p_gpstk__RinexPrn,
  &_swigt__p_gpstk__RungeKutta4,
  &_swigt__p_gpstk__RxObsData,
  &_swigt__p_gpstk__SMODFStream,
  &_swigt__p_gpstk__SP3Base,
  &_swigt__p_gpstk__SP3Data,
  &_swigt__p_gpstk__SP3EphemerisStore,
  &_swigt__p_gpstk__SP3Header,
  &_swigt__p_gpstk__SP3Stream,
  &_swigt__p_gpstk__SVPCodeGen,
  &_swigt__p_gpstk__SatID,
  &_swigt__p_gpstk__SimpleTropModel,
  &_swigt__p_gpstk__StringUtils__StringException,
  &_swigt__p_gpstk__SystemPipeException,
  &_swigt__p_gpstk__SystemQueueException,
  &_swigt__p_gpstk__SystemSemaphoreException,
  &_swigt__p_gpstk__TabularEphemerisStore,
  &_swigt__p_gpstk__Triple,
  &_swigt__p_gpstk__TropModel,
  &_swigt__p_gpstk__ValidTypeTchar_t,
  &_swigt__p_gpstk__ValidTypeTdouble_t,
  &_swigt__p_gpstk__ValidTypeTfloat_t,
  &_swigt__p_gpstk__ValidTypeTint_t,
  &_swigt__p_gpstk__ValidTypeTlong_t,
  &_swigt__p_gpstk__ValidTypeTshort_t,
  &_swigt__p_gpstk__ValidTypeTunsigned_char_t,
  &_swigt__p_gpstk__ValidTypeTunsigned_int_t,
  &_swigt__p_gpstk__ValidTypeTunsigned_long_t,
  &_swigt__p_gpstk__ValidTypeTunsigned_short_t,
  &_swigt__p_gpstk__WrongBlockFormat,
  &_swigt__p_gpstk__WrongBlockNumber,
  &_swigt__p_gpstk__WxObsData,
  &_swigt__p_gpstk__WxObservation,
  &_swigt__p_gpstk__X1Sequence,
  &_swigt__p_gpstk__X2Sequence,
  &_swigt__p_gpstk__Xvt,
  &_swigt__p_gpstk__ZeroTropModel,
  &_swigt__p_int,
  &_swigt__p_int_type,
  &_swigt__p_iostate,
  &_swigt__p_key_type,
  &_swigt__p_long,
  &_swigt__p_long_double,
  &_swigt__p_long_long,
  &_swigt__p_mapped_type,
  &_swigt__p_off_type,
  &_swigt__p_openmode,
  &_swigt__p_p_void,
  &_swigt__p_pos_type,
  &_swigt__p_second_type,
  &_swigt__p_seekdir,
  &_swigt__p_sensorPosType,
  &_swigt__p_sensorType,
  &_swigt__p_short,
  &_swigt__p_size_t,
  &_swigt__p_size_type,
  &_swigt__p_state_type,
  &_swigt__p_std__bad_exception,
  &_swigt__p_std__basic_iosTchar_std__char_traitsTchar_t_t,
  &_swigt__p_std__basic_iostreamTchar_std__char_traitsTchar_t_t,
  &_swigt__p_std__basic_istreamTchar_std__char_traitsTchar_t_t,
  &_swigt__p_std__basic_istreamTchar_std__char_traitsTchar_t_t__char_type,
  &_swigt__p_std__basic_istreamTchar_std__char_traitsTchar_t_t__off_type,
  &_swigt__p_std__basic_istreamTchar_std__char_traitsTchar_t_t__pos_type,
  &_swigt__p_std__basic_ostreamTchar_std__char_traitsTchar_t_t,
  &_swigt__p_std__basic_ostreamTchar_std__char_traitsTchar_t_t__off_type,
  &_swigt__p_std__basic_ostreamTchar_std__char_traitsTchar_t_t__pos_type,
  &_swigt__p_std__basic_streambufTchar_std__char_traitsTchar_t_t,
  &_swigt__p_std__basic_stringTchar_std__char_traitsTchar_t_std__allocatorTchar_t_t,
  &_swigt__p_std__domain_error,
  &_swigt__p_std__exception,
  &_swigt__p_std__invalid_argument,
  &_swigt__p_std__ios__openmode,
  &_swigt__p_std__ios_base,
  &_swigt__p_std__length_error,
  &_swigt__p_std__listTdouble_t,
  &_swigt__p_std__listTgpstk__EngEphemeris_t,
  &_swigt__p_std__locale,
  &_swigt__p_std__logic_error,
  &_swigt__p_std__mapTRinexObsType_RinexDatum_std__lessTRinexObsType_t_std__allocatorTstd__pairTRinexObsType_const_RinexDatum_t_t_t,
  &_swigt__p_std__mapTRinexObsType_RinexDatum_std__lessTRinexObsType_t_std__allocatorTstd__pairTRinexObsType_const_RinexDatum_t_t_t__allocator_type,
  &_swigt__p_std__mapTRinexObsType_RinexDatum_std__lessTRinexObsType_t_std__allocatorTstd__pairTRinexObsType_const_RinexDatum_t_t_t__key_type,
  &_swigt__p_std__mapTRinexObsType_RinexDatum_std__lessTRinexObsType_t_std__allocatorTstd__pairTRinexObsType_const_RinexDatum_t_t_t__mapped_type,
  &_swigt__p_std__mapTgpstk__DayTime_gpstk__ObsEpoch_std__lessTgpstk__DayTime_t_std__allocatorTstd__pairTgpstk__DayTime_const_gpstk__ObsEpoch_t_t_t,
  &_swigt__p_std__mapTgpstk__DayTime_gpstk__WxObservation_std__lessTgpstk__DayTime_t_std__allocatorTstd__pairTgpstk__DayTime_const_gpstk__WxObservation_t_t_t,
  &_swigt__p_std__mapTgpstk__RinexMetHeader__RinexMetType_double_std__lessTgpstk__RinexMetHeader__RinexMetType_t_std__allocatorTstd__pairTgpstk__RinexMetHeader__RinexMetType_const_double_t_t_t,
  &_swigt__p_std__mapTgpstk__RinexPrn_gpstk__RinexObsData__RinexObsTypeMap_std__lessTgpstk__RinexPrn_t_std__allocatorTstd__pairTgpstk__RinexPrn_const_gpstk__RinexObsData__RinexObsTypeMap_t_t_t__allocator_type,
  &_swigt__p_std__mapTgpstk__RinexPrn_gpstk__RinexObsData__RinexObsTypeMap_std__lessTgpstk__RinexPrn_t_std__allocatorTstd__pairTgpstk__RinexPrn_const_gpstk__RinexObsData__RinexObsTypeMap_t_t_t__key_type,
  &_swigt__p_std__mapTgpstk__RinexPrn_int_std__lessTgpstk__RinexPrn_t_std__allocatorTstd__pairTgpstk__RinexPrn_const_int_t_t_t,
  &_swigt__p_std__mapTgpstk__RinexPrn_int_std__lessTgpstk__RinexPrn_t_std__allocatorTstd__pairTgpstk__RinexPrn_const_int_t_t_t__allocator_type,
  &_swigt__p_std__mapTgpstk__RinexPrn_int_std__lessTgpstk__RinexPrn_t_std__allocatorTstd__pairTgpstk__RinexPrn_const_int_t_t_t__key_type,
  &_swigt__p_std__mapTgpstk__RinexPrn_std__mapTRinexObsType_RinexDatum_std__lessTRinexObsType_t_std__allocatorTstd__pairTRinexObsType_const_RinexDatum_t_t_t_std__lessTgpstk__RinexPrn_t_std__allocatorTstd__pairTgpstk__RinexPrn_const_std__mapTRinexObsType_RinexDatum_std__lessTRinexObsType_t_std__allocatorTstd__pairTRinexObsType_const_RinexDatum_t_t_t_t_t_t,
  &_swigt__p_std__mapTgpstk__RinexPrn_std__vectorTint_std__allocatorTint_t_t_std__lessTgpstk__RinexPrn_t_std__allocatorTstd__pairTgpstk__RinexPrn_const_std__vectorTint_std__allocatorTint_t_t_t_t_t,
  &_swigt__p_std__mapTshort_gpstk__AlmOrbit_std__lessTshort_t_std__allocatorTstd__pairTshort_const_gpstk__AlmOrbit_t_t_t,
  &_swigt__p_std__mapTshort_gpstk__ObsClockModel__PRNMode_std__lessTshort_t_std__allocatorTstd__pairTshort_const_gpstk__ObsClockModel__PRNMode_t_t_t,
  &_swigt__p_std__mapTshort_gpstk__ObsClockModel__PRNStatus_std__lessTshort_t_std__allocatorTstd__pairTshort_const_gpstk__ObsClockModel__PRNStatus_t_t_t,
  &_swigt__p_std__mapTshort_gpstk__ObsRngDev_std__lessTshort_t_std__allocatorTstd__pairTshort_const_gpstk__ObsRngDev_t_t_t,
  &_swigt__p_std__mapTshort_gpstk__Observation_std__lessTshort_t_std__allocatorTstd__pairTshort_const_gpstk__Observation_t_t_t,
  &_swigt__p_std__mapTshort_short_std__lessTshort_t_std__allocatorTstd__pairTshort_const_short_t_t_t,
  &_swigt__p_std__out_of_range,
  &_swigt__p_std__overflow_error,
  &_swigt__p_std__range_error,
  &_swigt__p_std__runtime_error,
  &_swigt__p_std__setTshort_t,
  &_swigt__p_std__string,
  &_swigt__p_std__underflow_error,
  &_swigt__p_std__valarrayTdouble_t,
  &_swigt__p_std__vectorTExtraWaveFact_std__allocatorTExtraWaveFact_t_t,
  &_swigt__p_std__vectorTRinexObsType_std__allocatorTRinexObsType_t_t,
  &_swigt__p_std__vectorTchar_std__allocatorTchar_t_t,
  &_swigt__p_std__vectorTdouble_std__allocatorTdouble_t_t,
  &_swigt__p_std__vectorTdouble_std__allocatorTdouble_t_t__allocator_type,
  &_swigt__p_std__vectorTgpstk__RinexMetHeader__RinexMetType_std__allocatorTgpstk__RinexMetHeader__RinexMetType_t_t,
  &_swigt__p_std__vectorTgpstk__RinexPrn_std__allocatorTgpstk__RinexPrn_t_t,
  &_swigt__p_std__vectorTint_std__allocatorTint_t_t,
  &_swigt__p_std__vectorTint_std__allocatorTint_t_t__allocator_type,
  &_swigt__p_std__vectorTlong_std__allocatorTlong_t_t,
  &_swigt__p_std__vectorTsensorPosType_std__allocatorTsensorPosType_t_t,
  &_swigt__p_std__vectorTsensorType_std__allocatorTsensorType_t_t,
  &_swigt__p_std__vectorTstd__string_std__allocatorTstd__string_t_t,
  &_swigt__p_time_t,
  &_swigt__p_timeval,
  &_swigt__p_traits_type,
  &_swigt__p_unsigned_int,
  &_swigt__p_unsigned_long,
  &_swigt__p_unsigned_long_long,
  &_swigt__p_unsigned_short,
  &_swigt__p_value_type,
  &_swigt__ptrdiff_t,
  &_swigt__size_t,
  &_swigt__std__ptrdiff_t,
  &_swigt__std__size_t,
};

static swig_cast_info _swigc__p_DayTimeException[] = {  {&_swigt__p_DayTimeException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_EndOfFile[] = {  {&_swigt__p_EndOfFile, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ExtraWaveFact[] = {  {&_swigt__p_ExtraWaveFact, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FFStreamError[] = {  {&_swigt__p_FFStreamError, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FileSpec[] = {  {&_swigt__p_FileSpec, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FileSpec__FileSpecSortType[] = {  {&_swigt__p_FileSpec__FileSpecSortType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FileSpec__FileSpecType[] = {  {&_swigt__p_FileSpec__FileSpecType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FilterPair[] = {  {&_swigt__p_FilterPair, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FormatException[] = {  {&_swigt__p_FormatException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_InvalidIonoModel[] = {  {&_swigt__p_InvalidIonoModel, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_InvalidTropModel[] = {  {&_swigt__p_InvalidTropModel, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MatrixTdouble_t[] = {  {&_swigt__p_MatrixTdouble_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_NoAlmanacFound[] = {  {&_swigt__p_NoAlmanacFound, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_NoEphemerisFound[] = {  {&_swigt__p_NoEphemerisFound, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_NoIonoModelFound[] = {  {&_swigt__p_NoIonoModelFound, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ORDMap[] = {  {&_swigt__p_ORDMap, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_PRNModeMap[] = {  {&_swigt__p_PRNModeMap, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_PRNStatusMap[] = {  {&_swigt__p_PRNStatusMap, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_RinexDatum[] = {  {&_swigt__p_RinexDatum, 0, 0, 0},  {&_swigt__p_std__mapTRinexObsType_RinexDatum_std__lessTRinexObsType_t_std__allocatorTstd__pairTRinexObsType_const_RinexDatum_t_t_t__mapped_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_RinexMetMap[] = {  {&_swigt__p_RinexMetMap, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_RinexMetType[] = {  {&_swigt__p_RinexMetType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_RinexObsType[] = {  {&_swigt__p_RinexObsType, 0, 0, 0},  {&_swigt__p_std__mapTRinexObsType_RinexDatum_std__lessTRinexObsType_t_std__allocatorTstd__pairTRinexObsType_const_RinexDatum_t_t_t__key_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_RinexObsTypeMap[] = {  {&_swigt__p_RinexObsTypeMap, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_RinexPrnMap[] = {  {&_swigt__p_RinexPrnMap, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SVBitsMap[] = {  {&_swigt__p_SVBitsMap, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SVNotPresentException[] = {  {&_swigt__p_SVNotPresentException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_StatsTdouble_t[] = {  {&_swigt__p_StatsTdouble_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_StringUtils__StringException[] = {  {&_swigt__p_StringUtils__StringException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_VectorTbool_t[] = {  {&_swigt__p_VectorTbool_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_VectorTdouble_t[] = {  {&_swigt__p_VectorTdouble_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_allocator_type[] = {  {&_swigt__p_allocator_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_bool[] = {  {&_swigt__p_bool, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_char[] = {  {&_swigt__p_char, 0, 0, 0},  {&_swigt__p_std__basic_istreamTchar_std__char_traitsTchar_t_t__char_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_char_type[] = {  {&_swigt__p_char_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_codeType[] = {  {&_swigt__p_codeType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_difference_type[] = {  {&_swigt__p_difference_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_double[] = {  {&_swigt__p_double, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_enum_std__ios_base__event_r_std__ios_base_int__void[] = {  {&_swigt__p_f_enum_std__ios_base__event_r_std__ios_base_int__void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_r_std__basic_ios__char_std__char_traits__char______r_gpstk__AccessError[] = {{&_swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_gpstk__AccessError, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iostreamTchar_std__char_traitsTchar_t_t[] = {{&_swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iostreamTchar_std__char_traitsTchar_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_r_std__basic_ios__char_std__char_traits__char______r_gpstk__InvalidParameter[] = {{&_swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_gpstk__InvalidParameter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_r_std__basic_ios__char_std__char_traits__char______r_gpstk__OutOfMemory[] = {{&_swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_gpstk__OutOfMemory, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_r_std__basic_ios__char_std__char_traits__char______r_gpstk__WrongBlockNumber[] = {{&_swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_gpstk__WrongBlockNumber, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_istreamTchar_std__char_traitsTchar_t_t[] = {{&_swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_istreamTchar_std__char_traitsTchar_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_ostreamTchar_std__char_traitsTchar_t_t[] = {{&_swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_r_std__basic_ios__char_std__char_traits__char______r_gpstk__InvalidValue[] = {{&_swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_gpstk__InvalidValue, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_r_std__basic_ios__char_std__char_traits__char______r_gpstk__WrongBlockFormat[] = {{&_swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_gpstk__WrongBlockFormat, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_r_std__basic_ios__char_std__char_traits__char______r_gpstk__ObjectNotFound[] = {{&_swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_gpstk__ObjectNotFound, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_r_std__basic_ios__char_std__char_traits__char______r_gpstk__SystemPipeException[] = {{&_swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_gpstk__SystemPipeException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_r_std__basic_ios__char_std__char_traits__char______r_gpstk__SystemSemaphoreException[] = {{&_swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_gpstk__SystemSemaphoreException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_r_std__basic_ios__char_std__char_traits__char______r_gpstk__FileMissingException[] = {{&_swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_gpstk__FileMissingException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_r_std__basic_ios__char_std__char_traits__char______r_gpstk__ConfigurationException[] = {{&_swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_gpstk__ConfigurationException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_r_std__basic_ios__char_std__char_traits__char______r_gpstk__InvalidArgumentException[] = {{&_swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_gpstk__InvalidArgumentException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_r_std__basic_ios__char_std__char_traits__char______r_gpstk__IndexOutOfBoundsException[] = {{&_swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_gpstk__IndexOutOfBoundsException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_r_std__basic_ios__char_std__char_traits__char______r_gpstk__Exception[] = {{&_swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_gpstk__Exception, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_r_std__basic_ios__char_std__char_traits__char______r_gpstk__SystemQueueException[] = {{&_swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_gpstk__SystemQueueException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_r_std__basic_ios__char_std__char_traits__char______r_gpstk__FileHunterException[] = {{&_swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_gpstk__FileHunterException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_r_std__basic_ios__char_std__char_traits__char______r_gpstk__GeometryException[] = {{&_swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_gpstk__GeometryException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_r_std__basic_ios__char_std__char_traits__char______r_gpstk__NoGeoidException[] = {{&_swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_gpstk__NoGeoidException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_r_std__basic_ios__char_std__char_traits__char______r_DayTimeException[] = {{&_swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_DayTimeException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_r_std__basic_ios__char_std__char_traits__char______r_FormatException[] = {{&_swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_FormatException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_r_std__basic_ios__char_std__char_traits__char______r_gpstk__InvalidRequest[] = {{&_swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_gpstk__InvalidRequest, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_r_std__basic_ios__char_std__char_traits__char______r_gpstk__AssertionFailure[] = {{&_swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_gpstk__AssertionFailure, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iosTchar_std__char_traitsTchar_t_t[] = {  {&_swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_gpstk__AccessError, _p_f_r_std__basic_ios__char_std__char_traits__char______r_gpstk__AccessErrorTo_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iosTchar_std__char_traitsTchar_t_t, 0, 0},  {&_swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iostreamTchar_std__char_traitsTchar_t_t, _p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iostreamTchar_std__char_traitsTchar_t_tTo_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iosTchar_std__char_traitsTchar_t_t, 0, 0},  {&_swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_gpstk__InvalidParameter, _p_f_r_std__basic_ios__char_std__char_traits__char______r_gpstk__InvalidParameterTo_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iosTchar_std__char_traitsTchar_t_t, 0, 0},  {&_swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_gpstk__OutOfMemory, _p_f_r_std__basic_ios__char_std__char_traits__char______r_gpstk__OutOfMemoryTo_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iosTchar_std__char_traitsTchar_t_t, 0, 0},  {&_swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_gpstk__WrongBlockNumber, _p_f_r_std__basic_ios__char_std__char_traits__char______r_gpstk__WrongBlockNumberTo_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iosTchar_std__char_traitsTchar_t_t, 0, 0},  {&_swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_istreamTchar_std__char_traitsTchar_t_t, _p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_istreamTchar_std__char_traitsTchar_t_tTo_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iosTchar_std__char_traitsTchar_t_t, 0, 0},  {&_swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_ostreamTchar_std__char_traitsTchar_t_t, _p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_ostreamTchar_std__char_traitsTchar_t_tTo_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iosTchar_std__char_traitsTchar_t_t, 0, 0},  {&_swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_gpstk__InvalidValue, _p_f_r_std__basic_ios__char_std__char_traits__char______r_gpstk__InvalidValueTo_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iosTchar_std__char_traitsTchar_t_t, 0, 0},  {&_swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_gpstk__WrongBlockFormat, _p_f_r_std__basic_ios__char_std__char_traits__char______r_gpstk__WrongBlockFormatTo_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iosTchar_std__char_traitsTchar_t_t, 0, 0},  {&_swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_gpstk__ObjectNotFound, _p_f_r_std__basic_ios__char_std__char_traits__char______r_gpstk__ObjectNotFoundTo_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iosTchar_std__char_traitsTchar_t_t, 0, 0},  {&_swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_gpstk__SystemPipeException, _p_f_r_std__basic_ios__char_std__char_traits__char______r_gpstk__SystemPipeExceptionTo_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iosTchar_std__char_traitsTchar_t_t, 0, 0},  {&_swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_gpstk__SystemSemaphoreException, _p_f_r_std__basic_ios__char_std__char_traits__char______r_gpstk__SystemSemaphoreExceptionTo_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iosTchar_std__char_traitsTchar_t_t, 0, 0},  {&_swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_gpstk__FileMissingException, _p_f_r_std__basic_ios__char_std__char_traits__char______r_gpstk__FileMissingExceptionTo_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iosTchar_std__char_traitsTchar_t_t, 0, 0},  {&_swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iosTchar_std__char_traitsTchar_t_t, 0, 0, 0},  {&_swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_gpstk__ConfigurationException, _p_f_r_std__basic_ios__char_std__char_traits__char______r_gpstk__ConfigurationExceptionTo_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iosTchar_std__char_traitsTchar_t_t, 0, 0},  {&_swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_gpstk__InvalidArgumentException, _p_f_r_std__basic_ios__char_std__char_traits__char______r_gpstk__InvalidArgumentExceptionTo_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iosTchar_std__char_traitsTchar_t_t, 0, 0},  {&_swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_gpstk__IndexOutOfBoundsException, _p_f_r_std__basic_ios__char_std__char_traits__char______r_gpstk__IndexOutOfBoundsExceptionTo_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iosTchar_std__char_traitsTchar_t_t, 0, 0},  {&_swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_gpstk__Exception, _p_f_r_std__basic_ios__char_std__char_traits__char______r_gpstk__ExceptionTo_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iosTchar_std__char_traitsTchar_t_t, 0, 0},  {&_swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_gpstk__SystemQueueException, _p_f_r_std__basic_ios__char_std__char_traits__char______r_gpstk__SystemQueueExceptionTo_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iosTchar_std__char_traitsTchar_t_t, 0, 0},  {&_swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_gpstk__FileHunterException, _p_f_r_std__basic_ios__char_std__char_traits__char______r_gpstk__FileHunterExceptionTo_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iosTchar_std__char_traitsTchar_t_t, 0, 0},  {&_swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_gpstk__GeometryException, _p_f_r_std__basic_ios__char_std__char_traits__char______r_gpstk__GeometryExceptionTo_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iosTchar_std__char_traitsTchar_t_t, 0, 0},  {&_swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_gpstk__NoGeoidException, _p_f_r_std__basic_ios__char_std__char_traits__char______r_gpstk__NoGeoidExceptionTo_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iosTchar_std__char_traitsTchar_t_t, 0, 0},  {&_swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_DayTimeException, _p_f_r_std__basic_ios__char_std__char_traits__char______r_DayTimeExceptionTo_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iosTchar_std__char_traitsTchar_t_t, 0, 0},  {&_swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_FormatException, _p_f_r_std__basic_ios__char_std__char_traits__char______r_FormatExceptionTo_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iosTchar_std__char_traitsTchar_t_t, 0, 0},  {&_swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_gpstk__InvalidRequest, _p_f_r_std__basic_ios__char_std__char_traits__char______r_gpstk__InvalidRequestTo_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iosTchar_std__char_traitsTchar_t_t, 0, 0},  {&_swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_gpstk__AssertionFailure, _p_f_r_std__basic_ios__char_std__char_traits__char______r_gpstk__AssertionFailureTo_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iosTchar_std__char_traitsTchar_t_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_r_std__basic_istream__char_std__char_traits__char______r_std__basic_iostreamTchar_std__char_traitsTchar_t_t[] = {{&_swigt__p_f_r_std__basic_istream__char_std__char_traits__char______r_std__basic_iostreamTchar_std__char_traitsTchar_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_r_std__basic_istream__char_std__char_traits__char______r_std__basic_istreamTchar_std__char_traitsTchar_t_t[] = {  {&_swigt__p_f_r_std__basic_istream__char_std__char_traits__char______r_std__basic_istreamTchar_std__char_traitsTchar_t_t, 0, 0, 0},  {&_swigt__p_f_r_std__basic_istream__char_std__char_traits__char______r_std__basic_iostreamTchar_std__char_traitsTchar_t_t, _p_f_r_std__basic_istream__char_std__char_traits__char______r_std__basic_iostreamTchar_std__char_traitsTchar_t_tTo_p_f_r_std__basic_istream__char_std__char_traits__char______r_std__basic_istreamTchar_std__char_traitsTchar_t_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_r_std__basic_ostream__char_std__char_traits__char______r_gpstk__AccessError[] = {{&_swigt__p_f_r_std__basic_ostream__char_std__char_traits__char______r_gpstk__AccessError, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_iostreamTchar_std__char_traitsTchar_t_t[] = {{&_swigt__p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_iostreamTchar_std__char_traitsTchar_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_r_std__basic_ostream__char_std__char_traits__char______r_gpstk__InvalidParameter[] = {{&_swigt__p_f_r_std__basic_ostream__char_std__char_traits__char______r_gpstk__InvalidParameter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_r_std__basic_ostream__char_std__char_traits__char______r_gpstk__OutOfMemory[] = {{&_swigt__p_f_r_std__basic_ostream__char_std__char_traits__char______r_gpstk__OutOfMemory, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_r_std__basic_ostream__char_std__char_traits__char______r_gpstk__WrongBlockNumber[] = {{&_swigt__p_f_r_std__basic_ostream__char_std__char_traits__char______r_gpstk__WrongBlockNumber, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_r_std__basic_ostream__char_std__char_traits__char______r_gpstk__InvalidValue[] = {{&_swigt__p_f_r_std__basic_ostream__char_std__char_traits__char______r_gpstk__InvalidValue, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_r_std__basic_ostream__char_std__char_traits__char______r_gpstk__WrongBlockFormat[] = {{&_swigt__p_f_r_std__basic_ostream__char_std__char_traits__char______r_gpstk__WrongBlockFormat, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_r_std__basic_ostream__char_std__char_traits__char______r_gpstk__ObjectNotFound[] = {{&_swigt__p_f_r_std__basic_ostream__char_std__char_traits__char______r_gpstk__ObjectNotFound, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_r_std__basic_ostream__char_std__char_traits__char______r_gpstk__SystemQueueException[] = {{&_swigt__p_f_r_std__basic_ostream__char_std__char_traits__char______r_gpstk__SystemQueueException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_r_std__basic_ostream__char_std__char_traits__char______r_gpstk__SystemPipeException[] = {{&_swigt__p_f_r_std__basic_ostream__char_std__char_traits__char______r_gpstk__SystemPipeException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_r_std__basic_ostream__char_std__char_traits__char______r_gpstk__SystemSemaphoreException[] = {{&_swigt__p_f_r_std__basic_ostream__char_std__char_traits__char______r_gpstk__SystemSemaphoreException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_r_std__basic_ostream__char_std__char_traits__char______r_gpstk__FileMissingException[] = {{&_swigt__p_f_r_std__basic_ostream__char_std__char_traits__char______r_gpstk__FileMissingException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_r_std__basic_ostream__char_std__char_traits__char______r_gpstk__ConfigurationException[] = {{&_swigt__p_f_r_std__basic_ostream__char_std__char_traits__char______r_gpstk__ConfigurationException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_r_std__basic_ostream__char_std__char_traits__char______r_gpstk__InvalidArgumentException[] = {{&_swigt__p_f_r_std__basic_ostream__char_std__char_traits__char______r_gpstk__InvalidArgumentException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_r_std__basic_ostream__char_std__char_traits__char______r_gpstk__IndexOutOfBoundsException[] = {{&_swigt__p_f_r_std__basic_ostream__char_std__char_traits__char______r_gpstk__IndexOutOfBoundsException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_r_std__basic_ostream__char_std__char_traits__char______r_gpstk__Exception[] = {{&_swigt__p_f_r_std__basic_ostream__char_std__char_traits__char______r_gpstk__Exception, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_r_std__basic_ostream__char_std__char_traits__char______r_gpstk__FileHunterException[] = {{&_swigt__p_f_r_std__basic_ostream__char_std__char_traits__char______r_gpstk__FileHunterException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_r_std__basic_ostream__char_std__char_traits__char______r_gpstk__GeometryException[] = {{&_swigt__p_f_r_std__basic_ostream__char_std__char_traits__char______r_gpstk__GeometryException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_r_std__basic_ostream__char_std__char_traits__char______r_gpstk__NoGeoidException[] = {{&_swigt__p_f_r_std__basic_ostream__char_std__char_traits__char______r_gpstk__NoGeoidException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_r_std__basic_ostream__char_std__char_traits__char______r_DayTimeException[] = {{&_swigt__p_f_r_std__basic_ostream__char_std__char_traits__char______r_DayTimeException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_r_std__basic_ostream__char_std__char_traits__char______r_FormatException[] = {{&_swigt__p_f_r_std__basic_ostream__char_std__char_traits__char______r_FormatException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_r_std__basic_ostream__char_std__char_traits__char______r_gpstk__InvalidRequest[] = {{&_swigt__p_f_r_std__basic_ostream__char_std__char_traits__char______r_gpstk__InvalidRequest, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_r_std__basic_ostream__char_std__char_traits__char______r_gpstk__AssertionFailure[] = {{&_swigt__p_f_r_std__basic_ostream__char_std__char_traits__char______r_gpstk__AssertionFailure, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_ostreamTchar_std__char_traitsTchar_t_t[] = {  {&_swigt__p_f_r_std__basic_ostream__char_std__char_traits__char______r_gpstk__AccessError, _p_f_r_std__basic_ostream__char_std__char_traits__char______r_gpstk__AccessErrorTo_p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0, 0},  {&_swigt__p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_iostreamTchar_std__char_traitsTchar_t_t, _p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_iostreamTchar_std__char_traitsTchar_t_tTo_p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0, 0},  {&_swigt__p_f_r_std__basic_ostream__char_std__char_traits__char______r_gpstk__InvalidParameter, _p_f_r_std__basic_ostream__char_std__char_traits__char______r_gpstk__InvalidParameterTo_p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0, 0},  {&_swigt__p_f_r_std__basic_ostream__char_std__char_traits__char______r_gpstk__OutOfMemory, _p_f_r_std__basic_ostream__char_std__char_traits__char______r_gpstk__OutOfMemoryTo_p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0, 0},  {&_swigt__p_f_r_std__basic_ostream__char_std__char_traits__char______r_gpstk__WrongBlockNumber, _p_f_r_std__basic_ostream__char_std__char_traits__char______r_gpstk__WrongBlockNumberTo_p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0, 0},  {&_swigt__p_f_r_std__basic_ostream__char_std__char_traits__char______r_gpstk__InvalidValue, _p_f_r_std__basic_ostream__char_std__char_traits__char______r_gpstk__InvalidValueTo_p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0, 0},  {&_swigt__p_f_r_std__basic_ostream__char_std__char_traits__char______r_gpstk__WrongBlockFormat, _p_f_r_std__basic_ostream__char_std__char_traits__char______r_gpstk__WrongBlockFormatTo_p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0, 0},  {&_swigt__p_f_r_std__basic_ostream__char_std__char_traits__char______r_gpstk__ObjectNotFound, _p_f_r_std__basic_ostream__char_std__char_traits__char______r_gpstk__ObjectNotFoundTo_p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0, 0},  {&_swigt__p_f_r_std__basic_ostream__char_std__char_traits__char______r_gpstk__SystemQueueException, _p_f_r_std__basic_ostream__char_std__char_traits__char______r_gpstk__SystemQueueExceptionTo_p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0, 0},  {&_swigt__p_f_r_std__basic_ostream__char_std__char_traits__char______r_gpstk__SystemPipeException, _p_f_r_std__basic_ostream__char_std__char_traits__char______r_gpstk__SystemPipeExceptionTo_p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0, 0},  {&_swigt__p_f_r_std__basic_ostream__char_std__char_traits__char______r_gpstk__SystemSemaphoreException, _p_f_r_std__basic_ostream__char_std__char_traits__char______r_gpstk__SystemSemaphoreExceptionTo_p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0, 0},  {&_swigt__p_f_r_std__basic_ostream__char_std__char_traits__char______r_gpstk__FileMissingException, _p_f_r_std__basic_ostream__char_std__char_traits__char______r_gpstk__FileMissingExceptionTo_p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0, 0},  {&_swigt__p_f_r_std__basic_ostream__char_std__char_traits__char______r_gpstk__ConfigurationException, _p_f_r_std__basic_ostream__char_std__char_traits__char______r_gpstk__ConfigurationExceptionTo_p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0, 0},  {&_swigt__p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0, 0, 0},  {&_swigt__p_f_r_std__basic_ostream__char_std__char_traits__char______r_gpstk__InvalidArgumentException, _p_f_r_std__basic_ostream__char_std__char_traits__char______r_gpstk__InvalidArgumentExceptionTo_p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0, 0},  {&_swigt__p_f_r_std__basic_ostream__char_std__char_traits__char______r_gpstk__IndexOutOfBoundsException, _p_f_r_std__basic_ostream__char_std__char_traits__char______r_gpstk__IndexOutOfBoundsExceptionTo_p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0, 0},  {&_swigt__p_f_r_std__basic_ostream__char_std__char_traits__char______r_gpstk__Exception, _p_f_r_std__basic_ostream__char_std__char_traits__char______r_gpstk__ExceptionTo_p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0, 0},  {&_swigt__p_f_r_std__basic_ostream__char_std__char_traits__char______r_gpstk__FileHunterException, _p_f_r_std__basic_ostream__char_std__char_traits__char______r_gpstk__FileHunterExceptionTo_p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0, 0},  {&_swigt__p_f_r_std__basic_ostream__char_std__char_traits__char______r_gpstk__GeometryException, _p_f_r_std__basic_ostream__char_std__char_traits__char______r_gpstk__GeometryExceptionTo_p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0, 0},  {&_swigt__p_f_r_std__basic_ostream__char_std__char_traits__char______r_gpstk__NoGeoidException, _p_f_r_std__basic_ostream__char_std__char_traits__char______r_gpstk__NoGeoidExceptionTo_p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0, 0},  {&_swigt__p_f_r_std__basic_ostream__char_std__char_traits__char______r_DayTimeException, _p_f_r_std__basic_ostream__char_std__char_traits__char______r_DayTimeExceptionTo_p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0, 0},  {&_swigt__p_f_r_std__basic_ostream__char_std__char_traits__char______r_FormatException, _p_f_r_std__basic_ostream__char_std__char_traits__char______r_FormatExceptionTo_p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0, 0},  {&_swigt__p_f_r_std__basic_ostream__char_std__char_traits__char______r_gpstk__InvalidRequest, _p_f_r_std__basic_ostream__char_std__char_traits__char______r_gpstk__InvalidRequestTo_p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0, 0},  {&_swigt__p_f_r_std__basic_ostream__char_std__char_traits__char______r_gpstk__AssertionFailure, _p_f_r_std__basic_ostream__char_std__char_traits__char______r_gpstk__AssertionFailureTo_p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_r_std__ios_base__r_gpstk__AccessError[] = {{&_swigt__p_f_r_std__ios_base__r_gpstk__AccessError, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_r_std__ios_base__r_gpstk__InvalidParameter[] = {{&_swigt__p_f_r_std__ios_base__r_gpstk__InvalidParameter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_r_std__ios_base__r_gpstk__WrongBlockNumber[] = {{&_swigt__p_f_r_std__ios_base__r_gpstk__WrongBlockNumber, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_r_std__ios_base__r_gpstk__OutOfMemory[] = {{&_swigt__p_f_r_std__ios_base__r_gpstk__OutOfMemory, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_r_std__ios_base__r_std__basic_istreamTchar_std__char_traitsTchar_t_t[] = {{&_swigt__p_f_r_std__ios_base__r_std__basic_istreamTchar_std__char_traitsTchar_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_r_std__ios_base__r_std__basic_ostreamTchar_std__char_traitsTchar_t_t[] = {{&_swigt__p_f_r_std__ios_base__r_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_r_std__ios_base__r_gpstk__SystemSemaphoreException[] = {{&_swigt__p_f_r_std__ios_base__r_gpstk__SystemSemaphoreException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_r_std__ios_base__r_gpstk__WrongBlockFormat[] = {{&_swigt__p_f_r_std__ios_base__r_gpstk__WrongBlockFormat, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_r_std__ios_base__r_gpstk__ConfigurationException[] = {{&_swigt__p_f_r_std__ios_base__r_gpstk__ConfigurationException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_r_std__ios_base__r_std__basic_iosTchar_std__char_traitsTchar_t_t[] = {{&_swigt__p_f_r_std__ios_base__r_std__basic_iosTchar_std__char_traitsTchar_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_r_std__ios_base__r_gpstk__InvalidValue[] = {{&_swigt__p_f_r_std__ios_base__r_gpstk__InvalidValue, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_r_std__ios_base__r_gpstk__ObjectNotFound[] = {{&_swigt__p_f_r_std__ios_base__r_gpstk__ObjectNotFound, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_r_std__ios_base__r_gpstk__Exception[] = {{&_swigt__p_f_r_std__ios_base__r_gpstk__Exception, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_r_std__ios_base__r_gpstk__SystemPipeException[] = {{&_swigt__p_f_r_std__ios_base__r_gpstk__SystemPipeException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_r_std__ios_base__r_gpstk__FileHunterException[] = {{&_swigt__p_f_r_std__ios_base__r_gpstk__FileHunterException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_r_std__ios_base__r_gpstk__GeometryException[] = {{&_swigt__p_f_r_std__ios_base__r_gpstk__GeometryException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_r_std__ios_base__r_gpstk__NoGeoidException[] = {{&_swigt__p_f_r_std__ios_base__r_gpstk__NoGeoidException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_r_std__ios_base__r_DayTimeException[] = {{&_swigt__p_f_r_std__ios_base__r_DayTimeException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_r_std__ios_base__r_FormatException[] = {{&_swigt__p_f_r_std__ios_base__r_FormatException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_r_std__ios_base__r_gpstk__IndexOutOfBoundsException[] = {{&_swigt__p_f_r_std__ios_base__r_gpstk__IndexOutOfBoundsException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_r_std__ios_base__r_gpstk__InvalidRequest[] = {{&_swigt__p_f_r_std__ios_base__r_gpstk__InvalidRequest, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_r_std__ios_base__r_std__basic_iostreamTchar_std__char_traitsTchar_t_t[] = {{&_swigt__p_f_r_std__ios_base__r_std__basic_iostreamTchar_std__char_traitsTchar_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_r_std__ios_base__r_gpstk__InvalidArgumentException[] = {{&_swigt__p_f_r_std__ios_base__r_gpstk__InvalidArgumentException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_r_std__ios_base__r_gpstk__FileMissingException[] = {{&_swigt__p_f_r_std__ios_base__r_gpstk__FileMissingException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_r_std__ios_base__r_gpstk__SystemQueueException[] = {{&_swigt__p_f_r_std__ios_base__r_gpstk__SystemQueueException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_r_std__ios_base__r_gpstk__AssertionFailure[] = {{&_swigt__p_f_r_std__ios_base__r_gpstk__AssertionFailure, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_r_std__ios_base__r_std__ios_base[] = {  {&_swigt__p_f_r_std__ios_base__r_gpstk__AccessError, _p_f_r_std__ios_base__r_gpstk__AccessErrorTo_p_f_r_std__ios_base__r_std__ios_base, 0, 0},  {&_swigt__p_f_r_std__ios_base__r_gpstk__InvalidParameter, _p_f_r_std__ios_base__r_gpstk__InvalidParameterTo_p_f_r_std__ios_base__r_std__ios_base, 0, 0},  {&_swigt__p_f_r_std__ios_base__r_gpstk__WrongBlockNumber, _p_f_r_std__ios_base__r_gpstk__WrongBlockNumberTo_p_f_r_std__ios_base__r_std__ios_base, 0, 0},  {&_swigt__p_f_r_std__ios_base__r_gpstk__OutOfMemory, _p_f_r_std__ios_base__r_gpstk__OutOfMemoryTo_p_f_r_std__ios_base__r_std__ios_base, 0, 0},  {&_swigt__p_f_r_std__ios_base__r_std__basic_istreamTchar_std__char_traitsTchar_t_t, _p_f_r_std__ios_base__r_std__basic_istreamTchar_std__char_traitsTchar_t_tTo_p_f_r_std__ios_base__r_std__ios_base, 0, 0},  {&_swigt__p_f_r_std__ios_base__r_std__basic_ostreamTchar_std__char_traitsTchar_t_t, _p_f_r_std__ios_base__r_std__basic_ostreamTchar_std__char_traitsTchar_t_tTo_p_f_r_std__ios_base__r_std__ios_base, 0, 0},  {&_swigt__p_f_r_std__ios_base__r_gpstk__SystemSemaphoreException, _p_f_r_std__ios_base__r_gpstk__SystemSemaphoreExceptionTo_p_f_r_std__ios_base__r_std__ios_base, 0, 0},  {&_swigt__p_f_r_std__ios_base__r_gpstk__WrongBlockFormat, _p_f_r_std__ios_base__r_gpstk__WrongBlockFormatTo_p_f_r_std__ios_base__r_std__ios_base, 0, 0},  {&_swigt__p_f_r_std__ios_base__r_gpstk__ConfigurationException, _p_f_r_std__ios_base__r_gpstk__ConfigurationExceptionTo_p_f_r_std__ios_base__r_std__ios_base, 0, 0},  {&_swigt__p_f_r_std__ios_base__r_std__basic_iosTchar_std__char_traitsTchar_t_t, _p_f_r_std__ios_base__r_std__basic_iosTchar_std__char_traitsTchar_t_tTo_p_f_r_std__ios_base__r_std__ios_base, 0, 0},  {&_swigt__p_f_r_std__ios_base__r_gpstk__InvalidValue, _p_f_r_std__ios_base__r_gpstk__InvalidValueTo_p_f_r_std__ios_base__r_std__ios_base, 0, 0},  {&_swigt__p_f_r_std__ios_base__r_gpstk__ObjectNotFound, _p_f_r_std__ios_base__r_gpstk__ObjectNotFoundTo_p_f_r_std__ios_base__r_std__ios_base, 0, 0},  {&_swigt__p_f_r_std__ios_base__r_gpstk__Exception, _p_f_r_std__ios_base__r_gpstk__ExceptionTo_p_f_r_std__ios_base__r_std__ios_base, 0, 0},  {&_swigt__p_f_r_std__ios_base__r_gpstk__SystemPipeException, _p_f_r_std__ios_base__r_gpstk__SystemPipeExceptionTo_p_f_r_std__ios_base__r_std__ios_base, 0, 0},  {&_swigt__p_f_r_std__ios_base__r_gpstk__FileHunterException, _p_f_r_std__ios_base__r_gpstk__FileHunterExceptionTo_p_f_r_std__ios_base__r_std__ios_base, 0, 0},  {&_swigt__p_f_r_std__ios_base__r_gpstk__GeometryException, _p_f_r_std__ios_base__r_gpstk__GeometryExceptionTo_p_f_r_std__ios_base__r_std__ios_base, 0, 0},  {&_swigt__p_f_r_std__ios_base__r_gpstk__NoGeoidException, _p_f_r_std__ios_base__r_gpstk__NoGeoidExceptionTo_p_f_r_std__ios_base__r_std__ios_base, 0, 0},  {&_swigt__p_f_r_std__ios_base__r_DayTimeException, _p_f_r_std__ios_base__r_DayTimeExceptionTo_p_f_r_std__ios_base__r_std__ios_base, 0, 0},  {&_swigt__p_f_r_std__ios_base__r_FormatException, _p_f_r_std__ios_base__r_FormatExceptionTo_p_f_r_std__ios_base__r_std__ios_base, 0, 0},  {&_swigt__p_f_r_std__ios_base__r_gpstk__IndexOutOfBoundsException, _p_f_r_std__ios_base__r_gpstk__IndexOutOfBoundsExceptionTo_p_f_r_std__ios_base__r_std__ios_base, 0, 0},  {&_swigt__p_f_r_std__ios_base__r_gpstk__InvalidRequest, _p_f_r_std__ios_base__r_gpstk__InvalidRequestTo_p_f_r_std__ios_base__r_std__ios_base, 0, 0},  {&_swigt__p_f_r_std__ios_base__r_std__ios_base, 0, 0, 0},  {&_swigt__p_f_r_std__ios_base__r_std__basic_iostreamTchar_std__char_traitsTchar_t_t, _p_f_r_std__ios_base__r_std__basic_iostreamTchar_std__char_traitsTchar_t_tTo_p_f_r_std__ios_base__r_std__ios_base, 0, 0},  {&_swigt__p_f_r_std__ios_base__r_gpstk__InvalidArgumentException, _p_f_r_std__ios_base__r_gpstk__InvalidArgumentExceptionTo_p_f_r_std__ios_base__r_std__ios_base, 0, 0},  {&_swigt__p_f_r_std__ios_base__r_gpstk__FileMissingException, _p_f_r_std__ios_base__r_gpstk__FileMissingExceptionTo_p_f_r_std__ios_base__r_std__ios_base, 0, 0},  {&_swigt__p_f_r_std__ios_base__r_gpstk__SystemQueueException, _p_f_r_std__ios_base__r_gpstk__SystemQueueExceptionTo_p_f_r_std__ios_base__r_std__ios_base, 0, 0},  {&_swigt__p_f_r_std__ios_base__r_gpstk__AssertionFailure, _p_f_r_std__ios_base__r_gpstk__AssertionFailureTo_p_f_r_std__ios_base__r_std__ios_base, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_first_type[] = {  {&_swigt__p_first_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_float[] = {  {&_swigt__p_float, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_fmtflags[] = {  {&_swigt__p_fmtflags, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gpstk__AccessError[] = {  {&_swigt__p_gpstk__ObjectNotFound, _p_gpstk__ObjectNotFoundTo_p_gpstk__AccessError, 0, 0},  {&_swigt__p_gpstk__AccessError, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gpstk__AlmOrbit[] = {  {&_swigt__p_gpstk__AlmOrbit, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gpstk__AlmanacStore[] = {  {&_swigt__p_gpstk__AlmanacStore, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gpstk__AssertionFailure[] = {  {&_swigt__p_gpstk__AssertionFailure, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gpstk__BCEphemerisStore[] = {  {&_swigt__p_gpstk__BCEphemerisStore, 0, 0, 0},  {&_swigt__p_gpstk__RinexEphemerisStore, _p_gpstk__RinexEphemerisStoreTo_p_gpstk__BCEphemerisStore, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gpstk__ClockModel[] = {  {&_swigt__p_gpstk__ClockModel, 0, 0, 0},  {&_swigt__p_gpstk__ObsClockModel, _p_gpstk__ObsClockModelTo_p_gpstk__ClockModel, 0, 0},  {&_swigt__p_gpstk__EpochClockModel, _p_gpstk__EpochClockModelTo_p_gpstk__ClockModel, 0, 0},  {&_swigt__p_gpstk__LinearClockModel, _p_gpstk__LinearClockModelTo_p_gpstk__ClockModel, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gpstk__CodeBuffer[] = {  {&_swigt__p_gpstk__CodeBuffer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gpstk__ConfigurationException[] = {  {&_swigt__p_gpstk__ConfigurationException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gpstk__CorrectedEphemerisRange[] = {  {&_swigt__p_gpstk__CorrectedEphemerisRange, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gpstk__DayTime[] = {  {&_swigt__p_gpstk__DayTime, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gpstk__ECEF[] = {  {&_swigt__p_gpstk__ECEF, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gpstk__EngAlmanac[] = {  {&_swigt__p_gpstk__EngAlmanac, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gpstk__EngEphemeris[] = {  {&_swigt__p_gpstk__EngEphemeris, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gpstk__EngNav[] = {  {&_swigt__p_gpstk__EngEphemeris, _p_gpstk__EngEphemerisTo_p_gpstk__EngNav, 0, 0},  {&_swigt__p_gpstk__EngAlmanac, _p_gpstk__EngAlmanacTo_p_gpstk__EngNav, 0, 0},  {&_swigt__p_gpstk__EngNav, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gpstk__EphemerisStore[] = {  {&_swigt__p_gpstk__EphemerisStore, 0, 0, 0},  {&_swigt__p_gpstk__TabularEphemerisStore, _p_gpstk__TabularEphemerisStoreTo_p_gpstk__EphemerisStore, 0, 0},  {&_swigt__p_gpstk__SP3EphemerisStore, _p_gpstk__SP3EphemerisStoreTo_p_gpstk__EphemerisStore, 0, 0},  {&_swigt__p_gpstk__BCEphemerisStore, _p_gpstk__BCEphemerisStoreTo_p_gpstk__EphemerisStore, 0, 0},  {&_swigt__p_gpstk__RinexEphemerisStore, _p_gpstk__RinexEphemerisStoreTo_p_gpstk__EphemerisStore, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gpstk__EpochClockModel[] = {  {&_swigt__p_gpstk__EpochClockModel, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gpstk__Exception[] = {  {&_swigt__p_gpstk__AccessError, _p_gpstk__AccessErrorTo_p_gpstk__Exception, 0, 0},  {&_swigt__p_gpstk__InvalidParameter, _p_gpstk__InvalidParameterTo_p_gpstk__Exception, 0, 0},  {&_swigt__p_gpstk__WrongBlockNumber, _p_gpstk__WrongBlockNumberTo_p_gpstk__Exception, 0, 0},  {&_swigt__p_gpstk__OutOfMemory, _p_gpstk__OutOfMemoryTo_p_gpstk__Exception, 0, 0},  {&_swigt__p_gpstk__WrongBlockFormat, _p_gpstk__WrongBlockFormatTo_p_gpstk__Exception, 0, 0},  {&_swigt__p_gpstk__InvalidValue, _p_gpstk__InvalidValueTo_p_gpstk__Exception, 0, 0},  {&_swigt__p_gpstk__ObjectNotFound, _p_gpstk__ObjectNotFoundTo_p_gpstk__Exception, 0, 0},  {&_swigt__p_gpstk__SystemQueueException, _p_gpstk__SystemQueueExceptionTo_p_gpstk__Exception, 0, 0},  {&_swigt__p_gpstk__SystemPipeException, _p_gpstk__SystemPipeExceptionTo_p_gpstk__Exception, 0, 0},  {&_swigt__p_gpstk__SystemSemaphoreException, _p_gpstk__SystemSemaphoreExceptionTo_p_gpstk__Exception, 0, 0},  {&_swigt__p_gpstk__FileMissingException, _p_gpstk__FileMissingExceptionTo_p_gpstk__Exception, 0, 0},  {&_swigt__p_gpstk__ConfigurationException, _p_gpstk__ConfigurationExceptionTo_p_gpstk__Exception, 0, 0},  {&_swigt__p_gpstk__InvalidArgumentException, _p_gpstk__InvalidArgumentExceptionTo_p_gpstk__Exception, 0, 0},  {&_swigt__p_gpstk__Exception, 0, 0, 0},  {&_swigt__p_gpstk__IndexOutOfBoundsException, _p_gpstk__IndexOutOfBoundsExceptionTo_p_gpstk__Exception, 0, 0},  {&_swigt__p_gpstk__FileHunterException, _p_gpstk__FileHunterExceptionTo_p_gpstk__Exception, 0, 0},  {&_swigt__p_gpstk__GeometryException, _p_gpstk__GeometryExceptionTo_p_gpstk__Exception, 0, 0},  {&_swigt__p_gpstk__NoGeoidException, _p_gpstk__NoGeoidExceptionTo_p_gpstk__Exception, 0, 0},  {&_swigt__p_DayTimeException, _p_DayTimeExceptionTo_p_gpstk__Exception, 0, 0},  {&_swigt__p_FormatException, _p_FormatExceptionTo_p_gpstk__Exception, 0, 0},  {&_swigt__p_gpstk__InvalidRequest, _p_gpstk__InvalidRequestTo_p_gpstk__Exception, 0, 0},  {&_swigt__p_gpstk__AssertionFailure, _p_gpstk__AssertionFailureTo_p_gpstk__Exception, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gpstk__ExceptionLocation[] = {  {&_swigt__p_gpstk__ExceptionLocation, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gpstk__FFBinaryStream[] = {  {&_swigt__p_gpstk__FFBinaryStream, 0, 0, 0},  {&_swigt__p_gpstk__FICStream, _p_gpstk__FICStreamTo_p_gpstk__FFBinaryStream, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gpstk__FFData[] = {  {&_swigt__p_gpstk__FICData, _p_gpstk__FICDataTo_p_gpstk__FFData, 0, 0},  {&_swigt__p_gpstk__RinexNavBase, _p_gpstk__RinexNavBaseTo_p_gpstk__FFData, 0, 0},  {&_swigt__p_gpstk__FFData, 0, 0, 0},  {&_swigt__p_gpstk__FICBase, _p_gpstk__FICBaseTo_p_gpstk__FFData, 0, 0},  {&_swigt__p_gpstk__RinexObsData, _p_gpstk__RinexObsDataTo_p_gpstk__FFData, 0, 0},  {&_swigt__p_gpstk__SP3Header, _p_gpstk__SP3HeaderTo_p_gpstk__FFData, 0, 0},  {&_swigt__p_gpstk__RinexObsHeader, _p_gpstk__RinexObsHeaderTo_p_gpstk__FFData, 0, 0},  {&_swigt__p_gpstk__FICHeader, _p_gpstk__FICHeaderTo_p_gpstk__FFData, 0, 0},  {&_swigt__p_gpstk__SP3Data, _p_gpstk__SP3DataTo_p_gpstk__FFData, 0, 0},  {&_swigt__p_gpstk__RinexObsBase, _p_gpstk__RinexObsBaseTo_p_gpstk__FFData, 0, 0},  {&_swigt__p_gpstk__RinexMetData, _p_gpstk__RinexMetDataTo_p_gpstk__FFData, 0, 0},  {&_swigt__p_gpstk__RinexMetHeader, _p_gpstk__RinexMetHeaderTo_p_gpstk__FFData, 0, 0},  {&_swigt__p_gpstk__RinexNavHeader, _p_gpstk__RinexNavHeaderTo_p_gpstk__FFData, 0, 0},  {&_swigt__p_gpstk__RinexNavData, _p_gpstk__RinexNavDataTo_p_gpstk__FFData, 0, 0},  {&_swigt__p_gpstk__SP3Base, _p_gpstk__SP3BaseTo_p_gpstk__FFData, 0, 0},  {&_swigt__p_gpstk__RinexMetBase, _p_gpstk__RinexMetBaseTo_p_gpstk__FFData, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gpstk__FFStream[] = {  {&_swigt__p_gpstk__FFBinaryStream, _p_gpstk__FFBinaryStreamTo_p_gpstk__FFStream, 0, 0},  {&_swigt__p_gpstk__FICStream, _p_gpstk__FICStreamTo_p_gpstk__FFStream, 0, 0},  {&_swigt__p_gpstk__FICAStream, _p_gpstk__FICAStreamTo_p_gpstk__FFStream, 0, 0},  {&_swigt__p_gpstk__MSCStream, _p_gpstk__MSCStreamTo_p_gpstk__FFStream, 0, 0},  {&_swigt__p_gpstk__SP3Stream, _p_gpstk__SP3StreamTo_p_gpstk__FFStream, 0, 0},  {&_swigt__p_gpstk__RinexObsStream, _p_gpstk__RinexObsStreamTo_p_gpstk__FFStream, 0, 0},  {&_swigt__p_gpstk__FFStream, 0, 0, 0},  {&_swigt__p_gpstk__FFTextStream, _p_gpstk__FFTextStreamTo_p_gpstk__FFStream, 0, 0},  {&_swigt__p_gpstk__RinexMetStream, _p_gpstk__RinexMetStreamTo_p_gpstk__FFStream, 0, 0},  {&_swigt__p_gpstk__RinexNavStream, _p_gpstk__RinexNavStreamTo_p_gpstk__FFStream, 0, 0},  {&_swigt__p_gpstk__SMODFStream, _p_gpstk__SMODFStreamTo_p_gpstk__FFStream, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gpstk__FFTextStream[] = {  {&_swigt__p_gpstk__FICAStream, _p_gpstk__FICAStreamTo_p_gpstk__FFTextStream, 0, 0},  {&_swigt__p_gpstk__MSCStream, _p_gpstk__MSCStreamTo_p_gpstk__FFTextStream, 0, 0},  {&_swigt__p_gpstk__SP3Stream, _p_gpstk__SP3StreamTo_p_gpstk__FFTextStream, 0, 0},  {&_swigt__p_gpstk__RinexObsStream, _p_gpstk__RinexObsStreamTo_p_gpstk__FFTextStream, 0, 0},  {&_swigt__p_gpstk__FFTextStream, 0, 0, 0},  {&_swigt__p_gpstk__RinexMetStream, _p_gpstk__RinexMetStreamTo_p_gpstk__FFTextStream, 0, 0},  {&_swigt__p_gpstk__RinexNavStream, _p_gpstk__RinexNavStreamTo_p_gpstk__FFTextStream, 0, 0},  {&_swigt__p_gpstk__SMODFStream, _p_gpstk__SMODFStreamTo_p_gpstk__FFTextStream, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gpstk__FICAStream[] = {  {&_swigt__p_gpstk__FICAStream, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gpstk__FICBase[] = {  {&_swigt__p_gpstk__FICBase, 0, 0, 0},  {&_swigt__p_gpstk__FICData, _p_gpstk__FICDataTo_p_gpstk__FICBase, 0, 0},  {&_swigt__p_gpstk__FICHeader, _p_gpstk__FICHeaderTo_p_gpstk__FICBase, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gpstk__FICData[] = {  {&_swigt__p_gpstk__FICData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gpstk__FICHeader[] = {  {&_swigt__p_gpstk__FICHeader, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gpstk__FICStream[] = {  {&_swigt__p_gpstk__FICStream, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gpstk__FICStreamBase[] = {  {&_swigt__p_gpstk__FICStream, _p_gpstk__FICStreamTo_p_gpstk__FICStreamBase, 0, 0},  {&_swigt__p_gpstk__FICAStream, _p_gpstk__FICAStreamTo_p_gpstk__FICStreamBase, 0, 0},  {&_swigt__p_gpstk__FICStreamBase, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gpstk__FileHunter[] = {  {&_swigt__p_gpstk__FileHunter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gpstk__FileHunterException[] = {  {&_swigt__p_gpstk__FileHunterException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gpstk__FileMissingException[] = {  {&_swigt__p_gpstk__FileMissingException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gpstk__FileStoreTgpstk__RinexNavHeader_t[] = {  {&_swigt__p_gpstk__FileStoreTgpstk__RinexNavHeader_t, 0, 0, 0},  {&_swigt__p_gpstk__RinexEphemerisStore, _p_gpstk__RinexEphemerisStoreTo_p_gpstk__FileStoreTgpstk__RinexNavHeader_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gpstk__FileStoreTgpstk__SP3Header_t[] = {  {&_swigt__p_gpstk__FileStoreTgpstk__SP3Header_t, 0, 0, 0},  {&_swigt__p_gpstk__SP3EphemerisStore, _p_gpstk__SP3EphemerisStoreTo_p_gpstk__FileStoreTgpstk__SP3Header_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gpstk__GGHeightTropModel[] = {  {&_swigt__p_gpstk__GGHeightTropModel, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gpstk__GGTropModel[] = {  {&_swigt__p_gpstk__GGTropModel, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gpstk__GPSZcount[] = {  {&_swigt__p_gpstk__GPSZcount, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gpstk__GenXSequence[] = {  {&_swigt__p_gpstk__GenXSequence, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gpstk__Geodetic[] = {  {&_swigt__p_gpstk__Geodetic, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gpstk__GeoidModel[] = {  {&_swigt__p_gpstk__GeoidModel, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gpstk__GeometryException[] = {  {&_swigt__p_gpstk__GeometryException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gpstk__IndexOutOfBoundsException[] = {  {&_swigt__p_gpstk__IndexOutOfBoundsException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gpstk__InvalidArgumentException[] = {  {&_swigt__p_gpstk__InvalidArgumentException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gpstk__InvalidParameter[] = {  {&_swigt__p_gpstk__InvalidParameter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gpstk__InvalidRequest[] = {  {&_swigt__p_gpstk__InvalidRequest, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gpstk__InvalidValue[] = {  {&_swigt__p_gpstk__InvalidValue, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gpstk__IonoModel[] = {  {&_swigt__p_gpstk__IonoModel, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gpstk__IonoModelStore[] = {  {&_swigt__p_gpstk__IonoModelStore, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gpstk__LinearClockModel[] = {  {&_swigt__p_gpstk__LinearClockModel, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gpstk__MSCStream[] = {  {&_swigt__p_gpstk__MSCStream, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gpstk__MatrixTdouble_t[] = {  {&_swigt__p_gpstk__MatrixTdouble_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gpstk__NBTropModel[] = {  {&_swigt__p_gpstk__NBTropModel, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gpstk__NoGeoidException[] = {  {&_swigt__p_gpstk__NoGeoidException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gpstk__ORDEpoch[] = {  {&_swigt__p_gpstk__ORDEpoch, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gpstk__ObjectNotFound[] = {  {&_swigt__p_gpstk__ObjectNotFound, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gpstk__ObsClockModel[] = {  {&_swigt__p_gpstk__ObsClockModel, 0, 0, 0},  {&_swigt__p_gpstk__EpochClockModel, _p_gpstk__EpochClockModelTo_p_gpstk__ObsClockModel, 0, 0},  {&_swigt__p_gpstk__LinearClockModel, _p_gpstk__LinearClockModelTo_p_gpstk__ObsClockModel, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gpstk__ObsEpoch[] = {  {&_swigt__p_gpstk__ObsEpoch, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gpstk__ObsRngDev[] = {  {&_swigt__p_gpstk__ObsRngDev, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gpstk__Observation[] = {  {&_swigt__p_gpstk__Observation, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gpstk__ObservationPlus[] = {  {&_swigt__p_gpstk__ObservationPlus, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gpstk__OutOfMemory[] = {  {&_swigt__p_gpstk__OutOfMemory, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gpstk__Position[] = {  {&_swigt__p_gpstk__Position, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gpstk__RAIMSolution[] = {  {&_swigt__p_gpstk__RAIMSolution, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gpstk__RinexEphemerisStore[] = {  {&_swigt__p_gpstk__RinexEphemerisStore, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gpstk__RinexMetBase[] = {  {&_swigt__p_gpstk__RinexMetBase, 0, 0, 0},  {&_swigt__p_gpstk__RinexMetData, _p_gpstk__RinexMetDataTo_p_gpstk__RinexMetBase, 0, 0},  {&_swigt__p_gpstk__RinexMetHeader, _p_gpstk__RinexMetHeaderTo_p_gpstk__RinexMetBase, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gpstk__RinexMetData[] = {  {&_swigt__p_gpstk__RinexMetData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gpstk__RinexMetHeader[] = {  {&_swigt__p_gpstk__RinexMetHeader, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gpstk__RinexMetStream[] = {  {&_swigt__p_gpstk__RinexMetStream, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gpstk__RinexNavBase[] = {  {&_swigt__p_gpstk__RinexNavBase, 0, 0, 0},  {&_swigt__p_gpstk__RinexNavHeader, _p_gpstk__RinexNavHeaderTo_p_gpstk__RinexNavBase, 0, 0},  {&_swigt__p_gpstk__RinexNavData, _p_gpstk__RinexNavDataTo_p_gpstk__RinexNavBase, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gpstk__RinexNavData[] = {  {&_swigt__p_gpstk__RinexNavData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gpstk__RinexNavHeader[] = {  {&_swigt__p_gpstk__RinexNavHeader, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gpstk__RinexNavStream[] = {  {&_swigt__p_gpstk__RinexNavStream, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gpstk__RinexObsBase[] = {  {&_swigt__p_gpstk__RinexObsBase, 0, 0, 0},  {&_swigt__p_gpstk__RinexObsHeader, _p_gpstk__RinexObsHeaderTo_p_gpstk__RinexObsBase, 0, 0},  {&_swigt__p_gpstk__RinexObsData, _p_gpstk__RinexObsDataTo_p_gpstk__RinexObsBase, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gpstk__RinexObsData[] = {  {&_swigt__p_gpstk__RinexObsData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gpstk__RinexObsData__RinexPrnMap__iterator[] = {  {&_swigt__p_gpstk__RinexObsData__RinexPrnMap__iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gpstk__RinexObsHeader[] = {  {&_swigt__p_gpstk__RinexObsHeader, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gpstk__RinexObsStream[] = {  {&_swigt__p_gpstk__RinexObsStream, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gpstk__RinexPrn[] = {  {&_swigt__p_std__mapTgpstk__RinexPrn_int_std__lessTgpstk__RinexPrn_t_std__allocatorTstd__pairTgpstk__RinexPrn_const_int_t_t_t__key_type, 0, 0, 0},  {&_swigt__p_gpstk__RinexPrn, 0, 0, 0},  {&_swigt__p_std__mapTgpstk__RinexPrn_gpstk__RinexObsData__RinexObsTypeMap_std__lessTgpstk__RinexPrn_t_std__allocatorTstd__pairTgpstk__RinexPrn_const_gpstk__RinexObsData__RinexObsTypeMap_t_t_t__key_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gpstk__RungeKutta4[] = {  {&_swigt__p_gpstk__RungeKutta4, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gpstk__RxObsData[] = {  {&_swigt__p_gpstk__RxObsData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gpstk__SMODFStream[] = {  {&_swigt__p_gpstk__SMODFStream, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gpstk__SP3Base[] = {  {&_swigt__p_gpstk__SP3Base, 0, 0, 0},  {&_swigt__p_gpstk__SP3Data, _p_gpstk__SP3DataTo_p_gpstk__SP3Base, 0, 0},  {&_swigt__p_gpstk__SP3Header, _p_gpstk__SP3HeaderTo_p_gpstk__SP3Base, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gpstk__SP3Data[] = {  {&_swigt__p_gpstk__SP3Data, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gpstk__SP3EphemerisStore[] = {  {&_swigt__p_gpstk__SP3EphemerisStore, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gpstk__SP3Header[] = {  {&_swigt__p_gpstk__SP3Header, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gpstk__SP3Stream[] = {  {&_swigt__p_gpstk__SP3Stream, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gpstk__SVPCodeGen[] = {  {&_swigt__p_gpstk__SVPCodeGen, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gpstk__SatID[] = {  {&_swigt__p_gpstk__SatID, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gpstk__SimpleTropModel[] = {  {&_swigt__p_gpstk__SimpleTropModel, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gpstk__StringUtils__StringException[] = {  {&_swigt__p_gpstk__StringUtils__StringException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gpstk__SystemPipeException[] = {  {&_swigt__p_gpstk__SystemPipeException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gpstk__SystemQueueException[] = {  {&_swigt__p_gpstk__SystemQueueException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gpstk__SystemSemaphoreException[] = {  {&_swigt__p_gpstk__SystemSemaphoreException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gpstk__TabularEphemerisStore[] = {  {&_swigt__p_gpstk__TabularEphemerisStore, 0, 0, 0},  {&_swigt__p_gpstk__SP3EphemerisStore, _p_gpstk__SP3EphemerisStoreTo_p_gpstk__TabularEphemerisStore, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gpstk__Triple[] = {  {&_swigt__p_gpstk__Triple, 0, 0, 0},  {&_swigt__p_gpstk__Position, _p_gpstk__PositionTo_p_gpstk__Triple, 0, 0},  {&_swigt__p_gpstk__Geodetic, _p_gpstk__GeodeticTo_p_gpstk__Triple, 0, 0},  {&_swigt__p_gpstk__ECEF, _p_gpstk__ECEFTo_p_gpstk__Triple, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gpstk__TropModel[] = {  {&_swigt__p_gpstk__TropModel, 0, 0, 0},  {&_swigt__p_gpstk__ZeroTropModel, _p_gpstk__ZeroTropModelTo_p_gpstk__TropModel, 0, 0},  {&_swigt__p_gpstk__SimpleTropModel, _p_gpstk__SimpleTropModelTo_p_gpstk__TropModel, 0, 0},  {&_swigt__p_gpstk__GGTropModel, _p_gpstk__GGTropModelTo_p_gpstk__TropModel, 0, 0},  {&_swigt__p_gpstk__GGHeightTropModel, _p_gpstk__GGHeightTropModelTo_p_gpstk__TropModel, 0, 0},  {&_swigt__p_gpstk__NBTropModel, _p_gpstk__NBTropModelTo_p_gpstk__TropModel, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gpstk__ValidTypeTchar_t[] = {  {&_swigt__p_gpstk__ValidTypeTchar_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gpstk__ValidTypeTdouble_t[] = {  {&_swigt__p_gpstk__ValidTypeTdouble_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gpstk__ValidTypeTfloat_t[] = {  {&_swigt__p_gpstk__ValidTypeTfloat_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gpstk__ValidTypeTint_t[] = {  {&_swigt__p_gpstk__ValidTypeTint_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gpstk__ValidTypeTlong_t[] = {  {&_swigt__p_gpstk__ValidTypeTlong_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gpstk__ValidTypeTshort_t[] = {  {&_swigt__p_gpstk__ValidTypeTshort_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gpstk__ValidTypeTunsigned_char_t[] = {  {&_swigt__p_gpstk__ValidTypeTunsigned_char_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gpstk__ValidTypeTunsigned_int_t[] = {  {&_swigt__p_gpstk__ValidTypeTunsigned_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gpstk__ValidTypeTunsigned_long_t[] = {  {&_swigt__p_gpstk__ValidTypeTunsigned_long_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gpstk__ValidTypeTunsigned_short_t[] = {  {&_swigt__p_gpstk__ValidTypeTunsigned_short_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gpstk__WrongBlockFormat[] = {  {&_swigt__p_gpstk__WrongBlockFormat, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gpstk__WrongBlockNumber[] = {  {&_swigt__p_gpstk__WrongBlockNumber, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gpstk__WxObsData[] = {  {&_swigt__p_gpstk__WxObsData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gpstk__WxObservation[] = {  {&_swigt__p_gpstk__WxObservation, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gpstk__X1Sequence[] = {  {&_swigt__p_gpstk__X1Sequence, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gpstk__X2Sequence[] = {  {&_swigt__p_gpstk__X2Sequence, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gpstk__Xvt[] = {  {&_swigt__p_gpstk__Xvt, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gpstk__ZeroTropModel[] = {  {&_swigt__p_gpstk__ZeroTropModel, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int[] = {  {&_swigt__p_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int_type[] = {  {&_swigt__p_int_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iostate[] = {  {&_swigt__p_iostate, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_key_type[] = {  {&_swigt__p_key_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_long[] = {  {&_swigt__p_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_long_double[] = {  {&_swigt__p_long_double, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_long_long[] = {  {&_swigt__p_long_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mapped_type[] = {  {&_swigt__p_mapped_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_off_type[] = {  {&_swigt__p_off_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_openmode[] = {  {&_swigt__p_openmode, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_void[] = {  {&_swigt__p_p_void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pos_type[] = {  {&_swigt__p_pos_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_second_type[] = {  {&_swigt__p_second_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_seekdir[] = {  {&_swigt__p_seekdir, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_sensorPosType[] = {  {&_swigt__p_sensorPosType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_sensorType[] = {  {&_swigt__p_sensorType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_short[] = {  {&_swigt__p_short, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_size_t[] = {  {&_swigt__p_size_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_size_type[] = {  {&_swigt__p_size_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_state_type[] = {  {&_swigt__p_state_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__bad_exception[] = {  {&_swigt__p_std__bad_exception, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__basic_iosTchar_std__char_traitsTchar_t_t[] = {  {&_swigt__p_gpstk__AccessError, _p_gpstk__AccessErrorTo_p_std__basic_iosTchar_std__char_traitsTchar_t_t, 0, 0},  {&_swigt__p_gpstk__InvalidParameter, _p_gpstk__InvalidParameterTo_p_std__basic_iosTchar_std__char_traitsTchar_t_t, 0, 0},  {&_swigt__p_gpstk__WrongBlockNumber, _p_gpstk__WrongBlockNumberTo_p_std__basic_iosTchar_std__char_traitsTchar_t_t, 0, 0},  {&_swigt__p_gpstk__OutOfMemory, _p_gpstk__OutOfMemoryTo_p_std__basic_iosTchar_std__char_traitsTchar_t_t, 0, 0},  {&_swigt__p_std__basic_iostreamTchar_std__char_traitsTchar_t_t, _p_std__basic_iostreamTchar_std__char_traitsTchar_t_tTo_p_std__basic_iosTchar_std__char_traitsTchar_t_t, 0, 0},  {&_swigt__p_gpstk__WrongBlockFormat, _p_gpstk__WrongBlockFormatTo_p_std__basic_iosTchar_std__char_traitsTchar_t_t, 0, 0},  {&_swigt__p_gpstk__InvalidValue, _p_gpstk__InvalidValueTo_p_std__basic_iosTchar_std__char_traitsTchar_t_t, 0, 0},  {&_swigt__p_std__basic_iosTchar_std__char_traitsTchar_t_t, 0, 0, 0},  {&_swigt__p_gpstk__ObjectNotFound, _p_gpstk__ObjectNotFoundTo_p_std__basic_iosTchar_std__char_traitsTchar_t_t, 0, 0},  {&_swigt__p_gpstk__InvalidArgumentException, _p_gpstk__InvalidArgumentExceptionTo_p_std__basic_iosTchar_std__char_traitsTchar_t_t, 0, 0},  {&_swigt__p_gpstk__ConfigurationException, _p_gpstk__ConfigurationExceptionTo_p_std__basic_iosTchar_std__char_traitsTchar_t_t, 0, 0},  {&_swigt__p_gpstk__SystemPipeException, _p_gpstk__SystemPipeExceptionTo_p_std__basic_iosTchar_std__char_traitsTchar_t_t, 0, 0},  {&_swigt__p_gpstk__SystemSemaphoreException, _p_gpstk__SystemSemaphoreExceptionTo_p_std__basic_iosTchar_std__char_traitsTchar_t_t, 0, 0},  {&_swigt__p_gpstk__FileMissingException, _p_gpstk__FileMissingExceptionTo_p_std__basic_iosTchar_std__char_traitsTchar_t_t, 0, 0},  {&_swigt__p_gpstk__IndexOutOfBoundsException, _p_gpstk__IndexOutOfBoundsExceptionTo_p_std__basic_iosTchar_std__char_traitsTchar_t_t, 0, 0},  {&_swigt__p_gpstk__Exception, _p_gpstk__ExceptionTo_p_std__basic_iosTchar_std__char_traitsTchar_t_t, 0, 0},  {&_swigt__p_gpstk__SystemQueueException, _p_gpstk__SystemQueueExceptionTo_p_std__basic_iosTchar_std__char_traitsTchar_t_t, 0, 0},  {&_swigt__p_gpstk__FileHunterException, _p_gpstk__FileHunterExceptionTo_p_std__basic_iosTchar_std__char_traitsTchar_t_t, 0, 0},  {&_swigt__p_gpstk__GeometryException, _p_gpstk__GeometryExceptionTo_p_std__basic_iosTchar_std__char_traitsTchar_t_t, 0, 0},  {&_swigt__p_gpstk__NoGeoidException, _p_gpstk__NoGeoidExceptionTo_p_std__basic_iosTchar_std__char_traitsTchar_t_t, 0, 0},  {&_swigt__p_DayTimeException, _p_DayTimeExceptionTo_p_std__basic_iosTchar_std__char_traitsTchar_t_t, 0, 0},  {&_swigt__p_FormatException, _p_FormatExceptionTo_p_std__basic_iosTchar_std__char_traitsTchar_t_t, 0, 0},  {&_swigt__p_gpstk__InvalidRequest, _p_gpstk__InvalidRequestTo_p_std__basic_iosTchar_std__char_traitsTchar_t_t, 0, 0},  {&_swigt__p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, _p_std__basic_ostreamTchar_std__char_traitsTchar_t_tTo_p_std__basic_iosTchar_std__char_traitsTchar_t_t, 0, 0},  {&_swigt__p_std__basic_istreamTchar_std__char_traitsTchar_t_t, _p_std__basic_istreamTchar_std__char_traitsTchar_t_tTo_p_std__basic_iosTchar_std__char_traitsTchar_t_t, 0, 0},  {&_swigt__p_gpstk__AssertionFailure, _p_gpstk__AssertionFailureTo_p_std__basic_iosTchar_std__char_traitsTchar_t_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__basic_iostreamTchar_std__char_traitsTchar_t_t[] = {  {&_swigt__p_std__basic_iostreamTchar_std__char_traitsTchar_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__basic_istreamTchar_std__char_traitsTchar_t_t[] = {  {&_swigt__p_std__basic_istreamTchar_std__char_traitsTchar_t_t, 0, 0, 0},  {&_swigt__p_std__basic_iostreamTchar_std__char_traitsTchar_t_t, _p_std__basic_iostreamTchar_std__char_traitsTchar_t_tTo_p_std__basic_istreamTchar_std__char_traitsTchar_t_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__basic_istreamTchar_std__char_traitsTchar_t_t__char_type[] = {  {&_swigt__p_char, 0, 0, 0},  {&_swigt__p_std__basic_istreamTchar_std__char_traitsTchar_t_t__char_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__basic_istreamTchar_std__char_traitsTchar_t_t__off_type[] = {  {&_swigt__p_std__basic_istreamTchar_std__char_traitsTchar_t_t__off_type, 0, 0, 0},  {&_swigt__p_std__basic_ostreamTchar_std__char_traitsTchar_t_t__off_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__basic_istreamTchar_std__char_traitsTchar_t_t__pos_type[] = {  {&_swigt__p_std__basic_istreamTchar_std__char_traitsTchar_t_t__pos_type, 0, 0, 0},  {&_swigt__p_std__basic_ostreamTchar_std__char_traitsTchar_t_t__pos_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__basic_ostreamTchar_std__char_traitsTchar_t_t[] = {  {&_swigt__p_gpstk__AccessError, _p_gpstk__AccessErrorTo_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0, 0},  {&_swigt__p_gpstk__InvalidParameter, _p_gpstk__InvalidParameterTo_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0, 0},  {&_swigt__p_gpstk__WrongBlockNumber, _p_gpstk__WrongBlockNumberTo_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0, 0},  {&_swigt__p_gpstk__OutOfMemory, _p_gpstk__OutOfMemoryTo_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0, 0},  {&_swigt__p_std__basic_iostreamTchar_std__char_traitsTchar_t_t, _p_std__basic_iostreamTchar_std__char_traitsTchar_t_tTo_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0, 0},  {&_swigt__p_gpstk__WrongBlockFormat, _p_gpstk__WrongBlockFormatTo_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0, 0},  {&_swigt__p_gpstk__InvalidValue, _p_gpstk__InvalidValueTo_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0, 0},  {&_swigt__p_gpstk__ObjectNotFound, _p_gpstk__ObjectNotFoundTo_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0, 0},  {&_swigt__p_gpstk__SystemQueueException, _p_gpstk__SystemQueueExceptionTo_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0, 0},  {&_swigt__p_gpstk__SystemPipeException, _p_gpstk__SystemPipeExceptionTo_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0, 0},  {&_swigt__p_gpstk__SystemSemaphoreException, _p_gpstk__SystemSemaphoreExceptionTo_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0, 0},  {&_swigt__p_gpstk__FileMissingException, _p_gpstk__FileMissingExceptionTo_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0, 0},  {&_swigt__p_gpstk__ConfigurationException, _p_gpstk__ConfigurationExceptionTo_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0, 0},  {&_swigt__p_gpstk__InvalidArgumentException, _p_gpstk__InvalidArgumentExceptionTo_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0, 0},  {&_swigt__p_gpstk__IndexOutOfBoundsException, _p_gpstk__IndexOutOfBoundsExceptionTo_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0, 0},  {&_swigt__p_gpstk__Exception, _p_gpstk__ExceptionTo_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0, 0},  {&_swigt__p_gpstk__FileHunterException, _p_gpstk__FileHunterExceptionTo_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0, 0},  {&_swigt__p_gpstk__GeometryException, _p_gpstk__GeometryExceptionTo_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0, 0},  {&_swigt__p_gpstk__NoGeoidException, _p_gpstk__NoGeoidExceptionTo_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0, 0},  {&_swigt__p_DayTimeException, _p_DayTimeExceptionTo_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0, 0},  {&_swigt__p_FormatException, _p_FormatExceptionTo_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0, 0},  {&_swigt__p_gpstk__InvalidRequest, _p_gpstk__InvalidRequestTo_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0, 0},  {&_swigt__p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0, 0, 0},  {&_swigt__p_gpstk__AssertionFailure, _p_gpstk__AssertionFailureTo_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__basic_ostreamTchar_std__char_traitsTchar_t_t__off_type[] = {  {&_swigt__p_std__basic_ostreamTchar_std__char_traitsTchar_t_t__off_type, 0, 0, 0},  {&_swigt__p_std__basic_istreamTchar_std__char_traitsTchar_t_t__off_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__basic_ostreamTchar_std__char_traitsTchar_t_t__pos_type[] = {  {&_swigt__p_std__basic_ostreamTchar_std__char_traitsTchar_t_t__pos_type, 0, 0, 0},  {&_swigt__p_std__basic_istreamTchar_std__char_traitsTchar_t_t__pos_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__basic_streambufTchar_std__char_traitsTchar_t_t[] = {  {&_swigt__p_std__basic_streambufTchar_std__char_traitsTchar_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__basic_stringTchar_std__char_traitsTchar_t_std__allocatorTchar_t_t[] = {  {&_swigt__p_std__basic_stringTchar_std__char_traitsTchar_t_std__allocatorTchar_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__domain_error[] = {  {&_swigt__p_std__domain_error, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__exception[] = {  {&_swigt__p_std__logic_error, _p_std__logic_errorTo_p_std__exception, 0, 0},  {&_swigt__p_std__runtime_error, _p_std__runtime_errorTo_p_std__exception, 0, 0},  {&_swigt__p_std__range_error, _p_std__range_errorTo_p_std__exception, 0, 0},  {&_swigt__p_std__overflow_error, _p_std__overflow_errorTo_p_std__exception, 0, 0},  {&_swigt__p_std__underflow_error, _p_std__underflow_errorTo_p_std__exception, 0, 0},  {&_swigt__p_std__exception, 0, 0, 0},  {&_swigt__p_std__domain_error, _p_std__domain_errorTo_p_std__exception, 0, 0},  {&_swigt__p_std__length_error, _p_std__length_errorTo_p_std__exception, 0, 0},  {&_swigt__p_std__bad_exception, _p_std__bad_exceptionTo_p_std__exception, 0, 0},  {&_swigt__p_std__out_of_range, _p_std__out_of_rangeTo_p_std__exception, 0, 0},  {&_swigt__p_std__invalid_argument, _p_std__invalid_argumentTo_p_std__exception, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__invalid_argument[] = {  {&_swigt__p_std__invalid_argument, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__ios__openmode[] = {  {&_swigt__p_std__ios__openmode, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__ios_base[] = {  {&_swigt__p_gpstk__AccessError, _p_gpstk__AccessErrorTo_p_std__ios_base, 0, 0},  {&_swigt__p_gpstk__InvalidParameter, _p_gpstk__InvalidParameterTo_p_std__ios_base, 0, 0},  {&_swigt__p_gpstk__WrongBlockNumber, _p_gpstk__WrongBlockNumberTo_p_std__ios_base, 0, 0},  {&_swigt__p_gpstk__OutOfMemory, _p_gpstk__OutOfMemoryTo_p_std__ios_base, 0, 0},  {&_swigt__p_std__basic_iostreamTchar_std__char_traitsTchar_t_t, _p_std__basic_iostreamTchar_std__char_traitsTchar_t_tTo_p_std__ios_base, 0, 0},  {&_swigt__p_gpstk__WrongBlockFormat, _p_gpstk__WrongBlockFormatTo_p_std__ios_base, 0, 0},  {&_swigt__p_gpstk__InvalidValue, _p_gpstk__InvalidValueTo_p_std__ios_base, 0, 0},  {&_swigt__p_std__basic_iosTchar_std__char_traitsTchar_t_t, _p_std__basic_iosTchar_std__char_traitsTchar_t_tTo_p_std__ios_base, 0, 0},  {&_swigt__p_gpstk__ObjectNotFound, _p_gpstk__ObjectNotFoundTo_p_std__ios_base, 0, 0},  {&_swigt__p_gpstk__ConfigurationException, _p_gpstk__ConfigurationExceptionTo_p_std__ios_base, 0, 0},  {&_swigt__p_gpstk__SystemPipeException, _p_gpstk__SystemPipeExceptionTo_p_std__ios_base, 0, 0},  {&_swigt__p_gpstk__SystemSemaphoreException, _p_gpstk__SystemSemaphoreExceptionTo_p_std__ios_base, 0, 0},  {&_swigt__p_gpstk__FileMissingException, _p_gpstk__FileMissingExceptionTo_p_std__ios_base, 0, 0},  {&_swigt__p_gpstk__InvalidArgumentException, _p_gpstk__InvalidArgumentExceptionTo_p_std__ios_base, 0, 0},  {&_swigt__p_gpstk__IndexOutOfBoundsException, _p_gpstk__IndexOutOfBoundsExceptionTo_p_std__ios_base, 0, 0},  {&_swigt__p_gpstk__Exception, _p_gpstk__ExceptionTo_p_std__ios_base, 0, 0},  {&_swigt__p_gpstk__SystemQueueException, _p_gpstk__SystemQueueExceptionTo_p_std__ios_base, 0, 0},  {&_swigt__p_gpstk__FileHunterException, _p_gpstk__FileHunterExceptionTo_p_std__ios_base, 0, 0},  {&_swigt__p_gpstk__GeometryException, _p_gpstk__GeometryExceptionTo_p_std__ios_base, 0, 0},  {&_swigt__p_gpstk__NoGeoidException, _p_gpstk__NoGeoidExceptionTo_p_std__ios_base, 0, 0},  {&_swigt__p_DayTimeException, _p_DayTimeExceptionTo_p_std__ios_base, 0, 0},  {&_swigt__p_FormatException, _p_FormatExceptionTo_p_std__ios_base, 0, 0},  {&_swigt__p_gpstk__InvalidRequest, _p_gpstk__InvalidRequestTo_p_std__ios_base, 0, 0},  {&_swigt__p_std__ios_base, 0, 0, 0},  {&_swigt__p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, _p_std__basic_ostreamTchar_std__char_traitsTchar_t_tTo_p_std__ios_base, 0, 0},  {&_swigt__p_std__basic_istreamTchar_std__char_traitsTchar_t_t, _p_std__basic_istreamTchar_std__char_traitsTchar_t_tTo_p_std__ios_base, 0, 0},  {&_swigt__p_gpstk__AssertionFailure, _p_gpstk__AssertionFailureTo_p_std__ios_base, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__length_error[] = {  {&_swigt__p_std__length_error, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__listTdouble_t[] = {  {&_swigt__p_std__listTdouble_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__listTgpstk__EngEphemeris_t[] = {  {&_swigt__p_std__listTgpstk__EngEphemeris_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__locale[] = {  {&_swigt__p_std__locale, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__logic_error[] = {  {&_swigt__p_std__logic_error, 0, 0, 0},  {&_swigt__p_std__domain_error, _p_std__domain_errorTo_p_std__logic_error, 0, 0},  {&_swigt__p_std__length_error, _p_std__length_errorTo_p_std__logic_error, 0, 0},  {&_swigt__p_std__out_of_range, _p_std__out_of_rangeTo_p_std__logic_error, 0, 0},  {&_swigt__p_std__invalid_argument, _p_std__invalid_argumentTo_p_std__logic_error, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__mapTRinexObsType_RinexDatum_std__lessTRinexObsType_t_std__allocatorTstd__pairTRinexObsType_const_RinexDatum_t_t_t[] = {  {&_swigt__p_std__mapTRinexObsType_RinexDatum_std__lessTRinexObsType_t_std__allocatorTstd__pairTRinexObsType_const_RinexDatum_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__mapTRinexObsType_RinexDatum_std__lessTRinexObsType_t_std__allocatorTstd__pairTRinexObsType_const_RinexDatum_t_t_t__allocator_type[] = {  {&_swigt__p_std__mapTRinexObsType_RinexDatum_std__lessTRinexObsType_t_std__allocatorTstd__pairTRinexObsType_const_RinexDatum_t_t_t__allocator_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__mapTRinexObsType_RinexDatum_std__lessTRinexObsType_t_std__allocatorTstd__pairTRinexObsType_const_RinexDatum_t_t_t__key_type[] = {  {&_swigt__p_RinexObsType, 0, 0, 0},  {&_swigt__p_std__mapTRinexObsType_RinexDatum_std__lessTRinexObsType_t_std__allocatorTstd__pairTRinexObsType_const_RinexDatum_t_t_t__key_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__mapTRinexObsType_RinexDatum_std__lessTRinexObsType_t_std__allocatorTstd__pairTRinexObsType_const_RinexDatum_t_t_t__mapped_type[] = {  {&_swigt__p_RinexDatum, 0, 0, 0},  {&_swigt__p_std__mapTRinexObsType_RinexDatum_std__lessTRinexObsType_t_std__allocatorTstd__pairTRinexObsType_const_RinexDatum_t_t_t__mapped_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__mapTgpstk__DayTime_gpstk__ObsEpoch_std__lessTgpstk__DayTime_t_std__allocatorTstd__pairTgpstk__DayTime_const_gpstk__ObsEpoch_t_t_t[] = {  {&_swigt__p_std__mapTgpstk__DayTime_gpstk__ObsEpoch_std__lessTgpstk__DayTime_t_std__allocatorTstd__pairTgpstk__DayTime_const_gpstk__ObsEpoch_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__mapTgpstk__DayTime_gpstk__WxObservation_std__lessTgpstk__DayTime_t_std__allocatorTstd__pairTgpstk__DayTime_const_gpstk__WxObservation_t_t_t[] = {  {&_swigt__p_std__mapTgpstk__DayTime_gpstk__WxObservation_std__lessTgpstk__DayTime_t_std__allocatorTstd__pairTgpstk__DayTime_const_gpstk__WxObservation_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__mapTgpstk__RinexMetHeader__RinexMetType_double_std__lessTgpstk__RinexMetHeader__RinexMetType_t_std__allocatorTstd__pairTgpstk__RinexMetHeader__RinexMetType_const_double_t_t_t[] = {  {&_swigt__p_std__mapTgpstk__RinexMetHeader__RinexMetType_double_std__lessTgpstk__RinexMetHeader__RinexMetType_t_std__allocatorTstd__pairTgpstk__RinexMetHeader__RinexMetType_const_double_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__mapTgpstk__RinexPrn_gpstk__RinexObsData__RinexObsTypeMap_std__lessTgpstk__RinexPrn_t_std__allocatorTstd__pairTgpstk__RinexPrn_const_gpstk__RinexObsData__RinexObsTypeMap_t_t_t__allocator_type[] = {  {&_swigt__p_std__mapTgpstk__RinexPrn_gpstk__RinexObsData__RinexObsTypeMap_std__lessTgpstk__RinexPrn_t_std__allocatorTstd__pairTgpstk__RinexPrn_const_gpstk__RinexObsData__RinexObsTypeMap_t_t_t__allocator_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__mapTgpstk__RinexPrn_gpstk__RinexObsData__RinexObsTypeMap_std__lessTgpstk__RinexPrn_t_std__allocatorTstd__pairTgpstk__RinexPrn_const_gpstk__RinexObsData__RinexObsTypeMap_t_t_t__key_type[] = {  {&_swigt__p_std__mapTgpstk__RinexPrn_int_std__lessTgpstk__RinexPrn_t_std__allocatorTstd__pairTgpstk__RinexPrn_const_int_t_t_t__key_type, 0, 0, 0},  {&_swigt__p_gpstk__RinexPrn, 0, 0, 0},  {&_swigt__p_std__mapTgpstk__RinexPrn_gpstk__RinexObsData__RinexObsTypeMap_std__lessTgpstk__RinexPrn_t_std__allocatorTstd__pairTgpstk__RinexPrn_const_gpstk__RinexObsData__RinexObsTypeMap_t_t_t__key_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__mapTgpstk__RinexPrn_int_std__lessTgpstk__RinexPrn_t_std__allocatorTstd__pairTgpstk__RinexPrn_const_int_t_t_t[] = {  {&_swigt__p_std__mapTgpstk__RinexPrn_int_std__lessTgpstk__RinexPrn_t_std__allocatorTstd__pairTgpstk__RinexPrn_const_int_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__mapTgpstk__RinexPrn_int_std__lessTgpstk__RinexPrn_t_std__allocatorTstd__pairTgpstk__RinexPrn_const_int_t_t_t__allocator_type[] = {  {&_swigt__p_std__mapTgpstk__RinexPrn_int_std__lessTgpstk__RinexPrn_t_std__allocatorTstd__pairTgpstk__RinexPrn_const_int_t_t_t__allocator_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__mapTgpstk__RinexPrn_int_std__lessTgpstk__RinexPrn_t_std__allocatorTstd__pairTgpstk__RinexPrn_const_int_t_t_t__key_type[] = {  {&_swigt__p_std__mapTgpstk__RinexPrn_int_std__lessTgpstk__RinexPrn_t_std__allocatorTstd__pairTgpstk__RinexPrn_const_int_t_t_t__key_type, 0, 0, 0},  {&_swigt__p_gpstk__RinexPrn, 0, 0, 0},  {&_swigt__p_std__mapTgpstk__RinexPrn_gpstk__RinexObsData__RinexObsTypeMap_std__lessTgpstk__RinexPrn_t_std__allocatorTstd__pairTgpstk__RinexPrn_const_gpstk__RinexObsData__RinexObsTypeMap_t_t_t__key_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__mapTgpstk__RinexPrn_std__mapTRinexObsType_RinexDatum_std__lessTRinexObsType_t_std__allocatorTstd__pairTRinexObsType_const_RinexDatum_t_t_t_std__lessTgpstk__RinexPrn_t_std__allocatorTstd__pairTgpstk__RinexPrn_const_std__mapTRinexObsType_RinexDatum_std__lessTRinexObsType_t_std__allocatorTstd__pairTRinexObsType_const_RinexDatum_t_t_t_t_t_t[] = {  {&_swigt__p_std__mapTgpstk__RinexPrn_std__mapTRinexObsType_RinexDatum_std__lessTRinexObsType_t_std__allocatorTstd__pairTRinexObsType_const_RinexDatum_t_t_t_std__lessTgpstk__RinexPrn_t_std__allocatorTstd__pairTgpstk__RinexPrn_const_std__mapTRinexObsType_RinexDatum_std__lessTRinexObsType_t_std__allocatorTstd__pairTRinexObsType_const_RinexDatum_t_t_t_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__mapTgpstk__RinexPrn_std__vectorTint_std__allocatorTint_t_t_std__lessTgpstk__RinexPrn_t_std__allocatorTstd__pairTgpstk__RinexPrn_const_std__vectorTint_std__allocatorTint_t_t_t_t_t[] = {  {&_swigt__p_std__mapTgpstk__RinexPrn_std__vectorTint_std__allocatorTint_t_t_std__lessTgpstk__RinexPrn_t_std__allocatorTstd__pairTgpstk__RinexPrn_const_std__vectorTint_std__allocatorTint_t_t_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__mapTshort_gpstk__AlmOrbit_std__lessTshort_t_std__allocatorTstd__pairTshort_const_gpstk__AlmOrbit_t_t_t[] = {  {&_swigt__p_std__mapTshort_gpstk__AlmOrbit_std__lessTshort_t_std__allocatorTstd__pairTshort_const_gpstk__AlmOrbit_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__mapTshort_gpstk__ObsClockModel__PRNMode_std__lessTshort_t_std__allocatorTstd__pairTshort_const_gpstk__ObsClockModel__PRNMode_t_t_t[] = {  {&_swigt__p_std__mapTshort_gpstk__ObsClockModel__PRNMode_std__lessTshort_t_std__allocatorTstd__pairTshort_const_gpstk__ObsClockModel__PRNMode_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__mapTshort_gpstk__ObsClockModel__PRNStatus_std__lessTshort_t_std__allocatorTstd__pairTshort_const_gpstk__ObsClockModel__PRNStatus_t_t_t[] = {  {&_swigt__p_std__mapTshort_gpstk__ObsClockModel__PRNStatus_std__lessTshort_t_std__allocatorTstd__pairTshort_const_gpstk__ObsClockModel__PRNStatus_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__mapTshort_gpstk__ObsRngDev_std__lessTshort_t_std__allocatorTstd__pairTshort_const_gpstk__ObsRngDev_t_t_t[] = {  {&_swigt__p_std__mapTshort_gpstk__ObsRngDev_std__lessTshort_t_std__allocatorTstd__pairTshort_const_gpstk__ObsRngDev_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__mapTshort_gpstk__Observation_std__lessTshort_t_std__allocatorTstd__pairTshort_const_gpstk__Observation_t_t_t[] = {  {&_swigt__p_std__mapTshort_gpstk__Observation_std__lessTshort_t_std__allocatorTstd__pairTshort_const_gpstk__Observation_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__mapTshort_short_std__lessTshort_t_std__allocatorTstd__pairTshort_const_short_t_t_t[] = {  {&_swigt__p_std__mapTshort_short_std__lessTshort_t_std__allocatorTstd__pairTshort_const_short_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__out_of_range[] = {  {&_swigt__p_std__out_of_range, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__overflow_error[] = {  {&_swigt__p_std__overflow_error, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__range_error[] = {  {&_swigt__p_std__range_error, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__runtime_error[] = {  {&_swigt__p_std__runtime_error, 0, 0, 0},  {&_swigt__p_std__range_error, _p_std__range_errorTo_p_std__runtime_error, 0, 0},  {&_swigt__p_std__overflow_error, _p_std__overflow_errorTo_p_std__runtime_error, 0, 0},  {&_swigt__p_std__underflow_error, _p_std__underflow_errorTo_p_std__runtime_error, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__setTshort_t[] = {  {&_swigt__p_std__setTshort_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__string[] = {  {&_swigt__p_std__string, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__underflow_error[] = {  {&_swigt__p_std__underflow_error, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__valarrayTdouble_t[] = {  {&_swigt__p_std__valarrayTdouble_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorTExtraWaveFact_std__allocatorTExtraWaveFact_t_t[] = {  {&_swigt__p_std__vectorTExtraWaveFact_std__allocatorTExtraWaveFact_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorTRinexObsType_std__allocatorTRinexObsType_t_t[] = {  {&_swigt__p_std__vectorTRinexObsType_std__allocatorTRinexObsType_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorTchar_std__allocatorTchar_t_t[] = {  {&_swigt__p_std__vectorTchar_std__allocatorTchar_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorTdouble_std__allocatorTdouble_t_t[] = {  {&_swigt__p_std__vectorTdouble_std__allocatorTdouble_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorTdouble_std__allocatorTdouble_t_t__allocator_type[] = {  {&_swigt__p_std__vectorTdouble_std__allocatorTdouble_t_t__allocator_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorTgpstk__RinexMetHeader__RinexMetType_std__allocatorTgpstk__RinexMetHeader__RinexMetType_t_t[] = {  {&_swigt__p_std__vectorTgpstk__RinexMetHeader__RinexMetType_std__allocatorTgpstk__RinexMetHeader__RinexMetType_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorTgpstk__RinexPrn_std__allocatorTgpstk__RinexPrn_t_t[] = {  {&_swigt__p_std__vectorTgpstk__RinexPrn_std__allocatorTgpstk__RinexPrn_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorTint_std__allocatorTint_t_t[] = {  {&_swigt__p_std__vectorTint_std__allocatorTint_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorTint_std__allocatorTint_t_t__allocator_type[] = {  {&_swigt__p_std__vectorTint_std__allocatorTint_t_t__allocator_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorTlong_std__allocatorTlong_t_t[] = {  {&_swigt__p_std__vectorTlong_std__allocatorTlong_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorTsensorPosType_std__allocatorTsensorPosType_t_t[] = {  {&_swigt__p_std__vectorTsensorPosType_std__allocatorTsensorPosType_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorTsensorType_std__allocatorTsensorType_t_t[] = {  {&_swigt__p_std__vectorTsensorType_std__allocatorTsensorType_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorTstd__string_std__allocatorTstd__string_t_t[] = {  {&_swigt__p_std__vectorTstd__string_std__allocatorTstd__string_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_time_t[] = {  {&_swigt__p_time_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_timeval[] = {  {&_swigt__p_timeval, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_traits_type[] = {  {&_swigt__p_traits_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_int[] = {  {&_swigt__p_unsigned_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_long[] = {  {&_swigt__p_unsigned_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_long_long[] = {  {&_swigt__p_unsigned_long_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_short[] = {  {&_swigt__p_unsigned_short, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_value_type[] = {  {&_swigt__p_value_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__ptrdiff_t[] = {  {&_swigt__ptrdiff_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__size_t[] = {  {&_swigt__size_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__std__ptrdiff_t[] = {  {&_swigt__std__ptrdiff_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__std__size_t[] = {  {&_swigt__std__size_t, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_DayTimeException,
  _swigc__p_EndOfFile,
  _swigc__p_ExtraWaveFact,
  _swigc__p_FFStreamError,
  _swigc__p_FileSpec,
  _swigc__p_FileSpec__FileSpecSortType,
  _swigc__p_FileSpec__FileSpecType,
  _swigc__p_FilterPair,
  _swigc__p_FormatException,
  _swigc__p_InvalidIonoModel,
  _swigc__p_InvalidTropModel,
  _swigc__p_MatrixTdouble_t,
  _swigc__p_NoAlmanacFound,
  _swigc__p_NoEphemerisFound,
  _swigc__p_NoIonoModelFound,
  _swigc__p_ORDMap,
  _swigc__p_PRNModeMap,
  _swigc__p_PRNStatusMap,
  _swigc__p_RinexDatum,
  _swigc__p_RinexMetMap,
  _swigc__p_RinexMetType,
  _swigc__p_RinexObsType,
  _swigc__p_RinexObsTypeMap,
  _swigc__p_RinexPrnMap,
  _swigc__p_SVBitsMap,
  _swigc__p_SVNotPresentException,
  _swigc__p_StatsTdouble_t,
  _swigc__p_StringUtils__StringException,
  _swigc__p_VectorTbool_t,
  _swigc__p_VectorTdouble_t,
  _swigc__p_allocator_type,
  _swigc__p_bool,
  _swigc__p_char,
  _swigc__p_char_type,
  _swigc__p_codeType,
  _swigc__p_difference_type,
  _swigc__p_double,
  _swigc__p_f_enum_std__ios_base__event_r_std__ios_base_int__void,
  _swigc__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iosTchar_std__char_traitsTchar_t_t,
  _swigc__p_f_r_std__basic_ios__char_std__char_traits__char______r_gpstk__AccessError,
  _swigc__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iostreamTchar_std__char_traitsTchar_t_t,
  _swigc__p_f_r_std__basic_ios__char_std__char_traits__char______r_gpstk__InvalidParameter,
  _swigc__p_f_r_std__basic_ios__char_std__char_traits__char______r_gpstk__OutOfMemory,
  _swigc__p_f_r_std__basic_ios__char_std__char_traits__char______r_gpstk__WrongBlockNumber,
  _swigc__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_istreamTchar_std__char_traitsTchar_t_t,
  _swigc__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_ostreamTchar_std__char_traitsTchar_t_t,
  _swigc__p_f_r_std__basic_ios__char_std__char_traits__char______r_gpstk__InvalidValue,
  _swigc__p_f_r_std__basic_ios__char_std__char_traits__char______r_gpstk__WrongBlockFormat,
  _swigc__p_f_r_std__basic_ios__char_std__char_traits__char______r_gpstk__ObjectNotFound,
  _swigc__p_f_r_std__basic_ios__char_std__char_traits__char______r_gpstk__SystemPipeException,
  _swigc__p_f_r_std__basic_ios__char_std__char_traits__char______r_gpstk__SystemSemaphoreException,
  _swigc__p_f_r_std__basic_ios__char_std__char_traits__char______r_gpstk__FileMissingException,
  _swigc__p_f_r_std__basic_ios__char_std__char_traits__char______r_gpstk__ConfigurationException,
  _swigc__p_f_r_std__basic_ios__char_std__char_traits__char______r_gpstk__InvalidArgumentException,
  _swigc__p_f_r_std__basic_ios__char_std__char_traits__char______r_gpstk__IndexOutOfBoundsException,
  _swigc__p_f_r_std__basic_ios__char_std__char_traits__char______r_gpstk__Exception,
  _swigc__p_f_r_std__basic_ios__char_std__char_traits__char______r_gpstk__SystemQueueException,
  _swigc__p_f_r_std__basic_ios__char_std__char_traits__char______r_gpstk__FileHunterException,
  _swigc__p_f_r_std__basic_ios__char_std__char_traits__char______r_gpstk__GeometryException,
  _swigc__p_f_r_std__basic_ios__char_std__char_traits__char______r_gpstk__NoGeoidException,
  _swigc__p_f_r_std__basic_ios__char_std__char_traits__char______r_DayTimeException,
  _swigc__p_f_r_std__basic_ios__char_std__char_traits__char______r_FormatException,
  _swigc__p_f_r_std__basic_ios__char_std__char_traits__char______r_gpstk__InvalidRequest,
  _swigc__p_f_r_std__basic_ios__char_std__char_traits__char______r_gpstk__AssertionFailure,
  _swigc__p_f_r_std__basic_istream__char_std__char_traits__char______r_std__basic_istreamTchar_std__char_traitsTchar_t_t,
  _swigc__p_f_r_std__basic_istream__char_std__char_traits__char______r_std__basic_iostreamTchar_std__char_traitsTchar_t_t,
  _swigc__p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_ostreamTchar_std__char_traitsTchar_t_t,
  _swigc__p_f_r_std__basic_ostream__char_std__char_traits__char______r_gpstk__AccessError,
  _swigc__p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_iostreamTchar_std__char_traitsTchar_t_t,
  _swigc__p_f_r_std__basic_ostream__char_std__char_traits__char______r_gpstk__InvalidParameter,
  _swigc__p_f_r_std__basic_ostream__char_std__char_traits__char______r_gpstk__OutOfMemory,
  _swigc__p_f_r_std__basic_ostream__char_std__char_traits__char______r_gpstk__WrongBlockNumber,
  _swigc__p_f_r_std__basic_ostream__char_std__char_traits__char______r_gpstk__InvalidValue,
  _swigc__p_f_r_std__basic_ostream__char_std__char_traits__char______r_gpstk__WrongBlockFormat,
  _swigc__p_f_r_std__basic_ostream__char_std__char_traits__char______r_gpstk__ObjectNotFound,
  _swigc__p_f_r_std__basic_ostream__char_std__char_traits__char______r_gpstk__SystemQueueException,
  _swigc__p_f_r_std__basic_ostream__char_std__char_traits__char______r_gpstk__SystemPipeException,
  _swigc__p_f_r_std__basic_ostream__char_std__char_traits__char______r_gpstk__SystemSemaphoreException,
  _swigc__p_f_r_std__basic_ostream__char_std__char_traits__char______r_gpstk__FileMissingException,
  _swigc__p_f_r_std__basic_ostream__char_std__char_traits__char______r_gpstk__ConfigurationException,
  _swigc__p_f_r_std__basic_ostream__char_std__char_traits__char______r_gpstk__InvalidArgumentException,
  _swigc__p_f_r_std__basic_ostream__char_std__char_traits__char______r_gpstk__IndexOutOfBoundsException,
  _swigc__p_f_r_std__basic_ostream__char_std__char_traits__char______r_gpstk__Exception,
  _swigc__p_f_r_std__basic_ostream__char_std__char_traits__char______r_gpstk__FileHunterException,
  _swigc__p_f_r_std__basic_ostream__char_std__char_traits__char______r_gpstk__GeometryException,
  _swigc__p_f_r_std__basic_ostream__char_std__char_traits__char______r_gpstk__NoGeoidException,
  _swigc__p_f_r_std__basic_ostream__char_std__char_traits__char______r_DayTimeException,
  _swigc__p_f_r_std__basic_ostream__char_std__char_traits__char______r_FormatException,
  _swigc__p_f_r_std__basic_ostream__char_std__char_traits__char______r_gpstk__InvalidRequest,
  _swigc__p_f_r_std__basic_ostream__char_std__char_traits__char______r_gpstk__AssertionFailure,
  _swigc__p_f_r_std__ios_base__r_std__ios_base,
  _swigc__p_f_r_std__ios_base__r_gpstk__AccessError,
  _swigc__p_f_r_std__ios_base__r_gpstk__InvalidParameter,
  _swigc__p_f_r_std__ios_base__r_gpstk__WrongBlockNumber,
  _swigc__p_f_r_std__ios_base__r_gpstk__OutOfMemory,
  _swigc__p_f_r_std__ios_base__r_std__basic_istreamTchar_std__char_traitsTchar_t_t,
  _swigc__p_f_r_std__ios_base__r_std__basic_ostreamTchar_std__char_traitsTchar_t_t,
  _swigc__p_f_r_std__ios_base__r_gpstk__SystemSemaphoreException,
  _swigc__p_f_r_std__ios_base__r_gpstk__WrongBlockFormat,
  _swigc__p_f_r_std__ios_base__r_gpstk__ConfigurationException,
  _swigc__p_f_r_std__ios_base__r_std__basic_iosTchar_std__char_traitsTchar_t_t,
  _swigc__p_f_r_std__ios_base__r_gpstk__InvalidValue,
  _swigc__p_f_r_std__ios_base__r_gpstk__ObjectNotFound,
  _swigc__p_f_r_std__ios_base__r_gpstk__Exception,
  _swigc__p_f_r_std__ios_base__r_gpstk__SystemPipeException,
  _swigc__p_f_r_std__ios_base__r_gpstk__FileHunterException,
  _swigc__p_f_r_std__ios_base__r_gpstk__GeometryException,
  _swigc__p_f_r_std__ios_base__r_gpstk__NoGeoidException,
  _swigc__p_f_r_std__ios_base__r_DayTimeException,
  _swigc__p_f_r_std__ios_base__r_FormatException,
  _swigc__p_f_r_std__ios_base__r_gpstk__IndexOutOfBoundsException,
  _swigc__p_f_r_std__ios_base__r_gpstk__InvalidRequest,
  _swigc__p_f_r_std__ios_base__r_std__basic_iostreamTchar_std__char_traitsTchar_t_t,
  _swigc__p_f_r_std__ios_base__r_gpstk__InvalidArgumentException,
  _swigc__p_f_r_std__ios_base__r_gpstk__FileMissingException,
  _swigc__p_f_r_std__ios_base__r_gpstk__SystemQueueException,
  _swigc__p_f_r_std__ios_base__r_gpstk__AssertionFailure,
  _swigc__p_first_type,
  _swigc__p_float,
  _swigc__p_fmtflags,
  _swigc__p_gpstk__AccessError,
  _swigc__p_gpstk__AlmOrbit,
  _swigc__p_gpstk__AlmanacStore,
  _swigc__p_gpstk__AssertionFailure,
  _swigc__p_gpstk__BCEphemerisStore,
  _swigc__p_gpstk__ClockModel,
  _swigc__p_gpstk__CodeBuffer,
  _swigc__p_gpstk__ConfigurationException,
  _swigc__p_gpstk__CorrectedEphemerisRange,
  _swigc__p_gpstk__DayTime,
  _swigc__p_gpstk__ECEF,
  _swigc__p_gpstk__EngAlmanac,
  _swigc__p_gpstk__EngEphemeris,
  _swigc__p_gpstk__EngNav,
  _swigc__p_gpstk__EphemerisStore,
  _swigc__p_gpstk__EpochClockModel,
  _swigc__p_gpstk__Exception,
  _swigc__p_gpstk__ExceptionLocation,
  _swigc__p_gpstk__FFBinaryStream,
  _swigc__p_gpstk__FFData,
  _swigc__p_gpstk__FFStream,
  _swigc__p_gpstk__FFTextStream,
  _swigc__p_gpstk__FICAStream,
  _swigc__p_gpstk__FICBase,
  _swigc__p_gpstk__FICData,
  _swigc__p_gpstk__FICHeader,
  _swigc__p_gpstk__FICStream,
  _swigc__p_gpstk__FICStreamBase,
  _swigc__p_gpstk__FileHunter,
  _swigc__p_gpstk__FileHunterException,
  _swigc__p_gpstk__FileMissingException,
  _swigc__p_gpstk__FileStoreTgpstk__RinexNavHeader_t,
  _swigc__p_gpstk__FileStoreTgpstk__SP3Header_t,
  _swigc__p_gpstk__GGHeightTropModel,
  _swigc__p_gpstk__GGTropModel,
  _swigc__p_gpstk__GPSZcount,
  _swigc__p_gpstk__GenXSequence,
  _swigc__p_gpstk__Geodetic,
  _swigc__p_gpstk__GeoidModel,
  _swigc__p_gpstk__GeometryException,
  _swigc__p_gpstk__IndexOutOfBoundsException,
  _swigc__p_gpstk__InvalidArgumentException,
  _swigc__p_gpstk__InvalidParameter,
  _swigc__p_gpstk__InvalidRequest,
  _swigc__p_gpstk__InvalidValue,
  _swigc__p_gpstk__IonoModel,
  _swigc__p_gpstk__IonoModelStore,
  _swigc__p_gpstk__LinearClockModel,
  _swigc__p_gpstk__MSCStream,
  _swigc__p_gpstk__MatrixTdouble_t,
  _swigc__p_gpstk__NBTropModel,
  _swigc__p_gpstk__NoGeoidException,
  _swigc__p_gpstk__ORDEpoch,
  _swigc__p_gpstk__ObjectNotFound,
  _swigc__p_gpstk__ObsClockModel,
  _swigc__p_gpstk__ObsEpoch,
  _swigc__p_gpstk__ObsRngDev,
  _swigc__p_gpstk__Observation,
  _swigc__p_gpstk__ObservationPlus,
  _swigc__p_gpstk__OutOfMemory,
  _swigc__p_gpstk__Position,
  _swigc__p_gpstk__RAIMSolution,
  _swigc__p_gpstk__RinexEphemerisStore,
  _swigc__p_gpstk__RinexMetBase,
  _swigc__p_gpstk__RinexMetData,
  _swigc__p_gpstk__RinexMetHeader,
  _swigc__p_gpstk__RinexMetStream,
  _swigc__p_gpstk__RinexNavBase,
  _swigc__p_gpstk__RinexNavData,
  _swigc__p_gpstk__RinexNavHeader,
  _swigc__p_gpstk__RinexNavStream,
  _swigc__p_gpstk__RinexObsBase,
  _swigc__p_gpstk__RinexObsData,
  _swigc__p_gpstk__RinexObsData__RinexPrnMap__iterator,
  _swigc__p_gpstk__RinexObsHeader,
  _swigc__p_gpstk__RinexObsStream,
  _swigc__p_gpstk__RinexPrn,
  _swigc__p_gpstk__RungeKutta4,
  _swigc__p_gpstk__RxObsData,
  _swigc__p_gpstk__SMODFStream,
  _swigc__p_gpstk__SP3Base,
  _swigc__p_gpstk__SP3Data,
  _swigc__p_gpstk__SP3EphemerisStore,
  _swigc__p_gpstk__SP3Header,
  _swigc__p_gpstk__SP3Stream,
  _swigc__p_gpstk__SVPCodeGen,
  _swigc__p_gpstk__SatID,
  _swigc__p_gpstk__SimpleTropModel,
  _swigc__p_gpstk__StringUtils__StringException,
  _swigc__p_gpstk__SystemPipeException,
  _swigc__p_gpstk__SystemQueueException,
  _swigc__p_gpstk__SystemSemaphoreException,
  _swigc__p_gpstk__TabularEphemerisStore,
  _swigc__p_gpstk__Triple,
  _swigc__p_gpstk__TropModel,
  _swigc__p_gpstk__ValidTypeTchar_t,
  _swigc__p_gpstk__ValidTypeTdouble_t,
  _swigc__p_gpstk__ValidTypeTfloat_t,
  _swigc__p_gpstk__ValidTypeTint_t,
  _swigc__p_gpstk__ValidTypeTlong_t,
  _swigc__p_gpstk__ValidTypeTshort_t,
  _swigc__p_gpstk__ValidTypeTunsigned_char_t,
  _swigc__p_gpstk__ValidTypeTunsigned_int_t,
  _swigc__p_gpstk__ValidTypeTunsigned_long_t,
  _swigc__p_gpstk__ValidTypeTunsigned_short_t,
  _swigc__p_gpstk__WrongBlockFormat,
  _swigc__p_gpstk__WrongBlockNumber,
  _swigc__p_gpstk__WxObsData,
  _swigc__p_gpstk__WxObservation,
  _swigc__p_gpstk__X1Sequence,
  _swigc__p_gpstk__X2Sequence,
  _swigc__p_gpstk__Xvt,
  _swigc__p_gpstk__ZeroTropModel,
  _swigc__p_int,
  _swigc__p_int_type,
  _swigc__p_iostate,
  _swigc__p_key_type,
  _swigc__p_long,
  _swigc__p_long_double,
  _swigc__p_long_long,
  _swigc__p_mapped_type,
  _swigc__p_off_type,
  _swigc__p_openmode,
  _swigc__p_p_void,
  _swigc__p_pos_type,
  _swigc__p_second_type,
  _swigc__p_seekdir,
  _swigc__p_sensorPosType,
  _swigc__p_sensorType,
  _swigc__p_short,
  _swigc__p_size_t,
  _swigc__p_size_type,
  _swigc__p_state_type,
  _swigc__p_std__bad_exception,
  _swigc__p_std__basic_iosTchar_std__char_traitsTchar_t_t,
  _swigc__p_std__basic_iostreamTchar_std__char_traitsTchar_t_t,
  _swigc__p_std__basic_istreamTchar_std__char_traitsTchar_t_t,
  _swigc__p_std__basic_istreamTchar_std__char_traitsTchar_t_t__char_type,
  _swigc__p_std__basic_istreamTchar_std__char_traitsTchar_t_t__off_type,
  _swigc__p_std__basic_istreamTchar_std__char_traitsTchar_t_t__pos_type,
  _swigc__p_std__basic_ostreamTchar_std__char_traitsTchar_t_t,
  _swigc__p_std__basic_ostreamTchar_std__char_traitsTchar_t_t__off_type,
  _swigc__p_std__basic_ostreamTchar_std__char_traitsTchar_t_t__pos_type,
  _swigc__p_std__basic_streambufTchar_std__char_traitsTchar_t_t,
  _swigc__p_std__basic_stringTchar_std__char_traitsTchar_t_std__allocatorTchar_t_t,
  _swigc__p_std__domain_error,
  _swigc__p_std__exception,
  _swigc__p_std__invalid_argument,
  _swigc__p_std__ios__openmode,
  _swigc__p_std__ios_base,
  _swigc__p_std__length_error,
  _swigc__p_std__listTdouble_t,
  _swigc__p_std__listTgpstk__EngEphemeris_t,
  _swigc__p_std__locale,
  _swigc__p_std__logic_error,
  _swigc__p_std__mapTRinexObsType_RinexDatum_std__lessTRinexObsType_t_std__allocatorTstd__pairTRinexObsType_const_RinexDatum_t_t_t,
  _swigc__p_std__mapTRinexObsType_RinexDatum_std__lessTRinexObsType_t_std__allocatorTstd__pairTRinexObsType_const_RinexDatum_t_t_t__allocator_type,
  _swigc__p_std__mapTRinexObsType_RinexDatum_std__lessTRinexObsType_t_std__allocatorTstd__pairTRinexObsType_const_RinexDatum_t_t_t__key_type,
  _swigc__p_std__mapTRinexObsType_RinexDatum_std__lessTRinexObsType_t_std__allocatorTstd__pairTRinexObsType_const_RinexDatum_t_t_t__mapped_type,
  _swigc__p_std__mapTgpstk__DayTime_gpstk__ObsEpoch_std__lessTgpstk__DayTime_t_std__allocatorTstd__pairTgpstk__DayTime_const_gpstk__ObsEpoch_t_t_t,
  _swigc__p_std__mapTgpstk__DayTime_gpstk__WxObservation_std__lessTgpstk__DayTime_t_std__allocatorTstd__pairTgpstk__DayTime_const_gpstk__WxObservation_t_t_t,
  _swigc__p_std__mapTgpstk__RinexMetHeader__RinexMetType_double_std__lessTgpstk__RinexMetHeader__RinexMetType_t_std__allocatorTstd__pairTgpstk__RinexMetHeader__RinexMetType_const_double_t_t_t,
  _swigc__p_std__mapTgpstk__RinexPrn_gpstk__RinexObsData__RinexObsTypeMap_std__lessTgpstk__RinexPrn_t_std__allocatorTstd__pairTgpstk__RinexPrn_const_gpstk__RinexObsData__RinexObsTypeMap_t_t_t__allocator_type,
  _swigc__p_std__mapTgpstk__RinexPrn_gpstk__RinexObsData__RinexObsTypeMap_std__lessTgpstk__RinexPrn_t_std__allocatorTstd__pairTgpstk__RinexPrn_const_gpstk__RinexObsData__RinexObsTypeMap_t_t_t__key_type,
  _swigc__p_std__mapTgpstk__RinexPrn_int_std__lessTgpstk__RinexPrn_t_std__allocatorTstd__pairTgpstk__RinexPrn_const_int_t_t_t,
  _swigc__p_std__mapTgpstk__RinexPrn_int_std__lessTgpstk__RinexPrn_t_std__allocatorTstd__pairTgpstk__RinexPrn_const_int_t_t_t__allocator_type,
  _swigc__p_std__mapTgpstk__RinexPrn_int_std__lessTgpstk__RinexPrn_t_std__allocatorTstd__pairTgpstk__RinexPrn_const_int_t_t_t__key_type,
  _swigc__p_std__mapTgpstk__RinexPrn_std__mapTRinexObsType_RinexDatum_std__lessTRinexObsType_t_std__allocatorTstd__pairTRinexObsType_const_RinexDatum_t_t_t_std__lessTgpstk__RinexPrn_t_std__allocatorTstd__pairTgpstk__RinexPrn_const_std__mapTRinexObsType_RinexDatum_std__lessTRinexObsType_t_std__allocatorTstd__pairTRinexObsType_const_RinexDatum_t_t_t_t_t_t,
  _swigc__p_std__mapTgpstk__RinexPrn_std__vectorTint_std__allocatorTint_t_t_std__lessTgpstk__RinexPrn_t_std__allocatorTstd__pairTgpstk__RinexPrn_const_std__vectorTint_std__allocatorTint_t_t_t_t_t,
  _swigc__p_std__mapTshort_gpstk__AlmOrbit_std__lessTshort_t_std__allocatorTstd__pairTshort_const_gpstk__AlmOrbit_t_t_t,
  _swigc__p_std__mapTshort_gpstk__ObsClockModel__PRNMode_std__lessTshort_t_std__allocatorTstd__pairTshort_const_gpstk__ObsClockModel__PRNMode_t_t_t,
  _swigc__p_std__mapTshort_gpstk__ObsClockModel__PRNStatus_std__lessTshort_t_std__allocatorTstd__pairTshort_const_gpstk__ObsClockModel__PRNStatus_t_t_t,
  _swigc__p_std__mapTshort_gpstk__ObsRngDev_std__lessTshort_t_std__allocatorTstd__pairTshort_const_gpstk__ObsRngDev_t_t_t,
  _swigc__p_std__mapTshort_gpstk__Observation_std__lessTshort_t_std__allocatorTstd__pairTshort_const_gpstk__Observation_t_t_t,
  _swigc__p_std__mapTshort_short_std__lessTshort_t_std__allocatorTstd__pairTshort_const_short_t_t_t,
  _swigc__p_std__out_of_range,
  _swigc__p_std__overflow_error,
  _swigc__p_std__range_error,
  _swigc__p_std__runtime_error,
  _swigc__p_std__setTshort_t,
  _swigc__p_std__string,
  _swigc__p_std__underflow_error,
  _swigc__p_std__valarrayTdouble_t,
  _swigc__p_std__vectorTExtraWaveFact_std__allocatorTExtraWaveFact_t_t,
  _swigc__p_std__vectorTRinexObsType_std__allocatorTRinexObsType_t_t,
  _swigc__p_std__vectorTchar_std__allocatorTchar_t_t,
  _swigc__p_std__vectorTdouble_std__allocatorTdouble_t_t,
  _swigc__p_std__vectorTdouble_std__allocatorTdouble_t_t__allocator_type,
  _swigc__p_std__vectorTgpstk__RinexMetHeader__RinexMetType_std__allocatorTgpstk__RinexMetHeader__RinexMetType_t_t,
  _swigc__p_std__vectorTgpstk__RinexPrn_std__allocatorTgpstk__RinexPrn_t_t,
  _swigc__p_std__vectorTint_std__allocatorTint_t_t,
  _swigc__p_std__vectorTint_std__allocatorTint_t_t__allocator_type,
  _swigc__p_std__vectorTlong_std__allocatorTlong_t_t,
  _swigc__p_std__vectorTsensorPosType_std__allocatorTsensorPosType_t_t,
  _swigc__p_std__vectorTsensorType_std__allocatorTsensorType_t_t,
  _swigc__p_std__vectorTstd__string_std__allocatorTstd__string_t_t,
  _swigc__p_time_t,
  _swigc__p_timeval,
  _swigc__p_traits_type,
  _swigc__p_unsigned_int,
  _swigc__p_unsigned_long,
  _swigc__p_unsigned_long_long,
  _swigc__p_unsigned_short,
  _swigc__p_value_type,
  _swigc__ptrdiff_t,
  _swigc__size_t,
  _swigc__std__ptrdiff_t,
  _swigc__std__size_t,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

static swig_const_info swig_const_table[] = {
{ SWIG_PY_POINTER, (char*)"endl_cb_ptr", 0, 0, (void *)(std::basic_ostream<char,std::char_traits<char > > & (*)(std::basic_ostream<char,std::char_traits<char > > &))(std::endl<char,std::char_traits<char > >), &SWIGTYPE_p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_ostreamTchar_std__char_traitsTchar_t_t},
{ SWIG_PY_POINTER, (char*)"ends_cb_ptr", 0, 0, (void *)(std::basic_ostream<char,std::char_traits<char > > & (*)(std::basic_ostream<char,std::char_traits<char > > &))(std::ends<char,std::char_traits<char > >), &SWIGTYPE_p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_ostreamTchar_std__char_traitsTchar_t_t},
{ SWIG_PY_POINTER, (char*)"flush_cb_ptr", 0, 0, (void *)(std::basic_ostream<char,std::char_traits<char > > & (*)(std::basic_ostream<char,std::char_traits<char > > &))(std::flush<char,std::char_traits<char > >), &SWIGTYPE_p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_ostreamTchar_std__char_traitsTchar_t_t},
{0, 0, 0, 0.0, 0, 0}};

#ifdef __cplusplus
}
#endif
/*************************************************************************
 * Type initialization:
 * This problem is tough by the requirement that no dynamic 
 * memory is used. Also, since swig_type_info structures store pointers to 
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization. 
 * The idea is that swig generates all the structures that are needed. 
 * The runtime then collects these partially filled structures. 
 * The SWIG_InitializeModule function takes these initial arrays out of 
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.

 * The generated swig_type_info structures are assigned staticly to an initial 
 * array. We just loop though that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it 
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.

 * First off, we lookup the cast->type name to see if it is already loaded. 
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the 
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
**/

#ifdef __cplusplus
extern "C" {
#endif
    
    SWIGRUNTIME void
    SWIG_InitializeModule(void *clientdata) {
        swig_type_info *type, *ret;
        swig_cast_info *cast;
        size_t i;
        swig_module_info *module_head;
        static int init_run = 0;
        
        clientdata = clientdata;
        
        if (init_run) return;
        init_run = 1;
        
        /* Initialize the swig_module */
        swig_module.type_initial = swig_type_initial;
        swig_module.cast_initial = swig_cast_initial;
        
        /* Try and load any already created modules */
        module_head = SWIG_GetModule(clientdata);
        if (module_head) {
            swig_module.next = module_head->next;
            module_head->next = &swig_module;
        } else {
            /* This is the first module loaded */
            swig_module.next = &swig_module;
            SWIG_SetModule(clientdata, &swig_module);
        }
        
        /* Now work on filling in swig_module.types */
        for (i = 0; i < swig_module.size; ++i) {
            type = 0;
            
            /* if there is another module already loaded */
            if (swig_module.next != &swig_module) {
                type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
            }
            if (type) {
                /* Overwrite clientdata field */
                if (swig_module.type_initial[i]->clientdata) type->clientdata = swig_module.type_initial[i]->clientdata;
            } else {
                type = swig_module.type_initial[i];
            }
            
            /* Insert casting types */
            cast = swig_module.cast_initial[i];
            while (cast->type) {
                /* Don't need to add information already in the list */
                ret = 0;
                if (swig_module.next != &swig_module) {
                    ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
                }
                if (ret && type == swig_module.type_initial[i]) {
                    cast->type = ret;
                    ret = 0;
                }
                
                if (!ret) {
                    if (type->cast) {
                        type->cast->prev = cast;
                        cast->next = type->cast;
                    }
                    type->cast = cast;
                }
                
                cast++;
            }
            
            /* Set entry in modules->types array equal to the type */
            swig_module.types[i] = type;
        }
    }
    
    /* This function will propagate the clientdata field of type to
    * any new swig_type_info structures that have been added into the list
    * of equivalent types.  It is like calling
    * SWIG_TypeClientData(type, clientdata) a second time.
    */
    SWIGRUNTIME void
    SWIG_PropagateClientData(void) {
        size_t i;
        swig_cast_info *equiv;
        static int init_run = 0;
        
        if (init_run) return;
        init_run = 1;
        
        for (i = 0; i < swig_module.size; i++) {
            if (swig_module.types[i]->clientdata) {
                equiv = swig_module.types[i]->cast;
                while (equiv) {
                    if (!equiv->converter) {
                        if (equiv->type && !equiv->type->clientdata)
                        SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
                    }
                    equiv = equiv->next;
                }
            }
        }
    }
    
#ifdef __cplusplus
}
#endif



#ifdef __cplusplus
extern "C" {
#endif
    
    /* Python-specific SWIG API */
#define SWIG_newvarlink()                             SWIG_Python_newvarlink()
#define SWIG_addvarlink(p, name, get_attr, set_attr)  SWIG_Python_addvarlink(p, name, get_attr, set_attr)
#define SWIG_InstallConstants(d, constants)           SWIG_Python_InstallConstants(d, constants)
    
    /* -----------------------------------------------------------------------------
     * global variable support code.
     * ----------------------------------------------------------------------------- */
    
    typedef struct swig_globalvar {
        char       *name;                  /* Name of global variable */
        PyObject *(*get_attr)(void);       /* Return the current value */
        int       (*set_attr)(PyObject *); /* Set the value */
        struct swig_globalvar *next;
    } swig_globalvar;
    
    typedef struct swig_varlinkobject {
        PyObject_HEAD
        swig_globalvar *vars;
    } swig_varlinkobject;
    
    SWIGINTERN PyObject *
    swig_varlink_repr(swig_varlinkobject *v) {
        v = v;
        return PyString_FromString("<Swig global variables>");
    }
    
    SWIGINTERN int
    swig_varlink_print(swig_varlinkobject *v, FILE *fp, int flags) {
        swig_globalvar  *var;
        flags = flags;
        fprintf(fp,"Swig global variables { ");
        for (var = v->vars; var; var=var->next) {
            fprintf(fp,"%s", var->name);
            if (var->next) fprintf(fp,", ");
        }
        fprintf(fp," }\n");
        return 0;
    }
    
    SWIGINTERN PyObject *
    swig_varlink_getattr(swig_varlinkobject *v, char *n) {
        swig_globalvar *var = v->vars;
        while (var) {
            if (strcmp(var->name,n) == 0) {
                return (*var->get_attr)();
            }
            var = var->next;
        }
        PyErr_SetString(PyExc_NameError,"Unknown C global variable");
        return NULL;
    }
    
    SWIGINTERN int
    swig_varlink_setattr(swig_varlinkobject *v, char *n, PyObject *p) {
        swig_globalvar *var = v->vars;
        while (var) {
            if (strcmp(var->name,n) == 0) {
                return (*var->set_attr)(p);
            }
            var = var->next;
        }
        PyErr_SetString(PyExc_NameError,"Unknown C global variable");
        return 1;
    }
    
    SWIGINTERN PyTypeObject*
    swig_varlink_type(void) {
        static char varlink__doc__[] = "Swig var link object";
        static PyTypeObject varlink_type
#if !defined(__cplusplus)
        ;
        static int type_init = 0;  
        if (!type_init) {
            PyTypeObject tmp
#endif
            = {
                PyObject_HEAD_INIT(&PyType_Type)
                0,                                  /* Number of items in variable part (ob_size) */
                (char *)"swigvarlink",              /* Type name (tp_name) */
                sizeof(swig_varlinkobject),         /* Basic size (tp_basicsize) */
                0,                                  /* Itemsize (tp_itemsize) */
                0,                                  /* Deallocator (tp_dealloc) */ 
                (printfunc) swig_varlink_print,     /* Print (tp_print) */
                (getattrfunc) swig_varlink_getattr, /* get attr (tp_getattr) */
                (setattrfunc) swig_varlink_setattr, /* Set attr (tp_setattr) */
                0,                                  /* tp_compare */
                (reprfunc) swig_varlink_repr,       /* tp_repr */
                0,                                  /* tp_as_number */
                0,                                  /* tp_as_sequence */
                0,                                  /* tp_as_mapping */
                0,                                  /* tp_hash */
                0,                                  /* tp_call */
                0,                                  /* tp_str */
                0,                                  /* tp_getattro */
                0,                                  /* tp_setattro */
                0,                                  /* tp_as_buffer */
                0,                                  /* tp_flags */
                varlink__doc__,                     /* tp_doc */
#if PY_VERSION_HEX >= 0x02000000
                0,                                  /* tp_traverse */
                0,                                  /* tp_clear */
#endif
#if PY_VERSION_HEX >= 0x02010000
                0,                                  /* tp_richcompare */
                0,                                  /* tp_weaklistoffset */
#endif
#if PY_VERSION_HEX >= 0x02020000
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, /* tp_iter -> tp_weaklist */
#endif
#if PY_VERSION_HEX >= 0x02030000
                0,                                  /* tp_del */
#endif
#ifdef COUNT_ALLOCS
                0,0,0,0                             /* tp_alloc -> tp_next */
#endif
            };
#if !defined(__cplusplus)
            varlink_type = tmp;
            type_init = 1;
        }
#endif
        return &varlink_type;
    }
    
    /* Create a variable linking object for use later */
    SWIGINTERN PyObject *
    SWIG_Python_newvarlink(void) {
        swig_varlinkobject *result = PyObject_NEW(swig_varlinkobject, swig_varlink_type());
        if (result) {
            result->vars = 0;
        }
        return ((PyObject*) result);
    }
    
    SWIGINTERN void 
    SWIG_Python_addvarlink(PyObject *p, char *name, PyObject *(*get_attr)(void), int (*set_attr)(PyObject *p)) {
        swig_varlinkobject *v = (swig_varlinkobject *) p;
        swig_globalvar *gv = (swig_globalvar *) malloc(sizeof(swig_globalvar));
        if (gv) {
            size_t size = strlen(name)+1;
            gv->name = (char *)malloc(size);
            if (gv->name) {
                strncpy(gv->name,name,size);
                gv->get_attr = get_attr;
                gv->set_attr = set_attr;
                gv->next = v->vars;
            }
        }
        v->vars = gv;
    }
    
    /* -----------------------------------------------------------------------------
     * constants/methods manipulation
     * ----------------------------------------------------------------------------- */
    
    /* Install Constants */
    SWIGINTERN void
    SWIG_Python_InstallConstants(PyObject *d, swig_const_info constants[]) {
        PyObject *obj = 0;
        size_t i;
        for (i = 0; constants[i].type; ++i) {
            switch(constants[i].type) {
                case SWIG_PY_INT:
                obj = PyInt_FromLong(constants[i].lvalue);
                break;
                case SWIG_PY_FLOAT:
                obj = PyFloat_FromDouble(constants[i].dvalue);
                break;
                case SWIG_PY_STRING:
                if (constants[i].pvalue) {
                    obj = PyString_FromString((char *) constants[i].pvalue);
                } else {
                    Py_INCREF(Py_None);
                    obj = Py_None;
                }
                break;
                case SWIG_PY_POINTER:
                obj = SWIG_NewPointerObj(constants[i].pvalue, *(constants[i]).ptype,0);
                break;
                case SWIG_PY_BINARY:
                obj = SWIG_NewPackedObj(constants[i].pvalue, constants[i].lvalue, *(constants[i].ptype));
                break;
                default:
                obj = 0;
                break;
            }
            if (obj) {
                PyDict_SetItemString(d,constants[i].name,obj);
                Py_DECREF(obj);
            }
        }
    }
    
    /* -----------------------------------------------------------------------------*/
    /* Fix SwigMethods to carry the callback ptrs when needed */
    /* -----------------------------------------------------------------------------*/
    
    SWIGINTERN void
    SWIG_Python_FixMethods(PyMethodDef *methods,
    swig_const_info *const_table,
    swig_type_info **types,
    swig_type_info **types_initial) {
        size_t i;
        for (i = 0; methods[i].ml_name; ++i) {
            char *c = methods[i].ml_doc;
            if (c && (c = strstr(c, "swig_ptr: "))) {
                int j;
                swig_const_info *ci = 0;
                char *name = c + 10;
                for (j = 0; const_table[j].type; ++j) {
                    if (strncmp(const_table[j].name, name, 
                    strlen(const_table[j].name)) == 0) {
                        ci = &(const_table[j]);
                        break;
                    }
                }
                if (ci) {
                    size_t shift = (ci->ptype) - types;
                    swig_type_info *ty = types_initial[shift];
                    size_t ldoc = (c - methods[i].ml_doc);
                    size_t lptr = strlen(ty->name)+2*sizeof(void*)+2;
                    char *ndoc = (char*)malloc(ldoc + lptr + 10);
                    if (ndoc) {
                        char *buff = ndoc;
                        void *ptr = (ci->type == SWIG_PY_POINTER) ? ci->pvalue : 0;
                        if (ptr) {
                            strncpy(buff, methods[i].ml_doc, ldoc);
                            buff += ldoc;
                            strncpy(buff, "swig_ptr: ", 10);
                            buff += 10;
                            SWIG_PackVoidPtr(buff, ptr, ty->name, lptr);
                            methods[i].ml_doc = ndoc;
                        }
                    }
                }
            }
        }
    }
    
    /* -----------------------------------------------------------------------------*
     *  Initialize type list
     * -----------------------------------------------------------------------------*/
    
#if PY_MAJOR_VERSION < 2
    /* PyModule_AddObject function was introduced in Python 2.0.  The following function
    is copied out of Python/modsupport.c in python version 2.3.4 */
    SWIGINTERN int
    PyModule_AddObject(PyObject *m, char *name, PyObject *o)
    {
        PyObject *dict;
        if (!PyModule_Check(m)) {
            PyErr_SetString(PyExc_TypeError,
            "PyModule_AddObject() needs module as first arg");
            return -1;
        }
        if (!o) {
            PyErr_SetString(PyExc_TypeError,
            "PyModule_AddObject() needs non-NULL value");
            return -1;
        }
        
        dict = PyModule_GetDict(m);
        if (dict == NULL) {
            /* Internal error -- modules must have a dict! */
            PyErr_Format(PyExc_SystemError, "module '%s' has no __dict__",
            PyModule_GetName(m));
            return -1;
        }
        if (PyDict_SetItemString(dict, name, o))
        return -1;
        Py_DECREF(o);
        return 0;
    }
#endif
    
#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------*
 *  Partial Init method
 * -----------------------------------------------------------------------------*/

#ifdef __cplusplus
extern "C"
#endif
SWIGEXPORT void SWIG_init(void) {
    static PyObject *SWIG_globals = 0; 
    PyObject *m, *d;
    if (!SWIG_globals) SWIG_globals = SWIG_newvarlink();
    
    /* Fix SwigMethods to carry the callback ptrs when needed */
    SWIG_Python_FixMethods(SwigMethods, swig_const_table, swig_types, swig_type_initial);
    
    m = Py_InitModule((char *) SWIG_name, SwigMethods);
    d = PyModule_GetDict(m);
    
    SWIG_InitializeModule(0);
    SWIG_InstallConstants(d,swig_const_table);
    
    PyDict_SetItemString(d,(char*)"cvar", SWIG_globals);
    SWIG_addvarlink(SWIG_globals,(char*)"ios_base_boolalpha",_wrap_ios_base_boolalpha_get, _wrap_ios_base_boolalpha_set);
    SWIG_addvarlink(SWIG_globals,(char*)"ios_base_dec",_wrap_ios_base_dec_get, _wrap_ios_base_dec_set);
    SWIG_addvarlink(SWIG_globals,(char*)"ios_base_fixed",_wrap_ios_base_fixed_get, _wrap_ios_base_fixed_set);
    SWIG_addvarlink(SWIG_globals,(char*)"ios_base_hex",_wrap_ios_base_hex_get, _wrap_ios_base_hex_set);
    SWIG_addvarlink(SWIG_globals,(char*)"ios_base_internal",_wrap_ios_base_internal_get, _wrap_ios_base_internal_set);
    SWIG_addvarlink(SWIG_globals,(char*)"ios_base_left",_wrap_ios_base_left_get, _wrap_ios_base_left_set);
    SWIG_addvarlink(SWIG_globals,(char*)"ios_base_oct",_wrap_ios_base_oct_get, _wrap_ios_base_oct_set);
    SWIG_addvarlink(SWIG_globals,(char*)"ios_base_right",_wrap_ios_base_right_get, _wrap_ios_base_right_set);
    SWIG_addvarlink(SWIG_globals,(char*)"ios_base_scientific",_wrap_ios_base_scientific_get, _wrap_ios_base_scientific_set);
    SWIG_addvarlink(SWIG_globals,(char*)"ios_base_showbase",_wrap_ios_base_showbase_get, _wrap_ios_base_showbase_set);
    SWIG_addvarlink(SWIG_globals,(char*)"ios_base_showpoint",_wrap_ios_base_showpoint_get, _wrap_ios_base_showpoint_set);
    SWIG_addvarlink(SWIG_globals,(char*)"ios_base_showpos",_wrap_ios_base_showpos_get, _wrap_ios_base_showpos_set);
    SWIG_addvarlink(SWIG_globals,(char*)"ios_base_skipws",_wrap_ios_base_skipws_get, _wrap_ios_base_skipws_set);
    SWIG_addvarlink(SWIG_globals,(char*)"ios_base_unitbuf",_wrap_ios_base_unitbuf_get, _wrap_ios_base_unitbuf_set);
    SWIG_addvarlink(SWIG_globals,(char*)"ios_base_uppercase",_wrap_ios_base_uppercase_get, _wrap_ios_base_uppercase_set);
    SWIG_addvarlink(SWIG_globals,(char*)"ios_base_adjustfield",_wrap_ios_base_adjustfield_get, _wrap_ios_base_adjustfield_set);
    SWIG_addvarlink(SWIG_globals,(char*)"ios_base_basefield",_wrap_ios_base_basefield_get, _wrap_ios_base_basefield_set);
    SWIG_addvarlink(SWIG_globals,(char*)"ios_base_floatfield",_wrap_ios_base_floatfield_get, _wrap_ios_base_floatfield_set);
    SWIG_addvarlink(SWIG_globals,(char*)"ios_base_badbit",_wrap_ios_base_badbit_get, _wrap_ios_base_badbit_set);
    SWIG_addvarlink(SWIG_globals,(char*)"ios_base_eofbit",_wrap_ios_base_eofbit_get, _wrap_ios_base_eofbit_set);
    SWIG_addvarlink(SWIG_globals,(char*)"ios_base_failbit",_wrap_ios_base_failbit_get, _wrap_ios_base_failbit_set);
    SWIG_addvarlink(SWIG_globals,(char*)"ios_base_goodbit",_wrap_ios_base_goodbit_get, _wrap_ios_base_goodbit_set);
    SWIG_addvarlink(SWIG_globals,(char*)"ios_base_app",_wrap_ios_base_app_get, _wrap_ios_base_app_set);
    SWIG_addvarlink(SWIG_globals,(char*)"ios_base_ate",_wrap_ios_base_ate_get, _wrap_ios_base_ate_set);
    SWIG_addvarlink(SWIG_globals,(char*)"ios_base_binary",_wrap_ios_base_binary_get, _wrap_ios_base_binary_set);
    SWIG_addvarlink(SWIG_globals,(char*)"ios_base_ios_base_in",_wrap_ios_base_ios_base_in_get, _wrap_ios_base_ios_base_in_set);
    SWIG_addvarlink(SWIG_globals,(char*)"ios_base_out",_wrap_ios_base_out_get, _wrap_ios_base_out_set);
    SWIG_addvarlink(SWIG_globals,(char*)"ios_base_trunc",_wrap_ios_base_trunc_get, _wrap_ios_base_trunc_set);
    SWIG_addvarlink(SWIG_globals,(char*)"ios_base_beg",_wrap_ios_base_beg_get, _wrap_ios_base_beg_set);
    SWIG_addvarlink(SWIG_globals,(char*)"ios_base_cur",_wrap_ios_base_cur_get, _wrap_ios_base_cur_set);
    SWIG_addvarlink(SWIG_globals,(char*)"ios_base_end",_wrap_ios_base_end_get, _wrap_ios_base_end_set);
    {
        PyDict_SetItemString(d,"ios_base_erase_event", SWIG_From_int((int)(std::ios_base::erase_event))); 
    }
    {
        PyDict_SetItemString(d,"ios_base_imbue_event", SWIG_From_int((int)(std::ios_base::imbue_event))); 
    }
    {
        PyDict_SetItemString(d,"ios_base_copyfmt_event", SWIG_From_int((int)(std::ios_base::copyfmt_event))); 
    }
    SWIG_addvarlink(SWIG_globals,(char*)"cin",_wrap_cin_get, _wrap_cin_set);
    SWIG_addvarlink(SWIG_globals,(char*)"cout",_wrap_cout_get, _wrap_cout_set);
    SWIG_addvarlink(SWIG_globals,(char*)"cerr",_wrap_cerr_get, _wrap_cerr_set);
    SWIG_addvarlink(SWIG_globals,(char*)"clog",_wrap_clog_get, _wrap_clog_set);
    SWIG_addvarlink(SWIG_globals,(char*)"PI",_wrap_PI_get, _wrap_PI_set);
    SWIG_addvarlink(SWIG_globals,(char*)"TWO_PI",_wrap_TWO_PI_get, _wrap_TWO_PI_set);
    SWIG_addvarlink(SWIG_globals,(char*)"SQRT_PI",_wrap_SQRT_PI_get, _wrap_SQRT_PI_set);
    SWIG_addvarlink(SWIG_globals,(char*)"REL_CONST",_wrap_REL_CONST_get, _wrap_REL_CONST_set);
    SWIG_addvarlink(SWIG_globals,(char*)"OSC_FREQ",_wrap_OSC_FREQ_get, _wrap_OSC_FREQ_set);
    SWIG_addvarlink(SWIG_globals,(char*)"C_GPS_M",_wrap_C_GPS_M_get, _wrap_C_GPS_M_set);
    SWIG_addvarlink(SWIG_globals,(char*)"RSVCLK",_wrap_RSVCLK_get, _wrap_RSVCLK_set);
    SWIG_addvarlink(SWIG_globals,(char*)"L1_FREQ",_wrap_L1_FREQ_get, _wrap_L1_FREQ_set);
    SWIG_addvarlink(SWIG_globals,(char*)"L2_FREQ",_wrap_L2_FREQ_get, _wrap_L2_FREQ_set);
    SWIG_addvarlink(SWIG_globals,(char*)"L1_MULT",_wrap_L1_MULT_get, _wrap_L1_MULT_set);
    SWIG_addvarlink(SWIG_globals,(char*)"L2_MULT",_wrap_L2_MULT_get, _wrap_L2_MULT_set);
    SWIG_addvarlink(SWIG_globals,(char*)"SV_ACCURACY_MAX_INDEX_VALUE",_wrap_SV_ACCURACY_MAX_INDEX_VALUE_get, _wrap_SV_ACCURACY_MAX_INDEX_VALUE_set);
    SWIG_addvarlink(SWIG_globals,(char*)"SV_ACCURACY_MIN_INDEX",_wrap_SV_ACCURACY_MIN_INDEX_get, _wrap_SV_ACCURACY_MIN_INDEX_set);
    SWIG_addvarlink(SWIG_globals,(char*)"SV_ACCURACY_MAX_INDEX",_wrap_SV_ACCURACY_MAX_INDEX_get, _wrap_SV_ACCURACY_MAX_INDEX_set);
    {
        PyDict_SetItemString(d,"Exception_unrecoverable", SWIG_From_int((int)(gpstk::Exception::unrecoverable))); 
    }
    {
        PyDict_SetItemString(d,"Exception_recoverable", SWIG_From_int((int)(gpstk::Exception::recoverable))); 
    }
    SWIG_addvarlink(SWIG_globals,(char*)"LENGTH_OF_EOW_OVERLAP",_wrap_LENGTH_OF_EOW_OVERLAP_get, _wrap_LENGTH_OF_EOW_OVERLAP_set);
    SWIG_addvarlink(SWIG_globals,(char*)"OVERLAP_WORD_POSITION",_wrap_OVERLAP_WORD_POSITION_get, _wrap_OVERLAP_WORD_POSITION_set);
    SWIG_addvarlink(SWIG_globals,(char*)"MAX_X2_TEST",_wrap_MAX_X2_TEST_get, _wrap_MAX_X2_TEST_set);
    SWIG_addvarlink(SWIG_globals,(char*)"MAX_X2_COUNT",_wrap_MAX_X2_COUNT_get, _wrap_MAX_X2_COUNT_set);
    {
        PyDict_SetItemString(d,"SatID_systemGPS", SWIG_From_int((int)(gpstk::SatID::systemGPS))); 
    }
    {
        PyDict_SetItemString(d,"SatID_systemGlonass", SWIG_From_int((int)(gpstk::SatID::systemGlonass))); 
    }
    {
        PyDict_SetItemString(d,"SatID_systemTransit", SWIG_From_int((int)(gpstk::SatID::systemTransit))); 
    }
    {
        PyDict_SetItemString(d,"SatID_systemGeosync", SWIG_From_int((int)(gpstk::SatID::systemGeosync))); 
    }
    {
        PyDict_SetItemString(d,"SatID_systemMixed", SWIG_From_int((int)(gpstk::SatID::systemMixed))); 
    }
    SWIG_addvarlink(SWIG_globals,(char*)"SatID_fillchar",_wrap_SatID_fillchar_get, _wrap_SatID_fillchar_set);
    SWIG_addvarlink(SWIG_globals,(char*)"MAX_WORD",_wrap_MAX_WORD_get, _wrap_MAX_WORD_set);
    {
        PyDict_SetItemString(d,"Observation_rcCA", SWIG_From_int((int)(gpstk::Observation::rcCA))); 
    }
    {
        PyDict_SetItemString(d,"Observation_rcPY", SWIG_From_int((int)(gpstk::Observation::rcPY))); 
    }
    {
        PyDict_SetItemString(d,"Observation_rcZ", SWIG_From_int((int)(gpstk::Observation::rcZ))); 
    }
    {
        PyDict_SetItemString(d,"Observation_rcRC", SWIG_From_int((int)(gpstk::Observation::rcRC))); 
    }
    {
        PyDict_SetItemString(d,"Observation_rcOther", SWIG_From_int((int)(gpstk::Observation::rcOther))); 
    }
    {
        PyDict_SetItemString(d,"Observation_cfL1", SWIG_From_int((int)(gpstk::Observation::cfL1))); 
    }
    {
        PyDict_SetItemString(d,"Observation_cfL2", SWIG_From_int((int)(gpstk::Observation::cfL2))); 
    }
    {
        PyDict_SetItemString(d,"Observation_cfL5", SWIG_From_int((int)(gpstk::Observation::cfL5))); 
    }
    {
        PyDict_SetItemString(d,"Observation_cfOther", SWIG_From_int((int)(gpstk::Observation::cfOther))); 
    }
    {
        PyDict_SetItemString(d,"WxObservation_noWx", SWIG_From_int((int)(gpstk::WxObservation::noWx))); 
    }
    {
        PyDict_SetItemString(d,"WxObservation_defWx", SWIG_From_int((int)(gpstk::WxObservation::defWx))); 
    }
    {
        PyDict_SetItemString(d,"WxObservation_obsWx", SWIG_From_int((int)(gpstk::WxObservation::obsWx))); 
    }
    {
        PyDict_SetItemString(d,"IonoModel_L1", SWIG_From_int((int)(gpstk::IonoModel::L1))); 
    }
    {
        PyDict_SetItemString(d,"IonoModel_L2", SWIG_From_int((int)(gpstk::IonoModel::L2))); 
    }
    {
        PyDict_SetItemString(d,"ObsClockModel_IGNORE", SWIG_From_int((int)(gpstk::ObsClockModel::IGNORE))); 
    }
    {
        PyDict_SetItemString(d,"ObsClockModel_HEALTHY", SWIG_From_int((int)(gpstk::ObsClockModel::HEALTHY))); 
    }
    {
        PyDict_SetItemString(d,"ObsClockModel_ALWAYS", SWIG_From_int((int)(gpstk::ObsClockModel::ALWAYS))); 
    }
    {
        PyDict_SetItemString(d,"ObsClockModel_USED", SWIG_From_int((int)(gpstk::ObsClockModel::USED))); 
    }
    {
        PyDict_SetItemString(d,"ObsClockModel_MANUAL", SWIG_From_int((int)(gpstk::ObsClockModel::MANUAL))); 
    }
    {
        PyDict_SetItemString(d,"ObsClockModel_SVHEALTH", SWIG_From_int((int)(gpstk::ObsClockModel::SVHEALTH))); 
    }
    {
        PyDict_SetItemString(d,"ObsClockModel_ELEVATION", SWIG_From_int((int)(gpstk::ObsClockModel::ELEVATION))); 
    }
    {
        PyDict_SetItemString(d,"ObsClockModel_SIGMA", SWIG_From_int((int)(gpstk::ObsClockModel::SIGMA))); 
    }
    {
        PyDict_SetItemString(d,"FileHunter_WEEK", SWIG_From_int((int)(gpstk::FileHunter::WEEK))); 
    }
    {
        PyDict_SetItemString(d,"FileHunter_DAY", SWIG_From_int((int)(gpstk::FileHunter::DAY))); 
    }
    {
        PyDict_SetItemString(d,"FileHunter_HOUR", SWIG_From_int((int)(gpstk::FileHunter::HOUR))); 
    }
    {
        PyDict_SetItemString(d,"FileHunter_MINUTE", SWIG_From_int((int)(gpstk::FileHunter::MINUTE))); 
    }
    {
        PyDict_SetItemString(d,"SMODFStream_undefined", SWIG_From_int((int)(gpstk::SMODFStream::undefined))); 
    }
    {
        PyDict_SetItemString(d,"SMODFStream_legacy", SWIG_From_int((int)(gpstk::SMODFStream::legacy))); 
    }
    {
        PyDict_SetItemString(d,"SMODFStream_icd211", SWIG_From_int((int)(gpstk::SMODFStream::icd211))); 
    }
    SWIG_addvarlink(SWIG_globals,(char*)"RinexObsType_C1depend",_wrap_RinexObsType_C1depend_get, _wrap_RinexObsType_C1depend_set);
    SWIG_addvarlink(SWIG_globals,(char*)"RinexObsType_L1depend",_wrap_RinexObsType_L1depend_get, _wrap_RinexObsType_L1depend_set);
    SWIG_addvarlink(SWIG_globals,(char*)"RinexObsType_L2depend",_wrap_RinexObsType_L2depend_get, _wrap_RinexObsType_L2depend_set);
    SWIG_addvarlink(SWIG_globals,(char*)"RinexObsType_P1depend",_wrap_RinexObsType_P1depend_get, _wrap_RinexObsType_P1depend_set);
    SWIG_addvarlink(SWIG_globals,(char*)"RinexObsType_P2depend",_wrap_RinexObsType_P2depend_get, _wrap_RinexObsType_P2depend_set);
    SWIG_addvarlink(SWIG_globals,(char*)"RinexObsType_EPdepend",_wrap_RinexObsType_EPdepend_get, _wrap_RinexObsType_EPdepend_set);
    SWIG_addvarlink(SWIG_globals,(char*)"RinexObsType_PSdepend",_wrap_RinexObsType_PSdepend_get, _wrap_RinexObsType_PSdepend_set);
    {
        PyDict_SetItemString(d,"systemGPS", SWIG_From_int((int)(gpstk::systemGPS))); 
    }
    {
        PyDict_SetItemString(d,"systemGlonass", SWIG_From_int((int)(gpstk::systemGlonass))); 
    }
    {
        PyDict_SetItemString(d,"systemTransit", SWIG_From_int((int)(gpstk::systemTransit))); 
    }
    {
        PyDict_SetItemString(d,"systemGeosync", SWIG_From_int((int)(gpstk::systemGeosync))); 
    }
    {
        PyDict_SetItemString(d,"systemMixed", SWIG_From_int((int)(gpstk::systemMixed))); 
    }
    SWIG_addvarlink(SWIG_globals,(char*)"RinexPrn_fillchar",_wrap_RinexPrn_fillchar_get, _wrap_RinexPrn_fillchar_set);
    SWIG_addvarlink(SWIG_globals,(char*)"RinexObsHeader_versionString",_wrap_RinexObsHeader_versionString_get, _wrap_RinexObsHeader_versionString_set);
    SWIG_addvarlink(SWIG_globals,(char*)"RinexObsHeader_runByString",_wrap_RinexObsHeader_runByString_get, _wrap_RinexObsHeader_runByString_set);
    SWIG_addvarlink(SWIG_globals,(char*)"RinexObsHeader_commentString",_wrap_RinexObsHeader_commentString_get, _wrap_RinexObsHeader_commentString_set);
    SWIG_addvarlink(SWIG_globals,(char*)"RinexObsHeader_markerNameString",_wrap_RinexObsHeader_markerNameString_get, _wrap_RinexObsHeader_markerNameString_set);
    SWIG_addvarlink(SWIG_globals,(char*)"RinexObsHeader_markerNumberString",_wrap_RinexObsHeader_markerNumberString_get, _wrap_RinexObsHeader_markerNumberString_set);
    SWIG_addvarlink(SWIG_globals,(char*)"RinexObsHeader_observerString",_wrap_RinexObsHeader_observerString_get, _wrap_RinexObsHeader_observerString_set);
    SWIG_addvarlink(SWIG_globals,(char*)"RinexObsHeader_receiverString",_wrap_RinexObsHeader_receiverString_get, _wrap_RinexObsHeader_receiverString_set);
    SWIG_addvarlink(SWIG_globals,(char*)"RinexObsHeader_antennaTypeString",_wrap_RinexObsHeader_antennaTypeString_get, _wrap_RinexObsHeader_antennaTypeString_set);
    SWIG_addvarlink(SWIG_globals,(char*)"RinexObsHeader_antennaPositionString",_wrap_RinexObsHeader_antennaPositionString_get, _wrap_RinexObsHeader_antennaPositionString_set);
    SWIG_addvarlink(SWIG_globals,(char*)"RinexObsHeader_antennaOffsetString",_wrap_RinexObsHeader_antennaOffsetString_get, _wrap_RinexObsHeader_antennaOffsetString_set);
    SWIG_addvarlink(SWIG_globals,(char*)"RinexObsHeader_waveFactString",_wrap_RinexObsHeader_waveFactString_get, _wrap_RinexObsHeader_waveFactString_set);
    SWIG_addvarlink(SWIG_globals,(char*)"RinexObsHeader_numObsString",_wrap_RinexObsHeader_numObsString_get, _wrap_RinexObsHeader_numObsString_set);
    SWIG_addvarlink(SWIG_globals,(char*)"RinexObsHeader_intervalString",_wrap_RinexObsHeader_intervalString_get, _wrap_RinexObsHeader_intervalString_set);
    SWIG_addvarlink(SWIG_globals,(char*)"RinexObsHeader_firstTimeString",_wrap_RinexObsHeader_firstTimeString_get, _wrap_RinexObsHeader_firstTimeString_set);
    SWIG_addvarlink(SWIG_globals,(char*)"RinexObsHeader_lastTimeString",_wrap_RinexObsHeader_lastTimeString_get, _wrap_RinexObsHeader_lastTimeString_set);
    SWIG_addvarlink(SWIG_globals,(char*)"RinexObsHeader_receiverOffsetString",_wrap_RinexObsHeader_receiverOffsetString_get, _wrap_RinexObsHeader_receiverOffsetString_set);
    SWIG_addvarlink(SWIG_globals,(char*)"RinexObsHeader_leapSecondsString",_wrap_RinexObsHeader_leapSecondsString_get, _wrap_RinexObsHeader_leapSecondsString_set);
    SWIG_addvarlink(SWIG_globals,(char*)"RinexObsHeader_numSatsString",_wrap_RinexObsHeader_numSatsString_get, _wrap_RinexObsHeader_numSatsString_set);
    SWIG_addvarlink(SWIG_globals,(char*)"RinexObsHeader_prnObsString",_wrap_RinexObsHeader_prnObsString_get, _wrap_RinexObsHeader_prnObsString_set);
    SWIG_addvarlink(SWIG_globals,(char*)"RinexObsHeader_endOfHeader",_wrap_RinexObsHeader_endOfHeader_get, _wrap_RinexObsHeader_endOfHeader_set);
    {
        PyDict_SetItemString(d,"RinexObsHeader_versionValid", SWIG_From_int((int)(gpstk::RinexObsHeader::versionValid))); 
    }
    {
        PyDict_SetItemString(d,"RinexObsHeader_runByValid", SWIG_From_int((int)(gpstk::RinexObsHeader::runByValid))); 
    }
    {
        PyDict_SetItemString(d,"RinexObsHeader_commentValid", SWIG_From_int((int)(gpstk::RinexObsHeader::commentValid))); 
    }
    {
        PyDict_SetItemString(d,"RinexObsHeader_markerNameValid", SWIG_From_int((int)(gpstk::RinexObsHeader::markerNameValid))); 
    }
    {
        PyDict_SetItemString(d,"RinexObsHeader_markerNumberValid", SWIG_From_int((int)(gpstk::RinexObsHeader::markerNumberValid))); 
    }
    {
        PyDict_SetItemString(d,"RinexObsHeader_observerValid", SWIG_From_int((int)(gpstk::RinexObsHeader::observerValid))); 
    }
    {
        PyDict_SetItemString(d,"RinexObsHeader_receiverValid", SWIG_From_int((int)(gpstk::RinexObsHeader::receiverValid))); 
    }
    {
        PyDict_SetItemString(d,"RinexObsHeader_antennaTypeValid", SWIG_From_int((int)(gpstk::RinexObsHeader::antennaTypeValid))); 
    }
    {
        PyDict_SetItemString(d,"RinexObsHeader_antennaPositionValid", SWIG_From_int((int)(gpstk::RinexObsHeader::antennaPositionValid))); 
    }
    {
        PyDict_SetItemString(d,"RinexObsHeader_antennaOffsetValid", SWIG_From_int((int)(gpstk::RinexObsHeader::antennaOffsetValid))); 
    }
    {
        PyDict_SetItemString(d,"RinexObsHeader_waveFactValid", SWIG_From_int((int)(gpstk::RinexObsHeader::waveFactValid))); 
    }
    {
        PyDict_SetItemString(d,"RinexObsHeader_obsTypeValid", SWIG_From_int((int)(gpstk::RinexObsHeader::obsTypeValid))); 
    }
    {
        PyDict_SetItemString(d,"RinexObsHeader_intervalValid", SWIG_From_int((int)(gpstk::RinexObsHeader::intervalValid))); 
    }
    {
        PyDict_SetItemString(d,"RinexObsHeader_firstTimeValid", SWIG_From_int((int)(gpstk::RinexObsHeader::firstTimeValid))); 
    }
    {
        PyDict_SetItemString(d,"RinexObsHeader_lastTimeValid", SWIG_From_int((int)(gpstk::RinexObsHeader::lastTimeValid))); 
    }
    {
        PyDict_SetItemString(d,"RinexObsHeader_receiverOffsetValid", SWIG_From_int((int)(gpstk::RinexObsHeader::receiverOffsetValid))); 
    }
    {
        PyDict_SetItemString(d,"RinexObsHeader_leapSecondsValid", SWIG_From_int((int)(gpstk::RinexObsHeader::leapSecondsValid))); 
    }
    {
        PyDict_SetItemString(d,"RinexObsHeader_numSatsValid", SWIG_From_int((int)(gpstk::RinexObsHeader::numSatsValid))); 
    }
    {
        PyDict_SetItemString(d,"RinexObsHeader_prnObsValid", SWIG_From_int((int)(gpstk::RinexObsHeader::prnObsValid))); 
    }
    {
        PyDict_SetItemString(d,"RinexObsHeader_endValid", SWIG_From_int((int)(gpstk::RinexObsHeader::endValid))); 
    }
    {
        PyDict_SetItemString(d,"RinexObsHeader_allValid20", SWIG_From_int((int)(gpstk::RinexObsHeader::allValid20))); 
    }
    {
        PyDict_SetItemString(d,"RinexObsHeader_allValid21", SWIG_From_int((int)(gpstk::RinexObsHeader::allValid21))); 
    }
    SWIG_addvarlink(SWIG_globals,(char*)"RinexObsHeader_UN",_wrap_RinexObsHeader_UN_get, _wrap_RinexObsHeader_UN_set);
    SWIG_addvarlink(SWIG_globals,(char*)"RinexObsHeader_L1",_wrap_RinexObsHeader_L1_get, _wrap_RinexObsHeader_L1_set);
    SWIG_addvarlink(SWIG_globals,(char*)"RinexObsHeader_L2",_wrap_RinexObsHeader_L2_get, _wrap_RinexObsHeader_L2_set);
    SWIG_addvarlink(SWIG_globals,(char*)"RinexObsHeader_C1",_wrap_RinexObsHeader_C1_get, _wrap_RinexObsHeader_C1_set);
    SWIG_addvarlink(SWIG_globals,(char*)"RinexObsHeader_P1",_wrap_RinexObsHeader_P1_get, _wrap_RinexObsHeader_P1_set);
    SWIG_addvarlink(SWIG_globals,(char*)"RinexObsHeader_P2",_wrap_RinexObsHeader_P2_get, _wrap_RinexObsHeader_P2_set);
    SWIG_addvarlink(SWIG_globals,(char*)"RinexObsHeader_D1",_wrap_RinexObsHeader_D1_get, _wrap_RinexObsHeader_D1_set);
    SWIG_addvarlink(SWIG_globals,(char*)"RinexObsHeader_D2",_wrap_RinexObsHeader_D2_get, _wrap_RinexObsHeader_D2_set);
    SWIG_addvarlink(SWIG_globals,(char*)"RinexObsHeader_S1",_wrap_RinexObsHeader_S1_get, _wrap_RinexObsHeader_S1_set);
    SWIG_addvarlink(SWIG_globals,(char*)"RinexObsHeader_S2",_wrap_RinexObsHeader_S2_get, _wrap_RinexObsHeader_S2_set);
    SWIG_addvarlink(SWIG_globals,(char*)"RinexObsHeader_T1",_wrap_RinexObsHeader_T1_get, _wrap_RinexObsHeader_T1_set);
    SWIG_addvarlink(SWIG_globals,(char*)"RinexObsHeader_T2",_wrap_RinexObsHeader_T2_get, _wrap_RinexObsHeader_T2_set);
    SWIG_addvarlink(SWIG_globals,(char*)"RinexObsHeader_StandardRinexObsTypes",_wrap_RinexObsHeader_StandardRinexObsTypes_get, _wrap_RinexObsHeader_StandardRinexObsTypes_set);
    SWIG_addvarlink(SWIG_globals,(char*)"RinexObsHeader_RegisteredRinexObsTypes",_wrap_RinexObsHeader_RegisteredRinexObsTypes_get, _wrap_RinexObsHeader_RegisteredRinexObsTypes_set);
    {
        PyDict_SetItemString(d,"RinexNavHeader_versionValid", SWIG_From_int((int)(gpstk::RinexNavHeader::versionValid))); 
    }
    {
        PyDict_SetItemString(d,"RinexNavHeader_runByValid", SWIG_From_int((int)(gpstk::RinexNavHeader::runByValid))); 
    }
    {
        PyDict_SetItemString(d,"RinexNavHeader_commentValid", SWIG_From_int((int)(gpstk::RinexNavHeader::commentValid))); 
    }
    {
        PyDict_SetItemString(d,"RinexNavHeader_ionAlphaValid", SWIG_From_int((int)(gpstk::RinexNavHeader::ionAlphaValid))); 
    }
    {
        PyDict_SetItemString(d,"RinexNavHeader_ionBetaValid", SWIG_From_int((int)(gpstk::RinexNavHeader::ionBetaValid))); 
    }
    {
        PyDict_SetItemString(d,"RinexNavHeader_deltaUTCValid", SWIG_From_int((int)(gpstk::RinexNavHeader::deltaUTCValid))); 
    }
    {
        PyDict_SetItemString(d,"RinexNavHeader_leapSecondsValid", SWIG_From_int((int)(gpstk::RinexNavHeader::leapSecondsValid))); 
    }
    {
        PyDict_SetItemString(d,"RinexNavHeader_endValid", SWIG_From_int((int)(gpstk::RinexNavHeader::endValid))); 
    }
    {
        PyDict_SetItemString(d,"RinexNavHeader_allValid20", SWIG_From_int((int)(gpstk::RinexNavHeader::allValid20))); 
    }
    {
        PyDict_SetItemString(d,"RinexNavHeader_allValid21", SWIG_From_int((int)(gpstk::RinexNavHeader::allValid21))); 
    }
    SWIG_addvarlink(SWIG_globals,(char*)"RinexNavHeader_versionString",_wrap_RinexNavHeader_versionString_get, _wrap_RinexNavHeader_versionString_set);
    SWIG_addvarlink(SWIG_globals,(char*)"RinexNavHeader_runByString",_wrap_RinexNavHeader_runByString_get, _wrap_RinexNavHeader_runByString_set);
    SWIG_addvarlink(SWIG_globals,(char*)"RinexNavHeader_commentString",_wrap_RinexNavHeader_commentString_get, _wrap_RinexNavHeader_commentString_set);
    SWIG_addvarlink(SWIG_globals,(char*)"RinexNavHeader_ionAlphaString",_wrap_RinexNavHeader_ionAlphaString_get, _wrap_RinexNavHeader_ionAlphaString_set);
    SWIG_addvarlink(SWIG_globals,(char*)"RinexNavHeader_ionBetaString",_wrap_RinexNavHeader_ionBetaString_get, _wrap_RinexNavHeader_ionBetaString_set);
    SWIG_addvarlink(SWIG_globals,(char*)"RinexNavHeader_deltaUTCString",_wrap_RinexNavHeader_deltaUTCString_get, _wrap_RinexNavHeader_deltaUTCString_set);
    SWIG_addvarlink(SWIG_globals,(char*)"RinexNavHeader_leapSecondsString",_wrap_RinexNavHeader_leapSecondsString_get, _wrap_RinexNavHeader_leapSecondsString_set);
    SWIG_addvarlink(SWIG_globals,(char*)"RinexNavHeader_endOfHeader",_wrap_RinexNavHeader_endOfHeader_get, _wrap_RinexNavHeader_endOfHeader_set);
    SWIG_addvarlink(SWIG_globals,(char*)"FICData_blockString",_wrap_FICData_blockString_get, _wrap_FICData_blockString_set);
    SWIG_addvarlink(SWIG_globals,(char*)"FICHeader_headerSize",_wrap_FICHeader_headerSize_get, _wrap_FICHeader_headerSize_set);
    SWIG_addvarlink(SWIG_globals,(char*)"RinexMetData_maxObsPerLine",_wrap_RinexMetData_maxObsPerLine_get, _wrap_RinexMetData_maxObsPerLine_set);
    SWIG_addvarlink(SWIG_globals,(char*)"RinexMetData_maxObsPerContinuationLine",_wrap_RinexMetData_maxObsPerContinuationLine_get, _wrap_RinexMetData_maxObsPerContinuationLine_set);
    {
        PyDict_SetItemString(d,"RinexMetHeader_PR", SWIG_From_int((int)(gpstk::RinexMetHeader::PR))); 
    }
    {
        PyDict_SetItemString(d,"RinexMetHeader_TD", SWIG_From_int((int)(gpstk::RinexMetHeader::TD))); 
    }
    {
        PyDict_SetItemString(d,"RinexMetHeader_HR", SWIG_From_int((int)(gpstk::RinexMetHeader::HR))); 
    }
    {
        PyDict_SetItemString(d,"RinexMetHeader_ZW", SWIG_From_int((int)(gpstk::RinexMetHeader::ZW))); 
    }
    {
        PyDict_SetItemString(d,"RinexMetHeader_ZD", SWIG_From_int((int)(gpstk::RinexMetHeader::ZD))); 
    }
    {
        PyDict_SetItemString(d,"RinexMetHeader_ZT", SWIG_From_int((int)(gpstk::RinexMetHeader::ZT))); 
    }
    {
        PyDict_SetItemString(d,"RinexMetHeader_versionValid", SWIG_From_int((int)(gpstk::RinexMetHeader::versionValid))); 
    }
    {
        PyDict_SetItemString(d,"RinexMetHeader_runByValid", SWIG_From_int((int)(gpstk::RinexMetHeader::runByValid))); 
    }
    {
        PyDict_SetItemString(d,"RinexMetHeader_commentValid", SWIG_From_int((int)(gpstk::RinexMetHeader::commentValid))); 
    }
    {
        PyDict_SetItemString(d,"RinexMetHeader_markerNameValid", SWIG_From_int((int)(gpstk::RinexMetHeader::markerNameValid))); 
    }
    {
        PyDict_SetItemString(d,"RinexMetHeader_markerNumberValid", SWIG_From_int((int)(gpstk::RinexMetHeader::markerNumberValid))); 
    }
    {
        PyDict_SetItemString(d,"RinexMetHeader_obsTypeValid", SWIG_From_int((int)(gpstk::RinexMetHeader::obsTypeValid))); 
    }
    {
        PyDict_SetItemString(d,"RinexMetHeader_sensorTypeValid", SWIG_From_int((int)(gpstk::RinexMetHeader::sensorTypeValid))); 
    }
    {
        PyDict_SetItemString(d,"RinexMetHeader_sensorPosValid", SWIG_From_int((int)(gpstk::RinexMetHeader::sensorPosValid))); 
    }
    {
        PyDict_SetItemString(d,"RinexMetHeader_endValid", SWIG_From_int((int)(gpstk::RinexMetHeader::endValid))); 
    }
    {
        PyDict_SetItemString(d,"RinexMetHeader_allValid20", SWIG_From_int((int)(gpstk::RinexMetHeader::allValid20))); 
    }
    {
        PyDict_SetItemString(d,"RinexMetHeader_allValid21", SWIG_From_int((int)(gpstk::RinexMetHeader::allValid21))); 
    }
    SWIG_addvarlink(SWIG_globals,(char*)"RinexMetHeader_maxObsPerLine",_wrap_RinexMetHeader_maxObsPerLine_get, _wrap_RinexMetHeader_maxObsPerLine_set);
    SWIG_addvarlink(SWIG_globals,(char*)"RinexMetHeader_versionString",_wrap_RinexMetHeader_versionString_get, _wrap_RinexMetHeader_versionString_set);
    SWIG_addvarlink(SWIG_globals,(char*)"RinexMetHeader_runByString",_wrap_RinexMetHeader_runByString_get, _wrap_RinexMetHeader_runByString_set);
    SWIG_addvarlink(SWIG_globals,(char*)"RinexMetHeader_commentString",_wrap_RinexMetHeader_commentString_get, _wrap_RinexMetHeader_commentString_set);
    SWIG_addvarlink(SWIG_globals,(char*)"RinexMetHeader_markerNameString",_wrap_RinexMetHeader_markerNameString_get, _wrap_RinexMetHeader_markerNameString_set);
    SWIG_addvarlink(SWIG_globals,(char*)"RinexMetHeader_markerNumberString",_wrap_RinexMetHeader_markerNumberString_get, _wrap_RinexMetHeader_markerNumberString_set);
    SWIG_addvarlink(SWIG_globals,(char*)"RinexMetHeader_obsTypeString",_wrap_RinexMetHeader_obsTypeString_get, _wrap_RinexMetHeader_obsTypeString_set);
    SWIG_addvarlink(SWIG_globals,(char*)"RinexMetHeader_sensorTypeString",_wrap_RinexMetHeader_sensorTypeString_get, _wrap_RinexMetHeader_sensorTypeString_set);
    SWIG_addvarlink(SWIG_globals,(char*)"RinexMetHeader_sensorPosString",_wrap_RinexMetHeader_sensorPosString_get, _wrap_RinexMetHeader_sensorPosString_set);
    SWIG_addvarlink(SWIG_globals,(char*)"RinexMetHeader_endOfHeader",_wrap_RinexMetHeader_endOfHeader_get, _wrap_RinexMetHeader_endOfHeader_set);
    {
        PyDict_SetItemString(d,"Position_Unknown", SWIG_From_int((int)(gpstk::Position::Unknown))); 
    }
    {
        PyDict_SetItemString(d,"Position_Geodetic", SWIG_From_int((int)(gpstk::Position::Geodetic))); 
    }
    {
        PyDict_SetItemString(d,"Position_Geocentric", SWIG_From_int((int)(gpstk::Position::Geocentric))); 
    }
    {
        PyDict_SetItemString(d,"Position_Cartesian", SWIG_From_int((int)(gpstk::Position::Cartesian))); 
    }
    {
        PyDict_SetItemString(d,"Position_Spherical", SWIG_From_int((int)(gpstk::Position::Spherical))); 
    }
    SWIG_addvarlink(SWIG_globals,(char*)"Position_ONE_MM_TOLERANCE",_wrap_Position_ONE_MM_TOLERANCE_get, _wrap_Position_ONE_MM_TOLERANCE_set);
    SWIG_addvarlink(SWIG_globals,(char*)"Position_ONE_CM_TOLERANCE",_wrap_Position_ONE_CM_TOLERANCE_get, _wrap_Position_ONE_CM_TOLERANCE_set);
    SWIG_addvarlink(SWIG_globals,(char*)"Position_ONE_UM_TOLERANCE",_wrap_Position_ONE_UM_TOLERANCE_get, _wrap_Position_ONE_UM_TOLERANCE_set);
    SWIG_addvarlink(SWIG_globals,(char*)"Position_POSITION_TOLERANCE",_wrap_Position_POSITION_TOLERANCE_get, _wrap_Position_POSITION_TOLERANCE_set);
    SWIG_addvarlink(SWIG_globals,(char*)"GPSZcount_ZCOUNT_MINUTE",_wrap_GPSZcount_ZCOUNT_MINUTE_get, _wrap_GPSZcount_ZCOUNT_MINUTE_set);
    SWIG_addvarlink(SWIG_globals,(char*)"GPSZcount_ZCOUNT_HOUR",_wrap_GPSZcount_ZCOUNT_HOUR_get, _wrap_GPSZcount_ZCOUNT_HOUR_set);
    SWIG_addvarlink(SWIG_globals,(char*)"GPSZcount_ZCOUNT_DAY",_wrap_GPSZcount_ZCOUNT_DAY_get, _wrap_GPSZcount_ZCOUNT_DAY_set);
    SWIG_addvarlink(SWIG_globals,(char*)"GPSZcount_ZCOUNT_WEEK",_wrap_GPSZcount_ZCOUNT_WEEK_get, _wrap_GPSZcount_ZCOUNT_WEEK_set);
    {
        PyDict_SetItemString(d,"DayTime_Unknown", SWIG_From_int((int)(gpstk::DayTime::Unknown))); 
    }
    {
        PyDict_SetItemString(d,"DayTime_UTC", SWIG_From_int((int)(gpstk::DayTime::UTC))); 
    }
    {
        PyDict_SetItemString(d,"DayTime_LocalSystem", SWIG_From_int((int)(gpstk::DayTime::LocalSystem))); 
    }
    {
        PyDict_SetItemString(d,"DayTime_GPS_Tx", SWIG_From_int((int)(gpstk::DayTime::GPS_Tx))); 
    }
    {
        PyDict_SetItemString(d,"DayTime_GPS_Rx", SWIG_From_int((int)(gpstk::DayTime::GPS_Rx))); 
    }
    {
        PyDict_SetItemString(d,"DayTime_GPS_SV", SWIG_From_int((int)(gpstk::DayTime::GPS_SV))); 
    }
    {
        PyDict_SetItemString(d,"DayTime_GPS_Receiver", SWIG_From_int((int)(gpstk::DayTime::GPS_Receiver))); 
    }
    SWIG_addvarlink(SWIG_globals,(char*)"DayTime_FACTOR",_wrap_DayTime_FACTOR_get, _wrap_DayTime_FACTOR_set);
    SWIG_addvarlink(SWIG_globals,(char*)"DayTime_JD_TO_MJD",_wrap_DayTime_JD_TO_MJD_get, _wrap_DayTime_JD_TO_MJD_set);
    SWIG_addvarlink(SWIG_globals,(char*)"DayTime_MJD_JDAY",_wrap_DayTime_MJD_JDAY_get, _wrap_DayTime_MJD_JDAY_set);
    SWIG_addvarlink(SWIG_globals,(char*)"DayTime_GPS_EPOCH_JDAY",_wrap_DayTime_GPS_EPOCH_JDAY_get, _wrap_DayTime_GPS_EPOCH_JDAY_set);
    SWIG_addvarlink(SWIG_globals,(char*)"DayTime_GPS_EPOCH_MJD",_wrap_DayTime_GPS_EPOCH_MJD_get, _wrap_DayTime_GPS_EPOCH_MJD_set);
    SWIG_addvarlink(SWIG_globals,(char*)"DayTime_UNIX_MJD",_wrap_DayTime_UNIX_MJD_get, _wrap_DayTime_UNIX_MJD_set);
    SWIG_addvarlink(SWIG_globals,(char*)"DayTime_HALFWEEK",_wrap_DayTime_HALFWEEK_get, _wrap_DayTime_HALFWEEK_set);
    SWIG_addvarlink(SWIG_globals,(char*)"DayTime_FULLWEEK",_wrap_DayTime_FULLWEEK_get, _wrap_DayTime_FULLWEEK_set);
    SWIG_addvarlink(SWIG_globals,(char*)"DayTime_SEC_DAY",_wrap_DayTime_SEC_DAY_get, _wrap_DayTime_SEC_DAY_set);
    SWIG_addvarlink(SWIG_globals,(char*)"DayTime_MS_PER_DAY",_wrap_DayTime_MS_PER_DAY_get, _wrap_DayTime_MS_PER_DAY_set);
    SWIG_addvarlink(SWIG_globals,(char*)"DayTime_ONE_NSEC_TOLERANCE",_wrap_DayTime_ONE_NSEC_TOLERANCE_get, _wrap_DayTime_ONE_NSEC_TOLERANCE_set);
    SWIG_addvarlink(SWIG_globals,(char*)"DayTime_ONE_USEC_TOLERANCE",_wrap_DayTime_ONE_USEC_TOLERANCE_get, _wrap_DayTime_ONE_USEC_TOLERANCE_set);
    SWIG_addvarlink(SWIG_globals,(char*)"DayTime_ONE_MSEC_TOLERANCE",_wrap_DayTime_ONE_MSEC_TOLERANCE_get, _wrap_DayTime_ONE_MSEC_TOLERANCE_set);
    SWIG_addvarlink(SWIG_globals,(char*)"DayTime_ONE_SEC_TOLERANCE",_wrap_DayTime_ONE_SEC_TOLERANCE_get, _wrap_DayTime_ONE_SEC_TOLERANCE_set);
    SWIG_addvarlink(SWIG_globals,(char*)"DayTime_ONE_MIN_TOLERANCE",_wrap_DayTime_ONE_MIN_TOLERANCE_get, _wrap_DayTime_ONE_MIN_TOLERANCE_set);
    SWIG_addvarlink(SWIG_globals,(char*)"DayTime_ONE_HOUR_TOLERANCE",_wrap_DayTime_ONE_HOUR_TOLERANCE_get, _wrap_DayTime_ONE_HOUR_TOLERANCE_set);
    SWIG_addvarlink(SWIG_globals,(char*)"DayTime_DAYTIME_TOLERANCE",_wrap_DayTime_DAYTIME_TOLERANCE_get, _wrap_DayTime_DAYTIME_TOLERANCE_set);
    SWIG_addvarlink(SWIG_globals,(char*)"DayTime_BEGIN_LIMIT_JDAY",_wrap_DayTime_BEGIN_LIMIT_JDAY_get, _wrap_DayTime_BEGIN_LIMIT_JDAY_set);
    SWIG_addvarlink(SWIG_globals,(char*)"DayTime_END_LIMIT_JDAY",_wrap_DayTime_END_LIMIT_JDAY_get, _wrap_DayTime_END_LIMIT_JDAY_set);
    SWIG_addvarlink(SWIG_globals,(char*)"DayTime_BEGINNING_OF_TIME",_wrap_DayTime_BEGINNING_OF_TIME_get, _wrap_DayTime_BEGINNING_OF_TIME_set);
    SWIG_addvarlink(SWIG_globals,(char*)"DayTime_END_OF_TIME",_wrap_DayTime_END_OF_TIME_get, _wrap_DayTime_END_OF_TIME_set);
    SWIG_addvarlink(SWIG_globals,(char*)"DayTime_DAYTIME_TEST_VALID",_wrap_DayTime_DAYTIME_TEST_VALID_get, _wrap_DayTime_DAYTIME_TEST_VALID_set);
}

